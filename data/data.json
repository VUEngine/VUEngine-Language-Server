{"classes":{"Actor":{"__contributor":"core","name":"Actor","base":"AnimatedEntity","description":"Class `Actor`\n\nInherits from `AnimatedEntity`\n\nImplements an animated entity that can have complex behavior and physical simulations.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":67,"column":1},"body":{"uri":"source/stage/entities/Actor.h","start":68,"end":193}},"methods":[{"name":"constructor","qualifiedname":"Actor::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Actor.h","line":83,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":42,"end":57}},"prot":"public","static":false,"definition":"void Actor::constructor","returnType":"void","argsstring":"(Actor this, const ActorSpec *actorSpec, int16 internalId, const char *const name)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `actorSpec`: Specification that determines how to configure the actor\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@param_ `name`: Name to assign to the new instance\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const ActorSpec *actorSpec","description":"Specification that determines how to configure the actor"},{"name":"int16 internalId","description":"ID to keep track internally of the new instance"},{"name":"const char *const name","description":"Name to assign to the new instance"}]},{"name":"handleMessage","qualifiedname":"Actor::handleMessage","description":"Process a `Telegram`.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":88,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":80,"end":114}},"prot":"public","static":false,"definition":"bool Actor::handleMessage","returnType":"override ","argsstring":"(Actor this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"Telegram telegram","description":"`Telegram` to process"}]},{"name":"getVelocity","qualifiedname":"Actor::getVelocity","description":"Retrieve the object's velocity vector.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":92,"column":25},"body":{"uri":"source/stage/entities/Actor.c","start":116,"end":119}},"prot":"public","static":false,"definition":"const Vector3D * Actor::getVelocity","returnType":["override const "," *"],"argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"getSpeed","qualifiedname":"Actor::getSpeed","description":"Retrieve the object's current speed (velocity vector's magnitude).","location":{"header":{"uri":"source/stage/entities/Actor.h","line":96,"column":18},"body":{"uri":"source/stage/entities/Actor.c","start":121,"end":124}},"prot":"public","static":false,"definition":"fixed_t Actor::getSpeed","returnType":"override ","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` `Object`'s current speed (velocity vector's magnitude)\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"getBounciness","qualifiedname":"Actor::getBounciness","description":"Retrieve the object's bounciness factor.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":100,"column":18},"body":{"uri":"source/stage/entities/Actor.c","start":126,"end":131}},"prot":"public","static":false,"definition":"fixed_t Actor::getBounciness","returnType":"override ","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"setPosition","qualifiedname":"Actor::setPosition","description":"Set the container's position.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":104,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":133,"end":141}},"prot":"public","static":false,"definition":"void Actor::setPosition","returnType":"override void","argsstring":"(Actor this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const Vector3D *position","description":"3D vector defining the object's new position"}]},{"name":"setDirection","qualifiedname":"Actor::setDirection","description":"Set the direction towards which the object must move.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":108,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":143,"end":193}},"prot":"public","static":false,"definition":"void Actor::setDirection","returnType":"override void","argsstring":"(Actor this, const Vector3D *direction)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const Vector3D *direction","description":"Pointer to a direction vector"}]},{"name":"getDirection","qualifiedname":"Actor::getDirection","description":"Retrieve the direction towards which the object is moving.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":112,"column":25},"body":{"uri":"source/stage/entities/Actor.c","start":195,"end":198}},"prot":"public","static":false,"definition":"const Vector3D * Actor::getDirection","returnType":["override const "," *"],"argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"isSubjectToGravity","qualifiedname":"Actor::isSubjectToGravity","description":"Check if the object is subject to provided gravity vector.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":116,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":200,"end":203}},"prot":"public","static":false,"definition":"bool Actor::isSubjectToGravity","returnType":"override ","argsstring":"(Actor this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"Vector3D gravity"}]},{"name":"collisionStarts","qualifiedname":"Actor::collisionStarts","description":"Process a newly detected collision by one of the component colliders.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":121,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":205,"end":248}},"prot":"public","static":false,"definition":"bool Actor::collisionStarts","returnType":"override ","argsstring":"(Actor this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n_@return_ `bool` True if the collider must keep track of the collision to detect if it persists and when it ends; false otherwise\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"collisionEnds","qualifiedname":"Actor::collisionEnds","description":"Process when a previously detected collision by one of the component colliders stops.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":125,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":250,"end":264}},"prot":"public","static":false,"definition":"void Actor::collisionEnds","returnType":"override void","argsstring":"(Actor this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"setLocalPosition","qualifiedname":"Actor::setLocalPosition","description":"Set the local position.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":129,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":266,"end":286}},"prot":"public","static":false,"definition":"void Actor::setLocalPosition","returnType":"override void","argsstring":"(Actor this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `position`: New local position\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const Vector3D *position","description":"New local position"}]},{"name":"changeEnvironment","qualifiedname":"Actor::changeEnvironment","description":"Update the local transformation in function of the provided environment transform.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":133,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":288,"end":296}},"prot":"public","static":false,"definition":"void Actor::changeEnvironment","returnType":"override void","argsstring":"(Actor this, Transformation *environmentTransform)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `environmentTransform`: New reference environment for the local transformation\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"Transformation *environmentTransform","description":"New reference environment for the local transformation"}]},{"name":"removeComponents","qualifiedname":"Actor::removeComponents","description":"Destroy the components that attach to this container.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":136,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":298,"end":309}},"prot":"public","static":false,"definition":"void Actor::removeComponents","returnType":"override void","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"update","qualifiedname":"Actor::update","description":"Update this instance's logic.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":139,"column":15},"body":{"uri":"source/stage/entities/Actor.c","start":311,"end":324}},"prot":"public","static":false,"definition":"void Actor::update","returnType":"override void","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"createStateMachine","qualifiedname":"Actor::createStateMachine","description":"Create the state machine and inintialize it with the provided state.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":143,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":326,"end":336}},"prot":"public","static":false,"definition":"void Actor::createStateMachine","returnType":"void","argsstring":"(Actor this, State state)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `state`: `State` that the state machine must enter\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"State state","description":"`State` that the state machine must enter"}]},{"name":"getBody","qualifiedname":"Actor::getBody","description":"Retrieve the actor's physical body.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":147,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":338,"end":341}},"prot":"public","static":false,"definition":"Body Actor::getBody","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `Body` `Actor`'s physical body\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"isMoving","qualifiedname":"Actor::isMoving","description":"Check if the actor is moving.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":151,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":343,"end":346}},"prot":"public","static":false,"definition":"bool Actor::isMoving","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `bool` True if the actor's body is moving; false otherwise\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"stopAllMovement","qualifiedname":"Actor::stopAllMovement","description":"Stop all actor's movement.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":154,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":348,"end":351}},"prot":"public","static":false,"definition":"void Actor::stopAllMovement","returnType":"void","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"stopMovement","qualifiedname":"Actor::stopMovement","description":"Stop the actor's movement in the specified axis.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":158,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":353,"end":359}},"prot":"public","static":false,"definition":"void Actor::stopMovement","returnType":"void","argsstring":"(Actor this, uint16 axis)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `axis`: Axis on which to stop the movement of the actor's body\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"uint16 axis","description":"Axis on which to stop the movement of the actor's body"}]},{"name":"getMaximumSpeed","qualifiedname":"Actor::getMaximumSpeed","description":"Retrieve the actor's maximum speed.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":162,"column":9},"body":{"uri":"source/stage/entities/Actor.c","start":361,"end":364}},"prot":"public","static":false,"definition":"fixed_t Actor::getMaximumSpeed","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` Maximum speed at which the actor's body is allowed to move\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"setVelocity","qualifiedname":"Actor::setVelocity","description":"Set the actor's velocity vector.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":170,"column":6},"body":{"uri":"source/stage/entities/Actor.c","start":366,"end":386}},"prot":"public","static":false,"definition":"bool Actor::setVelocity","argsstring":"(Actor this, const Vector3D *velocity, bool checkIfCanMove)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `velocity`\n\n_@param_ `checkIfCanMove`: If true, the actor checks that none of its colliders will enter a collision if it were to move in the direction of the provided velocity\n\n_@return_ `bool` True if the actor started to move in the direction specified by the provided velocity vector\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const Vector3D *velocity"},{"name":"bool checkIfCanMove","description":"If true, the actor checks that none of its colliders will enter a collision if it were to move in the direction of the provided velocity"}]},{"name":"applyForce","qualifiedname":"Actor::applyForce","description":"Apply a force to the actor's body.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":176,"column":14},"body":{"uri":"source/stage/entities/Actor.c","start":388,"end":408}},"prot":"public","static":false,"definition":"bool Actor::applyForce","argsstring":"(Actor this, const Vector3D *force, bool checkIfCanMove)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `checkIfCanMove`: If true, the actor checks that none of its colliders will\n\n_@return_ `bool` True if the force was succesfully applied to the actor's body\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"const Vector3D *force","description":"Force to be applied"},{"name":"bool checkIfCanMove","description":"If true, the actor checks that none of its colliders will"}]},{"name":"canMoveTowards","qualifiedname":"Actor::canMoveTowards","description":"Check if the actor will enter a collision if it were to move in the provided direction","location":{"header":{"uri":"source/stage/entities/Actor.h","line":180,"column":14},"body":{"uri":"source/stage/entities/Actor.c","start":410,"end":435}},"prot":"public","static":false,"definition":"bool Actor::canMoveTowards","argsstring":"(Actor this, Vector3D direction)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `direction`: Direction vector to check\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"Vector3D direction","description":"Direction vector to check"}]},{"name":"isBouncy","qualifiedname":"Actor::isBouncy","description":"Check if the actor bounces when it collides with another object.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":184,"column":14},"body":{"uri":"source/stage/entities/Actor.c","start":437,"end":440}},"prot":"public","static":false,"definition":"bool Actor::isBouncy","argsstring":"(Actor this)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@return_ `bool` True if the actor bounces when it collides with another object\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"}]},{"name":"isSensibleToCollidingObjectBouncinessOnCollision","qualifiedname":"Actor::isSensibleToCollidingObjectBouncinessOnCollision","description":"Check if when the actor bounces it has to take into account the colliding object's bounciness.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":188,"column":14},"body":{"uri":"source/stage/entities/Actor.c","start":442,"end":445}},"prot":"public","static":false,"definition":"bool Actor::isSensibleToCollidingObjectBouncinessOnCollision","argsstring":"(Actor this, SpatialObject collidingObject)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `collidingObject`\n\n_@return_ `bool` True if the actor has to take into account the colliding object's bounciness when bouncing\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"SpatialObject collidingObject"}]},{"name":"isSensibleToCollidingObjectFrictionOnCollision","qualifiedname":"Actor::isSensibleToCollidingObjectFrictionOnCollision","description":"Check if when the actor bounces it has to take into account the colliding object's friction coefficient.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":192,"column":14},"body":{"uri":"source/stage/entities/Actor.c","start":447,"end":450}},"prot":"public","static":false,"definition":"bool Actor::isSensibleToCollidingObjectFrictionOnCollision","argsstring":"(Actor this, SpatialObject collidingObject)","paramDocs":"\n\n_@param_ `this`: Actor instance\n\n_@param_ `collidingObject`\n\n_@return_ `bool` True if the actor has to take into account the colliding object's friction coefficient when bouncing\n\n","parameters":[{"name":"Actor this","description":"Actor Instance"},{"name":"SpatialObject collidingObject"}]}],"variables":[{"name":"stateMachine","qualifiedname":"Actor::stateMachine","description":"`State` machine to handle complex logic","location":{"header":{"uri":"source/stage/entities/Actor.h","line":72,"column":14},"body":{"uri":"source/stage/entities/Actor.h","start":72,"end":72}},"prot":"protected","static":false},{"name":"body","qualifiedname":"Actor::body","description":"`Body` for physics simulations.","location":{"header":{"uri":"source/stage/entities/Actor.h","line":75,"column":6},"body":{"uri":"source/stage/entities/Actor.h","start":75,"end":75}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"ActorROMSpec","qualifiedname":"Actor::ActorROMSpec","description":"An `Actor` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Actor.h","line":53,"column":25},"body":{"uri":"source/stage/entities/Actor.h","start":53,"end":53}},"prot":"public","static":false}]},"Affine":{"__contributor":"core","name":"Affine","base":"Object","description":"Class `Affine`\n\nInherits from `Object`\n\nImplements various affine transformations.","location":{"header":{"uri":"source/base/libgccvb/Affine.h","line":32,"column":8},"body":{"uri":"source/base/libgccvb/Affine.h","start":33,"end":60}},"methods":[{"name":"transform","qualifiedname":"Affine::transform","description":"Translate, scale and rotate the affine matrix specified by param.","location":{"header":{"uri":"source/base/libgccvb/Affine.h","line":47,"column":14},"body":{"uri":"source/base/libgccvb/Affine.c","start":34,"end":258}},"prot":"public","static":true,"definition":"static int16 Affine::transform","argsstring":"(uint32 param, int16 paramTableRow, fixed_t targetHalfWidth, fixed_t targetHalfHeight, fix13_3 mx, fix13_3 my, fixed_t halfWidth, fixed_t halfHeight, const PixelScale *scale, const Rotation *rotation)","paramDocs":"\n\n_@param_ `param`: Displacement within param tables space\n\n_@param_ `paramTableRow`: Displacement within the specified param table\n\n_@param_ `targetHalfWidth`: Image's target half width\n\n_@param_ `targetHalfHeight`: Image's target half height\n\n_@param_ `mx`: Image's x coordinate\n\n_@param_ `my`: Image's y coordinate\n\n_@param_ `halfWidth`: Image's half width\n\n_@param_ `halfHeight`: Image's half height\n\n_@param_ `scale`: Target scale\n\n_@param_ `rotation`: Target rotation\n\n","parameters":[{"name":"int16 paramTableRow","description":"Displacement within param tables space"},{"name":"fixed_t targetHalfWidth","description":"Displacement within the specified param table"},{"name":"fixed_t targetHalfHeight","description":"Image's target half width"},{"name":"fix13_3 mx","description":"Image's target half height"},{"name":"fix13_3 my","description":"Image's x coordinate"},{"name":"fixed_t halfWidth","description":"Image's y coordinate"},{"name":"fixed_t halfHeight","description":"Image's half width"},{"name":"const PixelScale *scale","description":"Image's half height"},{"name":"const Rotation *rotation","description":"Target scale"},{"description":"Target rotation"}]}],"variables":[],"enums":[],"typedefs":[]},"AnimatedEntity":{"__contributor":"core","name":"AnimatedEntity","base":"Entity","description":"Class `AnimatedEntity`\n\nInherits from `Entity`\n\nImplements an entity that proxies animation related methods to its sprites.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":57,"column":1},"body":{"uri":"source/stage/entities/AnimatedEntity.h","start":58,"end":127}},"methods":[{"name":"constructor","qualifiedname":"AnimatedEntity::constructor","description":"","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":70,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":38,"end":47}},"prot":"public","static":false,"definition":"void AnimatedEntity::constructor","returnType":"void","argsstring":"(AnimatedEntity this, AnimatedEntitySpec *animatedEntitySpec, int16 internalId, const char *const name)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `animatedEntitySpec`: Specification that determines how to configure the actor\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@param_ `name`: Name to assign to the new instance\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"AnimatedEntitySpec *animatedEntitySpec","description":"Specification that determines how to configure the actor"},{"name":"int16 internalId","description":"ID to keep track internally of the new instance"},{"name":"const char *const name","description":"Name to assign to the new instance"}]},{"name":"ready","qualifiedname":"AnimatedEntity::ready","description":"Make the animated entity ready to start operating once it has been completely intialized.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":74,"column":15},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":56,"end":63}},"prot":"public","static":false,"definition":"void AnimatedEntity::ready","returnType":"override void","argsstring":"(AnimatedEntity this, bool recursive)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `recursive`: If true, the ready call is propagated to its children, grand children, etc.\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"bool recursive","description":"If true, the ready call is propagated to its children, grand children, etc."}]},{"name":"resume","qualifiedname":"AnimatedEntity::resume","description":"Prepare to resume this instance's logic.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":77,"column":15},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":65,"end":70}},"prot":"public","static":false,"definition":"void AnimatedEntity::resume","returnType":"override void","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"handlePropagatedString","qualifiedname":"AnimatedEntity::handlePropagatedString","description":"Default string handler for propagateString","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":82,"column":15},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":72,"end":85}},"prot":"public","static":false,"definition":"bool AnimatedEntity::handlePropagatedString","returnType":"override ","argsstring":"(AnimatedEntity this, const char *string)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `string`: Propagated string\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"const char *string","description":"Propagated string"}]},{"name":"playAnimation","qualifiedname":"AnimatedEntity::playAnimation","description":"Play the animation with the provided name.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":87,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":87,"end":114}},"prot":"public","static":false,"definition":"bool AnimatedEntity::playAnimation","argsstring":"(AnimatedEntity this, const char *animationName)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `animationName`: Name of the animation to play\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"const char *animationName","description":"Name of the animation to play"}]},{"name":"pauseAnimation","qualifiedname":"AnimatedEntity::pauseAnimation","description":"Pause or unpause the currently playing animation if any.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":91,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":116,"end":130}},"prot":"public","static":false,"definition":"void AnimatedEntity::pauseAnimation","returnType":"void","argsstring":"(AnimatedEntity this, bool pause)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"bool pause","description":"Flag that signals if the animation must be paused or unpaused"}]},{"name":"stopAnimation","qualifiedname":"AnimatedEntity::stopAnimation","description":"Stop any playing animation if any.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":94,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":132,"end":146}},"prot":"public","static":false,"definition":"void AnimatedEntity::stopAnimation","returnType":"void","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"isPlaying","qualifiedname":"AnimatedEntity::isPlaying","description":"Check if an animation is playing.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":98,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":148,"end":153}},"prot":"public","static":false,"definition":"bool AnimatedEntity::isPlaying","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"isPlayingAnimation","qualifiedname":"AnimatedEntity::isPlayingAnimation","description":"Check if the animation whose name is provided is playing.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":103,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":155,"end":165}},"prot":"public","static":false,"definition":"bool AnimatedEntity::isPlayingAnimation","argsstring":"(AnimatedEntity this, char *animationName)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"char *animationName","description":"Name of the animation to check"}]},{"name":"getPlayingAnimationName","qualifiedname":"AnimatedEntity::getPlayingAnimationName","description":"Retrieve the animation function's name currently playing if any","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":107,"column":12},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":167,"end":177}},"prot":"public","static":false,"definition":"const char * AnimatedEntity::getPlayingAnimationName","returnType":"const char *","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"setActualFrame","qualifiedname":"AnimatedEntity::setActualFrame","description":"Skip the currently playing animation to the provided frame.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":112,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":179,"end":190}},"prot":"public","static":false,"definition":"void AnimatedEntity::setActualFrame","returnType":"void","argsstring":"(AnimatedEntity this, int16 frame)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `frame`\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"},{"name":"int16 frame"}]},{"name":"nextFrame","qualifiedname":"AnimatedEntity::nextFrame","description":"Skip the currently playing animation to the next frame.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":115,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":192,"end":204}},"prot":"public","static":false,"definition":"void AnimatedEntity::nextFrame","returnType":"void","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"previousFrame","qualifiedname":"AnimatedEntity::previousFrame","description":"Rewind the currently playing animation to the previous frame.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":118,"column":6},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":206,"end":218}},"prot":"public","static":false,"definition":"void AnimatedEntity::previousFrame","returnType":"void","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"getActualFrame","qualifiedname":"AnimatedEntity::getActualFrame","description":"Retrieve the actual frame of the playing animation if any.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":122,"column":7},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":220,"end":233}},"prot":"public","static":false,"definition":"int16 AnimatedEntity::getActualFrame","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]},{"name":"getNumberOfFrames","qualifiedname":"AnimatedEntity::getNumberOfFrames","description":"Retrieve the number of frames in the currently playing animation if any.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":126,"column":7},"body":{"uri":"source/stage/entities/AnimatedEntity.c","start":235,"end":249}},"prot":"public","static":false,"definition":"int32 AnimatedEntity::getNumberOfFrames","argsstring":"(AnimatedEntity this)","paramDocs":"\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `int32` The numer of frames if an animation is playing; o otherwise\n\n","parameters":[{"name":"AnimatedEntity this","description":"AnimatedEntity Instance"}]}],"variables":[{"name":"animationFunctions","qualifiedname":"AnimatedEntity::animationFunctions","description":"Pointer to the animations available to this instance.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":60,"column":25},"body":{"uri":"source/stage/entities/AnimatedEntity.h","start":60,"end":60}},"prot":"private","static":false},{"name":"playingAnimationName","qualifiedname":"AnimatedEntity::playingAnimationName","description":"Name of the currently playing animation.","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":63,"column":12},"body":{"uri":"source/stage/entities/AnimatedEntity.h","start":63,"end":63}},"prot":"private","static":false}],"enums":[],"typedefs":[{"name":"AnimatedEntityROMSpec","qualifiedname":"AnimatedEntity::AnimatedEntityROMSpec","description":"A `AnimatedEntity` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/AnimatedEntity.h","line":43,"column":34},"body":{"uri":"source/stage/entities/AnimatedEntity.h","start":43,"end":43}},"prot":"public","static":false}]},"AnimationController":{"__contributor":"core","name":"AnimationController","base":"ListenerObject","description":"Class `AnimationController`\n\nInherits from `ListenerObject`\n\nControls animations.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":40,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":41,"end":159}},"methods":[{"name":"constructor","qualifiedname":"AnimationController::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":68,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":37,"end":55}},"prot":"public","static":false,"definition":"void AnimationController::constructor","returnType":"void","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"play","qualifiedname":"AnimationController::play","description":"Play the animation with the provided name from the provided array of animation functions.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":74,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":70,"end":137}},"prot":"public","static":false,"definition":"bool AnimationController::play","argsstring":"(AnimationController this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunctions`\n\n_@param_ `animationName`: Name of the animation to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"const AnimationFunction *animationFunctions[]"},{"name":"const char *animationName","description":"Name of the animation to play"},{"name":"ListenerObject scope","description":"`Object` that will be notified of playback events"}]},{"name":"playAnimationFunction","qualifiedname":"AnimationController::playAnimationFunction","description":"Play the animation defined by the the provided animation function.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":79,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":139,"end":166}},"prot":"public","static":false,"definition":"void AnimationController::playAnimationFunction","returnType":"void","argsstring":"(AnimationController this, const AnimationFunction *animationFunction, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunction`: Animation function to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"const AnimationFunction *animationFunction","description":"Animation function to play"},{"name":"ListenerObject scope","description":"`Object` that will be notified of playback events"}]},{"name":"replay","qualifiedname":"AnimationController::replay","description":"Replay the last playing animation, if any, from the provided array of animation functions.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":84,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":168,"end":193}},"prot":"public","static":false,"definition":"bool AnimationController::replay","argsstring":"(AnimationController this, const AnimationFunction *animationFunctions[])","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@return_ `bool` True if the animation started playing again; false otherwise\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"const AnimationFunction *animationFunctions[]","description":"Array of animation functions to look for the animation function to replay"}]},{"name":"pause","qualifiedname":"AnimationController::pause","description":"Pause or unpause the currently playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":88,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":195,"end":203}},"prot":"public","static":false,"definition":"void AnimationController::pause","returnType":"void","argsstring":"(AnimationController this, bool pause)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"bool pause","description":"Flag that signals if the animation must be paused or unpaused"}]},{"name":"stop","qualifiedname":"AnimationController::stop","description":"Stop any playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":91,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":205,"end":210}},"prot":"public","static":false,"definition":"void AnimationController::stop","returnType":"void","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"updateAnimation","qualifiedname":"AnimationController::updateAnimation","description":"Update the current playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":94,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":212,"end":281}},"prot":"public","static":false,"definition":"bool AnimationController::updateAnimation","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"isPlaying","qualifiedname":"AnimationController::isPlaying","description":"Check if an animation is playing.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":98,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":283,"end":286}},"prot":"public","static":false,"definition":"bool AnimationController::isPlaying","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"isPlayingFunction","qualifiedname":"AnimationController::isPlayingFunction","description":"Check if the animation whose name is provided is playing.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":103,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":288,"end":297}},"prot":"public","static":false,"definition":"bool AnimationController::isPlayingFunction","argsstring":"(AnimationController this, const char *animationName)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"const char *animationName","description":"Name of the animation to check"}]},{"name":"nextFrame","qualifiedname":"AnimationController::nextFrame","description":"Skip the currently playing animation to the next frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":106,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":299,"end":319}},"prot":"public","static":false,"definition":"void AnimationController::nextFrame","returnType":"void","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"previousFrame","qualifiedname":"AnimationController::previousFrame","description":"Rewind the currently playing animation to the previous frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":109,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":321,"end":341}},"prot":"public","static":false,"definition":"void AnimationController::previousFrame","returnType":"void","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"setActualFrame","qualifiedname":"AnimationController::setActualFrame","description":"Skip the currently playing animation to the provided frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":114,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":343,"end":360}},"prot":"public","static":false,"definition":"bool AnimationController::setActualFrame","argsstring":"(AnimationController this, int16 actualFrame)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `actualFrame`: The frame of the playing animation to skip to\n\n_@return_ `bool` True if the actual frame was changed; false otherwise\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"int16 actualFrame","description":"The frame of the playing animation to skip to"}]},{"name":"getActualFrame","qualifiedname":"AnimationController::getActualFrame","description":"Retrieve the actual frame of the playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":118,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":362,"end":365}},"prot":"public","static":false,"definition":"int16 AnimationController::getActualFrame","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"getActualFrameIndex","qualifiedname":"AnimationController::getActualFrameIndex","description":"Retrieve the actual frame index of the playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":122,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":367,"end":370}},"prot":"public","static":false,"definition":"int16 AnimationController::getActualFrameIndex","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int16` Actual frame index of the playing animation if any\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"setFrameDuration","qualifiedname":"AnimationController::setFrameDuration","description":"Set the duration in game cycles for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":126,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":372,"end":375}},"prot":"public","static":false,"definition":"void AnimationController::setFrameDuration","returnType":"void","argsstring":"(AnimationController this, uint8 frameDuration)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `frameDuration`: Duration in game cycles for each frame of animation\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"uint8 frameDuration","description":"Duration in game cycles for each frame of animation"}]},{"name":"getFrameDuration","qualifiedname":"AnimationController::getFrameDuration","description":"Retrieve the duration in game cycles for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":130,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":377,"end":380}},"prot":"public","static":false,"definition":"uint8 AnimationController::getFrameDuration","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"setFrameDurationDecrement","qualifiedname":"AnimationController::setFrameDurationDecrement","description":"Set the decrement to frameDuration in each game cycle for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":134,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":382,"end":385}},"prot":"public","static":false,"definition":"void AnimationController::setFrameDurationDecrement","returnType":"void","argsstring":"(AnimationController this, uint8 frameCycleDecrement)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `frameCycleDecrement`: Decrement to frameDuration in each game cycle for each frame of animation\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"uint8 frameCycleDecrement","description":"Decrement to frameDuration in each game cycle for each frame of animation"}]},{"name":"getFrameDurationDecrement","qualifiedname":"AnimationController::getFrameDurationDecrement","description":"Retrieve the decrement to frameDuration in each game cycle for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":138,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":387,"end":390}},"prot":"public","static":false,"definition":"uint8 AnimationController::getFrameDurationDecrement","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `uint8` Decrement to frameDuration in each game cycle for each frame of animation\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"setAnimationCoordinator","qualifiedname":"AnimationController::setAnimationCoordinator","description":"Set the animation coordinator for this animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":142,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":392,"end":396}},"prot":"public","static":false,"definition":"void AnimationController::setAnimationCoordinator","returnType":"void","argsstring":"(AnimationController this, AnimationCoordinator animationCoordinator)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationCoordinator`: Animation coordinator for this animation controller\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"},{"name":"AnimationCoordinator animationCoordinator","description":"Animation coordinator for this animation controller"}]},{"name":"getAnimationCoordinator","qualifiedname":"AnimationController::getAnimationCoordinator","description":"Retrieve the animation coordinator for this animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":146,"column":22},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":398,"end":401}},"prot":"public","static":false,"definition":"AnimationCoordinator AnimationController::getAnimationCoordinator","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `AnimationCoordinator` Animation coordinator for this animation controller\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"getPlayingAnimationFunction","qualifiedname":"AnimationController::getPlayingAnimationFunction","description":"Retrieve the animation function currently playing if any","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":150,"column":25},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":403,"end":406}},"prot":"public","static":false,"definition":"const AnimationFunction * AnimationController::getPlayingAnimationFunction","returnType":["const "," *"],"argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `const` Animation function currently playing if any\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"getPlayingAnimationName","qualifiedname":"AnimationController::getPlayingAnimationName","description":"Retrieve the animation function's name currently playing if any","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":154,"column":12},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":408,"end":416}},"prot":"public","static":false,"definition":"const char * AnimationController::getPlayingAnimationName","returnType":"const char *","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]},{"name":"getNumberOfFrames","qualifiedname":"AnimationController::getNumberOfFrames","description":"Retrieve the number of frames in the currently playing if any","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":158,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.c","start":418,"end":426}},"prot":"public","static":false,"definition":"int32 AnimationController::getNumberOfFrames","argsstring":"(AnimationController this)","paramDocs":"\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int32` Number of frames in the currently playing if any\n\n","parameters":[{"name":"AnimationController this","description":"AnimationController Instance"}]}],"variables":[{"name":"animationCoordinator","qualifiedname":"AnimationController::animationCoordinator","description":"Animation coordinator that syncs the animations with other animation controllers","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":45,"column":22},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":45,"end":45}},"prot":"protected","static":false},{"name":"animationFunction","qualifiedname":"AnimationController::animationFunction","description":"Pointer to the current animation function being played.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":48,"column":25},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":48,"end":48}},"prot":"protected","static":false},{"name":"actualFrame","qualifiedname":"AnimationController::actualFrame","description":"The current frame of the playing animation function.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":51,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":51,"end":51}},"prot":"protected","static":false},{"name":"actualFrameIndex","qualifiedname":"AnimationController::actualFrameIndex","description":"The current frame index of the playing animation function.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":54,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":54,"end":54}},"prot":"protected","static":false},{"name":"frameDuration","qualifiedname":"AnimationController::frameDuration","description":"Number of game cycles that an animation frame persists.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":57,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":57,"end":57}},"prot":"protected","static":false},{"name":"frameDurationDecrement","qualifiedname":"AnimationController::frameDurationDecrement","description":"Decrement to frameDuration in each game cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":60,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"playing","qualifiedname":"AnimationController::playing","description":"Flag that signals if playing an animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","line":63,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationController.h","start":63,"end":63}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"AnimationCoordinator":{"__contributor":"core","name":"AnimationCoordinator","base":"ListenerObject","description":"Class `AnimationCoordinator`\n\nInherits from `ListenerObject`\n\nCoordinates animation controllers whose sprites share the same `CharSet`.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":41,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","start":42,"end":79}},"methods":[{"name":"constructor","qualifiedname":"AnimationCoordinator::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":59,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.c","start":37,"end":44}},"prot":"public","static":false,"definition":"void AnimationCoordinator::constructor","returnType":"void","argsstring":"(AnimationCoordinator this, const CharSetSpec *charSetSpec, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `charSetSpec`: Spec shared by the animation controllers to coordinate\n\n_@param_ `scope`: `Object` that might need to listen for playback related events\n\n","parameters":[{"name":"AnimationCoordinator this","description":"AnimationCoordinator Instance"},{"name":"const CharSetSpec *charSetSpec","description":"Spec shared by the animation controllers to coordinate"},{"name":"ListenerObject scope","description":"`Object` that might need to listen for playback related events"}]},{"name":"playAnimation","qualifiedname":"AnimationCoordinator::playAnimation","description":"Play an animation on the specified animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":66,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.c","start":58,"end":80}},"prot":"public","static":false,"definition":"bool AnimationCoordinator::playAnimation","argsstring":"(AnimationCoordinator this, AnimationController animationController, const AnimationFunction **animationFunctions, const char *animationName)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Animation controller on which to play the animation\n\n_@param_ `animationFunctions`: Array of animation functions in which to look for the animation to play\n\n_@param_ `animationName`: Name of the animation to play\n\n_@return_ `bool` True if the animation was found and started to play; false otherwise\n\n","parameters":[{"name":"AnimationCoordinator this","description":"AnimationCoordinator Instance"},{"name":"AnimationController animationController","description":"Animation controller on which to play the animation"},{"name":"const AnimationFunction **animationFunctions","description":"Array of animation functions in which to look for the animation to play"},{"name":"const char *animationName","description":"Name of the animation to play"}]},{"name":"addAnimationController","qualifiedname":"AnimationCoordinator::addAnimationController","description":"Add an animation controller to coordinate.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":70,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.c","start":82,"end":91}},"prot":"public","static":false,"definition":"void AnimationCoordinator::addAnimationController","returnType":"void","argsstring":"(AnimationCoordinator this, AnimationController animationController)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Animation controller to coordinate\n\n","parameters":[{"name":"AnimationCoordinator this","description":"AnimationCoordinator Instance"},{"name":"AnimationController animationController","description":"Animation controller to coordinate"}]},{"name":"removeAnimationController","qualifiedname":"AnimationCoordinator::removeAnimationController","description":"Remove a coordinated animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":74,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.c","start":93,"end":118}},"prot":"public","static":false,"definition":"void AnimationCoordinator::removeAnimationController","returnType":"void","argsstring":"(AnimationCoordinator this, AnimationController animationController)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Coordinated animation controller to remove\n\n","parameters":[{"name":"AnimationCoordinator this","description":"AnimationCoordinator Instance"},{"name":"AnimationController animationController","description":"Coordinated animation controller to remove"}]},{"name":"getCharSetSpec","qualifiedname":"AnimationCoordinator::getCharSetSpec","description":"Retrieve the spec shared by the animation controllers to coordinate.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":78,"column":19},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.c","start":120,"end":123}},"prot":"public","static":false,"definition":"const CharSetSpec * AnimationCoordinator::getCharSetSpec","returnType":["const "," *"],"argsstring":"(AnimationCoordinator this)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@return_ `const` Pointer to spec shared by the animation controllers to coordinate\n\n","parameters":[{"name":"AnimationCoordinator this","description":"AnimationCoordinator Instance"}]}],"variables":[{"name":"scope","qualifiedname":"AnimationCoordinator::scope","description":"`Object` that might need to listen for playback related events","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":46,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","start":46,"end":46}},"prot":"protected","static":false},{"name":"animationControllers","qualifiedname":"AnimationCoordinator::animationControllers","description":"List of animation controllers to sync.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":49,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","start":49,"end":49}},"prot":"protected","static":false},{"name":"charSetSpec","qualifiedname":"AnimationCoordinator::charSetSpec","description":"","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","line":52,"column":19},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinator.h","start":52,"end":52}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"AnimationCoordinatorFactory":{"__contributor":"core","name":"AnimationCoordinatorFactory","base":"Object","description":"Class `AnimationCoordinator`\n\nInherits from `ListenerObject`\n\nCreates instances of animation coordinators.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","line":42,"column":11},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","start":43,"end":64}},"methods":[{"name":"getInstance","qualifiedname":"AnimationCoordinatorFactory::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","line":53,"column":36}},"prot":"public","static":true,"definition":"static AnimationCoordinatorFactory AnimationCoordinatorFactory::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `AnimationCoordinatorFactory` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"AnimationCoordinatorFactory::reset","description":"Reset the animation coordinator factory's state.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","line":56,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.c","start":56,"end":59}},"prot":"public","static":false,"definition":"void AnimationCoordinatorFactory::reset","returnType":"void","argsstring":"(AnimationCoordinatorFactory this)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinatorFactory instance\n\n","parameters":[{"name":"AnimationCoordinatorFactory this","description":"AnimationCoordinatorFactory Instance"}]},{"name":"getCoordinator","qualifiedname":"AnimationCoordinatorFactory::getCoordinator","description":"Get an animation coordinator.","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","line":63,"column":22},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.c","start":61,"end":90}},"prot":"public","static":false,"definition":"AnimationCoordinator AnimationCoordinatorFactory::getCoordinator","argsstring":"(AnimationCoordinatorFactory this, AnimationController animationController, ListenerObject scope, const CharSetSpec *charSetSpec)","paramDocs":"\n\n_@param_ `this`: AnimationCoordinatorFactory instance\n\n_@param_ `animationController`: Animation controller to potentially coordinate\n\n_@param_ `scope`: `Object` that might need to listen for playback related events\n\n_@param_ `charSetSpec`\n\n_@return_ `AnimationCoordinator` `ClockManager` singleton\n\n","parameters":[{"name":"AnimationCoordinatorFactory this","description":"AnimationCoordinatorFactory Instance"},{"name":"AnimationController animationController","description":"Animation controller to potentially coordinate"},{"name":"ListenerObject scope","description":"`Object` that might need to listen for playback related events"},{"name":"const CharSetSpec *charSetSpec"}]}],"variables":[{"name":"animationCoordinators","qualifiedname":"AnimationCoordinatorFactory::animationCoordinators","description":"List of instances of animation coordinators","location":{"header":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","line":47,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Animation/AnimationCoordinatorFactory.h","start":47,"end":47}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"AnimationInspector":{"__contributor":"core","name":"AnimationInspector","base":"Tool","description":"Class `AnimationInspector`\n\nInherits from `Tool`\n\nImplements a tool that manipulates animations.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":50,"column":11},"body":{"uri":"source/tools/AnimationInspector.h","start":51,"end":97}},"methods":[{"name":"getInstance","qualifiedname":"AnimationInspector::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":83,"column":27}},"prot":"public","static":true,"definition":"static AnimationInspector AnimationInspector::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `AnimationInspector` singleton\n\n","parameters":[]},{"name":"update","qualifiedname":"AnimationInspector::update","description":"Update the tool's state.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":86,"column":15},"body":{"uri":"source/tools/AnimationInspector.c","start":75,"end":76}},"prot":"public","static":false,"definition":"void AnimationInspector::update","returnType":"override void","argsstring":"(AnimationInspector this)","paramDocs":"\n\n_@param_ `this`: AnimationInspector instance\n\n","parameters":[{"name":"AnimationInspector this","description":"AnimationInspector Instance"}]},{"name":"show","qualifiedname":"AnimationInspector::show","description":"Show the tool.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":89,"column":15},"body":{"uri":"source/tools/AnimationInspector.c","start":78,"end":127}},"prot":"public","static":false,"definition":"void AnimationInspector::show","returnType":"override void","argsstring":"(AnimationInspector this)","paramDocs":"\n\n_@param_ `this`: AnimationInspector instance\n\n","parameters":[{"name":"AnimationInspector this","description":"AnimationInspector Instance"}]},{"name":"hide","qualifiedname":"AnimationInspector::hide","description":"Hide the tool.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":92,"column":15},"body":{"uri":"source/tools/AnimationInspector.c","start":129,"end":170}},"prot":"public","static":false,"definition":"void AnimationInspector::hide","returnType":"override void","argsstring":"(AnimationInspector this)","paramDocs":"\n\n_@param_ `this`: AnimationInspector instance\n\n","parameters":[{"name":"AnimationInspector this","description":"AnimationInspector Instance"}]},{"name":"processUserInput","qualifiedname":"AnimationInspector::processUserInput","description":"Process the provided user pressed key.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":96,"column":15},"body":{"uri":"source/tools/AnimationInspector.c","start":172,"end":217}},"prot":"public","static":false,"definition":"void AnimationInspector::processUserInput","returnType":"override void","argsstring":"(AnimationInspector this, uint16 pressedKey)","paramDocs":"\n\n_@param_ `this`: AnimationInspector instance\n\n_@param_ `pressedKey`: User pressed key\n\n","parameters":[{"name":"AnimationInspector this","description":"AnimationInspector Instance"},{"name":"uint16 pressedKey","description":"User pressed key"}]}],"variables":[{"name":"sprite","qualifiedname":"AnimationInspector::sprite","description":"Currently inspected sprite.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":53,"column":8},"body":{"uri":"source/tools/AnimationInspector.h","start":53,"end":53}},"prot":"private","static":false},{"name":"animationFunctions","qualifiedname":"AnimationInspector::animationFunctions","description":"Animations to apply to the animated sprite.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":56,"column":25},"body":{"uri":"source/tools/AnimationInspector.h","start":56,"end":56}},"prot":"private","static":false},{"name":"animationFunction","qualifiedname":"AnimationInspector::animationFunction","description":"Currently applied animation.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":59,"column":19},"body":{"uri":"source/tools/AnimationInspector.h","start":59,"end":59}},"prot":"private","static":false},{"name":"animatedEntitySelector","qualifiedname":"AnimationInspector::animatedEntitySelector","description":"Selector for the animated entities.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":62,"column":17},"body":{"uri":"source/tools/AnimationInspector.h","start":62,"end":62}},"prot":"private","static":false},{"name":"spriteSelector","qualifiedname":"AnimationInspector::spriteSelector","description":"Selector for the animated sprite sprite selector.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":65,"column":17},"body":{"uri":"source/tools/AnimationInspector.h","start":65,"end":65}},"prot":"private","static":false},{"name":"animationsSelector","qualifiedname":"AnimationInspector::animationsSelector","description":"Selector for the animations to play.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":68,"column":17},"body":{"uri":"source/tools/AnimationInspector.h","start":68,"end":68}},"prot":"private","static":false},{"name":"animationEditionSelector","qualifiedname":"AnimationInspector::animationEditionSelector","description":"Selector for the animation's properties.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":71,"column":17},"body":{"uri":"source/tools/AnimationInspector.h","start":71,"end":71}},"prot":"private","static":false},{"name":"frameEditionSelector","qualifiedname":"AnimationInspector::frameEditionSelector","description":"Selector for the animation's frames.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":74,"column":17},"body":{"uri":"source/tools/AnimationInspector.h","start":74,"end":74}},"prot":"private","static":false},{"name":"state","qualifiedname":"AnimationInspector::state","description":"Inspector's state.","location":{"header":{"uri":"source/tools/AnimationInspector.h","line":77,"column":7},"body":{"uri":"source/tools/AnimationInspector.h","start":77,"end":77}},"prot":"private","static":false}],"enums":[{"name":"AnimationInspectorStates","qualifiedname":"AnimationInspector::AnimationInspectorStates","description":"","location":{"header":{"uri":"source/tools/AnimationInspector.c","line":50,"column":1},"body":{"uri":"source/tools/AnimationInspector.c","start":51,"end":58}},"prot":"public","static":false},{"name":"AnimationProperties","qualifiedname":"AnimationInspector::AnimationProperties","description":"","location":{"header":{"uri":"source/tools/AnimationInspector.c","line":61,"column":1},"body":{"uri":"source/tools/AnimationInspector.c","start":62,"end":67}},"prot":"public","static":false}],"typedefs":[]},"AnimationInspectorState":{"__contributor":"core","name":"AnimationInspectorState","base":"ToolState","description":"Class `AnimationInspectorState`\n\nInherits from `ToolState`\n\nImplements a tool state to inspect animations.","location":{"header":{"uri":"source/states/ToolStates/AnimationInspectorState.h","line":32,"column":11},"body":{"uri":"source/states/ToolStates/AnimationInspectorState.h","start":33,"end":43}},"methods":[{"name":"getInstance","qualifiedname":"AnimationInspectorState::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/states/ToolStates/AnimationInspectorState.h","line":38,"column":32}},"prot":"public","static":true,"definition":"static AnimationInspectorState AnimationInspectorState::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `AnimationInspectorState` singleton\n\n","parameters":[]},{"name":"isKeyCombination","qualifiedname":"AnimationInspectorState::isKeyCombination","description":"Check if the provided user input unlocks the tool managed by this state.","location":{"header":{"uri":"source/states/ToolStates/AnimationInspectorState.h","line":42,"column":15},"body":{"uri":"source/states/ToolStates/AnimationInspectorState.c","start":41,"end":44}},"prot":"public","static":false,"definition":"bool AnimationInspectorState::isKeyCombination","returnType":"override ","argsstring":"(AnimationInspectorState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: AnimationInspectorState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n","parameters":[{"name":"AnimationInspectorState this","description":"AnimationInspectorState Instance"},{"name":"const UserInput *userInput"}]}],"variables":[],"enums":[],"typedefs":[]},"Asterisk":{"__contributor":"core","name":"Asterisk","base":"Wireframe","description":"Class `Asterisk`\n\nInherits from `Wireframe`\n\nDraws an asterisk.","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":53,"column":1},"body":{"uri":"source/graphics/3d/Asterisk.h","start":54,"end":80}},"methods":[{"name":"constructor","qualifiedname":"Asterisk::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":71,"column":6},"body":{"uri":"source/graphics/3d/Asterisk.c","start":26,"end":34}},"prot":"public","static":false,"definition":"void Asterisk::constructor","returnType":"void","argsstring":"(Asterisk this, SpatialObject owner, const AsteriskSpec *asteriskSpec)","paramDocs":"\n\n_@param_ `this`: Asterisk instance\n\n_@param_ `owner`: `SpatialObject` to which the wireframe attaches to\n\n_@param_ `asteriskSpec`: Specification that determines how to configure the wireframe\n\n","parameters":[{"name":"Asterisk this","description":"Asterisk Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the wireframe attaches to"},{"name":"const AsteriskSpec *asteriskSpec","description":"Specification that determines how to configure the wireframe"}]},{"name":"render","qualifiedname":"Asterisk::render","description":"Prepare the wireframe for drawing.","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":75,"column":15},"body":{"uri":"source/graphics/3d/Asterisk.c","start":43,"end":50}},"prot":"public","static":false,"definition":"void Asterisk::render","returnType":"override void","argsstring":"(Asterisk this, Vector3D relativePosition)","paramDocs":"\n\n_@param_ `this`: Asterisk instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n","parameters":[{"name":"Asterisk this","description":"Asterisk Instance"},{"name":"Vector3D relativePosition","description":"Position relative to the camera's"}]},{"name":"draw","qualifiedname":"Asterisk::draw","description":"Draw the wireframe to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":79,"column":15},"body":{"uri":"source/graphics/3d/Asterisk.c","start":52,"end":70}},"prot":"public","static":false,"definition":"bool Asterisk::draw","returnType":"override ","argsstring":"(Asterisk this)","paramDocs":"\n\n_@param_ `this`: Asterisk instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Asterisk this","description":"Asterisk Instance"}]}],"variables":[{"name":"position","qualifiedname":"Asterisk::position","description":"Position at which to draw the wireframe","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":58,"column":13},"body":{"uri":"source/graphics/3d/Asterisk.h","start":58,"end":58}},"prot":"protected","static":false},{"name":"length","qualifiedname":"Asterisk::length","description":"Length of the asterisk's lines.","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":61,"column":9},"body":{"uri":"source/graphics/3d/Asterisk.h","start":61,"end":61}},"prot":"protected","static":false},{"name":"scaledLength","qualifiedname":"Asterisk::scaledLength","description":"Used length of the asterisk's lines to draw them.","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":64,"column":8},"body":{"uri":"source/graphics/3d/Asterisk.h","start":64,"end":64}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"AsteriskROMSpec","qualifiedname":"Asterisk::AsteriskROMSpec","description":"A `Asterisk` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/3d/Asterisk.h","line":39,"column":28},"body":{"uri":"source/graphics/3d/Asterisk.h","start":39,"end":39}},"prot":"public","static":false}]},"Ball":{"__contributor":"core","name":"Ball","base":"Collider","description":"Class `Ball`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a ball.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":32,"column":1},"body":{"uri":"source/physics/Colliders/Ball.h","start":33,"end":63}},"methods":[{"name":"project","qualifiedname":"Ball::project","description":"Project the diameter of a circle defined by its centers and radius onto the provided vector.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":47,"column":13},"body":{"uri":"source/physics/Colliders/Ball.c","start":28,"end":42}},"prot":"public","static":true,"definition":"static void Ball::project","returnType":"void","argsstring":"(Vector3D center, fixed_t radius, Vector3D vector, fixed_t *min, fixed_t *max)","paramDocs":"\n\n_@param_ `center`: Center of the circle whose diameter is projected\n\n_@param_ `radius`: Radius of the circle whose diameter is projected\n\n_@param_ `vector`: Vector onto which to project the circle's diameter\n\n_@param_ `min`\n\n_@param_ `max`\n\n","parameters":[{"name":"fixed_t radius","description":"Center of the circle whose diameter is projected"},{"name":"Vector3D vector","description":"Radius of the circle whose diameter is projected"},{"name":"fixed_t *min","description":"Vector onto which to project the circle's diameter"},{"name":"fixed_t *max"},{}]},{"name":"constructor","qualifiedname":"Ball::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":50,"column":6},"body":{"uri":"source/physics/Colliders/Ball.c","start":50,"end":58}},"prot":"public","static":false,"definition":"void Ball::constructor","returnType":"void","argsstring":"(Ball this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: Ball instance\n\n_@param_ `owner`\n\n_@param_ `colliderSpec`\n\n","parameters":[{"name":"Ball this","description":"Ball Instance"},{"name":"SpatialObject owner"},{"name":"const ColliderSpec *colliderSpec"}]},{"name":"resize","qualifiedname":"Ball::resize","description":"Resize the colliders add the provided increment.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":54,"column":15},"body":{"uri":"source/physics/Colliders/Ball.c","start":67,"end":70}},"prot":"public","static":false,"definition":"void Ball::resize","returnType":"override void","argsstring":"(Ball this, fixed_t sizeDelta)","paramDocs":"\n\n_@param_ `this`: Ball instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n","parameters":[{"name":"Ball this","description":"Ball Instance"},{"name":"fixed_t sizeDelta","description":"Delta to add to the collider's size"}]},{"name":"configureWireframe","qualifiedname":"Ball::configureWireframe","description":"Configure the wireframe used to show the collider.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":57,"column":15},"body":{"uri":"source/physics/Colliders/Ball.c","start":72,"end":91}},"prot":"public","static":false,"definition":"void Ball::configureWireframe","returnType":"override void","argsstring":"(Ball this)","paramDocs":"\n\n_@param_ `this`: Ball instance\n\n","parameters":[{"name":"Ball this","description":"Ball Instance"}]},{"name":"print","qualifiedname":"Ball::print","description":"Print collider's state.","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":62,"column":15},"body":{"uri":"source/physics/Colliders/Ball.c","start":94,"end":119}},"prot":"public","static":false,"definition":"void Ball::print","returnType":"override void","argsstring":"(Ball this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Ball instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Ball this","description":"Ball Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"radius","qualifiedname":"Ball::radius","description":"The radius of the ball","location":{"header":{"uri":"source/physics/Colliders/Ball.h","line":37,"column":9},"body":{"uri":"source/physics/Colliders/Ball.h","start":37,"end":37}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Behavior":{"__contributor":"core","name":"Behavior","base":"Component","description":"Class `Behavior`\n\nInherits from `Component`\n\nImplements a container whose children are always fixed to the camera","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":53,"column":9},"body":{"uri":"source/stage/entities/Behavior.h","start":54,"end":81}},"methods":[{"name":"create","qualifiedname":"Behavior::create","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":65,"column":17},"body":{"uri":"source/stage/entities/Behavior.c","start":23,"end":34}},"prot":"public","static":true,"definition":"static Behavior Behavior::create","argsstring":"(SpatialObject owner, const BehaviorSpec *behaviorSpec)","paramDocs":"\n\n_@param_ `owner`: `SpatialObject` to which the behavior attaches to\n\n_@param_ `behaviorSpec`: Specification that determines how to configure the behavior\n\n","parameters":[{"name":"const BehaviorSpec *behaviorSpec","description":"`SpatialObject` to which the behavior attaches to"},{"description":"Specification that determines how to configure the behavior"}]},{"name":"constructor","qualifiedname":"Behavior::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":70,"column":6},"body":{"uri":"source/stage/entities/Behavior.c","start":42,"end":47}},"prot":"public","static":false,"definition":"void Behavior::constructor","returnType":"void","argsstring":"(Behavior this, SpatialObject owner, const BehaviorSpec *behaviorSpec)","paramDocs":"\n\n_@param_ `this`: Behavior instance\n\n_@param_ `owner`: `SpatialObject` to which the behavior attaches to\n\n_@param_ `behaviorSpec`: Specification that determines how to configure the behavior\n\n","parameters":[{"name":"Behavior this","description":"Behavior Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the behavior attaches to"},{"name":"const BehaviorSpec *behaviorSpec","description":"Specification that determines how to configure the behavior"}]},{"name":"enable","qualifiedname":"Behavior::enable","description":"Enable the behavior's operations.","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":73,"column":6},"body":{"uri":"source/stage/entities/Behavior.c","start":54,"end":57}},"prot":"public","static":false,"definition":"void Behavior::enable","returnType":"void","argsstring":"(Behavior this)","paramDocs":"\n\n_@param_ `this`: Behavior instance\n\n","parameters":[{"name":"Behavior this","description":"Behavior Instance"}]},{"name":"disable","qualifiedname":"Behavior::disable","description":"Disable the behavior's operations.","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":76,"column":6},"body":{"uri":"source/stage/entities/Behavior.c","start":59,"end":62}},"prot":"public","static":false,"definition":"void Behavior::disable","returnType":"void","argsstring":"(Behavior this)","paramDocs":"\n\n_@param_ `this`: Behavior instance\n\n","parameters":[{"name":"Behavior this","description":"Behavior Instance"}]},{"name":"isEnabled","qualifiedname":"Behavior::isEnabled","description":"Check if the behavior's operations are enabled.","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":80,"column":6},"body":{"uri":"source/stage/entities/Behavior.c","start":64,"end":67}},"prot":"public","static":false,"definition":"bool Behavior::isEnabled","argsstring":"(Behavior this)","paramDocs":"\n\n_@param_ `this`: Behavior instance\n\n_@return_ `bool` True if the behavior's operations are enabled; false otherwise\n\n","parameters":[{"name":"Behavior this","description":"Behavior Instance"}]}],"variables":[{"name":"enabled","qualifiedname":"Behavior::enabled","description":"Flag to allow or prohibit the behavior to perform its operations","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":58,"column":6},"body":{"uri":"source/stage/entities/Behavior.h","start":58,"end":58}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"BehaviorROMSpec","qualifiedname":"Behavior::BehaviorROMSpec","description":"A `Behavior` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Behavior.h","line":39,"column":28},"body":{"uri":"source/stage/entities/Behavior.h","start":39,"end":39}},"prot":"public","static":false}]},"BgmapAnimatedSprite":{"__contributor":"core","name":"BgmapAnimatedSprite","base":"BgmapSprite","description":"Class `BgmapAnimatedSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose texture is allocated in BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","line":57,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","start":58,"end":68}},"methods":[{"name":"constructor","qualifiedname":"BgmapAnimatedSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","line":64,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.c","start":30,"end":38}},"prot":"public","static":false,"definition":"void BgmapAnimatedSprite::constructor","returnType":"void","argsstring":"(BgmapAnimatedSprite this, SpatialObject owner, const BgmapAnimatedSpriteSpec *bgmapAnimatedSpriteSpec)","paramDocs":"\n\n_@param_ `this`: BgmapAnimatedSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `bgmapAnimatedSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"BgmapAnimatedSprite this","description":"BgmapAnimatedSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const BgmapAnimatedSpriteSpec *bgmapAnimatedSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"updateAnimation","qualifiedname":"BgmapAnimatedSprite::updateAnimation","description":"Update the animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","line":67,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.c","start":47,"end":65}},"prot":"public","static":false,"definition":"void BgmapAnimatedSprite::updateAnimation","returnType":"override void","argsstring":"(BgmapAnimatedSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapAnimatedSprite instance\n\n","parameters":[{"name":"BgmapAnimatedSprite this","description":"BgmapAnimatedSprite Instance"}]}],"variables":[],"enums":[],"typedefs":[{"name":"BgmapAnimatedSpriteROMSpec","qualifiedname":"BgmapAnimatedSprite::BgmapAnimatedSpriteROMSpec","description":"A `BgmapAnimatedSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","line":43,"column":39},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapAnimatedSprite.h","start":43,"end":43}},"prot":"public","static":false}]},"BgmapSprite":{"__contributor":"core","name":"BgmapSprite","base":"Sprite","description":"Class `BgmapSprite`\n\nInherits from `Sprite`\n\nDisplays a texture that is allocated in BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":80,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":81,"end":173}},"methods":[{"name":"constructor","qualifiedname":"BgmapSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":102,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":79,"end":95}},"prot":"public","static":false,"definition":"void BgmapSprite::constructor","returnType":"void","argsstring":"(BgmapSprite this, SpatialObject owner, const BgmapSpriteSpec *bgmapSpriteSpec)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `bgmapSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const BgmapSpriteSpec *bgmapSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"registerWithManager","qualifiedname":"BgmapSprite::registerWithManager","description":"Register this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":105,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":113,"end":116}},"prot":"public","static":false,"definition":"void BgmapSprite::registerWithManager","returnType":"override void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"unregisterWithManager","qualifiedname":"BgmapSprite::unregisterWithManager","description":"Unegister this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":108,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":118,"end":121}},"prot":"public","static":false,"definition":"void BgmapSprite::unregisterWithManager","returnType":"override void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"hasSpecialEffects","qualifiedname":"BgmapSprite::hasSpecialEffects","description":"Check if the sprite has affine or hbias effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":112,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":123,"end":126}},"prot":"public","static":false,"definition":"bool BgmapSprite::hasSpecialEffects","returnType":"override ","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `bool` True if the sprite's mode of display is (__WORLD_AFFINE or __WORLD_HBIAS)\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"processEffects","qualifiedname":"BgmapSprite::processEffects","description":"Process affine and hbias effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":115,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":128,"end":147}},"prot":"public","static":false,"definition":"void BgmapSprite::processEffects","returnType":"override void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"doRender","qualifiedname":"BgmapSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":120,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":149,"end":261}},"prot":"public","static":false,"definition":"int16 BgmapSprite::doRender","returnType":"override ","argsstring":"(BgmapSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]},{"name":"setMultiframe","qualifiedname":"BgmapSprite::setMultiframe","description":"Set the current multiframe","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":124,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":263,"end":280}},"prot":"public","static":false,"definition":"void BgmapSprite::setMultiframe","returnType":"override void","argsstring":"(BgmapSprite this, uint16 frame)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `frame`: Current animation frame\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"uint16 frame","description":"Current animation frame"}]},{"name":"setRotation","qualifiedname":"BgmapSprite::setRotation","description":"Set the sprite's rotation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":128,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":282,"end":326}},"prot":"public","static":false,"definition":"void BgmapSprite::setRotation","returnType":"override void","argsstring":"(BgmapSprite this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `rotation`: `Rotation` to apply to the sprite\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"const Rotation *rotation","description":"`Rotation` to apply to the sprite"}]},{"name":"setScale","qualifiedname":"BgmapSprite::setScale","description":"Set the sprite's scale.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":132,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":328,"end":366}},"prot":"public","static":false,"definition":"void BgmapSprite::setScale","returnType":"override void","argsstring":"(BgmapSprite this, const PixelScale *scale)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `scale`: `Scale` to apply to the sprite\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"const PixelScale *scale","description":"`Scale` to apply to the sprite"}]},{"name":"getTotalPixels","qualifiedname":"BgmapSprite::getTotalPixels","description":"Retrieve the sprite's total number of pixels actually displayed.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":136,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":368,"end":376}},"prot":"public","static":false,"definition":"int32 BgmapSprite::getTotalPixels","returnType":"override ","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `int32` `Sprite`'s total number of pixels actually displayed\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"configureTexture","qualifiedname":"BgmapSprite::configureTexture","description":"Configure the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":139,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":378,"end":409}},"prot":"public","static":false,"definition":"void BgmapSprite::configureTexture","returnType":"void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"setMode","qualifiedname":"BgmapSprite::setMode","description":"Configure the displays on which to show the sprite and how it will be displayed","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":144,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":411,"end":456}},"prot":"public","static":false,"definition":"void BgmapSprite::setMode","returnType":"void","argsstring":"(BgmapSprite this, uint16 display, uint16 mode)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `display`: Displays on which to show the sprite (__WORLD_ON, __WORLD_LON or __WORLD_RON)\n\n_@param_ `mode`: The mode to use to display the sprite (__WORLD_BGMAP | __WORLD_AFFINE | __WORLD_HBIAS)\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"uint16 display","description":"Displays on which to show the sprite (__WORLD_ON, __WORLD_LON or __WORLD_RON)"},{"name":"uint16 mode","description":"The mode to use to display the sprite (__WORLD_BGMAP | __WORLD_AFFINE | __WORLD_HBIAS)"}]},{"name":"setParam","qualifiedname":"BgmapSprite::setParam","description":"Set the offset within param table space that determines the area where this sprite is allowed to write.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":149,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":458,"end":464}},"prot":"public","static":false,"definition":"void BgmapSprite::setParam","returnType":"void","argsstring":"(BgmapSprite this, uint32 param)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `param`: Offset within param table space\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"uint32 param","description":"Offset within param table space"}]},{"name":"getParam","qualifiedname":"BgmapSprite::getParam","description":"Retrieve the offset within param table space that determines the area where this sprite is allowed to write","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":154,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":466,"end":469}},"prot":"public","static":false,"definition":"uint32 BgmapSprite::getParam","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `uint32` Offset within param table space\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"getParamTableRow","qualifiedname":"BgmapSprite::getParamTableRow","description":"Retrieve the offset that keeps track of where to continue writing in param table","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":158,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":471,"end":474}},"prot":"public","static":false,"definition":"int16 BgmapSprite::getParamTableRow","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `int16` Offset within param table space\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"invalidateParamTable","qualifiedname":"BgmapSprite::invalidateParamTable","description":"Force the rewrite of the sprite's param table during the next rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":161,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":476,"end":486}},"prot":"public","static":false,"definition":"void BgmapSprite::invalidateParamTable","returnType":"void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"onTextureRewritten","qualifiedname":"BgmapSprite::onTextureRewritten","description":"Callback for when the sprite's texture is rewriten.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":166,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":488,"end":493}},"prot":"public","static":false,"definition":"bool BgmapSprite::onTextureRewritten","argsstring":"(BgmapSprite this, ListenerObject eventFirer)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `eventFirer`: The rewrite texture\n\n_@return_ `bool` True if the listener must be kept; false to remove after the current call\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"},{"name":"ListenerObject eventFirer","description":"The rewrite texture"}]},{"name":"applyAffineTransformations","qualifiedname":"BgmapSprite::applyAffineTransformations","description":"Start rewriting the sprite's param table for affine transformations.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":169,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":495,"end":500}},"prot":"public","static":false,"definition":"void BgmapSprite::applyAffineTransformations","returnType":"void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]},{"name":"applyHbiasEffects","qualifiedname":"BgmapSprite::applyHbiasEffects","description":"Start rewriting the sprite's param table for hbias effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":172,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.c","start":502,"end":507}},"prot":"public","static":false,"definition":"void BgmapSprite::applyHbiasEffects","returnType":"void","argsstring":"(BgmapSprite this)","paramDocs":"\n\n_@param_ `this`: BgmapSprite instance\n\n","parameters":[{"name":"BgmapSprite this","description":"BgmapSprite Instance"}]}],"variables":[{"name":"paramTableRow","qualifiedname":"BgmapSprite::paramTableRow","description":"Offset that keeps track of where to continue writing in param table","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":85,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":85,"end":85}},"prot":"protected","static":false},{"name":"param","qualifiedname":"BgmapSprite::param","description":"Offset within param table space that determines the area where this sprite is allowed to write","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":89,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":89,"end":89}},"prot":"protected","static":false},{"name":"applyParamTableEffect","qualifiedname":"BgmapSprite::applyParamTableEffect","description":"Pointer to function that implements the param table based effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":92,"column":24},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":92,"end":92}},"prot":"protected","static":false},{"name":"bgmapTextureSource","qualifiedname":"BgmapSprite::bgmapTextureSource","description":"`Texture`'s configuration in BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":95,"column":20},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":95,"end":95}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"BgmapSpriteROMSpec","qualifiedname":"BgmapSprite::BgmapSpriteROMSpec","description":"A `BgmapSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","line":66,"column":31},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/BgmapSprite.h","start":66,"end":66}},"prot":"public","static":false}]},"BgmapTexture":{"__contributor":"core","name":"BgmapTexture","base":"Texture","description":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nA texture allocated in BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":45,"column":1},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":46,"end":115}},"methods":[{"name":"constructor","qualifiedname":"BgmapTexture::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":72,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":39,"end":62}},"prot":"public","static":false,"definition":"void BgmapTexture::constructor","returnType":"void","argsstring":"(BgmapTexture this, BgmapTextureSpec *bgmapTextureSpec, uint16 id)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `bgmapTextureSpec`: Specification that determines how to configure the texture\n\n_@param_ `id`: `Texture`'s identificator\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"BgmapTextureSpec *bgmapTextureSpec","description":"Specification that determines how to configure the texture"},{"name":"uint16 id","description":"`Texture`'s identificator"}]},{"name":"write","qualifiedname":"BgmapTexture::write","description":"Write graphical data to the allocated BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":77,"column":15},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":71,"end":112}},"prot":"public","static":false,"definition":"bool BgmapTexture::write","returnType":"override ","argsstring":"(BgmapTexture this, int16 maximumTextureRowsToWrite)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `maximumTextureRowsToWrite`: Number of texture rows to write during this call\n\n_@return_ `bool` True if the texture was written; false if it fails\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"int16 maximumTextureRowsToWrite","description":"Number of texture rows to write during this call"}]},{"name":"rewrite","qualifiedname":"BgmapTexture::rewrite","description":"Rewrite graphical data to the allocated BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":80,"column":15},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":114,"end":119}},"prot":"public","static":false,"definition":"void BgmapTexture::rewrite","returnType":"override void","argsstring":"(BgmapTexture this)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"}]},{"name":"setSegment","qualifiedname":"BgmapTexture::setSegment","description":"Set the BGMAP segment where the graphical data is allocated.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":84,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":121,"end":124}},"prot":"public","static":false,"definition":"void BgmapTexture::setSegment","returnType":"void","argsstring":"(BgmapTexture this, int8 segment)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `segment`: BGMAP segment where the graphical data is allocated\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"int8 segment","description":"BGMAP segment where the graphical data is allocated"}]},{"name":"getSegment","qualifiedname":"BgmapTexture::getSegment","description":"Retriev the BGMAP segment where the graphical data is allocated.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":88,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":126,"end":129}},"prot":"public","static":false,"definition":"int8 BgmapTexture::getSegment","argsstring":"(BgmapTexture this)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int8` BGMAP segment where the graphical data is allocated\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"}]},{"name":"setOffsets","qualifiedname":"BgmapTexture::setOffsets","description":"Set the coordinates in tiles of the graphical data inside BGMAP memory BGMAP segment where the graphical data is allocated.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":94,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":131,"end":135}},"prot":"public","static":false,"definition":"void BgmapTexture::setOffsets","returnType":"void","argsstring":"(BgmapTexture this, int16 xOffset, int16 yOffset)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `xOffset`: X coordinate in tiles of the graphical data inside BGMAP memory\n\n_@param_ `yOffset`: Y coordinate in tiles of the graphical data inside BGMAP memory\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"int16 xOffset","description":"X coordinate in tiles of the graphical data inside BGMAP memory"},{"name":"int16 yOffset","description":"Y coordinate in tiles of the graphical data inside BGMAP memory"}]},{"name":"getXOffset","qualifiedname":"BgmapTexture::getXOffset","description":"Retrieve the X coordinate in tiles of the graphical data inside BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":98,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":137,"end":140}},"prot":"public","static":false,"definition":"int16 BgmapTexture::getXOffset","argsstring":"(BgmapTexture this)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int16` X coordinate in tiles of the graphical data inside BGMAP memory\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"}]},{"name":"getYOffset","qualifiedname":"BgmapTexture::getYOffset","description":"Retrieve the Y coordinate in tiles of the graphical data inside BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":102,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":142,"end":145}},"prot":"public","static":false,"definition":"int16 BgmapTexture::getYOffset","argsstring":"(BgmapTexture this)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int16` Y coordinate in tiles of the graphical data inside BGMAP memory\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"}]},{"name":"setHorizontalFlip","qualifiedname":"BgmapTexture::setHorizontalFlip","description":"Set the horizontal flip flag.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":106,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":147,"end":162}},"prot":"public","static":false,"definition":"void BgmapTexture::setHorizontalFlip","returnType":"void","argsstring":"(BgmapTexture this, bool value)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `value`: If true, the texture is flipped horizontally\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"bool value","description":"If true, the texture is flipped horizontally"}]},{"name":"setVerticalFlip","qualifiedname":"BgmapTexture::setVerticalFlip","description":"Set the vertical flip flag.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":110,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":164,"end":179}},"prot":"public","static":false,"definition":"void BgmapTexture::setVerticalFlip","returnType":"void","argsstring":"(BgmapTexture this, bool value)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `value`: If true, the texture is flipped vertically\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"},{"name":"bool value","description":"If true, the texture is flipped vertically"}]},{"name":"getRemainingRowsToBeWritten","qualifiedname":"BgmapTexture::getRemainingRowsToBeWritten","description":"Retrieve the number of remaining rows to be written to graphical memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":114,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.c","start":181,"end":184}},"prot":"public","static":false,"definition":"int8 BgmapTexture::getRemainingRowsToBeWritten","argsstring":"(BgmapTexture this)","paramDocs":"\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int8` Number of remaining rows to be written to graphical memory\n\n","parameters":[{"name":"BgmapTexture this","description":"BgmapTexture Instance"}]}],"variables":[{"name":"segment","qualifiedname":"BgmapTexture::segment","description":"BGMAP segment where the graphical data is allocated","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":50,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"remainingRowsToBeWritten","qualifiedname":"BgmapTexture::remainingRowsToBeWritten","description":"Remaining rows to be written to graphical memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":53,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"xOffset","qualifiedname":"BgmapTexture::xOffset","description":"X coordinate in tiles of the graphical data inside BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":56,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"yOffset","qualifiedname":"BgmapTexture::yOffset","description":"Y coordinate in tiles of the graphical data inside BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":59,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":59,"end":59}},"prot":"protected","static":false},{"name":"horizontalFlip","qualifiedname":"BgmapTexture::horizontalFlip","description":"Flag to flip horizontally the texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":62,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":62,"end":62}},"prot":"protected","static":false},{"name":"verticalFlip","qualifiedname":"BgmapTexture::verticalFlip","description":"Flag to flip vertically the texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":65,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":65,"end":65}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"BgmapTextureSpec","qualifiedname":"BgmapTexture::BgmapTextureSpec","description":"A `BgmapTexture` spec","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":27,"column":27},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":27,"end":27}},"prot":"public","static":false},{"name":"BgmapTextureROMSpec","qualifiedname":"BgmapTexture::BgmapTextureROMSpec","description":"A `BgmapTexture` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","line":31,"column":32},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTexture.h","start":31,"end":31}},"prot":"public","static":false}]},"BgmapTextureManager":{"__contributor":"core","name":"BgmapTextureManager","base":"Object","description":"Class `BgmapTextureManager`\n\nInherits from `Texture`\n\nAllocates BGMAP space for textures.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":54,"column":11},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":55,"end":131}},"methods":[{"name":"getInstance","qualifiedname":"BgmapTextureManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":81,"column":28}},"prot":"public","static":true,"definition":"static BgmapTextureManager BgmapTextureManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `BgmapTextureManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"BgmapTextureManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":84,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":40,"end":75}},"prot":"public","static":false,"definition":"void BgmapTextureManager::reset","returnType":"void","argsstring":"(BgmapTextureManager this)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"}]},{"name":"clearBgmapSegment","qualifiedname":"BgmapTextureManager::clearBgmapSegment","description":"Clear the data in the BGMAP spaced defined by the provided segment.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":88,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":77,"end":80}},"prot":"public","static":false,"definition":"void BgmapTextureManager::clearBgmapSegment","returnType":"void","argsstring":"(BgmapTextureManager this, int32 segment)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `segment`: Index of the BGMAP segment to clear\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"int32 segment","description":"Index of the BGMAP segment to clear"}]},{"name":"calculateAvailableBgmapSegments","qualifiedname":"BgmapTextureManager::calculateAvailableBgmapSegments","description":"Compute the number of available BGMAP segments for texture allocation.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":91,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":82,"end":96}},"prot":"public","static":false,"definition":"void BgmapTextureManager::calculateAvailableBgmapSegments","returnType":"void","argsstring":"(BgmapTextureManager this)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"}]},{"name":"getAvailableBgmapSegmentsForTextures","qualifiedname":"BgmapTextureManager::getAvailableBgmapSegmentsForTextures","description":"Retrieve the number of available BGMAP segments to allocate textures.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":95,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":98,"end":101}},"prot":"public","static":false,"definition":"int8 BgmapTextureManager::getAvailableBgmapSegmentsForTextures","argsstring":"(BgmapTextureManager this)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@return_ `int8` Number of available BGMAP segments to allocate textures\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"}]},{"name":"getPrintingBgmapSegment","qualifiedname":"BgmapTextureManager::getPrintingBgmapSegment","description":"Retrieve the number of the BGMAP segment available for printing.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":99,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":103,"end":106}},"prot":"public","static":false,"definition":"int8 BgmapTextureManager::getPrintingBgmapSegment","argsstring":"(BgmapTextureManager this)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@return_ `int8` Number of the BGMAP segment available for printing\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"}]},{"name":"loadTextures","qualifiedname":"BgmapTextureManager::loadTextures","description":"Load textures in function of the provided array of specs.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":103,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":108,"end":180}},"prot":"public","static":false,"definition":"void BgmapTextureManager::loadTextures","returnType":"void","argsstring":"(BgmapTextureManager this, const TextureSpec **textureSpecs)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `textureSpecs`: Array of texture specs in function of which to load textures\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"const TextureSpec **textureSpecs","description":"Array of texture specs in function of which to load textures"}]},{"name":"getTexture","qualifiedname":"BgmapTextureManager::getTexture","description":"Retrieve a texture initialized with the provided spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":111,"column":14},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":182,"end":245}},"prot":"public","static":false,"definition":"BgmapTexture BgmapTextureManager::getTexture","argsstring":"(BgmapTextureManager this, BgmapTextureSpec *bgmapTextureSpec, int16 minimumSegment, bool mustLiveAtEvenSegment, uint32 scValue)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `bgmapTextureSpec`: Spec to use to initilize the desired texture\n\n_@param_ `minimumSegment`: Minimum BGMAP segment where to allocate the texture\n\n_@param_ `mustLiveAtEvenSegment`: Required BGMAP segment where to allocate the texture\n\n_@param_ `scValue`: SC configuration value for multi segment textures\n\n_@return_ `BgmapTexture` `Texture` initialized with the provided spec\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"BgmapTextureSpec *bgmapTextureSpec","description":"Spec to use to initilize the desired texture"},{"name":"int16 minimumSegment","description":"Minimum BGMAP segment where to allocate the texture"},{"name":"bool mustLiveAtEvenSegment","description":"Required BGMAP segment where to allocate the texture"},{"name":"uint32 scValue","description":"SC configuration value for multi segment textures"}]},{"name":"releaseTexture","qualifiedname":"BgmapTextureManager::releaseTexture","description":"Release a texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":115,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":247,"end":254}},"prot":"public","static":false,"definition":"void BgmapTextureManager::releaseTexture","returnType":"void","argsstring":"(BgmapTextureManager this, BgmapTexture bgmapTexture)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `bgmapTexture`: `Texture` to release\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"BgmapTexture bgmapTexture","description":"`Texture` to release"}]},{"name":"getXOffset","qualifiedname":"BgmapTextureManager::getXOffset","description":"Retrieve the X coordinate in BGMAP space for the texture ID provided.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":120,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":256,"end":259}},"prot":"public","static":false,"definition":"int16 BgmapTextureManager::getXOffset","argsstring":"(BgmapTextureManager this, int32 id)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `id`: `Texture`'s id\n\n_@return_ `int16` X coordinate in BGMAP space for the texture ID provided\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"int32 id","description":"`Texture`'s id"}]},{"name":"getYOffset","qualifiedname":"BgmapTextureManager::getYOffset","description":"Retrieve the Y coordinate in BGMAP space for the texture ID provided.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":125,"column":7},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":261,"end":264}},"prot":"public","static":false,"definition":"int16 BgmapTextureManager::getYOffset","argsstring":"(BgmapTextureManager this, int32 id)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `id`: `Texture`'s id\n\n_@return_ `int16` Y coordinate in BGMAP space for the texture ID provided\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"int32 id","description":"`Texture`'s id"}]},{"name":"print","qualifiedname":"BgmapTextureManager::print","description":"Print the manager's status.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":130,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.c","start":267,"end":327}},"prot":"public","static":false,"definition":"void BgmapTextureManager::print","returnType":"void","argsstring":"(BgmapTextureManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"BgmapTextureManager this","description":"BgmapTextureManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"bgmapTextures","qualifiedname":"BgmapTextureManager::bgmapTextures","description":"","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":57,"column":13},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":57,"end":57}},"prot":"private","static":false},{"name":"usedTiles","qualifiedname":"BgmapTextureManager::usedTiles","description":"Used tiles per BGMAP segment.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":60,"column":8},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":60,"end":60}},"prot":"private","static":false},{"name":"xOffset","qualifiedname":"BgmapTextureManager::xOffset","description":"Start X coordinate of free space in each BGMAP segment.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":63,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":63,"end":63}},"prot":"private","static":false},{"name":"yOffset","qualifiedname":"BgmapTextureManager::yOffset","description":"Start Y coordinate of free space in each BGMAP segment.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":66,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":66,"end":66}},"prot":"private","static":false},{"name":"offset","qualifiedname":"BgmapTextureManager::offset","description":"Multidimensional array to keep track of the offsets for each allocated texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":69,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":69,"end":69}},"prot":"private","static":false},{"name":"availableBgmapSegmentsForTextures","qualifiedname":"BgmapTextureManager::availableBgmapSegmentsForTextures","description":"Number of available BGMAP segments for texture allocation.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":72,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":72,"end":72}},"prot":"private","static":false},{"name":"printingBgmapSegment","qualifiedname":"BgmapTextureManager::printingBgmapSegment","description":"BGMAP segment available for printing.","location":{"header":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","line":75,"column":6},"body":{"uri":"source/graphics/2d/Textures/Bgmap/BgmapTextureManager.h","start":75,"end":75}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"Body":{"__contributor":"core","name":"Body","base":"ListenerObject","description":"Class `Body`\n\nInherits from `ListenerObject`\n\nImplements newtonian physics.","location":{"header":{"uri":"source/physics/Body.h","line":89,"column":1},"body":{"uri":"source/physics/Body.h","start":90,"end":324}},"methods":[{"name":"computeInstantaneousSpeed","qualifiedname":"Body::computeInstantaneousSpeed","description":"Compute the instantaneous speed caused by the provided physical properties.","location":{"header":{"uri":"source/physics/Body.h","line":189,"column":16},"body":{"uri":"source/physics/Body.c","start":89,"end":94}},"prot":"public","static":true,"definition":"static fixed_t Body::computeInstantaneousSpeed","argsstring":"(fixed_t forceMagnitude, fixed_t gravity, fixed_t mass, fixed_t friction, fixed_t maximumSpeed)","paramDocs":"\n\n_@param_ `forceMagnitude`: Magnitude of the applied force\n\n_@param_ `gravity`: Gravity acceleration vector that affects the resulting speed\n\n_@param_ `mass`: The mass that will aquire the computed speed\n\n_@param_ `friction`: Friction affecting the mass that will aquire the computed speed\n\n_@param_ `maximumSpeed`: Maximum value that the computated speed can reach\n\n_@return_ `static` The instantaneous speed caused by the provided physical properties\n\n","parameters":[{"name":"fixed_t gravity","description":"Magnitude of the applied force"},{"name":"fixed_t mass","description":"Gravity acceleration vector that affects the resulting speed"},{"name":"fixed_t friction","description":"The mass that will aquire the computed speed"},{"name":"fixed_t maximumSpeed","description":"Friction affecting the mass that will aquire the computed speed"},{"description":"Maximum value that the computated speed can reach"}]},{"name":"constructor","qualifiedname":"Body::constructor","description":"Class' constructor","location":{"header":{"uri":"source/physics/Body.h","line":195,"column":6},"body":{"uri":"source/physics/Body.c","start":115,"end":165}},"prot":"public","static":false,"definition":"void Body::constructor","returnType":"void","argsstring":"(Body this, SpatialObject owner, const PhysicalProperties *physicalProperties, uint16 axisSubjectToGravity)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `owner`: `SpatialObject` to which the body attaches to\n\n_@param_ `physicalProperties`: Struct that specifies the physical properties of bodies\n\n_@param_ `axisSubjectToGravity`: Axis on which the body is subject to gravity\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the body attaches to"},{"name":"const PhysicalProperties *physicalProperties","description":"Struct that specifies the physical properties of bodies"},{"name":"uint16 axisSubjectToGravity","description":"Axis on which the body is subject to gravity"}]},{"name":"reset","qualifiedname":"Body::reset","description":"Clear the body's state.","location":{"header":{"uri":"source/physics/Body.h","line":198,"column":6},"body":{"uri":"source/physics/Body.c","start":181,"end":199}},"prot":"public","static":false,"definition":"void Body::reset","returnType":"void","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"clearNormal","qualifiedname":"Body::clearNormal","description":"Remove any normal vector affecting the body belonging to the provided referent.","location":{"header":{"uri":"source/physics/Body.h","line":202,"column":6},"body":{"uri":"source/physics/Body.c","start":201,"end":229}},"prot":"public","static":false,"definition":"void Body::clearNormal","returnType":"void","argsstring":"(Body this, ListenerObject referent)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `referent`: Normal vector affecting the body's owner\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"ListenerObject referent","description":"Normal vector affecting the body's owner"}]},{"name":"update","qualifiedname":"Body::update","description":"Update the physics simulation on the body.","location":{"header":{"uri":"source/physics/Body.h","line":207,"column":6},"body":{"uri":"source/physics/Body.c","start":231,"end":287}},"prot":"public","static":false,"definition":"void Body::update","returnType":"void","argsstring":"(Body this, uint16 cycle, fix7_9_ext elapsedTime)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `cycle`: Cycle number during the current second\n\n_@param_ `elapsedTime`: Elapsed time since the last call to this method\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"uint16 cycle","description":"Cycle number during the current second"},{"name":"fix7_9_ext elapsedTime","description":"Elapsed time since the last call to this method"}]},{"name":"applyForce","qualifiedname":"Body::applyForce","description":"Apply a force to the body.","location":{"header":{"uri":"source/physics/Body.h","line":211,"column":7},"body":{"uri":"source/physics/Body.c","start":289,"end":325}},"prot":"public","static":false,"definition":"uint8 Body::applyForce","argsstring":"(Body this, const Vector3D *force)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `force`: Force to be applied\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"const Vector3D *force","description":"Force to be applied"}]},{"name":"bounce","qualifiedname":"Body::bounce","description":"Make the body to bounce on the profixed plane according to the provided friction and bounciness.","location":{"header":{"uri":"source/physics/Body.h","line":218,"column":6},"body":{"uri":"source/physics/Body.c","start":327,"end":422}},"prot":"public","static":false,"definition":"void Body::bounce","returnType":"void","argsstring":"(Body this, ListenerObject bounceReferent, Vector3D bouncingPlaneNormal, fixed_t frictionCoefficient, fixed_t bounciness)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `bounceReferent`: Referent of the normal to the plane on which the body has to bounce\n\n_@param_ `bouncingPlaneNormal`: Normal of the plane on which the body has to bounce\n\n_@param_ `frictionCoefficient`: Friction coefficient of the bounce referent\n\n_@param_ `bounciness`: Bounciness coefficient of the bounce referent\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"ListenerObject bounceReferent","description":"Referent of the normal to the plane on which the body has to bounce"},{"name":"Vector3D bouncingPlaneNormal","description":"Normal of the plane on which the body has to bounce"},{"name":"fixed_t frictionCoefficient","description":"Friction coefficient of the bounce referent"},{"name":"fixed_t bounciness","description":"Bounciness coefficient of the bounce referent"}]},{"name":"stopMovement","qualifiedname":"Body::stopMovement","description":"Stop the body's movement on the speficied axis.","location":{"header":{"uri":"source/physics/Body.h","line":223,"column":8},"body":{"uri":"source/physics/Body.c","start":424,"end":467}},"prot":"public","static":false,"definition":"uint16 Body::stopMovement","argsstring":"(Body this, uint16 axis)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `axis`: Flag indicating the axises on which the movement has to stop\n\n_@return_ `uint16` Flag indicatiing the actual axises on which the body's movement stopped\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"uint16 axis","description":"Flag indicating the axises on which the movement has to stop"}]},{"name":"setVelocity","qualifiedname":"Body::setVelocity","description":"Set a constant velocity at which the body must move.","location":{"header":{"uri":"source/physics/Body.h","line":227,"column":6},"body":{"uri":"source/physics/Body.c","start":469,"end":509}},"prot":"public","static":false,"definition":"void Body::setVelocity","returnType":"void","argsstring":"(Body this, const Vector3D *velocity)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `velocity`: Pointer to a velocity vector\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"const Vector3D *velocity","description":"Pointer to a velocity vector"}]},{"name":"getVelocity","qualifiedname":"Body::getVelocity","description":"Retrieve the current velocity at which the body move.","location":{"header":{"uri":"source/physics/Body.h","line":231,"column":16},"body":{"uri":"source/physics/Body.c","start":511,"end":514}},"prot":"public","static":false,"definition":"const Vector3D * Body::getVelocity","returnType":["const "," *"],"argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `const` Pointer to the body's velocity vector\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setDirection","qualifiedname":"Body::setDirection","description":"Set the direction towards which the body must move.","location":{"header":{"uri":"source/physics/Body.h","line":235,"column":6},"body":{"uri":"source/physics/Body.c","start":516,"end":529}},"prot":"public","static":false,"definition":"void Body::setDirection","returnType":"void","argsstring":"(Body this, const Vector3D *direction)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"const Vector3D *direction","description":"Pointer to a direction vector"}]},{"name":"getDirection","qualifiedname":"Body::getDirection","description":"Retrieve the direction towards which the body is moving.","location":{"header":{"uri":"source/physics/Body.h","line":239,"column":16},"body":{"uri":"source/physics/Body.c","start":531,"end":534}},"prot":"public","static":false,"definition":"const Vector3D * Body::getDirection","returnType":["const "," *"],"argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setAxisSubjectToGravity","qualifiedname":"Body::setAxisSubjectToGravity","description":"Set the axises on which the body is subject to gravity.","location":{"header":{"uri":"source/physics/Body.h","line":243,"column":6},"body":{"uri":"source/physics/Body.c","start":536,"end":542}},"prot":"public","static":false,"definition":"void Body::setAxisSubjectToGravity","returnType":"void","argsstring":"(Body this, uint16 axisSubjectToGravity)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `axisSubjectToGravity`: Flag containing the axises on which the body is subject to gravity\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"uint16 axisSubjectToGravity","description":"Flag containing the axises on which the body is subject to gravity"}]},{"name":"getAxisSubjectToGravity","qualifiedname":"Body::getAxisSubjectToGravity","description":"Retrieve the axises on which the body is subject to gravity.","location":{"header":{"uri":"source/physics/Body.h","line":247,"column":8},"body":{"uri":"source/physics/Body.c","start":544,"end":547}},"prot":"public","static":false,"definition":"uint16 Body::getAxisSubjectToGravity","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `uint16` Flag containing the axises on which the body is subject to gravity\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setBounciness","qualifiedname":"Body::setBounciness","description":"Set the body's bounciness factor.","location":{"header":{"uri":"source/physics/Body.h","line":251,"column":6},"body":{"uri":"source/physics/Body.c","start":549,"end":561}},"prot":"public","static":false,"definition":"void Body::setBounciness","returnType":"void","argsstring":"(Body this, fixed_t bounciness)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `bounciness`: Value to set as the body's bounciness factor (between 0 and 1)\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"fixed_t bounciness","description":"Value to set as the body's bounciness factor (between 0 and 1)"}]},{"name":"getBounciness","qualifiedname":"Body::getBounciness","description":"Retrieve the body's bounciness factor.","location":{"header":{"uri":"source/physics/Body.h","line":255,"column":9},"body":{"uri":"source/physics/Body.c","start":563,"end":566}},"prot":"public","static":false,"definition":"fixed_t Body::getBounciness","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s bounciness factor\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setFrictionCoefficient","qualifiedname":"Body::setFrictionCoefficient","description":"Set the body's friction coefficient.","location":{"header":{"uri":"source/physics/Body.h","line":259,"column":6},"body":{"uri":"source/physics/Body.c","start":568,"end":581}},"prot":"public","static":false,"definition":"void Body::setFrictionCoefficient","returnType":"void","argsstring":"(Body this, fixed_t frictionCoefficient)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `frictionCoefficient`: Value to set as the body's friction coefficient (between 0 and __MAXIMUM_FRICTION_COEFFICIENT)\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"fixed_t frictionCoefficient","description":"Value to set as the body's friction coefficient (between 0 and __MAXIMUM_FRICTION_COEFFICIENT)"}]},{"name":"getFrictionCoefficient","qualifiedname":"Body::getFrictionCoefficient","description":"Retrieve the body's friction coefficient.","location":{"header":{"uri":"source/physics/Body.h","line":263,"column":9},"body":{"uri":"source/physics/Body.c","start":583,"end":586}},"prot":"public","static":false,"definition":"fixed_t Body::getFrictionCoefficient","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s friction coefficient\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setMass","qualifiedname":"Body::setMass","description":"Set the body's mass.","location":{"header":{"uri":"source/physics/Body.h","line":267,"column":6},"body":{"uri":"source/physics/Body.c","start":588,"end":591}},"prot":"public","static":false,"definition":"void Body::setMass","returnType":"void","argsstring":"(Body this, fixed_t mass)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `mass`\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"fixed_t mass"}]},{"name":"getMass","qualifiedname":"Body::getMass","description":"Retrieve the body's mass.","location":{"header":{"uri":"source/physics/Body.h","line":271,"column":9},"body":{"uri":"source/physics/Body.c","start":593,"end":596}},"prot":"public","static":false,"definition":"fixed_t Body::getMass","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s mass\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setPosition","qualifiedname":"Body::setPosition","description":"Set the body's position.","location":{"header":{"uri":"source/physics/Body.h","line":276,"column":6},"body":{"uri":"source/physics/Body.c","start":598,"end":608}},"prot":"public","static":false,"definition":"void Body::setPosition","returnType":"void","argsstring":"(Body this, const Vector3D *position, SpatialObject caller)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `position`: 3D vector defining the body's new position\n\n_@param_ `caller`: Must be the body's owner; otherwise the call to this method doesn't have any effect\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"const Vector3D *position","description":"3D vector defining the body's new position"},{"name":"SpatialObject caller","description":"Must be the body's owner; otherwise the call to this method doesn't have any effect"}]},{"name":"getPosition","qualifiedname":"Body::getPosition","description":"Retrieve the body's position.","location":{"header":{"uri":"source/physics/Body.h","line":280,"column":16},"body":{"uri":"source/physics/Body.c","start":610,"end":613}},"prot":"public","static":false,"definition":"const Vector3D * Body::getPosition","returnType":["const "," *"],"argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `const` Pointer to the body's 3D vector defining its position\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setMaximumVelocity","qualifiedname":"Body::setMaximumVelocity","description":"Set the body's maximum velocity.","location":{"header":{"uri":"source/physics/Body.h","line":285,"column":6},"body":{"uri":"source/physics/Body.c","start":615,"end":618}},"prot":"public","static":false,"definition":"void Body::setMaximumVelocity","returnType":"void","argsstring":"(Body this, Vector3D maximumVelocity)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `maximumVelocity`: 3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"Vector3D maximumVelocity","description":"3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)"}]},{"name":"getMaximumVelocity","qualifiedname":"Body::getMaximumVelocity","description":"Retrieve the body's maximum velocity.","location":{"header":{"uri":"source/physics/Body.h","line":290,"column":10},"body":{"uri":"source/physics/Body.c","start":620,"end":623}},"prot":"public","static":false,"definition":"Vector3D Body::getMaximumVelocity","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `Vector3D` 3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"setMaximumSpeed","qualifiedname":"Body::setMaximumSpeed","description":"Set the body's maximum speed.","location":{"header":{"uri":"source/physics/Body.h","line":294,"column":6},"body":{"uri":"source/physics/Body.c","start":625,"end":628}},"prot":"public","static":false,"definition":"void Body::setMaximumSpeed","returnType":"void","argsstring":"(Body this, fixed_t maximumSpeed)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `maximumSpeed`: Maximum magnitude of the body's velocity\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"fixed_t maximumSpeed","description":"Maximum magnitude of the body's velocity"}]},{"name":"getMaximumSpeed","qualifiedname":"Body::getMaximumSpeed","description":"Retrieve the body's maximum speed.","location":{"header":{"uri":"source/physics/Body.h","line":298,"column":9},"body":{"uri":"source/physics/Body.c","start":630,"end":633}},"prot":"public","static":false,"definition":"fixed_t Body::getMaximumSpeed","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` Maximum magnitude of the body's velocity\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"sendMessages","qualifiedname":"Body::sendMessages","description":"Set the flag that enables or prevents the sending of messages to the body's owner about its state changes.","location":{"header":{"uri":"source/physics/Body.h","line":302,"column":6}},"prot":"public","static":false,"definition":"void Body::sendMessages","returnType":"void","argsstring":"(Body this, bool value)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `value`: If true, the body sends messages to its owner when its movement state changes\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"bool value","description":"If true, the body sends messages to its owner when its movement state changes"}]},{"name":"setSkipCycles","qualifiedname":"Body::setSkipCycles","description":"Set the number of cycles to wait before updating the physics simulations on the body.","location":{"header":{"uri":"source/physics/Body.h","line":306,"column":6},"body":{"uri":"source/physics/Body.c","start":640,"end":644}},"prot":"public","static":false,"definition":"void Body::setSkipCycles","returnType":"void","argsstring":"(Body this, int8 skipCycles)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `skipCycles`: Number of cycles to skip physical simulations to slow down physics\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"int8 skipCycles","description":"Number of cycles to skip physical simulations to slow down physics"}]},{"name":"setSurroundingFrictionCoefficient","qualifiedname":"Body::setSurroundingFrictionCoefficient","description":"Set the body's friction coefficient of the its surroundings.","location":{"header":{"uri":"source/physics/Body.h","line":310,"column":6},"body":{"uri":"source/physics/Body.c","start":646,"end":659}},"prot":"public","static":false,"definition":"void Body::setSurroundingFrictionCoefficient","returnType":"void","argsstring":"(Body this, fixed_t surroundingFrictionCoefficient)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `surroundingFrictionCoefficient`: `Body`'s friction coefficient of the its surroundings\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"fixed_t surroundingFrictionCoefficient","description":"`Body`'s friction coefficient of the its surroundings"}]},{"name":"getSpeed","qualifiedname":"Body::getSpeed","description":"Retrieve the body's current speed (velocity vector's magnitude).","location":{"header":{"uri":"source/physics/Body.h","line":314,"column":9},"body":{"uri":"source/physics/Body.c","start":661,"end":664}},"prot":"public","static":false,"definition":"fixed_t Body::getSpeed","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s current speed (velocity vector's magnitude)\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"getMovementOnAllAxis","qualifiedname":"Body::getMovementOnAllAxis","description":"Retrieve the body's current movement state","location":{"header":{"uri":"source/physics/Body.h","line":318,"column":8},"body":{"uri":"source/physics/Body.c","start":666,"end":691}},"prot":"public","static":false,"definition":"uint16 Body::getMovementOnAllAxis","argsstring":"(Body this)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@return_ `uint16` Flag containing the body's current movement state on each axis\n\n","parameters":[{"name":"Body this","description":"Body Instance"}]},{"name":"print","qualifiedname":"Body::print","description":"Print the body's properties.","location":{"header":{"uri":"source/physics/Body.h","line":323,"column":6},"body":{"uri":"source/physics/Body.c","start":693,"end":781}},"prot":"public","static":false,"definition":"void Body::print","returnType":"void","argsstring":"(Body this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Body instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Body this","description":"Body Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"owner","qualifiedname":"Body::owner","description":"`Object` to which this body attaches to","location":{"header":{"uri":"source/physics/Body.h","line":94,"column":15},"body":{"uri":"source/physics/Body.h","start":94,"end":94}},"prot":"protected","static":false},{"name":"position","qualifiedname":"Body::position","description":"Spatial position.","location":{"header":{"uri":"source/physics/Body.h","line":97,"column":10},"body":{"uri":"source/physics/Body.h","start":97,"end":97}},"prot":"protected","static":false},{"name":"internalPosition","qualifiedname":"Body::internalPosition","description":"Spatial position at higher decimal precision.","location":{"header":{"uri":"source/physics/Body.h","line":100,"column":14},"body":{"uri":"source/physics/Body.h","start":100,"end":100}},"prot":"protected","static":false},{"name":"velocity","qualifiedname":"Body::velocity","description":"Velocity vector.","location":{"header":{"uri":"source/physics/Body.h","line":103,"column":10},"body":{"uri":"source/physics/Body.h","start":103,"end":103}},"prot":"protected","static":false},{"name":"internalVelocity","qualifiedname":"Body::internalVelocity","description":"Velocity vector at higher decimal precision.","location":{"header":{"uri":"source/physics/Body.h","line":106,"column":14},"body":{"uri":"source/physics/Body.h","start":106,"end":106}},"prot":"protected","static":false},{"name":"direction","qualifiedname":"Body::direction","description":"","location":{"header":{"uri":"source/physics/Body.h","line":109,"column":10},"body":{"uri":"source/physics/Body.h","start":109,"end":109}},"prot":"protected","static":false},{"name":"maximumVelocity","qualifiedname":"Body::maximumVelocity","description":"Maximum velocity.","location":{"header":{"uri":"source/physics/Body.h","line":112,"column":10},"body":{"uri":"source/physics/Body.h","start":112,"end":112}},"prot":"protected","static":false},{"name":"speed","qualifiedname":"Body::speed","description":"Speed magnitude.","location":{"header":{"uri":"source/physics/Body.h","line":115,"column":9},"body":{"uri":"source/physics/Body.h","start":115,"end":115}},"prot":"protected","static":false},{"name":"maximumSpeed","qualifiedname":"Body::maximumSpeed","description":"Maximum speed.","location":{"header":{"uri":"source/physics/Body.h","line":118,"column":9},"body":{"uri":"source/physics/Body.h","start":118,"end":118}},"prot":"protected","static":false},{"name":"gravity","qualifiedname":"Body::gravity","description":"Gravity affecting the body.","location":{"header":{"uri":"source/physics/Body.h","line":121,"column":10},"body":{"uri":"source/physics/Body.h","start":121,"end":121}},"prot":"protected","static":false},{"name":"externalForce","qualifiedname":"Body::externalForce","description":"External applied force.","location":{"header":{"uri":"source/physics/Body.h","line":124,"column":10},"body":{"uri":"source/physics/Body.h","start":124,"end":124}},"prot":"protected","static":false},{"name":"friction","qualifiedname":"Body::friction","description":"Friction surrounding object.","location":{"header":{"uri":"source/physics/Body.h","line":127,"column":10},"body":{"uri":"source/physics/Body.h","start":127,"end":127}},"prot":"protected","static":false},{"name":"totalNormal","qualifiedname":"Body::totalNormal","description":"Total normal forces applied to the body.","location":{"header":{"uri":"source/physics/Body.h","line":130,"column":10},"body":{"uri":"source/physics/Body.h","start":130,"end":130}},"prot":"protected","static":false},{"name":"normals","qualifiedname":"Body::normals","description":"List of normal for the forces affecting the body.","location":{"header":{"uri":"source/physics/Body.h","line":133,"column":13},"body":{"uri":"source/physics/Body.h","start":133,"end":133}},"prot":"protected","static":false},{"name":"accelerating","qualifiedname":"Body::accelerating","description":"Flags for the acceleration state of the body on each axis.","location":{"header":{"uri":"source/physics/Body.h","line":136,"column":14},"body":{"uri":"source/physics/Body.h","start":136,"end":136}},"prot":"protected","static":false},{"name":"bounciness","qualifiedname":"Body::bounciness","description":"`Body`'s bounciness factor.","location":{"header":{"uri":"source/physics/Body.h","line":139,"column":9},"body":{"uri":"source/physics/Body.h","start":139,"end":139}},"prot":"protected","static":false},{"name":"frictionCoefficient","qualifiedname":"Body::frictionCoefficient","description":"Friction coefficient of the body.","location":{"header":{"uri":"source/physics/Body.h","line":142,"column":9},"body":{"uri":"source/physics/Body.h","start":142,"end":142}},"prot":"protected","static":false},{"name":"surroundingFrictionCoefficient","qualifiedname":"Body::surroundingFrictionCoefficient","description":"Friction coefficient of the body's surroundings.","location":{"header":{"uri":"source/physics/Body.h","line":145,"column":9},"body":{"uri":"source/physics/Body.h","start":145,"end":145}},"prot":"protected","static":false},{"name":"totalFrictionCoefficient","qualifiedname":"Body::totalFrictionCoefficient","description":"Friction force's magnitude.","location":{"header":{"uri":"source/physics/Body.h","line":148,"column":9},"body":{"uri":"source/physics/Body.h","start":148,"end":148}},"prot":"protected","static":false},{"name":"frictionForceMagnitude","qualifiedname":"Body::frictionForceMagnitude","description":"Total friction force magnitude affecting the body.","location":{"header":{"uri":"source/physics/Body.h","line":151,"column":9},"body":{"uri":"source/physics/Body.h","start":151,"end":151}},"prot":"protected","static":false},{"name":"mass","qualifiedname":"Body::mass","description":"`Body`'s mass.","location":{"header":{"uri":"source/physics/Body.h","line":154,"column":9},"body":{"uri":"source/physics/Body.h","start":154,"end":154}},"prot":"protected","static":false},{"name":"movementType","qualifiedname":"Body::movementType","description":"`Body`'s movement type on each axis.","location":{"header":{"uri":"source/physics/Body.h","line":157,"column":14},"body":{"uri":"source/physics/Body.h","start":157,"end":157}},"prot":"protected","static":false},{"name":"axisSubjectToGravity","qualifiedname":"Body::axisSubjectToGravity","description":"Axises on which the body is subject to gravity.","location":{"header":{"uri":"source/physics/Body.h","line":160,"column":8},"body":{"uri":"source/physics/Body.h","start":160,"end":160}},"prot":"protected","static":false},{"name":"skipCycles","qualifiedname":"Body::skipCycles","description":"Number of cycles to skip physical simulations to slow down physics.","location":{"header":{"uri":"source/physics/Body.h","line":163,"column":6},"body":{"uri":"source/physics/Body.h","start":163,"end":163}},"prot":"protected","static":false},{"name":"skipedCycles","qualifiedname":"Body::skipedCycles","description":"Number of skiped cycles.","location":{"header":{"uri":"source/physics/Body.h","line":166,"column":6},"body":{"uri":"source/physics/Body.h","start":166,"end":166}},"prot":"protected","static":false},{"name":"awake","qualifiedname":"Body::awake","description":"If not true, the body skips physical simulations.","location":{"header":{"uri":"source/physics/Body.h","line":169,"column":6},"body":{"uri":"source/physics/Body.h","start":169,"end":169}},"prot":"protected","static":false},{"name":"sendMessages","qualifiedname":"Body::sendMessages","description":"If true, the body informs its owner of its change in movement state.","location":{"header":{"uri":"source/physics/Body.h","line":172,"column":6},"body":{"uri":"source/physics/Body.h","start":172,"end":172}},"prot":"protected","static":false},{"name":"deleteMe","qualifiedname":"Body::deleteMe","description":"Flag to destroy the body.","location":{"header":{"uri":"source/physics/Body.h","line":175,"column":6},"body":{"uri":"source/physics/Body.h","start":175,"end":175}},"prot":"protected","static":false},{"name":"movesIndependentlyOnEachAxis","qualifiedname":"Body::movesIndependentlyOnEachAxis","description":"If true, the movement of the body is independent on each axis.","location":{"header":{"uri":"source/physics/Body.h","line":178,"column":6},"body":{"uri":"source/physics/Body.h","start":178,"end":178}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Box":{"__contributor":"core","name":"Box","base":"Collider","description":"Class `Box`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a box.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":39,"column":1},"body":{"uri":"source/physics/Colliders/Box.h","start":40,"end":86}},"methods":[{"name":"project","qualifiedname":"Box::project","description":"Project the vertexes onto the provided vector.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":63,"column":13},"body":{"uri":"source/physics/Colliders/Box.c","start":27,"end":54}},"prot":"public","static":true,"definition":"static void Box::project","returnType":"void","argsstring":"(Vector3D vertexes[8], Vector3D vector, fixed_t *min, fixed_t *max)","paramDocs":"\n\n_@param_ `vertexes`: Array of vectors to project\n\n_@param_ `vector`: Vector onto which make the projections\n\n_@param_ `min`\n\n_@param_ `max`\n\n","parameters":[{"name":"Vector3D vector","description":"Array of vectors to project"},{"name":"fixed_t *min","description":"Vector onto which make the projections"},{"name":"fixed_t *max"},{}]},{"name":"constructor","qualifiedname":"Box::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":66,"column":6},"body":{"uri":"source/physics/Colliders/Box.c","start":62,"end":81}},"prot":"public","static":false,"definition":"void Box::constructor","returnType":"void","argsstring":"(Box this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: Box instance\n\n_@param_ `owner`\n\n_@param_ `colliderSpec`\n\n","parameters":[{"name":"Box this","description":"Box Instance"},{"name":"SpatialObject owner"},{"name":"const ColliderSpec *colliderSpec"}]},{"name":"resize","qualifiedname":"Box::resize","description":"Resize the colliders add the provided increment.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":70,"column":15},"body":{"uri":"source/physics/Colliders/Box.c","start":96,"end":109}},"prot":"public","static":false,"definition":"void Box::resize","returnType":"override void","argsstring":"(Box this, fixed_t sizeDelta)","paramDocs":"\n\n_@param_ `this`: Box instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n","parameters":[{"name":"Box this","description":"Box Instance"},{"name":"fixed_t sizeDelta","description":"Delta to add to the collider's size"}]},{"name":"configureWireframe","qualifiedname":"Box::configureWireframe","description":"Configure the wireframe used to show the collider.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":73,"column":15},"body":{"uri":"source/physics/Colliders/Box.c","start":111,"end":170}},"prot":"public","static":false,"definition":"void Box::configureWireframe","returnType":"override void","argsstring":"(Box this)","paramDocs":"\n\n_@param_ `this`: Box instance\n\n","parameters":[{"name":"Box this","description":"Box Instance"}]},{"name":"print","qualifiedname":"Box::print","description":"Print collider's state.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":78,"column":15},"body":{"uri":"source/physics/Colliders/Box.c","start":173,"end":193}},"prot":"public","static":false,"definition":"void Box::print","returnType":"override void","argsstring":"(Box this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Box instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Box this","description":"Box Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"getVertexes","qualifiedname":"Box::getVertexes","description":"Retrieve the vertexes that define the box.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":82,"column":6},"body":{"uri":"source/physics/Colliders/Box.c","start":196,"end":256}},"prot":"public","static":false,"definition":"void Box::getVertexes","returnType":"void","argsstring":"(Box this, Vector3D vertexes[8])","paramDocs":"\n\n_@param_ `this`: Box instance\n\n_@param_ `vertexes`\n\n","parameters":[{"name":"Box this","description":"Box Instance"},{"name":"Vector3D vertexes[8]"}]},{"name":"projectOntoItself","qualifiedname":"Box::projectOntoItself","description":"Project the box's vertexes onto its normals.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":85,"column":6},"body":{"uri":"source/physics/Colliders/Box.c","start":258,"end":274}},"prot":"public","static":false,"definition":"void Box::projectOntoItself","returnType":"void","argsstring":"(Box this)","paramDocs":"\n\n_@param_ `this`: Box instance\n\n","parameters":[{"name":"Box this","description":"Box Instance"}]}],"variables":[{"name":"vertexProjections","qualifiedname":"Box::vertexProjections","description":"The normals of the box","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":44,"column":18},"body":{"uri":"source/physics/Colliders/Box.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"rightBox","qualifiedname":"Box::rightBox","description":"Bounding box.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":47,"column":10},"body":{"uri":"source/physics/Colliders/Box.h","start":47,"end":47}},"prot":"protected","static":false},{"name":"normals","qualifiedname":"Box::normals","description":"The normals of the box.","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":51,"column":9},"body":{"uri":"source/physics/Colliders/Box.h","start":51,"end":51}},"prot":"protected","static":false},{"name":"rotationVertexDisplacement","qualifiedname":"Box::rotationVertexDisplacement","description":"","location":{"header":{"uri":"source/physics/Colliders/Box.h","line":54,"column":10},"body":{"uri":"source/physics/Colliders/Box.h","start":54,"end":54}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Camera":{"__contributor":"core","name":"Camera","base":"ListenerObject","description":"Class `Camera`\n\nInherits from `ListenerObject`\n\nRepresents the player's view point.","location":{"header":{"uri":"source/camera/Camera.h","line":55,"column":11},"body":{"uri":"source/camera/Camera.h","start":56,"end":222}},"methods":[{"name":"getInstance","qualifiedname":"Camera::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/camera/Camera.h","line":95,"column":15}},"prot":"public","static":true,"definition":"static Camera Camera::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Camera` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"Camera::reset","description":"Reset the camera's state.","location":{"header":{"uri":"source/camera/Camera.h","line":98,"column":6},"body":{"uri":"source/camera/Camera.c","start":43,"end":64}},"prot":"public","static":false,"definition":"void Camera::reset","returnType":"void","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setup","qualifiedname":"Camera::setup","description":"Setup the camera's optical and frustum configuration that determine the results from 3D to 2D projection.","location":{"header":{"uri":"source/camera/Camera.h","line":104,"column":6},"body":{"uri":"source/camera/Camera.c","start":66,"end":73}},"prot":"public","static":false,"definition":"void Camera::setup","returnType":"void","argsstring":"(Camera this, PixelOptical pixelOptical, CameraFrustum cameraFrustum)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `pixelOptical`: Configuration struct for the projection functions\n\n_@param_ `cameraFrustum`: Player's point of view configuration\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"PixelOptical pixelOptical","description":"Configuration struct for the projection functions"},{"name":"CameraFrustum cameraFrustum","description":"Player's point of view configuration"}]},{"name":"setCameraMovementManager","qualifiedname":"Camera::setCameraMovementManager","description":"Set the manager of the camera's properties.","location":{"header":{"uri":"source/camera/Camera.h","line":108,"column":6},"body":{"uri":"source/camera/Camera.c","start":75,"end":86}},"prot":"public","static":false,"definition":"void Camera::setCameraMovementManager","returnType":"void","argsstring":"(Camera this, CameraMovementManager cameraMovementManager)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `cameraMovementManager`: Movement manager\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"CameraMovementManager cameraMovementManager","description":"Movement manager"}]},{"name":"getCameraMovementManager","qualifiedname":"Camera::getCameraMovementManager","description":"Retrieve the camera's current movement manager","location":{"header":{"uri":"source/camera/Camera.h","line":112,"column":23},"body":{"uri":"source/camera/Camera.c","start":88,"end":91}},"prot":"public","static":false,"definition":"CameraMovementManager Camera::getCameraMovementManager","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraMovementManager` `Camera`'s current movement manager\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setCameraEffectManager","qualifiedname":"Camera::setCameraEffectManager","description":"Set the manager of the camera's special effects.","location":{"header":{"uri":"source/camera/Camera.h","line":116,"column":6},"body":{"uri":"source/camera/Camera.c","start":93,"end":104}},"prot":"public","static":false,"definition":"void Camera::setCameraEffectManager","returnType":"void","argsstring":"(Camera this, CameraEffectManager cameraEffectManager)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `cameraEffectManager`: Special effects manager\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"CameraEffectManager cameraEffectManager","description":"Special effects manager"}]},{"name":"getCameraEffectManager","qualifiedname":"Camera::getCameraEffectManager","description":"Retrieve the camera's current special effects manager","location":{"header":{"uri":"source/camera/Camera.h","line":120,"column":21},"body":{"uri":"source/camera/Camera.c","start":106,"end":109}},"prot":"public","static":false,"definition":"CameraEffectManager Camera::getCameraEffectManager","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraEffectManager` `Camera`'s current special effects manager\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setStageSize","qualifiedname":"Camera::setStageSize","description":"Save the stage's size.","location":{"header":{"uri":"source/camera/Camera.h","line":124,"column":6},"body":{"uri":"source/camera/Camera.c","start":116,"end":119}},"prot":"public","static":false,"definition":"void Camera::setStageSize","returnType":"void","argsstring":"(Camera this, Size size)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `size`: `Stage`'s size\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Size size","description":"`Stage`'s size"}]},{"name":"getStageSize","qualifiedname":"Camera::getStageSize","description":"Retrieve the stage's cached size.","location":{"header":{"uri":"source/camera/Camera.h","line":128,"column":6},"body":{"uri":"source/camera/Camera.c","start":111,"end":114}},"prot":"public","static":false,"definition":"Size Camera::getStageSize","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Size` `Stage`'s size\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setFocusEntity","qualifiedname":"Camera::setFocusEntity","description":"Register the entity that the camera must follow.","location":{"header":{"uri":"source/camera/Camera.h","line":132,"column":6},"body":{"uri":"source/camera/Camera.c","start":121,"end":131}},"prot":"public","static":false,"definition":"void Camera::setFocusEntity","returnType":"void","argsstring":"(Camera this, Entity focusEntity)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `focusEntity`: `Entity` to follow\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Entity focusEntity","description":"`Entity` to follow"}]},{"name":"getFocusEntity","qualifiedname":"Camera::getFocusEntity","description":"Retrieve the entity that the camera is following.","location":{"header":{"uri":"source/camera/Camera.h","line":136,"column":8},"body":{"uri":"source/camera/Camera.c","start":133,"end":141}},"prot":"public","static":false,"definition":"Entity Camera::getFocusEntity","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Entity` focusEntity: `Entity` being followed\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"unsetFocusEntity","qualifiedname":"Camera::unsetFocusEntity","description":"Stop following any entity.","location":{"header":{"uri":"source/camera/Camera.h","line":139,"column":6},"body":{"uri":"source/camera/Camera.c","start":143,"end":149}},"prot":"public","static":false,"definition":"void Camera::unsetFocusEntity","returnType":"void","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setFocusEntityPositionDisplacement","qualifiedname":"Camera::setFocusEntityPositionDisplacement","description":"Register a displacement to be added to the camera's position relative to the focus entity's position.","location":{"header":{"uri":"source/camera/Camera.h","line":144,"column":6},"body":{"uri":"source/camera/Camera.c","start":151,"end":157}},"prot":"public","static":false,"definition":"void Camera::setFocusEntityPositionDisplacement","returnType":"void","argsstring":"(Camera this, Vector3D focusEntityPositionDisplacement)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `focusEntityPositionDisplacement`: Displacement vector\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Vector3D focusEntityPositionDisplacement","description":"Displacement vector"}]},{"name":"getFocusEntityPositionDisplacement","qualifiedname":"Camera::getFocusEntityPositionDisplacement","description":"Retrieve the displacement that is added to the camera's position relative to the focus entity's position.","location":{"header":{"uri":"source/camera/Camera.h","line":149,"column":10},"body":{"uri":"source/camera/Camera.c","start":159,"end":167}},"prot":"public","static":false,"definition":"Vector3D Camera::getFocusEntityPositionDisplacement","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` Displacement vector\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setDisplacement","qualifiedname":"Camera::setDisplacement","description":"Set a constant displacement to be added to the camera's position.","location":{"header":{"uri":"source/camera/Camera.h","line":153,"column":6},"body":{"uri":"source/camera/Camera.c","start":169,"end":172}},"prot":"public","static":false,"definition":"void Camera::setDisplacement","returnType":"void","argsstring":"(Camera this, Vector3D)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `displacement`: Displacement vector\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Vector3D","description":"Displacement vector"}]},{"name":"geDisplacement","qualifiedname":"Camera::geDisplacement","description":"Retrieve the constant displacement that is added to the camera's position.","location":{"header":{"uri":"source/camera/Camera.h","line":157,"column":10},"body":{"uri":"source/camera/Camera.c","start":174,"end":177}},"prot":"public","static":false,"definition":"Vector3D Camera::geDisplacement","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` Displacement vector\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setOptical","qualifiedname":"Camera::setOptical","description":"Set the optical configuration values used for projections.","location":{"header":{"uri":"source/camera/Camera.h","line":161,"column":6},"body":{"uri":"source/camera/Camera.c","start":179,"end":184}},"prot":"public","static":false,"definition":"void Camera::setOptical","returnType":"void","argsstring":"(Camera this, Optical optical)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `optical`: configuration struct with the values used for projections\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Optical optical","description":"configuration struct with the values used for projections"}]},{"name":"getOptical","qualifiedname":"Camera::getOptical","description":"Retrieve the optical configuration values used for projections.","location":{"header":{"uri":"source/camera/Camera.h","line":165,"column":9},"body":{"uri":"source/camera/Camera.c","start":186,"end":189}},"prot":"public","static":false,"definition":"Optical Camera::getOptical","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Optical` `Optical` struct with the configuration values used for projections\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setPosition","qualifiedname":"Camera::setPosition","description":"Set the camera's position.","location":{"header":{"uri":"source/camera/Camera.h","line":170,"column":6},"body":{"uri":"source/camera/Camera.c","start":191,"end":202}},"prot":"public","static":false,"definition":"void Camera::setPosition","returnType":"void","argsstring":"(Camera this, Vector3D position, bool cap)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `position`: 3D vector\n\n_@param_ `cap`: Cap the camera's position within the stage's size if true\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Vector3D position","description":"3D vector"},{"name":"bool cap","description":"Cap the camera's position within the stage's size if true"}]},{"name":"translate","qualifiedname":"Camera::translate","description":"Add a displacement the camera's current position.","location":{"header":{"uri":"source/camera/Camera.h","line":175,"column":6},"body":{"uri":"source/camera/Camera.c","start":204,"end":215}},"prot":"public","static":false,"definition":"void Camera::translate","returnType":"void","argsstring":"(Camera this, Vector3D displacement, int32 cap)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `displacement`: Displacement vector\n\n_@param_ `cap`: Cap the camera's position within the stage's size if true\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Vector3D displacement","description":"Displacement vector"},{"name":"int32 cap","description":"Cap the camera's position within the stage's size if true"}]},{"name":"getPosition","qualifiedname":"Camera::getPosition","description":"Retrieve the camera's position.","location":{"header":{"uri":"source/camera/Camera.h","line":179,"column":10},"body":{"uri":"source/camera/Camera.c","start":217,"end":220}},"prot":"public","static":false,"definition":"Vector3D Camera::getPosition","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` `Camera`'s position\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"setRotation","qualifiedname":"Camera::setRotation","description":"Set the camera's rotation.","location":{"header":{"uri":"source/camera/Camera.h","line":183,"column":6},"body":{"uri":"source/camera/Camera.c","start":222,"end":228}},"prot":"public","static":false,"definition":"void Camera::setRotation","returnType":"void","argsstring":"(Camera this, Rotation rotation)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `rotation`: `Rotation` to assign to the camera\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Rotation rotation","description":"`Rotation` to assign to the camera"}]},{"name":"rotate","qualifiedname":"Camera::rotate","description":"Add a rotation the camera's current rotation.","location":{"header":{"uri":"source/camera/Camera.h","line":187,"column":6},"body":{"uri":"source/camera/Camera.c","start":230,"end":236}},"prot":"public","static":false,"definition":"void Camera::rotate","returnType":"void","argsstring":"(Camera this, Rotation rotation)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `rotation`: `Rotation` delta\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"Rotation rotation","description":"`Rotation` delta"}]},{"name":"getRotation","qualifiedname":"Camera::getRotation","description":"Retrieve the camera's rotation.","location":{"header":{"uri":"source/camera/Camera.h","line":191,"column":10},"body":{"uri":"source/camera/Camera.c","start":238,"end":241}},"prot":"public","static":false,"definition":"Rotation Camera::getRotation","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Rotation` `Camera`'s rotation\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"getCameraFrustum","qualifiedname":"Camera::getCameraFrustum","description":"Retrieve the camera's frustum configuration.","location":{"header":{"uri":"source/camera/Camera.h","line":195,"column":15},"body":{"uri":"source/camera/Camera.c","start":243,"end":246}},"prot":"public","static":false,"definition":"CameraFrustum Camera::getCameraFrustum","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraFrustum` `Camera`'s frustum configuration\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"getLastDisplacement","qualifiedname":"Camera::getLastDisplacement","description":"Retrieve the camera's change of position in the last game cycle","location":{"header":{"uri":"source/camera/Camera.h","line":199,"column":10},"body":{"uri":"source/camera/Camera.c","start":248,"end":251}},"prot":"public","static":false,"definition":"Vector3D Camera::getLastDisplacement","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` `Camera`'s change of position in the last game cycle\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"getTransformationFlags","qualifiedname":"Camera::getTransformationFlags","description":"Retrieve the transformation flags that keep track of changes in the camera's position and rotation during the current game cycle.","location":{"header":{"uri":"source/camera/Camera.h","line":204,"column":7},"body":{"uri":"source/camera/Camera.c","start":253,"end":256}},"prot":"public","static":false,"definition":"uint8 Camera::getTransformationFlags","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@return_ `uint8` `Transformation` flags\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"focus","qualifiedname":"Camera::focus","description":"Focus the camera on the focus entity if any.","location":{"header":{"uri":"source/camera/Camera.h","line":207,"column":6},"body":{"uri":"source/camera/Camera.c","start":258,"end":290}},"prot":"public","static":false,"definition":"void Camera::focus","returnType":"void","argsstring":"(Camera this)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"}]},{"name":"startEffect","qualifiedname":"Camera::startEffect","description":"Start a camera effect.","location":{"header":{"uri":"source/camera/Camera.h","line":212,"column":6},"body":{"uri":"source/camera/Camera.c","start":292,"end":305}},"prot":"public","static":false,"definition":"void Camera::startEffect","returnType":"void","argsstring":"(Camera this, int32 effect,...)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `effect`: Code of the effect to start\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"int32 effect","description":"Code of the effect to start"}]},{"name":"stopEffect","qualifiedname":"Camera::stopEffect","description":"Stop a camera effect.","location":{"header":{"uri":"source/camera/Camera.h","line":216,"column":6},"body":{"uri":"source/camera/Camera.c","start":307,"end":317}},"prot":"public","static":false,"definition":"void Camera::stopEffect","returnType":"void","argsstring":"(Camera this, int32 effect)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `effect`: Code of the effect to stop\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"int32 effect","description":"Code of the effect to stop"}]},{"name":"print","qualifiedname":"Camera::print","description":"Print the camera's status.","location":{"header":{"uri":"source/camera/Camera.h","line":221,"column":6},"body":{"uri":"source/camera/Camera.c","start":320,"end":339}},"prot":"public","static":false,"definition":"void Camera::print","returnType":"void","argsstring":"(Camera this, int32 x, int32 y, bool inPixels)","paramDocs":"\n\n_@param_ `this`: Camera instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `inPixels`\n\n","parameters":[{"name":"Camera this","description":"Camera Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"},{"name":"bool inPixels"}]}],"variables":[{"name":"optical","qualifiedname":"Camera::optical","description":"`Optical` configuration values used for projections.","location":{"header":{"uri":"source/camera/Camera.h","line":58,"column":9},"body":{"uri":"source/camera/Camera.h","start":58,"end":58}},"prot":"private","static":false},{"name":"position","qualifiedname":"Camera::position","description":"`Camera`'s position.","location":{"header":{"uri":"source/camera/Camera.h","line":61,"column":10},"body":{"uri":"source/camera/Camera.h","start":61,"end":61}},"prot":"private","static":false},{"name":"displacement","qualifiedname":"Camera::displacement","description":"Displacement applied to the position when it changes.","location":{"header":{"uri":"source/camera/Camera.h","line":64,"column":10},"body":{"uri":"source/camera/Camera.h","start":64,"end":64}},"prot":"private","static":false},{"name":"lastDisplacement","qualifiedname":"Camera::lastDisplacement","description":"Saves the camera's change of position in the last game cycle.","location":{"header":{"uri":"source/camera/Camera.h","line":67,"column":10},"body":{"uri":"source/camera/Camera.h","start":67,"end":67}},"prot":"private","static":false},{"name":"rotation","qualifiedname":"Camera::rotation","description":"`Camera`'s rotation.","location":{"header":{"uri":"source/camera/Camera.h","line":70,"column":10},"body":{"uri":"source/camera/Camera.h","start":70,"end":70}},"prot":"private","static":false},{"name":"invertedRotation","qualifiedname":"Camera::invertedRotation","description":"`Camera`'s rotation's complement.","location":{"header":{"uri":"source/camera/Camera.h","line":73,"column":10},"body":{"uri":"source/camera/Camera.h","start":73,"end":73}},"prot":"private","static":false},{"name":"cameraMovementManager","qualifiedname":"Camera::cameraMovementManager","description":"`Camera`'s movement manager.","location":{"header":{"uri":"source/camera/Camera.h","line":76,"column":23},"body":{"uri":"source/camera/Camera.h","start":76,"end":76}},"prot":"private","static":false},{"name":"cameraEffectManager","qualifiedname":"Camera::cameraEffectManager","description":"`Camera`'s special effects manager.","location":{"header":{"uri":"source/camera/Camera.h","line":79,"column":21},"body":{"uri":"source/camera/Camera.h","start":79,"end":79}},"prot":"private","static":false},{"name":"stageSize","qualifiedname":"Camera::stageSize","description":"Cached stage's size used to optionally limit the camera's movement.","location":{"header":{"uri":"source/camera/Camera.h","line":82,"column":6},"body":{"uri":"source/camera/Camera.h","start":82,"end":82}},"prot":"private","static":false},{"name":"cameraFrustum","qualifiedname":"Camera::cameraFrustum","description":"`Camera`'s frustum configuration.","location":{"header":{"uri":"source/camera/Camera.h","line":85,"column":15},"body":{"uri":"source/camera/Camera.h","start":85,"end":85}},"prot":"private","static":false},{"name":"transformationFlags","qualifiedname":"Camera::transformationFlags","description":"`Transformation` flags to keep track of changes in the camera's position and rotation during the current game cycle","location":{"header":{"uri":"source/camera/Camera.h","line":89,"column":7},"body":{"uri":"source/camera/Camera.h","start":89,"end":89}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"CameraEffectManager":{"__contributor":"core","name":"CameraEffectManager","base":"ListenerObject","description":"Class `CameraEffectManager`\n\nInherits from `ListenerObject`\n\nManages camera's special effects, brightness transitions, etc.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":57,"column":11},"body":{"uri":"source/camera/CameraEffectManager.h","start":58,"end":107}},"methods":[{"name":"getInstance","qualifiedname":"CameraEffectManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":78,"column":28}},"prot":"public","static":true,"definition":"static CameraEffectManager CameraEffectManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `CameraEffectManager` singleton\n\n","parameters":[]},{"name":"constructor","qualifiedname":"CameraEffectManager::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":81,"column":6},"body":{"uri":"source/camera/CameraEffectManager.c","start":40,"end":51}},"prot":"public","static":false,"definition":"void CameraEffectManager::constructor","returnType":"void","argsstring":"(CameraEffectManager this)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"}]},{"name":"handleMessage","qualifiedname":"CameraEffectManager::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":86,"column":15},"body":{"uri":"source/camera/CameraEffectManager.c","start":62,"end":71}},"prot":"public","static":false,"definition":"bool CameraEffectManager::handleMessage","returnType":"override ","argsstring":"(CameraEffectManager this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]},{"name":"reset","qualifiedname":"CameraEffectManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":89,"column":6},"body":{"uri":"source/camera/CameraEffectManager.c","start":73,"end":78}},"prot":"public","static":false,"definition":"void CameraEffectManager::reset","returnType":"void","argsstring":"(CameraEffectManager this)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"}]},{"name":"setFadeIncrement","qualifiedname":"CameraEffectManager::setFadeIncrement","description":"Set the fade increment to apply on the next effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":93,"column":6},"body":{"uri":"source/camera/CameraEffectManager.c","start":80,"end":83}},"prot":"public","static":false,"definition":"void CameraEffectManager::setFadeIncrement","returnType":"void","argsstring":"(CameraEffectManager this, uint8 fadeEffectIncrement)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `fadeEffectIncrement`: Fade increment\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"},{"name":"uint8 fadeEffectIncrement","description":"Fade increment"}]},{"name":"getDefaultBrightness","qualifiedname":"CameraEffectManager::getDefaultBrightness","description":"Retrieve the default brighness values for the current stage","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":97,"column":12},"body":{"uri":"source/camera/CameraEffectManager.c","start":85,"end":108}},"prot":"public","static":false,"definition":"Brightness CameraEffectManager::getDefaultBrightness","argsstring":"(CameraEffectManager this)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n_@return_ `Brightness` Struct with the brightness levels\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"}]},{"name":"startEffect","qualifiedname":"CameraEffectManager::startEffect","description":"Start a camera effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":102,"column":14},"body":{"uri":"source/camera/CameraEffectManager.c","start":110,"end":141}},"prot":"public","static":false,"definition":"void CameraEffectManager::startEffect","returnType":"void","argsstring":"(CameraEffectManager this, int32 effect, va_list args)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `effect`: Code of the effect to start\n\n_@param_ `args`: Variable arguments list depending on the effect to start\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"},{"name":"int32 effect","description":"Code of the effect to start"},{"name":"va_list args","description":"Variable arguments list depending on the effect to start"}]},{"name":"stopEffect","qualifiedname":"CameraEffectManager::stopEffect","description":"Stop a camera effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":106,"column":14},"body":{"uri":"source/camera/CameraEffectManager.c","start":143,"end":152}},"prot":"public","static":false,"definition":"void CameraEffectManager::stopEffect","returnType":"void","argsstring":"(CameraEffectManager this, int32 effect)","paramDocs":"\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `effect`: Code of the effect to stop\n\n","parameters":[{"name":"CameraEffectManager this","description":"CameraEffectManager Instance"},{"name":"int32 effect","description":"Code of the effect to stop"}]}],"variables":[{"name":"fxFadeTargetBrightness","qualifiedname":"CameraEffectManager::fxFadeTargetBrightness","description":"Target brightness for the current fade effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":60,"column":12},"body":{"uri":"source/camera/CameraEffectManager.h","start":60,"end":60}},"prot":"private","static":false},{"name":"fxFadeCallbackScope","qualifiedname":"CameraEffectManager::fxFadeCallbackScope","description":"Callback scope for the current fade effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":63,"column":16},"body":{"uri":"source/camera/CameraEffectManager.h","start":63,"end":63}},"prot":"private","static":false},{"name":"fxFadeDelay","qualifiedname":"CameraEffectManager::fxFadeDelay","description":"Delay for the current fade effect.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":66,"column":7},"body":{"uri":"source/camera/CameraEffectManager.h","start":66,"end":66}},"prot":"private","static":false},{"name":"fadeEffectIncrement","qualifiedname":"CameraEffectManager::fadeEffectIncrement","description":"Fade increment.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":69,"column":7},"body":{"uri":"source/camera/CameraEffectManager.h","start":69,"end":69}},"prot":"private","static":false},{"name":"startingANewEffect","qualifiedname":"CameraEffectManager::startingANewEffect","description":"Flag to signal that the current event listener has to be removed when the effect is complete.","location":{"header":{"uri":"source/camera/CameraEffectManager.h","line":72,"column":6},"body":{"uri":"source/camera/CameraEffectManager.h","start":72,"end":72}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"CameraMovementManager":{"__contributor":"core","name":"CameraMovementManager","base":"ListenerObject","description":"Class `CameraMovementManager`\n\nInherits from `ListenerObject`\n\nManages camera's movement effects, like shaking, etc.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":40,"column":11},"body":{"uri":"source/camera/CameraMovementManager.h","start":41,"end":94}},"methods":[{"name":"getInstance","qualifiedname":"CameraMovementManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":61,"column":30}},"prot":"public","static":true,"definition":"static CameraMovementManager CameraMovementManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `CameraMovementManager` singleton\n\n","parameters":[]},{"name":"constructor","qualifiedname":"CameraMovementManager::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":64,"column":6},"body":{"uri":"source/camera/CameraMovementManager.c","start":35,"end":41}},"prot":"public","static":false,"definition":"void CameraMovementManager::constructor","returnType":"void","argsstring":"(CameraMovementManager this)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"}]},{"name":"reset","qualifiedname":"CameraMovementManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":67,"column":6},"body":{"uri":"source/camera/CameraMovementManager.c","start":49,"end":54}},"prot":"public","static":false,"definition":"void CameraMovementManager::reset","returnType":"void","argsstring":"(CameraMovementManager this)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"}]},{"name":"setFocusEntity","qualifiedname":"CameraMovementManager::setFocusEntity","description":"Register the entity that the camera must follow.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":71,"column":6},"body":{"uri":"source/camera/CameraMovementManager.c","start":56,"end":68}},"prot":"public","static":false,"definition":"void CameraMovementManager::setFocusEntity","returnType":"void","argsstring":"(CameraMovementManager this, Entity focusEntity)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `focusEntity`: `Entity` to follow\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"},{"name":"Entity focusEntity","description":"`Entity` to follow"}]},{"name":"getFocusEntity","qualifiedname":"CameraMovementManager::getFocusEntity","description":"Retrieve the entity that the camera is following.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":75,"column":8},"body":{"uri":"source/camera/CameraMovementManager.c","start":70,"end":73}},"prot":"public","static":false,"definition":"Entity CameraMovementManager::getFocusEntity","argsstring":"(CameraMovementManager this)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `Entity` focusEntity: `Entity` being followed\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"}]},{"name":"setFocusEntityPositionDisplacement","qualifiedname":"CameraMovementManager::setFocusEntityPositionDisplacement","description":"Register a displacement to be added to the camera's position relative to the focus entity's position.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":80,"column":6},"body":{"uri":"source/camera/CameraMovementManager.c","start":75,"end":84}},"prot":"public","static":false,"definition":"void CameraMovementManager::setFocusEntityPositionDisplacement","returnType":"void","argsstring":"(CameraMovementManager this, const Vector3D *focusEntityPositionDisplacement)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `focusEntityPositionDisplacement`: Displacement vector\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"},{"name":"const Vector3D *focusEntityPositionDisplacement","description":"Displacement vector"}]},{"name":"getFocusEntityPositionDisplacement","qualifiedname":"CameraMovementManager::getFocusEntityPositionDisplacement","description":"Retrieve the displacement that is added to the camera's position relative to the focus entity's position.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":85,"column":16},"body":{"uri":"source/camera/CameraMovementManager.c","start":86,"end":89}},"prot":"public","static":false,"definition":"const Vector3D * CameraMovementManager::getFocusEntityPositionDisplacement","returnType":["const "," *"],"argsstring":"(CameraMovementManager this)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `const` Displacement vector\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"}]},{"name":"getLastCameraDisplacement","qualifiedname":"CameraMovementManager::getLastCameraDisplacement","description":"Retrieve the camera's change of position in the last game cycle","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":89,"column":10}},"prot":"public","static":false,"definition":"Vector3D CameraMovementManager::getLastCameraDisplacement","argsstring":"(CameraMovementManager this)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `Vector3D` `Camera`'s change of position in the last game cycle\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"}]},{"name":"focus","qualifiedname":"CameraMovementManager::focus","description":"Focus the camera on the focus entity if any.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":93,"column":18},"body":{"uri":"source/camera/CameraMovementManager.c","start":91,"end":114}},"prot":"public","static":false,"definition":"Vector3D CameraMovementManager::focus","argsstring":"(CameraMovementManager this, Camera camera)","paramDocs":"\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `camera`: `Camera` to focus\n\n","parameters":[{"name":"CameraMovementManager this","description":"CameraMovementManager Instance"},{"name":"Camera camera","description":"`Camera` to focus"}]}],"variables":[{"name":"focusEntityPositionDisplacement","qualifiedname":"CameraMovementManager::focusEntityPositionDisplacement","description":"Displacement to the focus entity's position to focus the camera on","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":46,"column":10},"body":{"uri":"source/camera/CameraMovementManager.h","start":46,"end":46}},"prot":"protected","static":false},{"name":"focusEntity","qualifiedname":"CameraMovementManager::focusEntity","description":"`Entity` to focus on the camera.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":49,"column":8},"body":{"uri":"source/camera/CameraMovementManager.h","start":49,"end":49}},"prot":"protected","static":false},{"name":"focusEntityPosition","qualifiedname":"CameraMovementManager::focusEntityPosition","description":"Cache of the focus entity's position pointer.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":52,"column":16},"body":{"uri":"source/camera/CameraMovementManager.h","start":52,"end":52}},"prot":"protected","static":false},{"name":"focusEntityRotation","qualifiedname":"CameraMovementManager::focusEntityRotation","description":"Cache of the focus entity's rotation pointer.","location":{"header":{"uri":"source/camera/CameraMovementManager.h","line":55,"column":16},"body":{"uri":"source/camera/CameraMovementManager.h","start":55,"end":55}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"CharSet":{"__contributor":"core","name":"CharSet","base":"ListenerObject","description":"Class `CharSet`\n\nInherits from `ListenerObject`\n\nManages the color data of tile array and writes it to VRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":79,"column":1},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":80,"end":161}},"methods":[{"name":"constructor","qualifiedname":"CharSet::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":103,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":28,"end":42}},"prot":"public","static":false,"definition":"void CharSet::constructor","returnType":"void","argsstring":"(CharSet this, CharSetSpec *charSetSpec, uint16 offset)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charSetSpec`: Spec to use in the construction of the char set\n\n_@param_ `offset`: Offset in CHAR space where the block allocated for this char set starts\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"CharSetSpec *charSetSpec","description":"Spec to use in the construction of the char set"},{"name":"uint16 offset","description":"Offset in CHAR space where the block allocated for this char set starts"}]},{"name":"increaseUsageCount","qualifiedname":"CharSet::increaseUsageCount","description":"Increase the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":106,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":56,"end":59}},"prot":"public","static":false,"definition":"void CharSet::increaseUsageCount","returnType":"void","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"decreaseUsageCount","qualifiedname":"CharSet::decreaseUsageCount","description":"Decrease the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":109,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":61,"end":69}},"prot":"public","static":false,"definition":"bool CharSet::decreaseUsageCount","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"getUsageCount","qualifiedname":"CharSet::getUsageCount","description":"Retrieve the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":113,"column":7},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":71,"end":74}},"prot":"public","static":false,"definition":"uint8 CharSet::getUsageCount","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint8` Usage count\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"isShared","qualifiedname":"CharSet::isShared","description":"Check if the char set is shared.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":117,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":76,"end":79}},"prot":"public","static":false,"definition":"bool CharSet::isShared","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `bool` True if the char set is share; false otherwise\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"isOptimized","qualifiedname":"CharSet::isOptimized","description":"Check if the char set is optimized.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":121,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":81,"end":84}},"prot":"public","static":false,"definition":"bool CharSet::isOptimized","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `bool` True if the char set is optimized; false otherwise\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"setOffset","qualifiedname":"CharSet::setOffset","description":"Set the offset within CHAR space.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":125,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":86,"end":98}},"prot":"public","static":false,"definition":"void CharSet::setOffset","returnType":"void","argsstring":"(CharSet this, uint16 offset)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `offset`: Offset within CHAR space\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"uint16 offset","description":"Offset within CHAR space"}]},{"name":"getOffset","qualifiedname":"CharSet::getOffset","description":"Retrieve the offset within CHAR space.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":129,"column":8},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":100,"end":103}},"prot":"public","static":false,"definition":"uint16 CharSet::getOffset","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint16` Offset within CHAR space\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"getSpec","qualifiedname":"CharSet::getSpec","description":"Retrieve the spec used in the construction of the char set.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":133,"column":13},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":105,"end":108}},"prot":"public","static":false,"definition":"CharSetSpec * CharSet::getSpec","returnType":" *","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `CharSetSpec` Spec used in the construction of the char set\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"getNumberOfChars","qualifiedname":"CharSet::getNumberOfChars","description":"Retrieve the number of CHARs used by the char set.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":137,"column":8},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":110,"end":113}},"prot":"public","static":false,"definition":"uint16 CharSet::getNumberOfChars","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint16` Number of CHARs used by the char set\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]},{"name":"addChar","qualifiedname":"CharSet::addChar","description":"Add the color provided color data to a CHAR.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":142,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":115,"end":127}},"prot":"public","static":false,"definition":"void CharSet::addChar","returnType":"void","argsstring":"(CharSet this, uint32 charToAddTo, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToAddTo`: Index of the CHAR to add to\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"uint32 charToAddTo","description":"Index of the CHAR to add to"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putChar","qualifiedname":"CharSet::putChar","description":"Replace the color provided color data to a CHAR.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":147,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":129,"end":140}},"prot":"public","static":false,"definition":"void CharSet::putChar","returnType":"void","argsstring":"(CharSet this, uint32 charToReplace, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToReplace`: Index of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"uint32 charToReplace","description":"Index of the CHAR to replace"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putPixel","qualifiedname":"CharSet::putPixel","description":"Replace a pixel in a CHAR.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":153,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":142,"end":162}},"prot":"public","static":false,"definition":"void CharSet::putPixel","returnType":"void","argsstring":"(CharSet this, const uint32 charToReplace, const Pixel *charSetPixel, BYTE newPixelColor)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToReplace`: Index of the CHAR to replace\n\n_@param_ `charSetPixel`: Coordinate in CHAR space of the CHAR to replace\n\n_@param_ `newPixelColor`: Color data for the pixel\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"const uint32 charToReplace","description":"Index of the CHAR to replace"},{"name":"const Pixel *charSetPixel","description":"Coordinate in CHAR space of the CHAR to replace"},{"name":"BYTE newPixelColor","description":"Color data for the pixel"}]},{"name":"setFrame","qualifiedname":"CharSet::setFrame","description":"Set the current frame (frame * number of CHARs + number of CHARs) to write to CHAR memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":157,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":164,"end":183}},"prot":"public","static":false,"definition":"void CharSet::setFrame","returnType":"void","argsstring":"(CharSet this, uint16 frame)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n_@param_ `frame`: The frame to write to CHAR memory\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"},{"name":"uint16 frame","description":"The frame to write to CHAR memory"}]},{"name":"write","qualifiedname":"CharSet::write","description":"Write the tile graphical data to VRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":160,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.c","start":185,"end":243}},"prot":"public","static":false,"definition":"void CharSet::write","returnType":"void","argsstring":"(CharSet this)","paramDocs":"\n\n_@param_ `this`: CharSet instance\n\n","parameters":[{"name":"CharSet this","description":"CharSet Instance"}]}],"variables":[{"name":"charSetSpec","qualifiedname":"CharSet::charSetSpec","description":"Spec used in the construction of the char set","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":84,"column":13},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":84,"end":84}},"prot":"protected","static":false},{"name":"tilesDisplacement","qualifiedname":"CharSet::tilesDisplacement","description":"","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":87,"column":8},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":87,"end":87}},"prot":"protected","static":false},{"name":"offset","qualifiedname":"CharSet::offset","description":"Offset in CHAR space where the block allocated for this char set starts.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":90,"column":8},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":90,"end":90}},"prot":"protected","static":false},{"name":"written","qualifiedname":"CharSet::written","description":"If true the graphical data is written to VRAM; false otherwise.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":93,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":93,"end":93}},"prot":"protected","static":false},{"name":"usageCount","qualifiedname":"CharSet::usageCount","description":"Number of references to this char set instance.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":96,"column":7},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":96,"end":96}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"CharSetROMSpec","qualifiedname":"CharSet::CharSetROMSpec","description":"A `CharSet` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","line":65,"column":27},"body":{"uri":"source/graphics/2d/Textures/Char/CharSet.h","start":65,"end":65}},"prot":"public","static":false}]},"CharSetManager":{"__contributor":"core","name":"CharSetManager","base":"Object","description":"Class `CharSetManager`\n\nInherits from `Object`\n\nManages char sets and CHAR memory allocation.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":39,"column":11},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","start":40,"end":95}},"methods":[{"name":"getInstance","qualifiedname":"CharSetManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":53,"column":23}},"prot":"public","static":true,"definition":"static CharSetManager CharSetManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `CharSetManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"CharSetManager::reset","description":"Empties internal virtual list of registered fonts.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":56,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":36,"end":44}},"prot":"public","static":false,"definition":"void CharSetManager::reset","returnType":"void","argsstring":"(CharSetManager this)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"}]},{"name":"loadCharSets","qualifiedname":"CharSetManager::loadCharSets","description":"Load char sets in function of the provided array of specs.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":60,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":46,"end":58}},"prot":"public","static":false,"definition":"void CharSetManager::loadCharSets","returnType":"void","argsstring":"(CharSetManager this, const CharSetSpec **charSetSpecs)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSetSpecs`: Array of char set specs in function of which to load char sets\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"},{"name":"const CharSetSpec **charSetSpecs","description":"Array of char set specs in function of which to load char sets"}]},{"name":"getCharSet","qualifiedname":"CharSetManager::getCharSet","description":"Retrieve a char set initialized with the provided spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":65,"column":9},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":60,"end":90}},"prot":"public","static":false,"definition":"CharSet CharSetManager::getCharSet","argsstring":"(CharSetManager this, CharSetSpec *charSetSpec)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSetSpec`: Spec to use to initilize the desired char set\n\n_@return_ `CharSet` Char set initialized with the provided spec\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"},{"name":"CharSetSpec *charSetSpec","description":"Spec to use to initilize the desired char set"}]},{"name":"releaseCharSet","qualifiedname":"CharSetManager::releaseCharSet","description":"Release a char set.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":70,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":92,"end":116}},"prot":"public","static":false,"definition":"bool CharSetManager::releaseCharSet","argsstring":"(CharSetManager this, CharSet charSet)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSet`: Char set to release\n\n_@return_ `bool` True if the char set is successfully deleted; false otherwise\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"},{"name":"CharSet charSet","description":"Char set to release"}]},{"name":"writeCharSets","qualifiedname":"CharSetManager::writeCharSets","description":"Write graphical data to VRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":73,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":290,"end":300}},"prot":"public","static":false,"definition":"void CharSetManager::writeCharSets","returnType":"void","argsstring":"(CharSetManager this)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"}]},{"name":"defragment","qualifiedname":"CharSetManager::defragment","description":"Defragment CHAR space.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":77,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":118,"end":157}},"prot":"public","static":false,"definition":"void CharSetManager::defragment","returnType":"void","argsstring":"(CharSetManager this, bool deferred)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `deferred`\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"},{"name":"bool deferred"}]},{"name":"getTotalUsedChars","qualifiedname":"CharSetManager::getTotalUsedChars","description":"Return the total number of used CHARs in CHAR space.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":81,"column":7},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":159,"end":165}},"prot":"public","static":false,"definition":"int32 CharSetManager::getTotalUsedChars","argsstring":"(CharSetManager this)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of used CHARs in CHAR space\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"}]},{"name":"getTotalFreeChars","qualifiedname":"CharSetManager::getTotalFreeChars","description":"Return the total number of free CHARs in CHAR space.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":85,"column":7},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":167,"end":170}},"prot":"public","static":false,"definition":"int32 CharSetManager::getTotalFreeChars","argsstring":"(CharSetManager this)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of free CHARs in CHAR space\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"}]},{"name":"getTotalCharSets","qualifiedname":"CharSetManager::getTotalCharSets","description":"Return the total number of char sets.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":89,"column":7},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":172,"end":175}},"prot":"public","static":false,"definition":"int32 CharSetManager::getTotalCharSets","argsstring":"(CharSetManager this)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of char sets\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"}]},{"name":"print","qualifiedname":"CharSetManager::print","description":"Print the manager's status.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":94,"column":6},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.c","start":178,"end":188}},"prot":"public","static":false,"definition":"void CharSetManager::print","returnType":"void","argsstring":"(CharSetManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"CharSetManager this","description":"CharSetManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"charSets","qualifiedname":"CharSetManager::charSets","description":"Allocated char sets with a block in CHAR memory allocated to them","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":44,"column":13},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"freedOffset","qualifiedname":"CharSetManager::freedOffset","description":"Start offset in CHAR space when free memory starts.","location":{"header":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","line":47,"column":8},"body":{"uri":"source/graphics/2d/Textures/Char/CharSetManager.h","start":47,"end":47}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Clock":{"__contributor":"core","name":"Clock","base":"ListenerObject","description":"Class `Clock`\n\nInherits from `ListenerObject`\n\nImplements simple clock that can keep track of time and print itself.","location":{"header":{"uri":"source/base/Clock.h","line":45,"column":1},"body":{"uri":"source/base/Clock.h","start":46,"end":141}},"methods":[{"name":"printTime","qualifiedname":"Clock::printTime","description":"Print time in MM::SS:XX format","location":{"header":{"uri":"source/base/Clock.h","line":69,"column":13},"body":{"uri":"source/base/Clock.c","start":35,"end":70}},"prot":"public","static":true,"definition":"static void Clock::printTime","returnType":"void","argsstring":"(uint32 milliseconds, int32 x, int32 y, const char *font, uint32 precision)","paramDocs":"\n\n_@param_ `milliseconds`: Total time to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n_@param_ `precision`: Precision of the second decimals\n\n","parameters":[{"name":"int32 x","description":"Total time to print"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"name":"const char *font","description":"Screen y coordinate where to print"},{"name":"uint32 precision","description":"Pointer to font's name to use"},{"description":"Precision of the second decimals"}]},{"name":"printDeciseconds","qualifiedname":"Clock::printDeciseconds","description":"Print the total deciseconds in the elapsed time provided.","location":{"header":{"uri":"source/base/Clock.h","line":77,"column":13},"body":{"uri":"source/base/Clock.c","start":72,"end":78}},"prot":"public","static":true,"definition":"static void Clock::printDeciseconds","returnType":"void","argsstring":"(uint32 milliSeconds, int32 x, int32 y, const char *font)","paramDocs":"\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n","parameters":[{"name":"int32 x"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"name":"const char *font","description":"Screen y coordinate where to print"},{"description":"Pointer to font's name to use"}]},{"name":"printCentiseconds","qualifiedname":"Clock::printCentiseconds","description":"Print the total centiseconds in the elapsed time provided.","location":{"header":{"uri":"source/base/Clock.h","line":85,"column":13},"body":{"uri":"source/base/Clock.c","start":80,"end":94}},"prot":"public","static":true,"definition":"static void Clock::printCentiseconds","returnType":"void","argsstring":"(uint32 milliSeconds, int32 x, int32 y, const char *font)","paramDocs":"\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n","parameters":[{"name":"int32 x"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"name":"const char *font","description":"Screen y coordinate where to print"},{"description":"Pointer to font's name to use"}]},{"name":"printMilliseconds","qualifiedname":"Clock::printMilliseconds","description":"Print the total milliseconds in the elapsed time provided.","location":{"header":{"uri":"source/base/Clock.h","line":93,"column":13},"body":{"uri":"source/base/Clock.c","start":96,"end":115}},"prot":"public","static":true,"definition":"static void Clock::printMilliseconds","returnType":"void","argsstring":"(uint32 milliSeconds, int32 x, int32 y, const char *font)","paramDocs":"\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n","parameters":[{"name":"int32 x"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"name":"const char *font","description":"Screen y coordinate where to print"},{"description":"Pointer to font's name to use"}]},{"name":"constructor","qualifiedname":"Clock::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/Clock.h","line":98,"column":6},"body":{"uri":"source/base/Clock.c","start":123,"end":140}},"prot":"public","static":false,"definition":"void Clock::constructor","returnType":"void","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"destructor","qualifiedname":"Clock::destructor","description":"Class' destructor.","location":{"header":{"uri":"source/base/Clock.h","line":101,"column":6},"body":{"uri":"source/base/Clock.c","start":142,"end":150}},"prot":"public","static":false,"definition":"void Clock::destructor","returnType":"void","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"start","qualifiedname":"Clock::start","description":"Start the clock.","location":{"header":{"uri":"source/base/Clock.h","line":104,"column":6},"body":{"uri":"source/base/Clock.c","start":152,"end":156}},"prot":"public","static":false,"definition":"void Clock::start","returnType":"void","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"stop","qualifiedname":"Clock::stop","description":"Stop the clock.","location":{"header":{"uri":"source/base/Clock.h","line":107,"column":6},"body":{"uri":"source/base/Clock.c","start":158,"end":162}},"prot":"public","static":false,"definition":"void Clock::stop","returnType":"void","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"pause","qualifiedname":"Clock::pause","description":"Pause/unpause the clock","location":{"header":{"uri":"source/base/Clock.h","line":111,"column":6},"body":{"uri":"source/base/Clock.c","start":164,"end":167}},"prot":"public","static":false,"definition":"void Clock::pause","returnType":"void","argsstring":"(Clock this, bool pause)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@param_ `pause`: Flag to set the paused state of the clock\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"},{"name":"bool pause","description":"Flag to set the paused state of the clock"}]},{"name":"reset","qualifiedname":"Clock::reset","description":"Reset the clock's elapsed time.","location":{"header":{"uri":"source/base/Clock.h","line":114,"column":6},"body":{"uri":"source/base/Clock.c","start":169,"end":174}},"prot":"public","static":false,"definition":"void Clock::reset","returnType":"void","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"update","qualifiedname":"Clock::update","description":"Update the clock's elapsed time","location":{"header":{"uri":"source/base/Clock.h","line":118,"column":6},"body":{"uri":"source/base/Clock.c","start":176,"end":208}},"prot":"public","static":false,"definition":"void Clock::update","returnType":"void","argsstring":"(Clock this, uint32 elapsedMilliseconds)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@param_ `elapsedMilliseconds`: Milliseconds that have passed since the previous call to the update method\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"},{"name":"uint32 elapsedMilliseconds","description":"Milliseconds that have passed since the previous call to the update method"}]},{"name":"isPaused","qualifiedname":"Clock::isPaused","description":"Retrieve the clock's paused state","location":{"header":{"uri":"source/base/Clock.h","line":122,"column":6},"body":{"uri":"source/base/Clock.c","start":210,"end":213}},"prot":"public","static":false,"definition":"bool Clock::isPaused","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@return_ `bool` True if the clock is paused\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"getMilliseconds","qualifiedname":"Clock::getMilliseconds","description":"Retrieve the elapsed milliseconds.","location":{"header":{"uri":"source/base/Clock.h","line":126,"column":8},"body":{"uri":"source/base/Clock.c","start":215,"end":218}},"prot":"public","static":false,"definition":"uint32 Clock::getMilliseconds","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed milliseconds\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"getMinutes","qualifiedname":"Clock::getMinutes","description":"Retrieve the elapsed minutes.","location":{"header":{"uri":"source/base/Clock.h","line":130,"column":8},"body":{"uri":"source/base/Clock.c","start":225,"end":228}},"prot":"public","static":false,"definition":"uint32 Clock::getMinutes","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed minutes\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"getSeconds","qualifiedname":"Clock::getSeconds","description":"Retrieve the elapsed seconds.","location":{"header":{"uri":"source/base/Clock.h","line":134,"column":8},"body":{"uri":"source/base/Clock.c","start":220,"end":223}},"prot":"public","static":false,"definition":"uint32 Clock::getSeconds","argsstring":"(Clock this)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed seconds\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"}]},{"name":"print","qualifiedname":"Clock::print","description":"Print the clock's time in MM::SS:XX format","location":{"header":{"uri":"source/base/Clock.h","line":140,"column":6},"body":{"uri":"source/base/Clock.c","start":230,"end":233}},"prot":"public","static":false,"definition":"void Clock::print","returnType":"void","argsstring":"(Clock this, int32 col, int32 row, const char *font)","paramDocs":"\n\n_@param_ `this`: Clock instance\n\n_@param_ `col`\n\n_@param_ `row`\n\n_@param_ `font`: Pointer to font's name to use\n\n","parameters":[{"name":"Clock this","description":"Clock Instance"},{"name":"int32 col"},{"name":"int32 row"},{"name":"const char *font","description":"Pointer to font's name to use"}]}],"variables":[{"name":"milliseconds","qualifiedname":"Clock::milliseconds","description":"Elapsed time in milliseconds","location":{"header":{"uri":"source/base/Clock.h","line":50,"column":8},"body":{"uri":"source/base/Clock.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"previousSecond","qualifiedname":"Clock::previousSecond","description":"Previous elapsed second.","location":{"header":{"uri":"source/base/Clock.h","line":53,"column":8},"body":{"uri":"source/base/Clock.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"previousMinute","qualifiedname":"Clock::previousMinute","description":"Previous elapsed minute.","location":{"header":{"uri":"source/base/Clock.h","line":56,"column":8},"body":{"uri":"source/base/Clock.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"paused","qualifiedname":"Clock::paused","description":"Flag to signal if the clock is paused or not.","location":{"header":{"uri":"source/base/Clock.h","line":59,"column":6},"body":{"uri":"source/base/Clock.h","start":59,"end":59}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"ClockManager":{"__contributor":"core","name":"ClockManager","base":"Object","description":"Class `ClockManager`\n\nInherits from `Object`\n\nManages the instances of `Clock`.","location":{"header":{"uri":"source/base/ClockManager.h","line":40,"column":11},"body":{"uri":"source/base/ClockManager.h","start":41,"end":67}},"methods":[{"name":"getInstance","qualifiedname":"ClockManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/base/ClockManager.h","line":51,"column":21}},"prot":"public","static":true,"definition":"static ClockManager ClockManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `ClockManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"ClockManager::reset","description":"Reset all the registered clocks.","location":{"header":{"uri":"source/base/ClockManager.h","line":54,"column":6},"body":{"uri":"source/base/ClockManager.c","start":35,"end":46}},"prot":"public","static":false,"definition":"void ClockManager::reset","returnType":"void","argsstring":"(ClockManager this)","paramDocs":"\n\n_@param_ `this`: ClockManager instance\n\n","parameters":[{"name":"ClockManager this","description":"ClockManager Instance"}]},{"name":"register","qualifiedname":"ClockManager::register","description":"Register a new clock","location":{"header":{"uri":"source/base/ClockManager.h","line":58,"column":6},"body":{"uri":"source/base/ClockManager.c","start":48,"end":54}},"prot":"public","static":false,"definition":"void ClockManager::register","returnType":"void","argsstring":"(ClockManager this, Clock clock)","paramDocs":"\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `clock`: `Clock` to register\n\n","parameters":[{"name":"ClockManager this","description":"ClockManager Instance"},{"name":"Clock clock","description":"`Clock` to register"}]},{"name":"unregister","qualifiedname":"ClockManager::unregister","description":"Unregister clock.","location":{"header":{"uri":"source/base/ClockManager.h","line":62,"column":6},"body":{"uri":"source/base/ClockManager.c","start":56,"end":59}},"prot":"public","static":false,"definition":"void ClockManager::unregister","returnType":"void","argsstring":"(ClockManager this, Clock clock)","paramDocs":"\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `clock`: `Clock` to unregister\n\n","parameters":[{"name":"ClockManager this","description":"ClockManager Instance"},{"name":"Clock clock","description":"`Clock` to unregister"}]},{"name":"update","qualifiedname":"ClockManager::update","description":"Update the clocks.","location":{"header":{"uri":"source/base/ClockManager.h","line":66,"column":6},"body":{"uri":"source/base/ClockManager.c","start":61,"end":72}},"prot":"public","static":false,"definition":"void ClockManager::update","returnType":"void","argsstring":"(ClockManager this, uint32 elapsedMilliseconds)","paramDocs":"\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `elapsedMilliseconds`: Milliseconds that passed since the previous call to this method\n\n","parameters":[{"name":"ClockManager this","description":"ClockManager Instance"},{"name":"uint32 elapsedMilliseconds","description":"Milliseconds that passed since the previous call to this method"}]}],"variables":[{"name":"clocks","qualifiedname":"ClockManager::clocks","description":"Linked list of Clocks","location":{"header":{"uri":"source/base/ClockManager.h","line":45,"column":13},"body":{"uri":"source/base/ClockManager.h","start":45,"end":45}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Collider":{"__contributor":"core","name":"Collider","base":"Component","description":"Class `Collider`\n\nInherits from `Component`\n\nChecks collisions against other colliders.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":175,"column":9},"body":{"uri":"source/physics/Colliders/Collider.h","start":176,"end":293}},"methods":[{"name":"constructor","qualifiedname":"Collider::constructor","description":"Class' constructor","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":215,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":49,"end":69}},"prot":"public","static":false,"definition":"void Collider::constructor","returnType":"void","argsstring":"(Collider this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `owner`\n\n_@param_ `colliderSpec`\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"SpatialObject owner"},{"name":"const ColliderSpec *colliderSpec"}]},{"name":"handleMessage","qualifiedname":"Collider::handleMessage","description":"Process a `Telegram`.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":220,"column":15},"body":{"uri":"source/physics/Colliders/Collider.c","start":112,"end":128}},"prot":"public","static":false,"definition":"bool Collider::handleMessage","returnType":"override ","argsstring":"(Collider this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"Telegram telegram","description":"`Telegram` to process"}]},{"name":"enable","qualifiedname":"Collider::enable","description":"Enable the collider for collision checks.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":223,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":130,"end":138}},"prot":"public","static":false,"definition":"void Collider::enable","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"disable","qualifiedname":"Collider::disable","description":"Disable the collider for collision checks.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":226,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":140,"end":148}},"prot":"public","static":false,"definition":"void Collider::disable","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"setLayers","qualifiedname":"Collider::setLayers","description":"Set the layers in which this collider lives.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":230,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":150,"end":153}},"prot":"public","static":false,"definition":"void Collider::setLayers","returnType":"void","argsstring":"(Collider this, uint32 layers)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `layers`: Layers in which the collider must live\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"uint32 layers","description":"Layers in which the collider must live"}]},{"name":"getLayers","qualifiedname":"Collider::getLayers","description":"Retrieve the layers in which this collider lives.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":234,"column":8},"body":{"uri":"source/physics/Colliders/Collider.c","start":155,"end":158}},"prot":"public","static":false,"definition":"uint32 Collider::getLayers","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@return_ `uint32` Layers in which the collider must live\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"setLayersToIgnore","qualifiedname":"Collider::setLayersToIgnore","description":"Set the layers in which live colliders to ignore when testing collisions.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":238,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":160,"end":163}},"prot":"public","static":false,"definition":"void Collider::setLayersToIgnore","returnType":"void","argsstring":"(Collider this, uint32 layersToIgnore)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `layersToIgnore`\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"uint32 layersToIgnore"}]},{"name":"getLayersToIgnore","qualifiedname":"Collider::getLayersToIgnore","description":"Retrieve the layers in which live colliders to ignore when testing collisions.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":242,"column":8},"body":{"uri":"source/physics/Colliders/Collider.c","start":165,"end":168}},"prot":"public","static":false,"definition":"uint32 Collider::getLayersToIgnore","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@return_ `uint32` Layers to ignore when checking collisions\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"checkCollisions","qualifiedname":"Collider::checkCollisions","description":"Make this collider to test collision against other colliders.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":246,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":170,"end":178}},"prot":"public","static":false,"definition":"void Collider::checkCollisions","returnType":"void","argsstring":"(Collider this, bool checkCollisions)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `checkCollisions`: It true, this collider checks collision against others\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"bool checkCollisions","description":"It true, this collider checks collision against others"}]},{"name":"registerCollisions","qualifiedname":"Collider::registerCollisions","description":"Keep track of colliding colliders to detect when collisions exit.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":250,"column":6}},"prot":"public","static":false,"definition":"void Collider::registerCollisions","returnType":"void","argsstring":"(Collider this, bool registerCollisions)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `registerCollisions`: If true, colliding colliders are registered\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"bool registerCollisions","description":"If true, colliding colliders are registered"}]},{"name":"collides","qualifiedname":"Collider::collides","description":"Check if there is there is a collision with the provided collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":254,"column":17},"body":{"uri":"source/physics/Colliders/Collider.c","start":185,"end":272}},"prot":"public","static":false,"definition":"CollisionResult Collider::collides","argsstring":"(Collider this, Collider collider)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `collider`: `Collider` to check collision against to\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"Collider collider","description":"`Collider` to check collision against to"}]},{"name":"resolveCollision","qualifiedname":"Collider::resolveCollision","description":"Resolve a collision by moving the owner to a position where the collision ceases.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":258,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":274,"end":300}},"prot":"public","static":false,"definition":"void Collider::resolveCollision","returnType":"void","argsstring":"(Collider this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"canMoveTowards","qualifiedname":"Collider::canMoveTowards","description":"Check if there is some collider blocking in the provided direction.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":263,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":302,"end":332}},"prot":"public","static":false,"definition":"bool Collider::canMoveTowards","argsstring":"(Collider this, Vector3D displacement)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `displacement`: Vector towards which to check if it is possible to move the owner\n\n_@return_ `bool` True if there is no collision when moving the collider and increasing its size\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"Vector3D displacement","description":"Vector towards which to check if it is possible to move the owner"}]},{"name":"discardCollisions","qualifiedname":"Collider::discardCollisions","description":"Discard any registered collision.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":266,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":334,"end":358}},"prot":"public","static":false,"definition":"void Collider::discardCollisions","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"getCollidingFrictionCoefficient","qualifiedname":"Collider::getCollidingFrictionCoefficient","description":"Get the total friction of colliding colliders.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":270,"column":9},"body":{"uri":"source/physics/Colliders/Collider.c","start":360,"end":385}},"prot":"public","static":false,"definition":"fixed_t Collider::getCollidingFrictionCoefficient","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@return_ `fixed_t` The sum of friction coefficients of the colliders colliding's owners\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"show","qualifiedname":"Collider::show","description":"Show the collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":273,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":387,"end":400}},"prot":"public","static":false,"definition":"void Collider::show","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"hide","qualifiedname":"Collider::hide","description":"Hide the collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":276,"column":6},"body":{"uri":"source/physics/Colliders/Collider.c","start":402,"end":411}},"prot":"public","static":false,"definition":"void Collider::hide","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"resize","qualifiedname":"Collider::resize","description":"Resize the colliders add the provided increment.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":280,"column":14},"body":{"uri":"source/physics/Colliders/Collider.c","start":413,"end":414}},"prot":"public","static":false,"definition":"void Collider::resize","returnType":"void","argsstring":"(Collider this, fixed_t sizeDelta)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"fixed_t sizeDelta","description":"Delta to add to the collider's size"}]},{"name":"getNormal","qualifiedname":"Collider::getNormal","description":"Retrieve the normal to the collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":284,"column":18},"body":{"uri":"source/physics/Colliders/Collider.c","start":416,"end":419}},"prot":"public","static":false,"definition":"Vector3D Collider::getNormal","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@return_ `Vector3D` Normal to the collider\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"configureWireframe","qualifiedname":"Collider::configureWireframe","description":"Configure the wireframe used to show the collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":287,"column":14}},"prot":"public","static":false,"definition":"virtual void Collider::configureWireframe","returnType":"void","argsstring":"(Collider this)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"}]},{"name":"print","qualifiedname":"Collider::print","description":"Print collider's state.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":292,"column":14},"body":{"uri":"source/physics/Colliders/Collider.c","start":422,"end":433}},"prot":"public","static":false,"definition":"void Collider::print","returnType":"void","argsstring":"(Collider this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Collider instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Collider this","description":"Collider Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"position","qualifiedname":"Collider::position","description":"Displaced position","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":180,"column":10},"body":{"uri":"source/physics/Colliders/Collider.h","start":180,"end":180}},"prot":"protected","static":false},{"name":"otherColliders","qualifiedname":"Collider::otherColliders","description":"List of colliding colliders.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":183,"column":13},"body":{"uri":"source/physics/Colliders/Collider.h","start":183,"end":183}},"prot":"protected","static":false},{"name":"layers","qualifiedname":"Collider::layers","description":"Layers on which this collider live.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":186,"column":8},"body":{"uri":"source/physics/Colliders/Collider.h","start":186,"end":186}},"prot":"protected","static":false},{"name":"layersToIgnore","qualifiedname":"Collider::layersToIgnore","description":"Layers to ignore when checking for collisions.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":189,"column":8},"body":{"uri":"source/physics/Colliders/Collider.h","start":189,"end":189}},"prot":"protected","static":false},{"name":"wireframe","qualifiedname":"Collider::wireframe","description":"`Wireframe` to make the collider visible (mainly for debugging purposes)","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":192,"column":11},"body":{"uri":"source/physics/Colliders/Collider.h","start":192,"end":192}},"prot":"protected","static":false},{"name":"enabled","qualifiedname":"Collider::enabled","description":"If false, it is ignored in all callision checks.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":195,"column":6},"body":{"uri":"source/physics/Colliders/Collider.h","start":195,"end":195}},"prot":"protected","static":false},{"name":"checkForCollisions","qualifiedname":"Collider::checkForCollisions","description":"If false, it doesn't check collision against other colliders.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":198,"column":7},"body":{"uri":"source/physics/Colliders/Collider.h","start":198,"end":198}},"prot":"protected","static":false},{"name":"registerCollisions","qualifiedname":"Collider::registerCollisions","description":"If true, it registers other colliders when a collision arises.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":201,"column":6},"body":{"uri":"source/physics/Colliders/Collider.h","start":201,"end":201}},"prot":"protected","static":false},{"name":"deleteMe","qualifiedname":"Collider::deleteMe","description":"Flag to destroy the collider.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":204,"column":6},"body":{"uri":"source/physics/Colliders/Collider.h","start":204,"end":204}},"prot":"protected","static":false},{"name":"classIndex","qualifiedname":"Collider::classIndex","description":"Class index to avoid using __GET_CAST when checking for collisions.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":207,"column":7},"body":{"uri":"source/physics/Colliders/Collider.h","start":207,"end":207}},"prot":"protected","static":false},{"name":"invalidPosition","qualifiedname":"Collider::invalidPosition","description":"Flag to force the computation of the collider's position.","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":210,"column":6},"body":{"uri":"source/physics/Colliders/Collider.h","start":210,"end":210}},"prot":"protected","static":false}],"enums":[{"name":"CollisionResult","qualifiedname":"Collider::CollisionResult","description":"`Collision` events","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":43,"column":1},"body":{"uri":"source/physics/Colliders/Collider.h","start":44,"end":50}},"prot":"public","static":false},{"name":"ColliderClassIndexes","qualifiedname":"Collider::ColliderClassIndexes","description":"Possible types of a colliders","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":54,"column":1},"body":{"uri":"source/physics/Colliders/Collider.h","start":55,"end":60}},"prot":"public","static":false}],"typedefs":[{"name":"ColliderROMSpec","qualifiedname":"Collider::ColliderROMSpec","description":"A `ColliderSpec` spec that is stored in ROM","location":{"header":{"uri":"source/physics/Colliders/Collider.h","line":161,"column":28},"body":{"uri":"source/physics/Colliders/Collider.h","start":161,"end":161}},"prot":"public","static":false}]},"CollisionManager":{"__contributor":"core","name":"CollisionManager","base":"Object","description":"Class `CollisionManager`\n\nInherits from `Object`\n\nManages the colliders in the game states.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":48,"column":1},"body":{"uri":"source/physics/CollisionManager.h","start":49,"end":99}},"methods":[{"name":"constructor","qualifiedname":"CollisionManager::constructor","description":"Class' constructor","location":{"header":{"uri":"source/physics/CollisionManager.h","line":64,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":334,"end":352}},"prot":"public","static":false,"definition":"void CollisionManager::constructor","returnType":"void","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"reset","qualifiedname":"CollisionManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":67,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":62,"end":78}},"prot":"public","static":false,"definition":"void CollisionManager::reset","returnType":"void","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"purgeDestroyedColliders","qualifiedname":"CollisionManager::purgeDestroyedColliders","description":"Purge destroyed colliders.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":70,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":80,"end":96}},"prot":"public","static":false,"definition":"void CollisionManager::purgeDestroyedColliders","returnType":"void","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"update","qualifiedname":"CollisionManager::update","description":"Update colliders and test collisions.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":73,"column":8},"body":{"uri":"source/physics/CollisionManager.c","start":98,"end":229}},"prot":"public","static":false,"definition":"uint32 CollisionManager::update","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"createCollider","qualifiedname":"CollisionManager::createCollider","description":"Create a collider with the provided spec.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":79,"column":10},"body":{"uri":"source/physics/CollisionManager.c","start":231,"end":252}},"prot":"public","static":false,"definition":"Collider CollisionManager::createCollider","argsstring":"(CollisionManager this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `owner`: `Object` to which the collider will attach to\n\n_@param_ `colliderSpec`: Spec to use to create the collider\n\n_@return_ `Collider` Created collider\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"},{"name":"SpatialObject owner","description":"`Object` to which the collider will attach to"},{"name":"const ColliderSpec *colliderSpec","description":"Spec to use to create the collider"}]},{"name":"destroyCollider","qualifiedname":"CollisionManager::destroyCollider","description":"Destroy the provided collider.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":83,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":254,"end":263}},"prot":"public","static":false,"definition":"void CollisionManager::destroyCollider","returnType":"void","argsstring":"(CollisionManager this, Collider collider)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `collider`: `Collider` to destroy\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"},{"name":"Collider collider","description":"`Collider` to destroy"}]},{"name":"setCheckCollidersOutOfCameraRange","qualifiedname":"CollisionManager::setCheckCollidersOutOfCameraRange","description":"Set if the colliders out of camera's range are culled of from collision testing.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":87,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":265,"end":268}},"prot":"public","static":false,"definition":"void CollisionManager::setCheckCollidersOutOfCameraRange","returnType":"void","argsstring":"(CollisionManager this, bool value)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `value`: If false, colliders out of camera's range are culled of from collision testing\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"},{"name":"bool value","description":"If false, colliders out of camera's range are culled of from collision testing"}]},{"name":"showColliders","qualifiedname":"CollisionManager::showColliders","description":"Make the colliders visible by the usage of wireframes.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":90,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":270,"end":280}},"prot":"public","static":false,"definition":"void CollisionManager::showColliders","returnType":"void","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"hideColliders","qualifiedname":"CollisionManager::hideColliders","description":"Make the colliders invisible by hiding their wireframes.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":93,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":282,"end":292}},"prot":"public","static":false,"definition":"void CollisionManager::hideColliders","returnType":"void","argsstring":"(CollisionManager this)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"}]},{"name":"print","qualifiedname":"CollisionManager::print","description":"Print the manager's statistics.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":98,"column":6},"body":{"uri":"source/physics/CollisionManager.c","start":295,"end":325}},"prot":"public","static":false,"definition":"void CollisionManager::print","returnType":"void","argsstring":"(CollisionManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"CollisionManager this","description":"CollisionManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"colliders","qualifiedname":"CollisionManager::colliders","description":"Linked list of registered colliders","location":{"header":{"uri":"source/physics/CollisionManager.h","line":53,"column":12},"body":{"uri":"source/physics/CollisionManager.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"checkCollidersOutOfCameraRange","qualifiedname":"CollisionManager::checkCollidersOutOfCameraRange","description":"If false, colliders out of camera's range are culled of from collision testing.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":56,"column":6},"body":{"uri":"source/physics/CollisionManager.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"dirty","qualifiedname":"CollisionManager::dirty","description":"If true, the list of registered colliders was modified in the mist of processing collisions.","location":{"header":{"uri":"source/physics/CollisionManager.h","line":59,"column":6},"body":{"uri":"source/physics/CollisionManager.h","start":59,"end":59}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"CollisionTester":{"__contributor":"core","name":"CollisionTester","base":"Object","description":"Class `CollisionTester`\n\nInherits from `Object`\n\nImplements collisions tests between two colliders.","location":{"header":{"uri":"source/physics/CollisionTester.h","line":40,"column":8},"body":{"uri":"source/physics/CollisionTester.h","start":41,"end":50}},"methods":[{"name":"testOverlaping","qualifiedname":"CollisionTester::testOverlaping","description":"Check if the provided colliders are overlaping each other.","location":{"header":{"uri":"source/physics/CollisionTester.h","line":49,"column":13},"body":{"uri":"source/physics/CollisionTester.c","start":41,"end":92}},"prot":"public","static":true,"definition":"static void CollisionTester::testOverlaping","returnType":"void","argsstring":"(Collider requesterCollider, Collider otherCollider, CollisionInformation *collisionInformation, fixed_t sizeDelta)","paramDocs":"\n\n_@param_ `requesterCollider`: `Collider` asking for the test\n\n_@param_ `otherCollider`: `Collider` against which to test the overlaping\n\n_@param_ `collisionInformation`\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n","parameters":[{"name":"Collider otherCollider","description":"`Collider` asking for the test"},{"name":"CollisionInformation *collisionInformation","description":"`Collider` against which to test the overlaping"},{"name":"fixed_t sizeDelta"},{"description":"Delta to add to the collider's size"}]}],"variables":[],"enums":[],"typedefs":[]},"CommunicationManager":{"__contributor":"core","name":"CommunicationManager","base":"ListenerObject","description":"Class `CommunicationManager`\n\nInherits from `ListenerObject`\n\nManages communications on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":39,"column":11},"body":{"uri":"source/hardware/CommunicationManager.h","start":40,"end":161}},"methods":[{"name":"getInstance","qualifiedname":"CommunicationManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":83,"column":29}},"prot":"public","static":true,"definition":"static CommunicationManager CommunicationManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `CommunicationManager` singleton\n\n","parameters":[]},{"name":"interruptHandler","qualifiedname":"CommunicationManager::interruptHandler","description":"Interrupt handler for COM interrupts.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":86,"column":13},"body":{"uri":"source/hardware/CommunicationManager.c","start":97,"end":115}},"prot":"public","static":true,"definition":"static void CommunicationManager::interruptHandler","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"reset","qualifiedname":"CommunicationManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":89,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":123,"end":153}},"prot":"public","static":false,"definition":"void CommunicationManager::reset","returnType":"void","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"enableCommunications","qualifiedname":"CommunicationManager::enableCommunications","description":"Enable communications on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":94,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":155,"end":197}},"prot":"public","static":false,"definition":"void CommunicationManager::enableCommunications","returnType":"void","argsstring":"(CommunicationManager this, EventListener eventLister, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"EventListener eventLister"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"disableCommunications","qualifiedname":"CommunicationManager::disableCommunications","description":"Disable communication on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":97,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":199,"end":206}},"prot":"public","static":false,"definition":"void CommunicationManager::disableCommunications","returnType":"void","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"cancelCommunications","qualifiedname":"CommunicationManager::cancelCommunications","description":"Cancel all pending transmissions on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":100,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":208,"end":237}},"prot":"public","static":false,"definition":"bool CommunicationManager::cancelCommunications","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"startSyncCycle","qualifiedname":"CommunicationManager::startSyncCycle","description":"Start the sync procedure according to the official documentation once a connection has been stablished.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":104,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":239,"end":277}},"prot":"public","static":false,"definition":"void CommunicationManager::startSyncCycle","returnType":"void","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"isConnected","qualifiedname":"CommunicationManager::isConnected","description":"Check if there is something attached to the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":108,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":279,"end":282}},"prot":"public","static":false,"definition":"bool CommunicationManager::isConnected","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@return_ `bool` True if there is something attached to the EXT port; false otherwise\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"isMaster","qualifiedname":"CommunicationManager::isMaster","description":"Check if the system is the master during the next cycle of communications over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":112,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":284,"end":287}},"prot":"public","static":false,"definition":"bool CommunicationManager::isMaster","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@return_ `bool` True if the system is the master; false otherwise\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"broadcastData","qualifiedname":"CommunicationManager::broadcastData","description":"Send data synchronously over the EXT port if there is nothing detectable attached to it.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":117,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":289,"end":330}},"prot":"public","static":false,"definition":"bool CommunicationManager::broadcastData","argsstring":"(CommunicationManager this, BYTE *data, int32 numberOfBytes)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"BYTE *data","description":"Data to broadcast"},{"name":"int32 numberOfBytes","description":"Number of bytes to broadcast"}]},{"name":"broadcastDataAsync","qualifiedname":"CommunicationManager::broadcastDataAsync","description":"Send data asynchronously over the EXT port if there is nothing detectable attached to it.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":124,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":332,"end":359}},"prot":"public","static":false,"definition":"void CommunicationManager::broadcastDataAsync","returnType":"void","argsstring":"(CommunicationManager this, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"BYTE *data","description":"Data to broadcast"},{"name":"int32 numberOfBytes","description":"Number of bytes to broadcast"},{"name":"EventListener eventLister"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"sendAndReceiveData","qualifiedname":"CommunicationManager::sendAndReceiveData","description":"Send and receive data synchronously over the EXT port if there is something detectable attached to it.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":130,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":361,"end":364}},"prot":"public","static":false,"definition":"bool CommunicationManager::sendAndReceiveData","argsstring":"(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `message`: Control message for the receiving partner\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"WORD message","description":"Control message for the receiving partner"},{"name":"BYTE *data","description":"Data to broadcast"},{"name":"int32 numberOfBytes","description":"Number of bytes to broadcast"}]},{"name":"sendAndReceiveDataAsync","qualifiedname":"CommunicationManager::sendAndReceiveDataAsync","description":"Send and receive data asynchronously over the EXT port if there is something detectable attached to it.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":138,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":366,"end":369}},"prot":"public","static":false,"definition":"bool CommunicationManager::sendAndReceiveDataAsync","argsstring":"(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `message`: Control message for the receiving partner\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"WORD message","description":"Control message for the receiving partner"},{"name":"BYTE *data","description":"Data to broadcast"},{"name":"int32 numberOfBytes","description":"Number of bytes to broadcast"},{"name":"EventListener eventLister"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"getSentMessage","qualifiedname":"CommunicationManager::getSentMessage","description":"Retrieve the last sent message on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":141,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":371,"end":374}},"prot":"public","static":false,"definition":"WORD CommunicationManager::getSentMessage","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"getReceivedMessage","qualifiedname":"CommunicationManager::getReceivedMessage","description":"Retrieve the last received message on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":144,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":376,"end":379}},"prot":"public","static":false,"definition":"WORD CommunicationManager::getReceivedMessage","argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"getSentData","qualifiedname":"CommunicationManager::getSentData","description":"Retrieve the last sent data on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":147,"column":12},"body":{"uri":"source/hardware/CommunicationManager.c","start":381,"end":384}},"prot":"public","static":false,"definition":"const BYTE * CommunicationManager::getSentData","returnType":["const "," *"],"argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"getReceivedData","qualifiedname":"CommunicationManager::getReceivedData","description":"Retrieve the last received data on the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":150,"column":12},"body":{"uri":"source/hardware/CommunicationManager.c","start":386,"end":389}},"prot":"public","static":false,"definition":"const BYTE * CommunicationManager::getReceivedData","returnType":["const "," *"],"argsstring":"(CommunicationManager this)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"}]},{"name":"print","qualifiedname":"CommunicationManager::print","description":"Print the manager's status.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":155,"column":6},"body":{"uri":"source/hardware/CommunicationManager.c","start":392,"end":451}},"prot":"public","static":false,"definition":"void CommunicationManager::print","returnType":"void","argsstring":"(CommunicationManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"handleMessage","qualifiedname":"CommunicationManager::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":160,"column":15},"body":{"uri":"source/hardware/CommunicationManager.c","start":454,"end":474}},"prot":"public","static":false,"definition":"bool CommunicationManager::handleMessage","returnType":"override ","argsstring":"(CommunicationManager this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"CommunicationManager this","description":"CommunicationManager Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]}],"variables":[{"name":"status","qualifiedname":"CommunicationManager::status","description":"Status of the communications","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":44,"column":16},"body":{"uri":"source/hardware/CommunicationManager.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"sentData","qualifiedname":"CommunicationManager::sentData","description":"Data sent over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":47,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":47,"end":47}},"prot":"protected","static":false},{"name":"receivedData","qualifiedname":"CommunicationManager::receivedData","description":"Data received over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":50,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"syncSentByte","qualifiedname":"CommunicationManager::syncSentByte","description":"Last byte sent synchronously over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":53,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"syncReceivedByte","qualifiedname":"CommunicationManager::syncReceivedByte","description":"Last byte received synchronously over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":56,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"asyncSentByte","qualifiedname":"CommunicationManager::asyncSentByte","description":"Last byte sent asynchronously over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":59,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":59,"end":59}},"prot":"protected","static":false},{"name":"asyncReceivedByte","qualifiedname":"CommunicationManager::asyncReceivedByte","description":"Last byte received asynchronously over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":62,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":62,"end":62}},"prot":"protected","static":false},{"name":"numberOfBytesPendingTransmission","qualifiedname":"CommunicationManager::numberOfBytesPendingTransmission","description":"Number of bytes pending transmission over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":65,"column":16},"body":{"uri":"source/hardware/CommunicationManager.h","start":65,"end":65}},"prot":"protected","static":false},{"name":"numberOfBytesPreviouslySent","qualifiedname":"CommunicationManager::numberOfBytesPreviouslySent","description":"Number of bytes already transmitted over the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":68,"column":7},"body":{"uri":"source/hardware/CommunicationManager.h","start":68,"end":68}},"prot":"protected","static":false},{"name":"broadcast","qualifiedname":"CommunicationManager::broadcast","description":"Status of broadcast communications.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":71,"column":17},"body":{"uri":"source/hardware/CommunicationManager.h","start":71,"end":71}},"prot":"protected","static":false},{"name":"connected","qualifiedname":"CommunicationManager::connected","description":"Flag that indicates if there is something connected to the EXT port.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":74,"column":15},"body":{"uri":"source/hardware/CommunicationManager.h","start":74,"end":74}},"prot":"protected","static":false},{"name":"communicationMode","qualifiedname":"CommunicationManager::communicationMode","description":"Keeps track of the role as master or slave that the system holds in data transmissions.","location":{"header":{"uri":"source/hardware/CommunicationManager.h","line":77,"column":16},"body":{"uri":"source/hardware/CommunicationManager.h","start":77,"end":77}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Component":{"__contributor":"core","name":"Component","base":"ListenerObject","description":"Class `Component`\n\nInherits from `ListenerObject`\n\nServes as the base class for components of entities.","location":{"header":{"uri":"source/base/Component.h","line":40,"column":9},"body":{"uri":"source/base/Component.h","start":41,"end":69}},"methods":[{"name":"constructor","qualifiedname":"Component::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/Component.h","line":58,"column":6},"body":{"uri":"source/base/Component.c","start":43,"end":58}},"prot":"public","static":false,"definition":"void Component::constructor","returnType":"void","argsstring":"(Component this, SpatialObject owner, const ComponentSpec *componentSpec)","paramDocs":"\n\n_@param_ `this`: Component instance\n\n_@param_ `owner`: `SpatialObject` to which the component attaches to\n\n_@param_ `componentSpec`: Pointer to the spec that defines how to initialize the component\n\n","parameters":[{"name":"Component this","description":"Component Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the component attaches to"},{"name":"const ComponentSpec *componentSpec","description":"Pointer to the spec that defines how to initialize the component"}]},{"name":"destructor","qualifiedname":"Component::destructor","description":"Class' destructor.","location":{"header":{"uri":"source/base/Component.h","line":61,"column":6},"body":{"uri":"source/base/Component.c","start":60,"end":64}},"prot":"public","static":false,"definition":"void Component::destructor","returnType":"void","argsstring":"(Component this)","paramDocs":"\n\n_@param_ `this`: Component instance\n\n","parameters":[{"name":"Component this","description":"Component Instance"}]},{"name":"getSpec","qualifiedname":"Component::getSpec","description":"Retrieve the spec pointer that defined how to initialized the component","location":{"header":{"uri":"source/base/Component.h","line":65,"column":15},"body":{"uri":"source/base/Component.c","start":66,"end":69}},"prot":"public","static":false,"definition":"ComponentSpec * Component::getSpec","returnType":" *","argsstring":"(Component this)","paramDocs":"\n\n_@param_ `this`: Component instance\n\n_@return_ `ComponentSpec` `Component` spec pointer\n\n","parameters":[{"name":"Component this","description":"Component Instance"}]},{"name":"getOwner","qualifiedname":"Component::getOwner","description":"Retrieve the collider's owner","location":{"header":{"uri":"source/base/Component.h","line":68,"column":15},"body":{"uri":"source/base/Component.c","start":71,"end":74}},"prot":"public","static":false,"definition":"SpatialObject Component::getOwner","argsstring":"(Component this)","paramDocs":"\n\n_@param_ `this`: Component instance\n\n","parameters":[{"name":"Component this","description":"Component Instance"}]}],"variables":[{"name":"owner","qualifiedname":"Component::owner","description":"`Object` to which this component attaches to","location":{"header":{"uri":"source/base/Component.h","line":45,"column":15},"body":{"uri":"source/base/Component.h","start":45,"end":45}},"prot":"protected","static":false},{"name":"componentSpec","qualifiedname":"Component::componentSpec","description":"Pointer to the spec that defines how to initialize the component.","location":{"header":{"uri":"source/base/Component.h","line":48,"column":21},"body":{"uri":"source/base/Component.h","start":48,"end":48}},"prot":"protected","static":false},{"name":"transformation","qualifiedname":"Component::transformation","description":"Pointer to the transformation that the component attaches to.","location":{"header":{"uri":"source/base/Component.h","line":51,"column":22},"body":{"uri":"source/base/Component.h","start":51,"end":51}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Container":{"__contributor":"core","name":"Container","base":"SpatialObject","description":"Class `Container`\n\nInherits from `SpatialObject`\n\nAdds parenting cababilities to spatial objects.","location":{"header":{"uri":"source/stage/Container.h","line":48,"column":1},"body":{"uri":"source/stage/Container.h","start":49,"end":278}},"methods":[{"name":"constructor","qualifiedname":"Container::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/Container.h","line":90,"column":6},"body":{"uri":"source/stage/Container.c","start":36,"end":63}},"prot":"public","static":false,"definition":"void Container::constructor","returnType":"void","argsstring":"(Container this, const char *const name)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `name`: Name to assign to the new instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const char *const name","description":"Name to assign to the new instance"}]},{"name":"setPosition","qualifiedname":"Container::setPosition","description":"Set the container's position.","location":{"header":{"uri":"source/stage/Container.h","line":94,"column":15},"body":{"uri":"source/stage/Container.c","start":141,"end":147}},"prot":"public","static":false,"definition":"void Container::setPosition","returnType":"override void","argsstring":"(Container this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Vector3D *position","description":"3D vector defining the object's new position"}]},{"name":"setRotation","qualifiedname":"Container::setRotation","description":"Set the container's rotation.","location":{"header":{"uri":"source/stage/Container.h","line":98,"column":15},"body":{"uri":"source/stage/Container.c","start":149,"end":155}},"prot":"public","static":false,"definition":"void Container::setRotation","returnType":"override void","argsstring":"(Container this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: `Rotation`\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Rotation *rotation","description":"`Rotation`"}]},{"name":"setScale","qualifiedname":"Container::setScale","description":"Set the container's scale.","location":{"header":{"uri":"source/stage/Container.h","line":102,"column":15},"body":{"uri":"source/stage/Container.c","start":157,"end":163}},"prot":"public","static":false,"definition":"void Container::setScale","returnType":"override void","argsstring":"(Container this, const Scale *scale)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: `Scale`\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Scale *scale","description":"`Scale`"}]},{"name":"deleteMyself","qualifiedname":"Container::deleteMyself","description":"Delete this container when appropriate. Containers must not be deleted nor created directly by the client code","location":{"header":{"uri":"source/stage/Container.h","line":106,"column":6},"body":{"uri":"source/stage/Container.c","start":165,"end":182}},"prot":"public","static":false,"definition":"void Container::deleteMyself","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"setName","qualifiedname":"Container::setName","description":"Set the container's name.","location":{"header":{"uri":"source/stage/Container.h","line":110,"column":6},"body":{"uri":"source/stage/Container.c","start":184,"end":207}},"prot":"public","static":false,"definition":"void Container::setName","returnType":"void","argsstring":"(Container this, const char *const name)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `name`: Name to assign to the instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const char *const name","description":"Name to assign to the instance"}]},{"name":"getName","qualifiedname":"Container::getName","description":"Retrive the container's name.","location":{"header":{"uri":"source/stage/Container.h","line":114,"column":12},"body":{"uri":"source/stage/Container.c","start":209,"end":212}},"prot":"public","static":false,"definition":"const char * Container::getName","returnType":"const char *","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the container's name\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"streamOut","qualifiedname":"Container::streamOut","description":"Set the streaming effects on this container.","location":{"header":{"uri":"source/stage/Container.h","line":119,"column":6},"body":{"uri":"source/stage/Container.c","start":214,"end":217}},"prot":"public","static":false,"definition":"void Container::streamOut","returnType":"void","argsstring":"(Container this, bool streamOut)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `streamOut`: If false, this container won't be streamed out when outside of the camera's reach\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"bool streamOut","description":"If false, this container won't be streamed out when outside of the camera's reach"}]},{"name":"getParent","qualifiedname":"Container::getParent","description":"Retrieve this container's parent container.","location":{"header":{"uri":"source/stage/Container.h","line":123,"column":11},"body":{"uri":"source/stage/Container.c","start":219,"end":222}},"prot":"public","static":false,"definition":"Container Container::getParent","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `Container` Parent container\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"addChild","qualifiedname":"Container::addChild","description":"Add a container as a child.","location":{"header":{"uri":"source/stage/Container.h","line":127,"column":6},"body":{"uri":"source/stage/Container.c","start":224,"end":278}},"prot":"public","static":false,"definition":"void Container::addChild","returnType":"void","argsstring":"(Container this, Container child)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `child`: `Container` to be added as a child\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"Container child","description":"`Container` to be added as a child"}]},{"name":"removeChild","qualifiedname":"Container::removeChild","description":"Reomve a child container for this container's children list.","location":{"header":{"uri":"source/stage/Container.h","line":132,"column":6},"body":{"uri":"source/stage/Container.c","start":280,"end":323}},"prot":"public","static":false,"definition":"void Container::removeChild","returnType":"void","argsstring":"(Container this, Container child, bool deleteChild)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `child`: `Container` to be remove as a child\n\n_@param_ `deleteChild`: If true, the child will be deleted in the next game cycle\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"Container child","description":"`Container` to be remove as a child"},{"name":"bool deleteChild","description":"If true, the child will be deleted in the next game cycle"}]},{"name":"purgeChildren","qualifiedname":"Container::purgeChildren","description":"Force the destruction of all children marked to be deleted.","location":{"header":{"uri":"source/stage/Container.h","line":135,"column":6},"body":{"uri":"source/stage/Container.c","start":325,"end":365}},"prot":"public","static":false,"definition":"void Container::purgeChildren","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"getChildren","qualifiedname":"Container::getChildren","description":"Retrieve the linked list of children that are instances of the provided class.","location":{"header":{"uri":"source/stage/Container.h","line":142,"column":6},"body":{"uri":"source/stage/Container.c","start":367,"end":385}},"prot":"public","static":false,"definition":"bool Container::getChildren","argsstring":"(Container this, ClassPointer classPointer, VirtualList children)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `classPointer`: Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`\n\n_@param_ `children`: Linked list to be filled with the children that meed the search criteria (it is externally allocated and must be externally deleted)\n\n_@return_ `bool` True if one or more children met the search criteria; false otherwise\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"ClassPointer classPointer","description":"Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`"},{"name":"VirtualList children","description":"Linked list to be filled with the children that meed the search criteria (it is externally allocated and must be externally deleted)"}]},{"name":"getChildByName","qualifiedname":"Container::getChildByName","description":"Find a child with the provided name.","location":{"header":{"uri":"source/stage/Container.h","line":148,"column":11},"body":{"uri":"source/stage/Container.c","start":387,"end":404}},"prot":"public","static":false,"definition":"Container Container::getChildByName","argsstring":"(Container this, const char *childName, bool recursive)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `childName`: Name to look for\n\n_@param_ `recursive`: If true, the seach extends to grand children, grand grand children, etc.\n\n_@return_ `Container` The first child container whose name equals the provided one\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const char *childName","description":"Name to look for"},{"name":"bool recursive","description":"If true, the seach extends to grand children, grand grand children, etc."}]},{"name":"getChildAtPosition","qualifiedname":"Container::getChildAtPosition","description":"Retrieve the child at the provided position in the linked list of children.","location":{"header":{"uri":"source/stage/Container.h","line":153,"column":11},"body":{"uri":"source/stage/Container.c","start":406,"end":414}},"prot":"public","static":false,"definition":"Container Container::getChildAtPosition","argsstring":"(Container this, int16 position)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: Position in the linked list of children\n\n_@return_ `Container` The child container at the provided position if any\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"int16 position","description":"Position in the linked list of children"}]},{"name":"getChildrenCount","qualifiedname":"Container::getChildrenCount","description":"Retrieve the amount of children of this container.","location":{"header":{"uri":"source/stage/Container.h","line":157,"column":7},"body":{"uri":"source/stage/Container.c","start":416,"end":419}},"prot":"public","static":false,"definition":"int32 Container::getChildrenCount","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `int32` Amount of children of this container\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"updateChildren","qualifiedname":"Container::updateChildren","description":"Update the children of this container.","location":{"header":{"uri":"source/stage/Container.h","line":160,"column":6},"body":{"uri":"source/stage/Container.c","start":421,"end":462}},"prot":"public","static":false,"definition":"void Container::updateChildren","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"invalidateTransformation","qualifiedname":"Container::invalidateTransformation","description":"Invalidate the transformation to force it to be recomputed in the next game cycle.","location":{"header":{"uri":"source/stage/Container.h","line":164,"column":6},"body":{"uri":"source/stage/Container.c","start":464,"end":477}},"prot":"public","static":false,"definition":"void Container::invalidateTransformation","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"setInheritEnvironment","qualifiedname":"Container::setInheritEnvironment","description":"Set the flags that determine which of the transformation's components must inherit those from this container's parent's","location":{"header":{"uri":"source/stage/Container.h","line":169,"column":6},"body":{"uri":"source/stage/Container.c","start":479,"end":482}},"prot":"public","static":false,"definition":"void Container::setInheritEnvironment","returnType":"void","argsstring":"(Container this, uint8 inheritEnvironment)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `inheritEnvironment`: `Transformation` inheritance flags\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"uint8 inheritEnvironment","description":"`Transformation` inheritance flags"}]},{"name":"transformChildren","qualifiedname":"Container::transformChildren","description":"Apply the transformations to this container's children.","location":{"header":{"uri":"source/stage/Container.h","line":174,"column":6},"body":{"uri":"source/stage/Container.c","start":484,"end":532}},"prot":"public","static":false,"definition":"void Container::transformChildren","returnType":"void","argsstring":"(Container this, uint8 invalidateTransformationFlag)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"uint8 invalidateTransformationFlag","description":"Flag that determines which transfomation's components must be recomputed"}]},{"name":"propagateMessage","qualifiedname":"Container::propagateMessage","description":"Propagate an integer message through the whole parenting hierarchy (children, grand children, etc.).","location":{"header":{"uri":"source/stage/Container.h","line":179,"column":6},"body":{"uri":"source/stage/Container.c","start":534,"end":544}},"prot":"public","static":false,"definition":"bool Container::propagateMessage","argsstring":"(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `propagatedMessageHandler`: Method that handles the message\n\n_@return_ `bool` The result that the provided message handler returns\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"bool(*propagatedMessageHandler)(void *","description":"Method that handles the message"}]},{"name":"onPropagatedMessage","qualifiedname":"Container::onPropagatedMessage","description":"Generic integer message propagator","location":{"header":{"uri":"source/stage/Container.h","line":183,"column":6},"body":{"uri":"source/stage/Container.c","start":546,"end":550}},"prot":"public","static":false,"definition":"bool Container::onPropagatedMessage","argsstring":"(Container this, va_list args)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `args`: Variable list of propagated arguments\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"va_list args","description":"Variable list of propagated arguments"}]},{"name":"propagateString","qualifiedname":"Container::propagateString","description":"Propagate a string through the whole parenting hierarchy (children, grand children, etc.).","location":{"header":{"uri":"source/stage/Container.h","line":188,"column":6},"body":{"uri":"source/stage/Container.c","start":552,"end":562}},"prot":"public","static":false,"definition":"bool Container::propagateString","argsstring":"(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `propagatedMessageHandler`: Method that handles the string\n\n_@return_ `bool` The result that the provided string handler returns\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"bool(*propagatedMessageHandler)(void *","description":"Method that handles the string"}]},{"name":"onPropagatedString","qualifiedname":"Container::onPropagatedString","description":"Generic string propagator","location":{"header":{"uri":"source/stage/Container.h","line":192,"column":6},"body":{"uri":"source/stage/Container.c","start":564,"end":568}},"prot":"public","static":false,"definition":"bool Container::onPropagatedString","argsstring":"(Container this, va_list args)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `args`: Variable list of propagated arguments\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"va_list args","description":"Variable list of propagated arguments"}]},{"name":"translate","qualifiedname":"Container::translate","description":"Displace the container.","location":{"header":{"uri":"source/stage/Container.h","line":196,"column":6},"body":{"uri":"source/stage/Container.c","start":570,"end":589}},"prot":"public","static":false,"definition":"void Container::translate","returnType":"void","argsstring":"(Container this, const Vector3D *translation)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `translation`: Displacement to be added to the container's position\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Vector3D *translation","description":"Displacement to be added to the container's position"}]},{"name":"rotate","qualifiedname":"Container::rotate","description":"Rotate the container.","location":{"header":{"uri":"source/stage/Container.h","line":200,"column":6},"body":{"uri":"source/stage/Container.c","start":591,"end":599}},"prot":"public","static":false,"definition":"void Container::rotate","returnType":"void","argsstring":"(Container this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: `Rotation` to be added to the container's rotation\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Rotation *rotation","description":"`Rotation` to be added to the container's rotation"}]},{"name":"scale","qualifiedname":"Container::scale","description":"`Scale` the container.","location":{"header":{"uri":"source/stage/Container.h","line":204,"column":6},"body":{"uri":"source/stage/Container.c","start":601,"end":606}},"prot":"public","static":false,"definition":"void Container::scale","returnType":"void","argsstring":"(Container this, const Scale *scale)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: `Scale` to be applied to the container's scale\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Scale *scale","description":"`Scale` to be applied to the container's scale"}]},{"name":"getLocalPosition","qualifiedname":"Container::getLocalPosition","description":"Retrieve the local position.","location":{"header":{"uri":"source/stage/Container.h","line":208,"column":16},"body":{"uri":"source/stage/Container.c","start":608,"end":611}},"prot":"public","static":false,"definition":"const Vector3D * Container::getLocalPosition","returnType":["const "," *"],"argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's position\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"getLocalRotation","qualifiedname":"Container::getLocalRotation","description":"Retrieve the local rotation.","location":{"header":{"uri":"source/stage/Container.h","line":212,"column":16},"body":{"uri":"source/stage/Container.c","start":613,"end":616}},"prot":"public","static":false,"definition":"const Rotation * Container::getLocalRotation","returnType":["const "," *"],"argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's rotation\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"getLocalScale","qualifiedname":"Container::getLocalScale","description":"Retrieve the local scale.","location":{"header":{"uri":"source/stage/Container.h","line":216,"column":13},"body":{"uri":"source/stage/Container.c","start":618,"end":621}},"prot":"public","static":false,"definition":"const Scale * Container::getLocalScale","returnType":["const "," *"],"argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's scale\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"setLocalPosition","qualifiedname":"Container::setLocalPosition","description":"Set the local position.","location":{"header":{"uri":"source/stage/Container.h","line":220,"column":14},"body":{"uri":"source/stage/Container.c","start":623,"end":649}},"prot":"public","static":false,"definition":"void Container::setLocalPosition","returnType":"void","argsstring":"(Container this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: New local position\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Vector3D *position","description":"New local position"}]},{"name":"setLocalRotation","qualifiedname":"Container::setLocalRotation","description":"Set the local rotation.","location":{"header":{"uri":"source/stage/Container.h","line":224,"column":14},"body":{"uri":"source/stage/Container.c","start":651,"end":669}},"prot":"public","static":false,"definition":"void Container::setLocalRotation","returnType":"void","argsstring":"(Container this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: New local rotation\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Rotation *rotation","description":"New local rotation"}]},{"name":"setLocalScale","qualifiedname":"Container::setLocalScale","description":"Set the local scale.","location":{"header":{"uri":"source/stage/Container.h","line":228,"column":14},"body":{"uri":"source/stage/Container.c","start":671,"end":694}},"prot":"public","static":false,"definition":"void Container::setLocalScale","returnType":"void","argsstring":"(Container this, const Scale *scale)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: New local scale\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Scale *scale","description":"New local scale"}]},{"name":"changeEnvironment","qualifiedname":"Container::changeEnvironment","description":"Update the local transformation in function of the provided environment transform.","location":{"header":{"uri":"source/stage/Container.h","line":232,"column":14},"body":{"uri":"source/stage/Container.c","start":696,"end":708}},"prot":"public","static":false,"definition":"void Container::changeEnvironment","returnType":"void","argsstring":"(Container this, Transformation *environmentTransform)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `environmentTransform`: New reference environment for the local transformation\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"Transformation *environmentTransform","description":"New reference environment for the local transformation"}]},{"name":"addComponents","qualifiedname":"Container::addComponents","description":"Create the components that must attach to this container.","location":{"header":{"uri":"source/stage/Container.h","line":235,"column":14},"body":{"uri":"source/stage/Container.c","start":710,"end":723}},"prot":"public","static":false,"definition":"void Container::addComponents","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"removeComponents","qualifiedname":"Container::removeComponents","description":"Destroy the components that attach to this container.","location":{"header":{"uri":"source/stage/Container.h","line":238,"column":14},"body":{"uri":"source/stage/Container.c","start":725,"end":738}},"prot":"public","static":false,"definition":"void Container::removeComponents","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"ready","qualifiedname":"Container::ready","description":"Make the container ready to start operating once it has been completely intialized.","location":{"header":{"uri":"source/stage/Container.h","line":242,"column":14}},"prot":"public","static":false,"definition":"virtual void Container::ready","returnType":"void","argsstring":"(Container this, bool recursive)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `recursive`: If true, the ready call is propagated to its children, grand children, etc.\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"bool recursive","description":"If true, the ready call is propagated to its children, grand children, etc."}]},{"name":"show","qualifiedname":"Container::show","description":"Make this instance visible.","location":{"header":{"uri":"source/stage/Container.h","line":245,"column":14},"body":{"uri":"source/stage/Container.c","start":758,"end":775}},"prot":"public","static":false,"definition":"void Container::show","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"hide","qualifiedname":"Container::hide","description":"Make this instance invisible.","location":{"header":{"uri":"source/stage/Container.h","line":248,"column":14},"body":{"uri":"source/stage/Container.c","start":777,"end":790}},"prot":"public","static":false,"definition":"void Container::hide","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"transform","qualifiedname":"Container::transform","description":"Compute the container's global transformation.","location":{"header":{"uri":"source/stage/Container.h","line":254,"column":14}},"prot":"public","static":false,"definition":"virtual void Container::transform","returnType":"void","argsstring":"(Container this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `environmentTransform`: Reference environment for the local transformation\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const Transformation *environmentTransform","description":"Reference environment for the local transformation"},{"name":"uint8 invalidateTransformationFlag","description":"Flag that determines which transfomation's components must be recomputed"}]},{"name":"update","qualifiedname":"Container::update","description":"Update this instance's logic.","location":{"header":{"uri":"source/stage/Container.h","line":257,"column":14}},"prot":"public","static":false,"definition":"virtual void Container::update","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"suspend","qualifiedname":"Container::suspend","description":"Prepare to suspend this instance's logic.","location":{"header":{"uri":"source/stage/Container.h","line":260,"column":14},"body":{"uri":"source/stage/Container.c","start":802,"end":817}},"prot":"public","static":false,"definition":"void Container::suspend","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"resume","qualifiedname":"Container::resume","description":"Prepare to resume this instance's logic.","location":{"header":{"uri":"source/stage/Container.h","line":263,"column":14},"body":{"uri":"source/stage/Container.c","start":819,"end":834}},"prot":"public","static":false,"definition":"void Container::resume","returnType":"void","argsstring":"(Container this)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n","parameters":[{"name":"Container this","description":"Container Instance"}]},{"name":"setTransparency","qualifiedname":"Container::setTransparency","description":"Set this instance's transparency effects.","location":{"header":{"uri":"source/stage/Container.h","line":267,"column":14},"body":{"uri":"source/stage/Container.c","start":836,"end":849}},"prot":"public","static":false,"definition":"void Container::setTransparency","returnType":"void","argsstring":"(Container this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"uint8 transparency","description":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},{"name":"handlePropagatedMessage","qualifiedname":"Container::handlePropagatedMessage","description":"Default interger message handler for propagateMessage","location":{"header":{"uri":"source/stage/Container.h","line":272,"column":14},"body":{"uri":"source/stage/Container.c","start":851,"end":854}},"prot":"public","static":false,"definition":"bool Container::handlePropagatedMessage","argsstring":"(Container this, int32 message)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `message`: Propagated integer message\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"int32 message","description":"Propagated integer message"}]},{"name":"handlePropagatedString","qualifiedname":"Container::handlePropagatedString","description":"Default string handler for propagateString","location":{"header":{"uri":"source/stage/Container.h","line":277,"column":14},"body":{"uri":"source/stage/Container.c","start":856,"end":859}},"prot":"public","static":false,"definition":"bool Container::handlePropagatedString","argsstring":"(Container this, const char *string)","paramDocs":"\n\n_@param_ `this`: Container instance\n\n_@param_ `string`: Propagated string\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n","parameters":[{"name":"Container this","description":"Container Instance"},{"name":"const char *string","description":"Propagated string"}]}],"variables":[{"name":"inheritEnvironment","qualifiedname":"Container::inheritEnvironment","description":"Flags that determine whether to inherit position, rotation and scale from environment (parents)","location":{"header":{"uri":"source/stage/Container.h","line":54,"column":7},"body":{"uri":"source/stage/Container.h","start":54,"end":54}},"prot":"protected","static":false},{"name":"localTransformation","qualifiedname":"Container::localTransformation","description":"3D local transformation","location":{"header":{"uri":"source/stage/Container.h","line":57,"column":16},"body":{"uri":"source/stage/Container.h","start":57,"end":57}},"prot":"protected","static":false},{"name":"children","qualifiedname":"Container::children","description":"Linked list of child containers.","location":{"header":{"uri":"source/stage/Container.h","line":60,"column":13},"body":{"uri":"source/stage/Container.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"parent","qualifiedname":"Container::parent","description":"`Container` of which this one is a child.","location":{"header":{"uri":"source/stage/Container.h","line":63,"column":11},"body":{"uri":"source/stage/Container.h","start":63,"end":63}},"prot":"protected","static":false},{"name":"name","qualifiedname":"Container::name","description":"`Container`'s name.","location":{"header":{"uri":"source/stage/Container.h","line":66,"column":6},"body":{"uri":"source/stage/Container.h","start":66,"end":66}},"prot":"protected","static":false},{"name":"deleteMe","qualifiedname":"Container::deleteMe","description":"If true, the parent will delete this container when appropriate.","location":{"header":{"uri":"source/stage/Container.h","line":69,"column":6},"body":{"uri":"source/stage/Container.h","start":69,"end":69}},"prot":"protected","static":false},{"name":"hidden","qualifiedname":"Container::hidden","description":"Flag to mark the container (and its children) as non visible.","location":{"header":{"uri":"source/stage/Container.h","line":72,"column":6},"body":{"uri":"source/stage/Container.h","start":72,"end":72}},"prot":"protected","static":false},{"name":"update","qualifiedname":"Container::update","description":"Flag to allow/prohibit calls to the update method.","location":{"header":{"uri":"source/stage/Container.h","line":75,"column":6},"body":{"uri":"source/stage/Container.h","start":75,"end":75}},"prot":"protected","static":false},{"name":"transform","qualifiedname":"Container::transform","description":"Flag to allow/prohibit calls to the transform method.","location":{"header":{"uri":"source/stage/Container.h","line":78,"column":6},"body":{"uri":"source/stage/Container.h","start":78,"end":78}},"prot":"protected","static":false},{"name":"ready","qualifiedname":"Container::ready","description":"","location":{"header":{"uri":"source/stage/Container.h","line":81,"column":6},"body":{"uri":"source/stage/Container.h","start":81,"end":81}},"prot":"protected","static":false},{"name":"dontStreamOut","qualifiedname":"Container::dontStreamOut","description":"","location":{"header":{"uri":"source/stage/Container.h","line":84,"column":6},"body":{"uri":"source/stage/Container.h","start":84,"end":84}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Debug":{"__contributor":"core","name":"Debug","base":"Tool","description":"Class `Debug`\n\nInherits from `Tool`\n\nImplements a tool that displays various debug information.","location":{"header":{"uri":"source/tools/Debug.h","line":49,"column":11},"body":{"uri":"source/tools/Debug.h","start":50,"end":99}},"methods":[{"name":"getInstance","qualifiedname":"Debug::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/tools/Debug.h","line":85,"column":14}},"prot":"public","static":true,"definition":"static Debug Debug::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Debug` singleton\n\n","parameters":[]},{"name":"update","qualifiedname":"Debug::update","description":"Update the tool's state.","location":{"header":{"uri":"source/tools/Debug.h","line":88,"column":15},"body":{"uri":"source/tools/Debug.c","start":109,"end":115}},"prot":"public","static":false,"definition":"void Debug::update","returnType":"override void","argsstring":"(Debug this)","paramDocs":"\n\n_@param_ `this`: Debug instance\n\n","parameters":[{"name":"Debug this","description":"Debug Instance"}]},{"name":"show","qualifiedname":"Debug::show","description":"Show the tool.","location":{"header":{"uri":"source/tools/Debug.h","line":91,"column":15},"body":{"uri":"source/tools/Debug.c","start":117,"end":125}},"prot":"public","static":false,"definition":"void Debug::show","returnType":"override void","argsstring":"(Debug this)","paramDocs":"\n\n_@param_ `this`: Debug instance\n\n","parameters":[{"name":"Debug this","description":"Debug Instance"}]},{"name":"hide","qualifiedname":"Debug::hide","description":"Hide the tool.","location":{"header":{"uri":"source/tools/Debug.h","line":94,"column":15},"body":{"uri":"source/tools/Debug.c","start":127,"end":132}},"prot":"public","static":false,"definition":"void Debug::hide","returnType":"override void","argsstring":"(Debug this)","paramDocs":"\n\n_@param_ `this`: Debug instance\n\n","parameters":[{"name":"Debug this","description":"Debug Instance"}]},{"name":"processUserInput","qualifiedname":"Debug::processUserInput","description":"Process the provided user pressed key.","location":{"header":{"uri":"source/tools/Debug.h","line":98,"column":15},"body":{"uri":"source/tools/Debug.c","start":134,"end":168}},"prot":"public","static":false,"definition":"void Debug::processUserInput","returnType":"override void","argsstring":"(Debug this, uint16 pressedKey)","paramDocs":"\n\n_@param_ `this`: Debug instance\n\n_@param_ `pressedKey`: User pressed key\n\n","parameters":[{"name":"Debug this","description":"Debug Instance"},{"name":"uint16 pressedKey","description":"User pressed key"}]}],"variables":[{"name":"pages","qualifiedname":"Debug::pages","description":"Degug pages.","location":{"header":{"uri":"source/tools/Debug.h","line":52,"column":13},"body":{"uri":"source/tools/Debug.h","start":52,"end":52}},"prot":"private","static":false},{"name":"subPages","qualifiedname":"Debug::subPages","description":"`Debug` sub pages.","location":{"header":{"uri":"source/tools/Debug.h","line":55,"column":13},"body":{"uri":"source/tools/Debug.h","start":55,"end":55}},"prot":"private","static":false},{"name":"currentPage","qualifiedname":"Debug::currentPage","description":"Current page's node.","location":{"header":{"uri":"source/tools/Debug.h","line":58,"column":13},"body":{"uri":"source/tools/Debug.h","start":58,"end":58}},"prot":"private","static":false},{"name":"currentSubPage","qualifiedname":"Debug::currentSubPage","description":"Current sub page's node.","location":{"header":{"uri":"source/tools/Debug.h","line":61,"column":13},"body":{"uri":"source/tools/Debug.h","start":61,"end":61}},"prot":"private","static":false},{"name":"spriteIndex","qualifiedname":"Debug::spriteIndex","description":"Current sprite's index.","location":{"header":{"uri":"source/tools/Debug.h","line":64,"column":6},"body":{"uri":"source/tools/Debug.h","start":64,"end":64}},"prot":"private","static":false},{"name":"bgmapSegment","qualifiedname":"Debug::bgmapSegment","description":"Currently displayed BGMAP segment.","location":{"header":{"uri":"source/tools/Debug.h","line":67,"column":6},"body":{"uri":"source/tools/Debug.h","start":67,"end":67}},"prot":"private","static":false},{"name":"bgmapSegmentDiplayedSection","qualifiedname":"Debug::bgmapSegmentDiplayedSection","description":"Currently displayed part of BGMAP memory.","location":{"header":{"uri":"source/tools/Debug.h","line":70,"column":7},"body":{"uri":"source/tools/Debug.h","start":70,"end":70}},"prot":"private","static":false},{"name":"objectSegment","qualifiedname":"Debug::objectSegment","description":"Currently displayed OBJECT segment.","location":{"header":{"uri":"source/tools/Debug.h","line":73,"column":7},"body":{"uri":"source/tools/Debug.h","start":73,"end":73}},"prot":"private","static":false},{"name":"charSegment","qualifiedname":"Debug::charSegment","description":"Currently displayed CHAR memory segment.","location":{"header":{"uri":"source/tools/Debug.h","line":76,"column":7},"body":{"uri":"source/tools/Debug.h","start":76,"end":76}},"prot":"private","static":false},{"name":"sramPage","qualifiedname":"Debug::sramPage","description":"Currently displayed SRAM page.","location":{"header":{"uri":"source/tools/Debug.h","line":79,"column":7},"body":{"uri":"source/tools/Debug.h","start":79,"end":79}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"DebugState":{"__contributor":"core","name":"DebugState","base":"ToolState","description":"Class `DebugState`\n\nInherits from `ToolState`\n\nImplements a tool state to display various debug information.","location":{"header":{"uri":"source/states/ToolStates/DebugState.h","line":31,"column":11},"body":{"uri":"source/states/ToolStates/DebugState.h","start":32,"end":42}},"methods":[{"name":"getInstance","qualifiedname":"DebugState::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/states/ToolStates/DebugState.h","line":37,"column":19}},"prot":"public","static":true,"definition":"static DebugState DebugState::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `DebugState` singleton\n\n","parameters":[]},{"name":"isKeyCombination","qualifiedname":"DebugState::isKeyCombination","description":"Check if the provided user input unlocks the tool managed by this state.","location":{"header":{"uri":"source/states/ToolStates/DebugState.h","line":41,"column":15},"body":{"uri":"source/states/ToolStates/DebugState.c","start":40,"end":43}},"prot":"public","static":false,"definition":"bool DebugState::isKeyCombination","returnType":"override ","argsstring":"(DebugState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: DebugState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n","parameters":[{"name":"DebugState this","description":"DebugState Instance"},{"name":"const UserInput *userInput"}]}],"variables":[],"enums":[],"typedefs":[]},"DirectDraw":{"__contributor":"core","name":"DirectDraw","base":"Object","description":"Class `DirectDraw`\n\nInherits from `Object`\n\nImplements various draw rutines that manipulate the frame buffers.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":39,"column":11},"body":{"uri":"source/graphics/3d/DirectDraw.h","start":40,"end":136}},"methods":[{"name":"getInstance","qualifiedname":"DirectDraw::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":54,"column":19}},"prot":"public","static":true,"definition":"static DirectDraw DirectDraw::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `DirectDraw` singleton\n\n","parameters":[]},{"name":"drawPoint","qualifiedname":"DirectDraw::drawPoint","description":"Draw a single point.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":62,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":266,"end":288}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawPoint","argsstring":"(PixelVector point, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `point`: Screen coordinate where to draw the point\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int32 color","description":"Screen coordinate where to draw the point"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawLine","qualifiedname":"DirectDraw::drawLine","description":"Draw a line.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":71,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":290,"end":505}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawLine","argsstring":"(PixelVector fromPoint, PixelVector toPoint, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `fromPoint`: `Line`'s starting point\n\n_@param_ `toPoint`: `Line`'s ending point\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"PixelVector toPoint","description":"`Line`'s starting point"},{"name":"int32 color","description":"`Line`'s ending point"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawCircle","qualifiedname":"DirectDraw::drawCircle","description":"Draw a circle.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":80,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":507,"end":635}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawCircle","argsstring":"(PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `center`: Circle's center\n\n_@param_ `radius`: Circle's radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int16 radius","description":"Circle's center"},{"name":"int32 color","description":"Circle's radius"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawX","qualifiedname":"DirectDraw::drawX","description":"Draw an X.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":89,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":637,"end":685}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawX","argsstring":"(PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `center`: X's center\n\n_@param_ `length`: X's arms length\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int16 length","description":"X's center"},{"name":"int32 color","description":"X's arms length"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawCross","qualifiedname":"DirectDraw::drawCross","description":"Draw a cross.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":98,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":687,"end":732}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawCross","argsstring":"(PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `center`: Cross' center\n\n_@param_ `length`: Cross' arms length\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int16 length","description":"Cross' center"},{"name":"int32 color","description":"Cross' arms length"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawSolidCircle","qualifiedname":"DirectDraw::drawSolidCircle","description":"Draw a solid circle.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":107,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":734,"end":768}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawSolidCircle","argsstring":"(PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `center`: Circle's center\n\n_@param_ `radius`: Circle's radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int16 radius","description":"Circle's center"},{"name":"int32 color","description":"Circle's radius"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"drawSolidRhumbus","qualifiedname":"DirectDraw::drawSolidRhumbus","description":"Draw a solid rhombus.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":116,"column":13},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":770,"end":839}},"prot":"public","static":true,"definition":"static bool DirectDraw::drawSolidRhumbus","argsstring":"(PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","paramDocs":"\n\n_@param_ `center`: Rhombus' center\n\n_@param_ `radius`: Rhombus' radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n","parameters":[{"name":"int16 radius","description":"Rhombus' center"},{"name":"int32 color","description":"Rhombus' radius"},{"name":"uint8 bufferIndex","description":"Color of the point to draw (only non black)"},{"name":"bool interlaced","description":"Buffer set index for interlaced drawing"},{"description":"If true, the drawing is interlaced"}]},{"name":"reset","qualifiedname":"DirectDraw::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":119,"column":6},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":1005,"end":1013}},"prot":"public","static":false,"definition":"void DirectDraw::reset","returnType":"void","argsstring":"(DirectDraw this)","paramDocs":"\n\n_@param_ `this`: DirectDraw instance\n\n","parameters":[{"name":"DirectDraw this","description":"DirectDraw Instance"}]},{"name":"preparteToDraw","qualifiedname":"DirectDraw::preparteToDraw","description":"Prepare the manager to start drawing to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":122,"column":6},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":1015,"end":1038}},"prot":"public","static":false,"definition":"void DirectDraw::preparteToDraw","returnType":"void","argsstring":"(DirectDraw this)","paramDocs":"\n\n_@param_ `this`: DirectDraw instance\n\n","parameters":[{"name":"DirectDraw this","description":"DirectDraw Instance"}]},{"name":"setFrustum","qualifiedname":"DirectDraw::setFrustum","description":"Configure the frustum where drawing is allowed.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":126,"column":6},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":1040,"end":1086}},"prot":"public","static":false,"definition":"void DirectDraw::setFrustum","returnType":"void","argsstring":"(DirectDraw this, CameraFrustum frustum)","paramDocs":"\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `frustum`: 3D boundary when drawing is allowed\n\n","parameters":[{"name":"DirectDraw this","description":"DirectDraw Instance"},{"name":"CameraFrustum frustum","description":"3D boundary when drawing is allowed"}]},{"name":"getFrustum","qualifiedname":"DirectDraw::getFrustum","description":"Retrieve the frustum where drawing is allowed.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":130,"column":15},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":1088,"end":1091}},"prot":"public","static":false,"definition":"CameraFrustum DirectDraw::getFrustum","argsstring":"(DirectDraw this)","paramDocs":"\n\n_@param_ `this`: DirectDraw instance\n\n_@return_ `CameraFrustum` 3D boundary when drawing is allowed\n\n","parameters":[{"name":"DirectDraw this","description":"DirectDraw Instance"}]},{"name":"print","qualifiedname":"DirectDraw::print","description":"Print the manager's current status.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":135,"column":6},"body":{"uri":"source/graphics/3d/DirectDraw.c","start":1094,"end":1102}},"prot":"public","static":false,"definition":"void DirectDraw::print","returnType":"void","argsstring":"(DirectDraw this, int16 x, int16 y)","paramDocs":"\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"DirectDraw this","description":"DirectDraw Instance"},{"name":"int16 x","description":"Screen x coordinate where to print"},{"name":"int16 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"drawnPixelsCounter","qualifiedname":"DirectDraw::drawnPixelsCounter","description":"Number of pixels drawn during the current cycle","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":44,"column":8},"body":{"uri":"source/graphics/3d/DirectDraw.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"maximumPixelsToDraw","qualifiedname":"DirectDraw::maximumPixelsToDraw","description":"Maximum number of pixels to draw during each cycle.","location":{"header":{"uri":"source/graphics/3d/DirectDraw.h","line":47,"column":8},"body":{"uri":"source/graphics/3d/DirectDraw.h","start":47,"end":47}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Entity":{"__contributor":"core","name":"Entity","base":"Container","description":"Class `Entity`\n\nInherits from `Container`\n\nImplements a container that can have sprites, wireframes and colliders attached to it.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":136,"column":1},"body":{"uri":"source/stage/entities/Entity.h","start":137,"end":451}},"methods":[{"name":"createEntity","qualifiedname":"Entity::createEntity","description":"Create a new entity instance and configure it with the provided arguments.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":182,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":57,"end":91}},"prot":"public","static":true,"definition":"static Entity Entity::createEntity","argsstring":"(const PositionedEntity *const positionedEntity, int16 internalId)","paramDocs":"\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@return_ `static` The new entity\n\n","parameters":[{"name":"int16 internalId","description":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"description":"ID to keep track internally of the new instance"}]},{"name":"createEntityDeferred","qualifiedname":"Entity::createEntityDeferred","description":"Create a new entity instance and configure it over time with the provided arguments.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":189,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":93,"end":128}},"prot":"public","static":true,"definition":"static Entity Entity::createEntityDeferred","argsstring":"(const PositionedEntity *const positionedEntity, int16 internalId)","paramDocs":"\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@return_ `static` The new, still not configured entity\n\n","parameters":[{"name":"int16 internalId","description":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"description":"ID to keep track internally of the new instance"}]},{"name":"getBoundingBoxFromSpec","qualifiedname":"Entity::getBoundingBoxFromSpec","description":"Compute the spatially located bounding box of an entity created with the provided positioned entity struct.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":195,"column":17},"body":{"uri":"source/stage/entities/Entity.c","start":130,"end":137}},"prot":"public","static":true,"definition":"static RightBox Entity::getBoundingBoxFromSpec","argsstring":"(const PositionedEntity *positionedEntity, const Vector3D *environmentPosition)","paramDocs":"\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the an entity\n\n_@param_ `environmentPosition`: Vector used as the origin with respect to which computed the bounding box's position\n\n_@return_ `static` Spatially located bounding box of an entity that would be created with the provided positioned entity struct\n\n","parameters":[{"name":"const Vector3D *environmentPosition","description":"Struct that defines which entity spec to use to configure the an entity"},{"description":"Vector used as the origin with respect to which computed the bounding box's position"}]},{"name":"isInsideFrustrum","qualifiedname":"Entity::isInsideFrustrum","description":"Test if the provided right box lies inside the camera's frustum.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":200,"column":20}},"prot":"public","static":true,"definition":"static bool Entity::isInsideFrustrum","argsstring":"(Vector3D vector3D, RightBox rightBox)","paramDocs":"\n\n_@param_ `vector3D`: `RightBox`'s translation vector\n\n_@param_ `rightBox`: `RightBox` to test\n\n","parameters":[{"name":"RightBox rightBox","description":"`RightBox`'s translation vector"},{"description":"`RightBox` to test"}]},{"name":"constructor","qualifiedname":"Entity::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Entity.h","line":206,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":407,"end":429}},"prot":"public","static":false,"definition":"void Entity::constructor","returnType":"void","argsstring":"(Entity this, EntitySpec *entitySpec, int16 internalId, const char *const name)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `entitySpec`: Specification that determines how to configure the entity\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@param_ `name`: Name to assign to the new instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"EntitySpec *entitySpec","description":"Specification that determines how to configure the entity"},{"name":"int16 internalId","description":"ID to keep track internally of the new instance"},{"name":"const char *const name","description":"Name to assign to the new instance"}]},{"name":"getRadius","qualifiedname":"Entity::getRadius","description":"Retrieve the object's radius.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":210,"column":18},"body":{"uri":"source/stage/entities/Entity.c","start":446,"end":474}},"prot":"public","static":false,"definition":"fixed_t Entity::getRadius","returnType":"override ","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` Radius\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getBounciness","qualifiedname":"Entity::getBounciness","description":"Retrieve the object's bounciness factor.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":214,"column":18},"body":{"uri":"source/stage/entities/Entity.c","start":476,"end":479}},"prot":"public","static":false,"definition":"fixed_t Entity::getBounciness","returnType":"override ","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getFrictionCoefficient","qualifiedname":"Entity::getFrictionCoefficient","description":"Retrieve the object's friction coefficient.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":218,"column":18},"body":{"uri":"source/stage/entities/Entity.c","start":481,"end":484}},"prot":"public","static":false,"definition":"fixed_t Entity::getFrictionCoefficient","returnType":"override ","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Object`'s friction coefficient\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"isSubjectToGravity","qualifiedname":"Entity::isSubjectToGravity","description":"Check if the object is subject to provided gravity vector.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":222,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":486,"end":489}},"prot":"public","static":false,"definition":"bool Entity::isSubjectToGravity","returnType":"override ","argsstring":"(Entity this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"Vector3D gravity"}]},{"name":"getInGameType","qualifiedname":"Entity::getInGameType","description":"Retrieve the enum that determines the type of game object.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":226,"column":17},"body":{"uri":"source/stage/entities/Entity.c","start":491,"end":494}},"prot":"public","static":false,"definition":"uint32 Entity::getInGameType","returnType":"override ","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"addComponents","qualifiedname":"Entity::addComponents","description":"Add the components that must attach to this entity.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":229,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":496,"end":509}},"prot":"public","static":false,"definition":"void Entity::addComponents","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"removeComponents","qualifiedname":"Entity::removeComponents","description":"Remove the components that attach to this entity.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":232,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":511,"end":517}},"prot":"public","static":false,"definition":"void Entity::removeComponents","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"show","qualifiedname":"Entity::show","description":"Make this instance visible.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":235,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":519,"end":538}},"prot":"public","static":false,"definition":"void Entity::show","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"hide","qualifiedname":"Entity::hide","description":"Make this instance invisible.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":238,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":540,"end":561}},"prot":"public","static":false,"definition":"void Entity::hide","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"suspend","qualifiedname":"Entity::suspend","description":"Prepare to suspend this instance's logic.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":241,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":563,"end":569}},"prot":"public","static":false,"definition":"void Entity::suspend","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"resume","qualifiedname":"Entity::resume","description":"Prepare to resume this instance's logic.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":244,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":571,"end":588}},"prot":"public","static":false,"definition":"void Entity::resume","returnType":"override void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"setTransparency","qualifiedname":"Entity::setTransparency","description":"Set this instance's transparency effects.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":248,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":590,"end":609}},"prot":"public","static":false,"definition":"void Entity::setTransparency","returnType":"override void","argsstring":"(Entity this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"uint8 transparency","description":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},{"name":"handlePropagatedMessage","qualifiedname":"Entity::handlePropagatedMessage","description":"Default interger message handler for propagateMessage","location":{"header":{"uri":"source/stage/entities/Entity.h","line":253,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":611,"end":632}},"prot":"public","static":false,"definition":"bool Entity::handlePropagatedMessage","returnType":"override ","argsstring":"(Entity this, int32 message)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `message`: Propagated integer message\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"int32 message","description":"Propagated integer message"}]},{"name":"getSpec","qualifiedname":"Entity::getSpec","description":"Retrieve the entity's spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":257,"column":12},"body":{"uri":"source/stage/entities/Entity.c","start":634,"end":637}},"prot":"public","static":false,"definition":"EntitySpec * Entity::getSpec","returnType":" *","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `EntitySpec` Specification that determines how the entity was configured\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getInternalId","qualifiedname":"Entity::getInternalId","description":"Retrieve the entity's internal id used by the engine to keep track of it.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":261,"column":7},"body":{"uri":"source/stage/entities/Entity.c","start":639,"end":642}},"prot":"public","static":false,"definition":"int16 Entity::getInternalId","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `int16` `Entity`'s internal id\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getEntityFactory","qualifiedname":"Entity::getEntityFactory","description":"Retrieve the entity's entity factory","location":{"header":{"uri":"source/stage/entities/Entity.h","line":265,"column":15},"body":{"uri":"source/stage/entities/Entity.c","start":644,"end":647}},"prot":"public","static":false,"definition":"EntityFactory Entity::getEntityFactory","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `EntityFactory` `Entity`'s entity facotyr\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"setNormalizedDirection","qualifiedname":"Entity::setNormalizedDirection","description":"Set the normalized direction towards where the entity faces.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":269,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":649,"end":674}},"prot":"public","static":false,"definition":"void Entity::setNormalizedDirection","returnType":"void","argsstring":"(Entity this, NormalizedDirection normalizedDirection)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `normalizedDirection`: New facing direction with is components normalized\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"NormalizedDirection normalizedDirection","description":"New facing direction with is components normalized"}]},{"name":"getNormalizedDirection","qualifiedname":"Entity::getNormalizedDirection","description":"Retrieve the normalized direction towards where the entity faces.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":273,"column":21},"body":{"uri":"source/stage/entities/Entity.c","start":676,"end":699}},"prot":"public","static":false,"definition":"NormalizedDirection Entity::getNormalizedDirection","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `NormalizedDirection` `Entity`'s facing direction with is components normalized\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"spawnChildEntity","qualifiedname":"Entity::spawnChildEntity","description":"Spawn a new child and configure it with the provided positioned entity struct.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":277,"column":8},"body":{"uri":"source/stage/entities/Entity.c","start":701,"end":718}},"prot":"public","static":false,"definition":"Entity Entity::spawnChildEntity","argsstring":"(Entity this, const PositionedEntity *const positionedEntity)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"const PositionedEntity *const positionedEntity","description":"Struct that defines which entity spec to use to configure the new child"}]},{"name":"addChildEntities","qualifiedname":"Entity::addChildEntities","description":"Spawn children and configure them with the provided entity specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":281,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":720,"end":738}},"prot":"public","static":false,"definition":"void Entity::addChildEntities","returnType":"void","argsstring":"(Entity this, const PositionedEntity *childrenSpecs)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `childrenSpecs`: Array of entity specs to use to initialize the new children\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"const PositionedEntity *childrenSpecs","description":"Array of entity specs to use to initialize the new children"}]},{"name":"addChildEntitiesDeferred","qualifiedname":"Entity::addChildEntitiesDeferred","description":"Spawn children and configure them over time with the provided entity specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":285,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":740,"end":760}},"prot":"public","static":false,"definition":"void Entity::addChildEntitiesDeferred","returnType":"void","argsstring":"(Entity this, const PositionedEntity *childrenSpecs)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `childrenSpecs`: Array of entity specs to use to initialize the new children\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"const PositionedEntity *childrenSpecs","description":"Array of entity specs to use to initialize the new children"}]},{"name":"getChildById","qualifiedname":"Entity::getChildById","description":"Retrieve a child of this entity whose internal ID equals the provided one.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":290,"column":8},"body":{"uri":"source/stage/entities/Entity.c","start":762,"end":779}},"prot":"public","static":false,"definition":"Entity Entity::getChildById","argsstring":"(Entity this, int16 id)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `id`: Internal ID to look for\n\n_@return_ `Entity` Child entity whose ID matches the provided one\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"int16 id","description":"Internal ID to look for"}]},{"name":"addBehavior","qualifiedname":"Entity::addBehavior","description":"Attach a new behavior to the entity and configure it with the provided spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":294,"column":10},"body":{"uri":"source/stage/entities/Entity.c","start":781,"end":803}},"prot":"public","static":false,"definition":"Behavior Entity::addBehavior","argsstring":"(Entity this, BehaviorSpec *behaviorSpec)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `behaviorSpec`: Specification to be used to configure the new behavior\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"BehaviorSpec *behaviorSpec","description":"Specification to be used to configure the new behavior"}]},{"name":"addBehaviors","qualifiedname":"Entity::addBehaviors","description":"Attach a new behaviors to the entity and configure them with the provided specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":299,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":805,"end":828}},"prot":"public","static":false,"definition":"void Entity::addBehaviors","returnType":"void","argsstring":"(Entity this, BehaviorSpec **behaviorSpecs, bool destroyOldBehaviors)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `behaviorSpecs`: Array of specification to be used to configure the new behaviors\n\n_@param_ `destroyOldBehaviors`: If true, all previously attached behaviors will be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"BehaviorSpec **behaviorSpecs","description":"Array of specification to be used to configure the new behaviors"},{"name":"bool destroyOldBehaviors","description":"If true, all previously attached behaviors will be removed"}]},{"name":"removeBehaviors","qualifiedname":"Entity::removeBehaviors","description":"Remove all attached behaviors.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":302,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":830,"end":840}},"prot":"public","static":false,"definition":"void Entity::removeBehaviors","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getBehaviors","qualifiedname":"Entity::getBehaviors","description":"Retrieve the linked list of behaviors that are instances of the provided class.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":309,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":842,"end":863}},"prot":"public","static":false,"definition":"bool Entity::getBehaviors","argsstring":"(Entity this, ClassPointer classPointer, VirtualList behaviors)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `classPointer`: Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`\n\n_@param_ `behaviors`: Linked list to be filled with the behaviors that meed the search criteria (it is externally allocated and must be externally deleted)\n\n_@return_ `bool` True if one or more behaviors met the search criteria; false otherwise\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"ClassPointer classPointer","description":"Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`"},{"name":"VirtualList behaviors","description":"Linked list to be filled with the behaviors that meed the search criteria (it is externally allocated and must be externally deleted)"}]},{"name":"addSprite","qualifiedname":"Entity::addSprite","description":"Attach a new sprite to the entity and configure it with the provided spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":315,"column":8},"body":{"uri":"source/stage/entities/Entity.c","start":865,"end":892}},"prot":"public","static":false,"definition":"Sprite Entity::addSprite","argsstring":"(Entity this, SpriteSpec *spriteSpec, SpriteManager spriteManager)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `spriteSpec`: Specification to be used to configure the new sprite\n\n_@param_ `spriteManager`: A reference to the `SpriteManager` used to speed up multiple calls to this method\n\n_@return_ `Sprite` The new sprite\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"SpriteSpec *spriteSpec","description":"Specification to be used to configure the new sprite"},{"name":"SpriteManager spriteManager","description":"A reference to the `SpriteManager` used to speed up multiple calls to this method"}]},{"name":"addSprites","qualifiedname":"Entity::addSprites","description":"Attach a new sprites to the entity and configure them with the provided specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":320,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":894,"end":912}},"prot":"public","static":false,"definition":"void Entity::addSprites","returnType":"void","argsstring":"(Entity this, SpriteSpec **spriteSpecs, bool destroyOldSprites)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `spriteSpecs`: Array of specification to be used to configure the new sprites\n\n_@param_ `destroyOldSprites`: If true, all previously attached sprites will be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"SpriteSpec **spriteSpecs","description":"Array of specification to be used to configure the new sprites"},{"name":"bool destroyOldSprites","description":"If true, all previously attached sprites will be removed"}]},{"name":"removeSprite","qualifiedname":"Entity::removeSprite","description":"Remove an attached sprite.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":324,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":914,"end":922}},"prot":"public","static":false,"definition":"void Entity::removeSprite","returnType":"void","argsstring":"(Entity this, Sprite sprite)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `sprite`: `Sprite` to be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"Sprite sprite","description":"`Sprite` to be removed"}]},{"name":"removeSprites","qualifiedname":"Entity::removeSprites","description":"Remove all attached sprites.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":327,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":924,"end":967}},"prot":"public","static":false,"definition":"void Entity::removeSprites","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getSprites","qualifiedname":"Entity::getSprites","description":"Retrieve the list of attached sprites.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":331,"column":13},"body":{"uri":"source/stage/entities/Entity.c","start":969,"end":972}},"prot":"public","static":false,"definition":"VirtualList Entity::getSprites","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached sprites\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"addWireframe","qualifiedname":"Entity::addWireframe","description":"Attach a new wireframe to the entity and configure it with the provided spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":337,"column":11},"body":{"uri":"source/stage/entities/Entity.c","start":974,"end":1001}},"prot":"public","static":false,"definition":"Wireframe Entity::addWireframe","argsstring":"(Entity this, WireframeSpec *wireframeSpec, WireframeManager wireframeManager)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframeSpec`: Specification to be used to configure the new sprite\n\n_@param_ `wireframeManager`: A reference to the `WireframeManager` used to speed up multiple calls to this method\n\n_@return_ `Wireframe` The new wireframe\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"WireframeSpec *wireframeSpec","description":"Specification to be used to configure the new sprite"},{"name":"WireframeManager wireframeManager","description":"A reference to the `WireframeManager` used to speed up multiple calls to this method"}]},{"name":"addWireframes","qualifiedname":"Entity::addWireframes","description":"Attach a new wireframes to the entity and configure them with the provided specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":342,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1003,"end":1021}},"prot":"public","static":false,"definition":"void Entity::addWireframes","returnType":"void","argsstring":"(Entity this, WireframeSpec **wireframeSpecs, bool destroyOldWireframes)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframeSpecs`: Array of specification to be used to configure the new wireframes\n\n_@param_ `destroyOldWireframes`: If true, all previously attached wireframes will be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"WireframeSpec **wireframeSpecs","description":"Array of specification to be used to configure the new wireframes"},{"name":"bool destroyOldWireframes","description":"If true, all previously attached wireframes will be removed"}]},{"name":"removeWireframe","qualifiedname":"Entity::removeWireframe","description":"Remove an attached wireframe.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":346,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1023,"end":1031}},"prot":"public","static":false,"definition":"void Entity::removeWireframe","returnType":"void","argsstring":"(Entity this, Wireframe wireframe)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframe`: `Wireframe` to be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"Wireframe wireframe","description":"`Wireframe` to be removed"}]},{"name":"removeWireframes","qualifiedname":"Entity::removeWireframes","description":"Remove all attached wireframes.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":349,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1033,"end":1049}},"prot":"public","static":false,"definition":"void Entity::removeWireframes","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getWireframes","qualifiedname":"Entity::getWireframes","description":"Retrieve the list of attached wireframes.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":353,"column":13},"body":{"uri":"source/stage/entities/Entity.c","start":1051,"end":1054}},"prot":"public","static":false,"definition":"VirtualList Entity::getWireframes","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached wireframes\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"addCollider","qualifiedname":"Entity::addCollider","description":"Attach a new collider to the entity and configure it with the provided spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":359,"column":10},"body":{"uri":"source/stage/entities/Entity.c","start":1056,"end":1083}},"prot":"public","static":false,"definition":"Collider Entity::addCollider","argsstring":"(Entity this, ColliderSpec *colliderSpec, CollisionManager collisionManager)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `colliderSpec`: Specification to be used to configure the new sprite\n\n_@param_ `collisionManager`: A reference to the `CollisionManager` used to speed up multiple calls to this method\n\n_@return_ `Collider` The new collider\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"ColliderSpec *colliderSpec","description":"Specification to be used to configure the new sprite"},{"name":"CollisionManager collisionManager","description":"A reference to the `CollisionManager` used to speed up multiple calls to this method"}]},{"name":"addColliders","qualifiedname":"Entity::addColliders","description":"Attach a new colliders to the entity and configure them with the provided specs.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":364,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1085,"end":1104}},"prot":"public","static":false,"definition":"void Entity::addColliders","returnType":"void","argsstring":"(Entity this, ColliderSpec *colliderSpecs, bool destroyOldColliders)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `colliderSpecs`: Array of specification to be used to configure the new colliders\n\n_@param_ `destroyOldColliders`: If true, all previously attached colliders will be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"ColliderSpec *colliderSpecs","description":"Array of specification to be used to configure the new colliders"},{"name":"bool destroyOldColliders","description":"If true, all previously attached colliders will be removed"}]},{"name":"removeCollider","qualifiedname":"Entity::removeCollider","description":"Remove an attached collider.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":368,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1106,"end":1114}},"prot":"public","static":false,"definition":"void Entity::removeCollider","returnType":"void","argsstring":"(Entity this, Collider collider)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `collider`: `Collider` to be removed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"Collider collider","description":"`Collider` to be removed"}]},{"name":"removeColliders","qualifiedname":"Entity::removeColliders","description":"Remove all attached colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":371,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1116,"end":1132}},"prot":"public","static":false,"definition":"void Entity::removeColliders","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getColliders","qualifiedname":"Entity::getColliders","description":"Retrieve the list of attached colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":375,"column":13},"body":{"uri":"source/stage/entities/Entity.c","start":1134,"end":1137}},"prot":"public","static":false,"definition":"VirtualList Entity::getColliders","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached colliders\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"enableCollisions","qualifiedname":"Entity::enableCollisions","description":"Enable collision detection on the entity's colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":378,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1139,"end":1152}},"prot":"public","static":false,"definition":"void Entity::enableCollisions","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"disableCollisions","qualifiedname":"Entity::disableCollisions","description":"Disable collision detection on the entity's colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":381,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1154,"end":1167}},"prot":"public","static":false,"definition":"void Entity::disableCollisions","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"checkCollisions","qualifiedname":"Entity::checkCollisions","description":"Enable or disable collision detection against other entities' colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":385,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1169,"end":1187}},"prot":"public","static":false,"definition":"void Entity::checkCollisions","returnType":"void","argsstring":"(Entity this, bool activate)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `activate`: If true, this entity's colliders check collision against other entities'\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"bool activate","description":"If true, this entity's colliders check collision against other entities'"}]},{"name":"registerCollisions","qualifiedname":"Entity::registerCollisions","description":"Enable or disable the register of detected collisions.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":390,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1189,"end":1200}},"prot":"public","static":false,"definition":"void Entity::registerCollisions","returnType":"void","argsstring":"(Entity this, bool activate)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `activate`: If false, this entity's colliders won't keep track of collisions, hence they won't notify of it of persisting (`undefined`) collisions or when end (\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"bool activate","description":"If false, this entity's colliders won't keep track of collisions, hence they won't notify of it of persisting (`undefined`) collisions or when end ("}]},{"name":"setCollidersLayers","qualifiedname":"Entity::setCollidersLayers","description":"Set the layers in which this entity's colliders must live.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":394,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1202,"end":1213}},"prot":"public","static":false,"definition":"void Entity::setCollidersLayers","returnType":"void","argsstring":"(Entity this, uint32 layers)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `layers`: Flags that determine the layers for the entity's colliders\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"uint32 layers","description":"Flags that determine the layers for the entity's colliders"}]},{"name":"getCollidersLayers","qualifiedname":"Entity::getCollidersLayers","description":"Retrieve the layers in which this entity's colliders live.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":398,"column":8},"body":{"uri":"source/stage/entities/Entity.c","start":1215,"end":1230}},"prot":"public","static":false,"definition":"uint32 Entity::getCollidersLayers","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` Flags that determine the layers where the entity's colliders live\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"setCollidersLayersToIgnore","qualifiedname":"Entity::setCollidersLayersToIgnore","description":"Set the layers that the entity's colliders must ignore when detecting collision.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":402,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1232,"end":1243}},"prot":"public","static":false,"definition":"void Entity::setCollidersLayersToIgnore","returnType":"void","argsstring":"(Entity this, uint32 layersToIgnore)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `layersToIgnore`: Flags that determine the layers with colliders to ignore when detecting collisions\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"uint32 layersToIgnore","description":"Flags that determine the layers with colliders to ignore when detecting collisions"}]},{"name":"getCollidersLayersToIgnore","qualifiedname":"Entity::getCollidersLayersToIgnore","description":"Retrieve the layers that the entity's colliders ignore when detecting collision.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":406,"column":8},"body":{"uri":"source/stage/entities/Entity.c","start":1245,"end":1260}},"prot":"public","static":false,"definition":"uint32 Entity::getCollidersLayersToIgnore","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` The layers that the entity's colliders ignore when detecting collision\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"hasColliders","qualifiedname":"Entity::hasColliders","description":"Check if the entity has attached colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":410,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1262,"end":1265}},"prot":"public","static":false,"definition":"bool Entity::hasColliders","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `bool` True if the entity hast at least on collider arrached; false otherwise\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"showColliders","qualifiedname":"Entity::showColliders","description":"Make the entity's colliders visible.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":413,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1267,"end":1276}},"prot":"public","static":false,"definition":"void Entity::showColliders","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"hideColliders","qualifiedname":"Entity::hideColliders","description":"Make the entity's colliders invisible.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":416,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1278,"end":1287}},"prot":"public","static":false,"definition":"void Entity::hideColliders","returnType":"void","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"calculateSize","qualifiedname":"Entity::calculateSize","description":"Configure the entity's size.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":420,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1289,"end":1324}},"prot":"public","static":false,"definition":"void Entity::calculateSize","returnType":"void","argsstring":"(Entity this, bool force)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `force`: If true, the size is computed even if has already been computed\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"bool force","description":"If true, the size is computed even if has already been computed"}]},{"name":"getWidth","qualifiedname":"Entity::getWidth","description":"Retrieve the entity's width.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":424,"column":9},"body":{"uri":"source/stage/entities/Entity.c","start":1326,"end":1334}},"prot":"public","static":false,"definition":"fixed_t Entity::getWidth","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s width\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getHeight","qualifiedname":"Entity::getHeight","description":"Retrieve the entity's height.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":428,"column":9},"body":{"uri":"source/stage/entities/Entity.c","start":1336,"end":1344}},"prot":"public","static":false,"definition":"fixed_t Entity::getHeight","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s height\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"getDepth","qualifiedname":"Entity::getDepth","description":"Retrieve the entity's depth.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":432,"column":9},"body":{"uri":"source/stage/entities/Entity.c","start":1346,"end":1354}},"prot":"public","static":false,"definition":"fixed_t Entity::getDepth","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s depth\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]},{"name":"isInCameraRange","qualifiedname":"Entity::isInCameraRange","description":"Check if the entity is withing the camera's frustum.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":438,"column":6},"body":{"uri":"source/stage/entities/Entity.c","start":1356,"end":1429}},"prot":"public","static":false,"definition":"bool Entity::isInCameraRange","argsstring":"(Entity this, int16 padding, bool recursive)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `padding`: Padding to be added to camera's frustum\n\n_@param_ `recursive`: If true, the check is performed on the children, grand children, etc.\n\n_@return_ `bool` True if the entity is within the camera's frustum\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"int16 padding","description":"Padding to be added to camera's frustum"},{"name":"bool recursive","description":"If true, the check is performed on the children, grand children, etc."}]},{"name":"setSpec","qualifiedname":"Entity::setSpec","description":"Set the particle systems's spec.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":442,"column":14},"body":{"uri":"source/stage/entities/Entity.c","start":1431,"end":1435}},"prot":"public","static":false,"definition":"void Entity::setSpec","returnType":"void","argsstring":"(Entity this, void *entitySpec)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `entitySpec`\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"void *entitySpec"}]},{"name":"setExtraInfo","qualifiedname":"Entity::setExtraInfo","description":"Set any extra info provided by the `PositionedEntity` struct used to instantiate this entity.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":446,"column":14},"body":{"uri":"source/stage/entities/Entity.c","start":1437,"end":1438}},"prot":"public","static":false,"definition":"void Entity::setExtraInfo","returnType":"void","argsstring":"(Entity this, void *extraInfo)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@param_ `extraInfo`: Pointer to the extra information that the entity might need\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"},{"name":"void *extraInfo","description":"Pointer to the extra information that the entity might need"}]},{"name":"alwaysStreamIn","qualifiedname":"Entity::alwaysStreamIn","description":"Check if the entity must be streamed in after being streamed out or destroyed.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":450,"column":14},"body":{"uri":"source/stage/entities/Entity.c","start":1440,"end":1443}},"prot":"public","static":false,"definition":"bool Entity::alwaysStreamIn","argsstring":"(Entity this)","paramDocs":"\n\n_@param_ `this`: Entity instance\n\n_@return_ `bool` True if the streaming must spawn this entity back when deleted\n\n","parameters":[{"name":"Entity this","description":"Entity Instance"}]}],"variables":[{"name":"collisionsEnabled","qualifiedname":"Entity::collisionsEnabled","description":"Signals if collisions against this entity's colliders are allowed","location":{"header":{"uri":"source/stage/entities/Entity.h","line":141,"column":6},"body":{"uri":"source/stage/entities/Entity.h","start":141,"end":141}},"prot":"protected","static":false},{"name":"checkingCollisions","qualifiedname":"Entity::checkingCollisions","description":"Signals if collisions are against other entity's colliders are allowed.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":144,"column":6},"body":{"uri":"source/stage/entities/Entity.h","start":144,"end":144}},"prot":"protected","static":false},{"name":"internalId","qualifiedname":"Entity::internalId","description":"`Entity`'s internal id, set by the engine.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":147,"column":7},"body":{"uri":"source/stage/entities/Entity.h","start":147,"end":147}},"prot":"protected","static":false},{"name":"size","qualifiedname":"Entity::size","description":"`Size` of the entity in function of its components and its children's, grand children's, etc. components","location":{"header":{"uri":"source/stage/entities/Entity.h","line":151,"column":6},"body":{"uri":"source/stage/entities/Entity.h","start":151,"end":151}},"prot":"protected","static":false},{"name":"entityFactory","qualifiedname":"Entity::entityFactory","description":"Factory to create this entity's children.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":154,"column":15},"body":{"uri":"source/stage/entities/Entity.h","start":154,"end":154}},"prot":"protected","static":false},{"name":"sprites","qualifiedname":"Entity::sprites","description":"Linked list of attached sprites.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":157,"column":13},"body":{"uri":"source/stage/entities/Entity.h","start":157,"end":157}},"prot":"protected","static":false},{"name":"wireframes","qualifiedname":"Entity::wireframes","description":"Linked list of attached wireframes.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":160,"column":13},"body":{"uri":"source/stage/entities/Entity.h","start":160,"end":160}},"prot":"protected","static":false},{"name":"colliders","qualifiedname":"Entity::colliders","description":"Linked list of attached colliders.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":163,"column":13},"body":{"uri":"source/stage/entities/Entity.h","start":163,"end":163}},"prot":"protected","static":false},{"name":"behaviors","qualifiedname":"Entity::behaviors","description":"Linked list of attached behaviors.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":166,"column":13},"body":{"uri":"source/stage/entities/Entity.h","start":166,"end":166}},"prot":"protected","static":false},{"name":"entitySpec","qualifiedname":"Entity::entitySpec","description":"Pointer to the spec that defines how to initialize the entity.","location":{"header":{"uri":"source/stage/entities/Entity.h","line":169,"column":12},"body":{"uri":"source/stage/entities/Entity.h","start":169,"end":169}},"prot":"protected","static":false},{"name":"centerDisplacement","qualifiedname":"Entity::centerDisplacement","description":"Diplacement between the entity's bounding box's center and its local position used to speed up the visibility check of the entity withing the camera's frustum","location":{"header":{"uri":"source/stage/entities/Entity.h","line":173,"column":10},"body":{"uri":"source/stage/entities/Entity.h","start":173,"end":173}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"EntityROMSpec","qualifiedname":"Entity::EntityROMSpec","description":"An `Entity` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Entity.h","line":85,"column":26},"body":{"uri":"source/stage/entities/Entity.h","start":85,"end":85}},"prot":"public","static":false},{"name":"PositionedEntityROMSpec","qualifiedname":"Entity::PositionedEntityROMSpec","description":"A `PositionedEntity` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Entity.h","line":122,"column":32},"body":{"uri":"source/stage/entities/Entity.h","start":122,"end":122}},"prot":"public","static":false}]},"EntityFactory":{"__contributor":"core","name":"EntityFactory","base":"Object","description":"Class `EntityFactory`\n\nInherits from `Object`\n\nImplements a factory that creates entities over time.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":49,"column":1},"body":{"uri":"source/stage/entities/EntityFactory.h","start":50,"end":103}},"methods":[{"name":"constructor","qualifiedname":"EntityFactory::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":72,"column":6},"body":{"uri":"source/stage/entities/EntityFactory.c","start":80,"end":91}},"prot":"public","static":false,"definition":"void EntityFactory::constructor","returnType":"void","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]},{"name":"spawnEntity","qualifiedname":"EntityFactory::spawnEntity","description":"Create a new entity instance and configure it with the provided arguments.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":80,"column":6},"body":{"uri":"source/stage/entities/EntityFactory.c","start":163,"end":186}},"prot":"public","static":false,"definition":"void EntityFactory::spawnEntity","returnType":"void","argsstring":"(EntityFactory this, const PositionedEntity *positionedEntity, Container parent, EventListener callback, int16 internalId)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `parent`: The parent of the new entity instance\n\n_@param_ `callback`: Callback to inform the parent when the new entity is ready\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"},{"name":"const PositionedEntity *positionedEntity","description":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"name":"Container parent","description":"The parent of the new entity instance"},{"name":"EventListener callback","description":"Callback to inform the parent when the new entity is ready"},{"name":"int16 internalId","description":"ID to keep track internally of the new instance"}]},{"name":"createNextEntity","qualifiedname":"EntityFactory::createNextEntity","description":"Create the next queued entity.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":84,"column":6},"body":{"uri":"source/stage/entities/EntityFactory.c","start":188,"end":221}},"prot":"public","static":false,"definition":"bool EntityFactory::createNextEntity","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n_@return_ `bool` False if there are no entities pending instantiation; true otherwise\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]},{"name":"hasEntitiesPending","qualifiedname":"EntityFactory::hasEntitiesPending","description":"Check if there are entities pending instantiation.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":88,"column":6},"body":{"uri":"source/stage/entities/EntityFactory.c","start":223,"end":228}},"prot":"public","static":false,"definition":"bool EntityFactory::hasEntitiesPending","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n_@return_ `bool` True if there are entities pending instantiation; false otherwise\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]},{"name":"print","qualifiedname":"EntityFactory::print","description":"Print the factory's state.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":93,"column":6},"body":{"uri":"source/stage/entities/EntityFactory.c","start":232,"end":254}},"prot":"public","static":false,"definition":"void EntityFactory::print","returnType":"void","argsstring":"(EntityFactory this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"instantiateEntities","qualifiedname":"EntityFactory::instantiateEntities","description":"These are not meant to be called externally. They are declared here because of the preprocessor's limitations for forward declarations in source files. Don't call these.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":100,"column":8},"body":{"uri":"source/stage/entities/EntityFactory.c","start":264,"end":314}},"prot":"private","static":false,"definition":"uint32 EntityFactory::instantiateEntities","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]},{"name":"transformEntities","qualifiedname":"EntityFactory::transformEntities","description":"","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":101,"column":8},"body":{"uri":"source/stage/entities/EntityFactory.c","start":316,"end":441}},"prot":"private","static":false,"definition":"uint32 EntityFactory::transformEntities","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]},{"name":"addChildEntities","qualifiedname":"EntityFactory::addChildEntities","description":"","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":102,"column":8},"body":{"uri":"source/stage/entities/EntityFactory.c","start":443,"end":490}},"prot":"private","static":false,"definition":"uint32 EntityFactory::addChildEntities","argsstring":"(EntityFactory this)","paramDocs":"\n\n_@param_ `this`: EntityFactory instance\n\n","parameters":[{"name":"EntityFactory this","description":"EntityFactory Instance"}]}],"variables":[{"name":"entitiesToInstantiate","qualifiedname":"EntityFactory::entitiesToInstantiate","description":"List of entities pending instantiation","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":54,"column":13},"body":{"uri":"source/stage/entities/EntityFactory.h","start":54,"end":54}},"prot":"protected","static":false},{"name":"entitiesToTransform","qualifiedname":"EntityFactory::entitiesToTransform","description":"List of entities pending transformation.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":57,"column":13},"body":{"uri":"source/stage/entities/EntityFactory.h","start":57,"end":57}},"prot":"protected","static":false},{"name":"entitiesToAddAsChildren","qualifiedname":"EntityFactory::entitiesToAddAsChildren","description":"List of entities pending being added to their parent.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":60,"column":13},"body":{"uri":"source/stage/entities/EntityFactory.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"spawnedEntities","qualifiedname":"EntityFactory::spawnedEntities","description":"List of entities that have been completely instantianted and configured.","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":63,"column":13},"body":{"uri":"source/stage/entities/EntityFactory.h","start":63,"end":63}},"prot":"protected","static":false},{"name":"instantiationPhase","qualifiedname":"EntityFactory::instantiationPhase","description":"Index of the current phase to process for the instantiation and configuration of entities","location":{"header":{"uri":"source/stage/entities/EntityFactory.h","line":67,"column":7},"body":{"uri":"source/stage/entities/EntityFactory.h","start":67,"end":67}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Error":{"__contributor":"core","name":"Error","base":"Object","description":"Class `Error`\n\nInherits from `Object`\n\nCatches assertions and hardware exceptions.","location":{"header":{"uri":"source/base/Error.h","line":32,"column":11},"body":{"uri":"source/base/Error.h","start":33,"end":53}},"methods":[{"name":"getInstance","qualifiedname":"Error::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/base/Error.h","line":38,"column":14}},"prot":"public","static":true,"definition":"static Error Error::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Error` singleton\n\n","parameters":[]},{"name":"triggerException","qualifiedname":"Error::triggerException","description":"Locks the program in a screen with the details of what caused the exception.","location":{"header":{"uri":"source/base/Error.h","line":43,"column":13},"body":{"uri":"source/base/Error.c","start":51,"end":187}},"prot":"public","static":true,"definition":"static void Error::triggerException","returnType":"void","argsstring":"(char *message, char *detail)","paramDocs":"\n\n_@param_ `message`: Pointer to a brief description of the exception\n\n_@param_ `detail`: Pointer to a detailed description of the exception\n\n","parameters":[{"name":"char *detail","description":"Pointer to a brief description of the exception"},{"description":"Pointer to a detailed description of the exception"}]},{"name":"zeroDivisionException","qualifiedname":"Error::zeroDivisionException","description":"Handles hardware's zero division exception.","location":{"header":{"uri":"source/base/Error.h","line":46,"column":13},"body":{"uri":"source/base/Error.c","start":189,"end":207}},"prot":"public","static":true,"definition":"static void Error::zeroDivisionException","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"invalidOpcodeException","qualifiedname":"Error::invalidOpcodeException","description":"Handles hardware's invalid opcode exception.","location":{"header":{"uri":"source/base/Error.h","line":49,"column":13},"body":{"uri":"source/base/Error.c","start":209,"end":264}},"prot":"public","static":true,"definition":"static void Error::invalidOpcodeException","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"floatingPointException","qualifiedname":"Error::floatingPointException","description":"Handles hardware's floating point exception.","location":{"header":{"uri":"source/base/Error.h","line":52,"column":13},"body":{"uri":"source/base/Error.c","start":266,"end":321}},"prot":"public","static":true,"definition":"static void Error::floatingPointException","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]}],"variables":[],"enums":[],"typedefs":[]},"FrameBlendBgmapSprite":{"__contributor":"core","name":"FrameBlendBgmapSprite","base":"BgmapSprite","description":"Class `FrameBlendBgmapSprite`\n\nInherits from `BgmapSprite`\n\nBlends two frames of animation into a single one to achieve hi color images with a single sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","line":50,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","start":51,"end":66}},"methods":[{"name":"constructor","qualifiedname":"FrameBlendBgmapSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","line":60,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.c","start":37,"end":45}},"prot":"public","static":false,"definition":"void FrameBlendBgmapSprite::constructor","returnType":"void","argsstring":"(FrameBlendBgmapSprite this, SpatialObject owner, const FrameBlendBgmapSpriteSpec *frameBlendBgmapSpriteSpec)","paramDocs":"\n\n_@param_ `this`: FrameBlendBgmapSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `frameBlendBgmapSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"FrameBlendBgmapSprite this","description":"FrameBlendBgmapSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const FrameBlendBgmapSpriteSpec *frameBlendBgmapSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"doRender","qualifiedname":"FrameBlendBgmapSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","line":65,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.c","start":52,"end":59}},"prot":"public","static":false,"definition":"int16 FrameBlendBgmapSprite::doRender","returnType":"override ","argsstring":"(FrameBlendBgmapSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: FrameBlendBgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"FrameBlendBgmapSprite this","description":"FrameBlendBgmapSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]}],"variables":[{"name":"actualFrame","qualifiedname":"FrameBlendBgmapSprite::actualFrame","description":"The frame to show during the game cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","line":53,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","start":53,"end":53}},"prot":"private","static":false}],"enums":[],"typedefs":[{"name":"FrameBlendBgmapSpriteROMSpec","qualifiedname":"FrameBlendBgmapSprite::FrameBlendBgmapSpriteROMSpec","description":"A `FrameBlendBgmapSprite` spec that is stored in ROM.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","line":36,"column":41},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/FrameBlendBgmapSprite.h","start":36,"end":36}},"prot":"public","static":false}]},"FrameRate":{"__contributor":"core","name":"FrameRate","base":"ListenerObject","description":"Class `FrameRate`\n\nInherits from `ListenerObject`\n\nKeeps track of the program's frame rate.","location":{"header":{"uri":"source/base/FrameRate.h","line":32,"column":11},"body":{"uri":"source/base/FrameRate.h","start":33,"end":81}},"methods":[{"name":"getInstance","qualifiedname":"FrameRate::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/base/FrameRate.h","line":61,"column":18}},"prot":"public","static":true,"definition":"static FrameRate FrameRate::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `FrameRate` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"FrameRate::reset","description":"Reset the state of the manager.","location":{"header":{"uri":"source/base/FrameRate.h","line":64,"column":6},"body":{"uri":"source/base/FrameRate.c","start":27,"end":35}},"prot":"public","static":false,"definition":"void FrameRate::reset","returnType":"void","argsstring":"(FrameRate this)","paramDocs":"\n\n_@param_ `this`: FrameRate instance\n\n","parameters":[{"name":"FrameRate this","description":"FrameRate Instance"}]},{"name":"setTarget","qualifiedname":"FrameRate::setTarget","description":"Set the target frames per second.","location":{"header":{"uri":"source/base/FrameRate.h","line":68,"column":6},"body":{"uri":"source/base/FrameRate.c","start":37,"end":41}},"prot":"public","static":false,"definition":"void FrameRate::setTarget","returnType":"void","argsstring":"(FrameRate this, uint8 targetFPS)","paramDocs":"\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `targetFPS`: Target frames per second\n\n","parameters":[{"name":"FrameRate this","description":"FrameRate Instance"},{"name":"uint8 targetFPS","description":"Target frames per second"}]},{"name":"update","qualifiedname":"FrameRate::update","description":"Update the elapsed frames during the current second.","location":{"header":{"uri":"source/base/FrameRate.h","line":71,"column":6},"body":{"uri":"source/base/FrameRate.c","start":43,"end":46}},"prot":"public","static":false,"definition":"void FrameRate::update","returnType":"void","argsstring":"(FrameRate this)","paramDocs":"\n\n_@param_ `this`: FrameRate instance\n\n","parameters":[{"name":"FrameRate this","description":"FrameRate Instance"}]},{"name":"gameFrameStarted","qualifiedname":"FrameRate::gameFrameStarted","description":"The next game frame cycle has started.","location":{"header":{"uri":"source/base/FrameRate.h","line":75,"column":6},"body":{"uri":"source/base/FrameRate.c","start":48,"end":105}},"prot":"public","static":false,"definition":"void FrameRate::gameFrameStarted","returnType":"void","argsstring":"(FrameRate this, bool gameCycleEnded)","paramDocs":"\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `gameCycleEnded`: Flag that indicates if the previous game frame was completed before the current second has elapsed\n\n","parameters":[{"name":"FrameRate this","description":"FrameRate Instance"},{"name":"bool gameCycleEnded","description":"Flag that indicates if the previous game frame was completed before the current second has elapsed"}]},{"name":"print","qualifiedname":"FrameRate::print","description":"Print the frames per second statistics.","location":{"header":{"uri":"source/base/FrameRate.h","line":80,"column":6},"body":{"uri":"source/base/FrameRate.c","start":107,"end":121}},"prot":"public","static":false,"definition":"void FrameRate::print","returnType":"void","argsstring":"(FrameRate this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"FrameRate this","description":"FrameRate Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"totalFPS","qualifiedname":"FrameRate::totalFPS","description":"Accumulated frames per second","location":{"header":{"uri":"source/base/FrameRate.h","line":37,"column":8},"body":{"uri":"source/base/FrameRate.h","start":37,"end":37}},"prot":"protected","static":false},{"name":"totalUnevenFPS","qualifiedname":"FrameRate::totalUnevenFPS","description":"Accumulated uneven frames per second.","location":{"header":{"uri":"source/base/FrameRate.h","line":40,"column":8},"body":{"uri":"source/base/FrameRate.h","start":40,"end":40}},"prot":"protected","static":false},{"name":"seconds","qualifiedname":"FrameRate::seconds","description":"Accumualted elapssed seconds.","location":{"header":{"uri":"source/base/FrameRate.h","line":43,"column":8},"body":{"uri":"source/base/FrameRate.h","start":43,"end":43}},"prot":"protected","static":false},{"name":"FPS","qualifiedname":"FrameRate::FPS","description":"Current frames per second.","location":{"header":{"uri":"source/base/FrameRate.h","line":46,"column":8},"body":{"uri":"source/base/FrameRate.h","start":46,"end":46}},"prot":"protected","static":false},{"name":"gameFrameStarts","qualifiedname":"FrameRate::gameFrameStarts","description":"Total number of game frame starts.","location":{"header":{"uri":"source/base/FrameRate.h","line":49,"column":8},"body":{"uri":"source/base/FrameRate.h","start":49,"end":49}},"prot":"protected","static":false},{"name":"unevenFPS","qualifiedname":"FrameRate::unevenFPS","description":"Uneven frames during the current second.","location":{"header":{"uri":"source/base/FrameRate.h","line":52,"column":8},"body":{"uri":"source/base/FrameRate.h","start":52,"end":52}},"prot":"protected","static":false},{"name":"targetFPS","qualifiedname":"FrameRate::targetFPS","description":"The target frames per second.","location":{"header":{"uri":"source/base/FrameRate.h","line":55,"column":7},"body":{"uri":"source/base/FrameRate.h","start":55,"end":55}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"GameState":{"__contributor":"core","name":"GameState","base":"State","description":"Class `GameState`\n\nInherits from `State`\n\nImplements a state that the `VUEngine`'s state machine can transition into.","location":{"header":{"uri":"source/states/GameState.h","line":47,"column":1},"body":{"uri":"source/states/GameState.h","start":48,"end":260}},"methods":[{"name":"constructor","qualifiedname":"GameState::constructor","description":"Class' constructor","location":{"header":{"uri":"source/states/GameState.h","line":88,"column":6},"body":{"uri":"source/states/GameState.c","start":41,"end":63}},"prot":"public","static":false,"definition":"void GameState::constructor","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"handleMessage","qualifiedname":"GameState::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/states/GameState.h","line":93,"column":15},"body":{"uri":"source/states/GameState.c","start":105,"end":116}},"prot":"public","static":false,"definition":"bool GameState::handleMessage","returnType":"override ","argsstring":"(GameState this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]},{"name":"enter","qualifiedname":"GameState::enter","description":"Prepares the object to enter this state.","location":{"header":{"uri":"source/states/GameState.h","line":97,"column":15},"body":{"uri":"source/states/GameState.c","start":118,"end":127}},"prot":"public","static":false,"definition":"void GameState::enter","returnType":"override void","argsstring":"(GameState this, void *owner)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is entering in this state"}]},{"name":"execute","qualifiedname":"GameState::execute","description":"Updates the object in this state.","location":{"header":{"uri":"source/states/GameState.h","line":101,"column":15},"body":{"uri":"source/states/GameState.c","start":129,"end":138}},"prot":"public","static":false,"definition":"void GameState::execute","returnType":"override void","argsstring":"(GameState this, void *owner)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"exit","qualifiedname":"GameState::exit","description":"Prepares the object to exit this state.","location":{"header":{"uri":"source/states/GameState.h","line":105,"column":15},"body":{"uri":"source/states/GameState.c","start":140,"end":177}},"prot":"public","static":false,"definition":"void GameState::exit","returnType":"override void","argsstring":"(GameState this, void *owner)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is exiting this state"}]},{"name":"suspend","qualifiedname":"GameState::suspend","description":"Prepares the object to become inactive in this state.","location":{"header":{"uri":"source/states/GameState.h","line":109,"column":15},"body":{"uri":"source/states/GameState.c","start":179,"end":207}},"prot":"public","static":false,"definition":"void GameState::suspend","returnType":"override void","argsstring":"(GameState this, void *owner)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"resume","qualifiedname":"GameState::resume","description":"Prepares the object to become active in this state.","location":{"header":{"uri":"source/states/GameState.h","line":113,"column":15},"body":{"uri":"source/states/GameState.c","start":209,"end":242}},"prot":"public","static":false,"definition":"void GameState::resume","returnType":"override void","argsstring":"(GameState this, void *owner)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"processMessage","qualifiedname":"GameState::processMessage","description":"Process a `Telegram` sent to an object that is in this state.","location":{"header":{"uri":"source/states/GameState.h","line":118,"column":15},"body":{"uri":"source/states/GameState.c","start":244,"end":249}},"prot":"public","static":false,"definition":"bool GameState::processMessage","returnType":"override ","argsstring":"(GameState this, void *owner, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n_@param_ `telegram`: `Telegram` to process\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"void *owner","description":"`Object` that is in this state"},{"name":"Telegram telegram","description":"`Telegram` to process"}]},{"name":"configureStage","qualifiedname":"GameState::configureStage","description":"Configure the stage with the provided stage spec.","location":{"header":{"uri":"source/states/GameState.h","line":123,"column":6},"body":{"uri":"source/states/GameState.c","start":251,"end":289}},"prot":"public","static":false,"definition":"void GameState::configureStage","returnType":"void","argsstring":"(GameState this, StageSpec *stageSpec, VirtualList positionedEntitiesToIgnore)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `stageSpec`: Specification that determines how to configure the stage\n\n_@param_ `positionedEntitiesToIgnore`: List of positioned entity structs to register for streaming\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"StageSpec *stageSpec","description":"Specification that determines how to configure the stage"},{"name":"VirtualList positionedEntitiesToIgnore","description":"List of positioned entity structs to register for streaming"}]},{"name":"getUIContainer","qualifiedname":"GameState::getUIContainer","description":"Retrieve the UI container.","location":{"header":{"uri":"source/states/GameState.h","line":127,"column":13},"body":{"uri":"source/states/GameState.c","start":291,"end":294}},"prot":"public","static":false,"definition":"UIContainer GameState::getUIContainer","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `UIContainer` UI `Container`\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getStage","qualifiedname":"GameState::getStage","description":"Retrieve the stage instance.","location":{"header":{"uri":"source/states/GameState.h","line":131,"column":7},"body":{"uri":"source/states/GameState.c","start":296,"end":299}},"prot":"public","static":false,"definition":"Stage GameState::getStage","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `Stage` Game state's stage\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getPhysicalWorld","qualifiedname":"GameState::getPhysicalWorld","description":"Retrieve the physical world.","location":{"header":{"uri":"source/states/GameState.h","line":135,"column":15},"body":{"uri":"source/states/GameState.c","start":301,"end":309}},"prot":"public","static":false,"definition":"PhysicalWorld GameState::getPhysicalWorld","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `PhysicalWorld` Game state's physical world\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getCollisionManager","qualifiedname":"GameState::getCollisionManager","description":"Retrieve the collision manager.","location":{"header":{"uri":"source/states/GameState.h","line":139,"column":18},"body":{"uri":"source/states/GameState.c","start":311,"end":319}},"prot":"public","static":false,"definition":"CollisionManager GameState::getCollisionManager","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `CollisionManager` Game state's collision manager\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getLogicsClock","qualifiedname":"GameState::getLogicsClock","description":"Retrieve the clock that serves to control the game's logic.","location":{"header":{"uri":"source/states/GameState.h","line":143,"column":7},"body":{"uri":"source/states/GameState.c","start":321,"end":324}},"prot":"public","static":false,"definition":"Clock GameState::getLogicsClock","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's logics clock\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getMessagingClock","qualifiedname":"GameState::getMessagingClock","description":"Retrieve the clock that is used for the timing of messaging.","location":{"header":{"uri":"source/states/GameState.h","line":147,"column":7},"body":{"uri":"source/states/GameState.c","start":326,"end":329}},"prot":"public","static":false,"definition":"Clock GameState::getMessagingClock","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's messaging clock\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getAnimationsClock","qualifiedname":"GameState::getAnimationsClock","description":"Retrieve the clock that serves to control the animations.","location":{"header":{"uri":"source/states/GameState.h","line":151,"column":7},"body":{"uri":"source/states/GameState.c","start":331,"end":334}},"prot":"public","static":false,"definition":"Clock GameState::getAnimationsClock","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's animations clocks\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"getPhysicsClock","qualifiedname":"GameState::getPhysicsClock","description":"Retrieve the clock that serves to control the game's physics.","location":{"header":{"uri":"source/states/GameState.h","line":155,"column":7},"body":{"uri":"source/states/GameState.c","start":336,"end":339}},"prot":"public","static":false,"definition":"Clock GameState::getPhysicsClock","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's physics clock\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"startClocks","qualifiedname":"GameState::startClocks","description":"Start all the clocks.","location":{"header":{"uri":"source/states/GameState.h","line":158,"column":6},"body":{"uri":"source/states/GameState.c","start":341,"end":347}},"prot":"public","static":false,"definition":"void GameState::startClocks","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"pauseClocks","qualifiedname":"GameState::pauseClocks","description":"Pause all the clocks.","location":{"header":{"uri":"source/states/GameState.h","line":161,"column":6},"body":{"uri":"source/states/GameState.c","start":349,"end":355}},"prot":"public","static":false,"definition":"void GameState::pauseClocks","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"unpauseClocks","qualifiedname":"GameState::unpauseClocks","description":"Unpause all the clocks.","location":{"header":{"uri":"source/states/GameState.h","line":164,"column":6},"body":{"uri":"source/states/GameState.c","start":357,"end":363}},"prot":"public","static":false,"definition":"void GameState::unpauseClocks","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"stopClocks","qualifiedname":"GameState::stopClocks","description":"Stop all the clocks.","location":{"header":{"uri":"source/states/GameState.h","line":167,"column":6},"body":{"uri":"source/states/GameState.c","start":365,"end":371}},"prot":"public","static":false,"definition":"void GameState::stopClocks","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"startLogics","qualifiedname":"GameState::startLogics","description":"Start the clock used for logics.","location":{"header":{"uri":"source/states/GameState.h","line":170,"column":6},"body":{"uri":"source/states/GameState.c","start":373,"end":376}},"prot":"public","static":false,"definition":"void GameState::startLogics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"pauseLogics","qualifiedname":"GameState::pauseLogics","description":"Pause the clock used for logics.","location":{"header":{"uri":"source/states/GameState.h","line":173,"column":6},"body":{"uri":"source/states/GameState.c","start":378,"end":381}},"prot":"public","static":false,"definition":"void GameState::pauseLogics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"unpauseLogics","qualifiedname":"GameState::unpauseLogics","description":"Unpause the clock used for logics.","location":{"header":{"uri":"source/states/GameState.h","line":176,"column":6},"body":{"uri":"source/states/GameState.c","start":383,"end":386}},"prot":"public","static":false,"definition":"void GameState::unpauseLogics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"startMessaging","qualifiedname":"GameState::startMessaging","description":"Start the clock used for delayed messages.","location":{"header":{"uri":"source/states/GameState.h","line":179,"column":6},"body":{"uri":"source/states/GameState.c","start":388,"end":391}},"prot":"public","static":false,"definition":"void GameState::startMessaging","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"pauseMessaging","qualifiedname":"GameState::pauseMessaging","description":"Pause the clock used for delayed messages.","location":{"header":{"uri":"source/states/GameState.h","line":182,"column":6},"body":{"uri":"source/states/GameState.c","start":393,"end":396}},"prot":"public","static":false,"definition":"void GameState::pauseMessaging","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"unpauseMessaging","qualifiedname":"GameState::unpauseMessaging","description":"Unpause the clock used for delayed messages.","location":{"header":{"uri":"source/states/GameState.h","line":185,"column":6},"body":{"uri":"source/states/GameState.c","start":398,"end":401}},"prot":"public","static":false,"definition":"void GameState::unpauseMessaging","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"startAnimations","qualifiedname":"GameState::startAnimations","description":"Start the clock used for animations.","location":{"header":{"uri":"source/states/GameState.h","line":188,"column":6},"body":{"uri":"source/states/GameState.c","start":403,"end":406}},"prot":"public","static":false,"definition":"void GameState::startAnimations","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"pauseAnimations","qualifiedname":"GameState::pauseAnimations","description":"Pause the clock used for animations.","location":{"header":{"uri":"source/states/GameState.h","line":191,"column":6},"body":{"uri":"source/states/GameState.c","start":408,"end":411}},"prot":"public","static":false,"definition":"void GameState::pauseAnimations","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"unpauseAnimations","qualifiedname":"GameState::unpauseAnimations","description":"Unpause the clock used for animations.","location":{"header":{"uri":"source/states/GameState.h","line":194,"column":6},"body":{"uri":"source/states/GameState.c","start":413,"end":416}},"prot":"public","static":false,"definition":"void GameState::unpauseAnimations","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"startPhysics","qualifiedname":"GameState::startPhysics","description":"Start the clock used for physics simulations.","location":{"header":{"uri":"source/states/GameState.h","line":197,"column":6},"body":{"uri":"source/states/GameState.c","start":418,"end":421}},"prot":"public","static":false,"definition":"void GameState::startPhysics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"pausePhysics","qualifiedname":"GameState::pausePhysics","description":"Pause the clock used for physics simulations.","location":{"header":{"uri":"source/states/GameState.h","line":200,"column":6},"body":{"uri":"source/states/GameState.c","start":423,"end":426}},"prot":"public","static":false,"definition":"void GameState::pausePhysics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"unpausePhysics","qualifiedname":"GameState::unpausePhysics","description":"Unpause the clock used for physics simulations.","location":{"header":{"uri":"source/states/GameState.h","line":203,"column":6},"body":{"uri":"source/states/GameState.c","start":428,"end":431}},"prot":"public","static":false,"definition":"void GameState::unpausePhysics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"transform","qualifiedname":"GameState::transform","description":"Update the stage's children' global transformations.","location":{"header":{"uri":"source/states/GameState.h","line":206,"column":6}},"prot":"public","static":false,"definition":"void GameState::transform","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"transformUI","qualifiedname":"GameState::transformUI","description":"Update the UI's children' global transformations.","location":{"header":{"uri":"source/states/GameState.h","line":209,"column":6},"body":{"uri":"source/states/GameState.c","start":447,"end":459}},"prot":"public","static":false,"definition":"void GameState::transformUI","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"simulatePhysics","qualifiedname":"GameState::simulatePhysics","description":"Continue physics simulations.","location":{"header":{"uri":"source/states/GameState.h","line":212,"column":6},"body":{"uri":"source/states/GameState.c","start":461,"end":474}},"prot":"public","static":false,"definition":"void GameState::simulatePhysics","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"processCollisions","qualifiedname":"GameState::processCollisions","description":"Test and process collisions./.","location":{"header":{"uri":"source/states/GameState.h","line":215,"column":6}},"prot":"public","static":false,"definition":"void GameState::processCollisions","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"propagateMessage","qualifiedname":"GameState::propagateMessage","description":"Propagate an integer message through the whole parenting hierarchy of the stage (children, grand children, etc.).","location":{"header":{"uri":"source/states/GameState.h","line":220,"column":6},"body":{"uri":"source/states/GameState.c","start":491,"end":494}},"prot":"public","static":false,"definition":"bool GameState::propagateMessage","argsstring":"(GameState this, int32 message)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `message`\n\n_@return_ `bool` True if some entity processed the message\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"int32 message"}]},{"name":"propagateString","qualifiedname":"GameState::propagateString","description":"Propagate a string through the whole parenting hierarchy of the stage (children, grand children, etc.).","location":{"header":{"uri":"source/states/GameState.h","line":225,"column":6},"body":{"uri":"source/states/GameState.c","start":496,"end":499}},"prot":"public","static":false,"definition":"bool GameState::propagateString","argsstring":"(GameState this, const char *string)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `string`\n\n_@return_ `bool` True if some entity processed the string\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"const char *string"}]},{"name":"getEntityByName","qualifiedname":"GameState::getEntityByName","description":"Find a stage's child (grand child, etc.) by its name.","location":{"header":{"uri":"source/states/GameState.h","line":229,"column":8},"body":{"uri":"source/states/GameState.c","start":501,"end":509}},"prot":"public","static":false,"definition":"Entity GameState::getEntityByName","argsstring":"(GameState this, const char *entityName)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"const char *entityName","description":"Name to look for"}]},{"name":"showEntityWithName","qualifiedname":"GameState::showEntityWithName","description":"Show a stage's child (grand child, etc.) with the provided name.","location":{"header":{"uri":"source/states/GameState.h","line":233,"column":6},"body":{"uri":"source/states/GameState.c","start":511,"end":524}},"prot":"public","static":false,"definition":"void GameState::showEntityWithName","returnType":"void","argsstring":"(GameState this, const char *entityName)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"const char *entityName","description":"Name to look for"}]},{"name":"hideEntityWithName","qualifiedname":"GameState::hideEntityWithName","description":"Hide a stage's child (grand child, etc.) with the provided name.","location":{"header":{"uri":"source/states/GameState.h","line":237,"column":6},"body":{"uri":"source/states/GameState.c","start":526,"end":539}},"prot":"public","static":false,"definition":"void GameState::hideEntityWithName","returnType":"void","argsstring":"(GameState this, const char *entityName)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"const char *entityName","description":"Name to look for"}]},{"name":"changeFramerate","qualifiedname":"GameState::changeFramerate","description":"Change the target frame rate.","location":{"header":{"uri":"source/states/GameState.h","line":244,"column":6},"body":{"uri":"source/states/GameState.c","start":541,"end":551}},"prot":"public","static":false,"definition":"void GameState::changeFramerate","returnType":"void","argsstring":"(GameState this, int16 targetFPS, int32 duration)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `targetFPS`: New target frame rate\n\n_@param_ `duration`: Amount of time to keep the change on the frame rate before setting back the default target (0 or negative to make it permanent as long as the state is active)\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"int16 targetFPS","description":"New target frame rate"},{"name":"int32 duration","description":"Amount of time to keep the change on the frame rate before setting back the default target (0 or negative to make it permanent as long as the state is active)"}]},{"name":"streamAll","qualifiedname":"GameState::streamAll","description":"Force to completely stream in and out entities and to initialize all.","location":{"header":{"uri":"source/states/GameState.h","line":247,"column":6},"body":{"uri":"source/states/GameState.c","start":625,"end":651}},"prot":"public","static":false,"definition":"void GameState::streamAll","returnType":"void","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"stream","qualifiedname":"GameState::stream","description":"Stream in or out the stage entities within or outside the camera's range.","location":{"header":{"uri":"source/states/GameState.h","line":251,"column":14}},"prot":"public","static":false,"definition":"virtual bool GameState::stream","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `virtual` True if at least some entity was streamed in or out\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]},{"name":"processUserInput","qualifiedname":"GameState::processUserInput","description":"Process the provided user input.","location":{"header":{"uri":"source/states/GameState.h","line":255,"column":14},"body":{"uri":"source/states/GameState.c","start":565,"end":566}},"prot":"public","static":false,"definition":"void GameState::processUserInput","returnType":"void","argsstring":"(GameState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@param_ `userInput`: Struct with the current user input information\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"},{"name":"const UserInput *userInput","description":"Struct with the current user input information"}]},{"name":"isVersusMode","qualifiedname":"GameState::isVersusMode","description":"Check if the game state is in versus mode.","location":{"header":{"uri":"source/states/GameState.h","line":259,"column":14},"body":{"uri":"source/states/GameState.c","start":568,"end":571}},"prot":"public","static":false,"definition":"bool GameState::isVersusMode","argsstring":"(GameState this)","paramDocs":"\n\n_@param_ `this`: GameState instance\n\n_@return_ `bool` True if the state is in versus mode; false otherwise\n\n","parameters":[{"name":"GameState this","description":"GameState Instance"}]}],"variables":[{"name":"uiContainer","qualifiedname":"GameState::uiContainer","description":"A container for entities that componse the UI.","location":{"header":{"uri":"source/states/GameState.h","line":50,"column":13},"body":{"uri":"source/states/GameState.h","start":50,"end":50}},"prot":"private","static":false},{"name":"stage","qualifiedname":"GameState::stage","description":"A container for the game entites.","location":{"header":{"uri":"source/states/GameState.h","line":53,"column":7},"body":{"uri":"source/states/GameState.h","start":53,"end":53}},"prot":"private","static":false},{"name":"physicalWorld","qualifiedname":"GameState::physicalWorld","description":"A world where physical bodies exist.","location":{"header":{"uri":"source/states/GameState.h","line":56,"column":15},"body":{"uri":"source/states/GameState.h","start":56,"end":56}},"prot":"private","static":false},{"name":"collisionManager","qualifiedname":"GameState::collisionManager","description":"A manager for collisions and colliders.","location":{"header":{"uri":"source/states/GameState.h","line":59,"column":18},"body":{"uri":"source/states/GameState.h","start":59,"end":59}},"prot":"private","static":false},{"name":"logicsClock","qualifiedname":"GameState::logicsClock","description":"A clock for logics.","location":{"header":{"uri":"source/states/GameState.h","line":62,"column":7},"body":{"uri":"source/states/GameState.h","start":62,"end":62}},"prot":"private","static":false},{"name":"messagingClock","qualifiedname":"GameState::messagingClock","description":"A clock for messaging.","location":{"header":{"uri":"source/states/GameState.h","line":65,"column":7},"body":{"uri":"source/states/GameState.h","start":65,"end":65}},"prot":"private","static":false},{"name":"animationsClock","qualifiedname":"GameState::animationsClock","description":"A clock for animations.","location":{"header":{"uri":"source/states/GameState.h","line":68,"column":7},"body":{"uri":"source/states/GameState.h","start":68,"end":68}},"prot":"private","static":false},{"name":"physicsClock","qualifiedname":"GameState::physicsClock","description":"A clock for physics.","location":{"header":{"uri":"source/states/GameState.h","line":71,"column":7},"body":{"uri":"source/states/GameState.h","start":71,"end":71}},"prot":"private","static":false},{"name":"stream","qualifiedname":"GameState::stream","description":"Flags to enable or disable the streaming.","location":{"header":{"uri":"source/states/GameState.h","line":74,"column":6},"body":{"uri":"source/states/GameState.h","start":74,"end":74}},"prot":"private","static":false},{"name":"transform","qualifiedname":"GameState::transform","description":"Flags to enable or disable the transformations.","location":{"header":{"uri":"source/states/GameState.h","line":77,"column":6},"body":{"uri":"source/states/GameState.h","start":77,"end":77}},"prot":"private","static":false},{"name":"updatePhysics","qualifiedname":"GameState::updatePhysics","description":"Flags to enable or disable the physical simulations.","location":{"header":{"uri":"source/states/GameState.h","line":80,"column":6},"body":{"uri":"source/states/GameState.h","start":80,"end":80}},"prot":"private","static":false},{"name":"processCollisions","qualifiedname":"GameState::processCollisions","description":"Flags to enable or disable the collision detection and processing.","location":{"header":{"uri":"source/states/GameState.h","line":83,"column":6},"body":{"uri":"source/states/GameState.h","start":83,"end":83}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"HardwareManager":{"__contributor":"core","name":"HardwareManager","base":"Object","description":"Class `HardwareManager`\n\nInherits from `Object`\n\nCentralizes the management of the hardware.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":65,"column":8},"body":{"uri":"source/hardware/HardwareManager.h","start":66,"end":119}},"methods":[{"name":"initialize","qualifiedname":"HardwareManager::initialize","description":"Initialize hardware registries.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":70,"column":13},"body":{"uri":"source/hardware/HardwareManager.c","start":176,"end":188}},"prot":"public","static":true,"definition":"static void HardwareManager::initialize","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"halt","qualifiedname":"HardwareManager::halt","description":"Halt the CPU.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":73,"column":20}},"prot":"public","static":true,"definition":"static void HardwareManager::halt","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"setInterruptLevel","qualifiedname":"HardwareManager::setInterruptLevel","description":"Set the interrupt level.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":77,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":134,"end":151}},"prot":"public","static":true,"definition":"static void HardwareManager::setInterruptLevel","returnType":"void","argsstring":"(uint8 level)","paramDocs":"\n\n_@param_ `level`: Interrupt level\n\n","parameters":[{"description":"Interrupt level"}]},{"name":"enableInterrupts","qualifiedname":"HardwareManager::enableInterrupts","description":"Enable interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":80,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":153,"end":163}},"prot":"public","static":true,"definition":"static void HardwareManager::enableInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"disableInterrupts","qualifiedname":"HardwareManager::disableInterrupts","description":"Disable interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":83,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":165,"end":175}},"prot":"public","static":true,"definition":"static void HardwareManager::disableInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"resumeInterrupts","qualifiedname":"HardwareManager::resumeInterrupts","description":"Resume interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":86,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":177,"end":188}},"prot":"public","static":true,"definition":"static void HardwareManager::resumeInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"suspendInterrupts","qualifiedname":"HardwareManager::suspendInterrupts","description":"Suspend interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":89,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":190,"end":198}},"prot":"public","static":true,"definition":"static void HardwareManager::suspendInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"enableMultiplexedInterrupts","qualifiedname":"HardwareManager::enableMultiplexedInterrupts","description":"Enable multiplexed interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":92,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":200,"end":220}},"prot":"public","static":true,"definition":"static void HardwareManager::enableMultiplexedInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"disableMultiplexedInterrupts","qualifiedname":"HardwareManager::disableMultiplexedInterrupts","description":"Disable multiplexed interrupts.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":95,"column":20},"body":{"uri":"source/hardware/HardwareManager.h","start":222,"end":231}},"prot":"public","static":true,"definition":"static void HardwareManager::disableMultiplexedInterrupts","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"getStackPointer","qualifiedname":"HardwareManager::getStackPointer","description":"Retrieve the Stack Pointer's value.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":99,"column":21},"body":{"uri":"source/hardware/HardwareManager.h","start":233,"end":244}},"prot":"public","static":true,"definition":"static int32 HardwareManager::getStackPointer","argsstring":"()","paramDocs":"\n\n_@return_ `static` Stack pointer\n\n","parameters":[]},{"name":"getLinkPointer","qualifiedname":"HardwareManager::getLinkPointer","description":"Retrieve the Link Pointer's value.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":103,"column":21},"body":{"uri":"source/hardware/HardwareManager.h","start":246,"end":257}},"prot":"public","static":true,"definition":"static int32 HardwareManager::getLinkPointer","argsstring":"()","paramDocs":"\n\n_@return_ `static` Link pointer\n\n","parameters":[]},{"name":"getPSW","qualifiedname":"HardwareManager::getPSW","description":"Retrieve the PSW","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":107,"column":21},"body":{"uri":"source/hardware/HardwareManager.h","start":259,"end":270}},"prot":"public","static":true,"definition":"static int32 HardwareManager::getPSW","argsstring":"()","paramDocs":"\n\n_@return_ `static` PSW\n\n","parameters":[]},{"name":"printStackStatus","qualifiedname":"HardwareManager::printStackStatus","description":"Print the status of the stack.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":113,"column":13},"body":{"uri":"source/hardware/HardwareManager.c","start":270,"end":313}},"prot":"public","static":true,"definition":"static void HardwareManager::printStackStatus","returnType":"void","argsstring":"(int32 x, int32 y, bool resumed)","paramDocs":"\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `resumed`: If true, print only minimum information\n\n","parameters":[{"name":"int32 y","description":"Screen x coordinate where to print"},{"name":"bool resumed","description":"Screen y coordinate where to print"},{"description":"If true, print only minimum information"}]},{"name":"print","qualifiedname":"HardwareManager::print","description":"Print the status of the hardware registries.","location":{"header":{"uri":"source/hardware/HardwareManager.h","line":118,"column":13},"body":{"uri":"source/hardware/HardwareManager.c","start":190,"end":268}},"prot":"public","static":true,"definition":"static void HardwareManager::print","returnType":"void","argsstring":"(int32 x, int32 y)","paramDocs":"\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"int32 y","description":"Screen x coordinate where to print"},{"description":"Screen y coordinate where to print"}]}],"variables":[],"enums":[],"typedefs":[]},"InverseBox":{"__contributor":"core","name":"InverseBox","base":"Box","description":"Class `InverseBox`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a box that detects collision outside of it.","location":{"header":{"uri":"source/physics/Colliders/InverseBox.h","line":32,"column":1},"body":{"uri":"source/physics/Colliders/InverseBox.h","start":33,"end":38}},"methods":[{"name":"constructor","qualifiedname":"InverseBox::constructor","description":"Class' constructor","location":{"header":{"uri":"source/physics/Colliders/InverseBox.h","line":37,"column":6},"body":{"uri":"source/physics/Colliders/InverseBox.c","start":30,"end":35}},"prot":"public","static":false,"definition":"void InverseBox::constructor","returnType":"void","argsstring":"(InverseBox this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: InverseBox instance\n\n_@param_ `owner`\n\n_@param_ `colliderSpec`\n\n","parameters":[{"name":"InverseBox this","description":"InverseBox Instance"},{"name":"SpatialObject owner"},{"name":"const ColliderSpec *colliderSpec"}]}],"variables":[],"enums":[],"typedefs":[]},"KeypadManager":{"__contributor":"core","name":"KeypadManager","base":"ListenerObject","description":"Class `KeypadManager`\n\nInherits from `ListenerObject`\n\nManages keypad inputs.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":111,"column":11},"body":{"uri":"source/hardware/KeypadManager.h","start":112,"end":176}},"methods":[{"name":"getInstance","qualifiedname":"KeypadManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":135,"column":22}},"prot":"public","static":true,"definition":"static KeypadManager KeypadManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `CommunicationManager` singleton\n\n","parameters":[]},{"name":"interruptHandler","qualifiedname":"KeypadManager::interruptHandler","description":"Interrupt handler for keypad's interrupts.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":138,"column":13},"body":{"uri":"source/hardware/KeypadManager.c","start":32,"end":38}},"prot":"public","static":true,"definition":"static void KeypadManager::interruptHandler","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"reset","qualifiedname":"KeypadManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":141,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":46,"end":56}},"prot":"public","static":false,"definition":"void KeypadManager::reset","returnType":"void","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"enable","qualifiedname":"KeypadManager::enable","description":"Enable user input.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":144,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":58,"end":64}},"prot":"public","static":false,"definition":"void KeypadManager::enable","returnType":"void","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"disable","qualifiedname":"KeypadManager::disable","description":"Disable user input.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":147,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":66,"end":69}},"prot":"public","static":false,"definition":"void KeypadManager::disable","returnType":"void","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"isEnabled","qualifiedname":"KeypadManager::isEnabled","description":"Check if user input is enabled.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":151,"column":7},"body":{"uri":"source/hardware/KeypadManager.c","start":71,"end":74}},"prot":"public","static":false,"definition":"int32 KeypadManager::isEnabled","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `int32` True if user input is enabled\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"readUserInput","qualifiedname":"KeypadManager::readUserInput","description":"Retrieve the user input during the last game frame","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":155,"column":11},"body":{"uri":"source/hardware/KeypadManager.c","start":76,"end":129}},"prot":"public","static":false,"definition":"UserInput KeypadManager::readUserInput","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `UserInput` User input struct with the key presses of the last game frame\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"enableDummyKey","qualifiedname":"KeypadManager::enableDummyKey","description":"Enable the dummy key to force user input processing.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":158,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":131,"end":134}},"prot":"public","static":false,"definition":"void KeypadManager::enableDummyKey","returnType":"void","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"disableDummyKey","qualifiedname":"KeypadManager::disableDummyKey","description":"Disable the dummy key to not enforce user input processing.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":161,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":136,"end":139}},"prot":"public","static":false,"definition":"void KeypadManager::disableDummyKey","returnType":"void","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"registerInput","qualifiedname":"KeypadManager::registerInput","description":"Register the user input according to the provided flags.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":165,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":141,"end":149}},"prot":"public","static":false,"definition":"void KeypadManager::registerInput","returnType":"void","argsstring":"(KeypadManager this, uint16 inputToRegister)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n_@param_ `inputToRegister`: Flags to select which inputs to register and which to ignore\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"},{"name":"uint16 inputToRegister","description":"Flags to select which inputs to register and which to ignore"}]},{"name":"getAccumulatedUserInput","qualifiedname":"KeypadManager::getAccumulatedUserInput","description":"Retrieve the accumulated sum of user inputs since the start of the program.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":169,"column":6},"body":{"uri":"source/hardware/KeypadManager.c","start":151,"end":154}},"prot":"public","static":false,"definition":"long KeypadManager::getAccumulatedUserInput","returnType":"long","argsstring":"(KeypadManager this)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `long` The mathematical sum of all user's presses.\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"}]},{"name":"print","qualifiedname":"KeypadManager::print","description":"Print the last reads of user input.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":174,"column":6}},"prot":"public","static":false,"definition":"void KeypadManager::print","returnType":"void","argsstring":"(KeypadManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: KeypadManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"KeypadManager this","description":"KeypadManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"accumulatedUserInput","qualifiedname":"KeypadManager::accumulatedUserInput","description":"Holds the mathematical sum of all user's presses","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":116,"column":6},"body":{"uri":"source/hardware/KeypadManager.h","start":116,"end":116}},"prot":"protected","static":false},{"name":"userInput","qualifiedname":"KeypadManager::userInput","description":"Struct that holds the user's input during the last game frame.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":119,"column":11},"body":{"uri":"source/hardware/KeypadManager.h","start":119,"end":119}},"prot":"protected","static":false},{"name":"userInputToRegister","qualifiedname":"KeypadManager::userInputToRegister","description":"Flags to select which inputs to register and which to ignore.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":122,"column":11},"body":{"uri":"source/hardware/KeypadManager.h","start":122,"end":122}},"prot":"protected","static":false},{"name":"enabled","qualifiedname":"KeypadManager::enabled","description":"Flag to enable/disable the capture of user input.","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":125,"column":6},"body":{"uri":"source/hardware/KeypadManager.h","start":125,"end":125}},"prot":"protected","static":false},{"name":"reseted","qualifiedname":"KeypadManager::reseted","description":"Flag to prevent pressed and released keys from being raised when holding buttons while changing game states","location":{"header":{"uri":"source/hardware/KeypadManager.h","line":129,"column":6},"body":{"uri":"source/hardware/KeypadManager.h","start":129,"end":129}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Line":{"__contributor":"core","name":"Line","base":"Wireframe","description":"Class `Line`\n\nInherits from `Wireframe`\n\nDraws a line.","location":{"header":{"uri":"source/graphics/3d/Line.h","line":55,"column":1},"body":{"uri":"source/graphics/3d/Line.h","start":56,"end":79}},"methods":[{"name":"constructor","qualifiedname":"Line::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/3d/Line.h","line":70,"column":6},"body":{"uri":"source/graphics/3d/Line.c","start":26,"end":33}},"prot":"public","static":false,"definition":"void Line::constructor","returnType":"void","argsstring":"(Line this, SpatialObject owner, const LineSpec *lineSpec)","paramDocs":"\n\n_@param_ `this`: Line instance\n\n_@param_ `owner`: `SpatialObject` to which the wireframe attaches to\n\n_@param_ `lineSpec`\n\n","parameters":[{"name":"Line this","description":"Line Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the wireframe attaches to"},{"name":"const LineSpec *lineSpec"}]},{"name":"render","qualifiedname":"Line::render","description":"Prepare the wireframe for drawing.","location":{"header":{"uri":"source/graphics/3d/Line.h","line":74,"column":15},"body":{"uri":"source/graphics/3d/Line.c","start":42,"end":51}},"prot":"public","static":false,"definition":"void Line::render","returnType":"override void","argsstring":"(Line this, Vector3D relativePosition)","paramDocs":"\n\n_@param_ `this`: Line instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n","parameters":[{"name":"Line this","description":"Line Instance"},{"name":"Vector3D relativePosition","description":"Position relative to the camera's"}]},{"name":"draw","qualifiedname":"Line::draw","description":"Draw the wireframe to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Line.h","line":78,"column":15},"body":{"uri":"source/graphics/3d/Line.c","start":53,"end":67}},"prot":"public","static":false,"definition":"bool Line::draw","returnType":"override ","argsstring":"(Line this)","paramDocs":"\n\n_@param_ `this`: Line instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Line this","description":"Line Instance"}]}],"variables":[{"name":"a","qualifiedname":"Line::a","description":"Starting point","location":{"header":{"uri":"source/graphics/3d/Line.h","line":60,"column":13},"body":{"uri":"source/graphics/3d/Line.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"b","qualifiedname":"Line::b","description":"End point.","location":{"header":{"uri":"source/graphics/3d/Line.h","line":63,"column":13},"body":{"uri":"source/graphics/3d/Line.h","start":63,"end":63}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"LineROMSpec","qualifiedname":"Line::LineROMSpec","description":"A `Line` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/3d/Line.h","line":42,"column":24},"body":{"uri":"source/graphics/3d/Line.h","start":42,"end":42}},"prot":"public","static":false}]},"LineField":{"__contributor":"core","name":"LineField","base":"Collider","description":"Class `LineField`\n\nInherits from `Collider`\n\nDefines a line that is sensible to collision on one of its sides.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":40,"column":1},"body":{"uri":"source/physics/Colliders/LineField.h","start":41,"end":91}},"methods":[{"name":"constructor","qualifiedname":"LineField::constructor","description":"Class' constructor","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":62,"column":6},"body":{"uri":"source/physics/Colliders/LineField.c","start":50,"end":63}},"prot":"public","static":false,"definition":"void LineField::constructor","returnType":"void","argsstring":"(LineField this, SpatialObject owner, const ColliderSpec *colliderSpec)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@param_ `owner`\n\n_@param_ `colliderSpec`\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"},{"name":"SpatialObject owner"},{"name":"const ColliderSpec *colliderSpec"}]},{"name":"getNormal","qualifiedname":"LineField::getNormal","description":"Retrieve the normal to the collider.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":66,"column":19},"body":{"uri":"source/physics/Colliders/LineField.c","start":79,"end":82}},"prot":"public","static":false,"definition":"Vector3D LineField::getNormal","returnType":"override ","argsstring":"(LineField this)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@return_ `Vector3D` Normal to the collider\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"}]},{"name":"configureWireframe","qualifiedname":"LineField::configureWireframe","description":"Configure the wireframe used to show the collider.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":69,"column":15},"body":{"uri":"source/physics/Colliders/LineField.c","start":84,"end":143}},"prot":"public","static":false,"definition":"void LineField::configureWireframe","returnType":"override void","argsstring":"(LineField this)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"}]},{"name":"print","qualifiedname":"LineField::print","description":"Print collider's state.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":74,"column":15},"body":{"uri":"source/physics/Colliders/LineField.c","start":146,"end":171}},"prot":"public","static":false,"definition":"void LineField::print","returnType":"override void","argsstring":"(LineField this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"displace","qualifiedname":"LineField::displace","description":"Displace the line filed.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":78,"column":6},"body":{"uri":"source/physics/Colliders/LineField.c","start":174,"end":178}},"prot":"public","static":false,"definition":"void LineField::displace","returnType":"void","argsstring":"(LineField this, fixed_t displacement)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@param_ `displacement`: Displacement vector\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"},{"name":"fixed_t displacement","description":"Displacement vector"}]},{"name":"getCenter","qualifiedname":"LineField::getCenter","description":"Retrieve the line field's center point.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":82,"column":10},"body":{"uri":"source/physics/Colliders/LineField.c","start":180,"end":183}},"prot":"public","static":false,"definition":"Vector3D LineField::getCenter","argsstring":"(LineField this)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@return_ `Vector3D` `Line` field's center point\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"}]},{"name":"getVertexes","qualifiedname":"LineField::getVertexes","description":"Retrieve the vertexes that define the line field.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":86,"column":6},"body":{"uri":"source/physics/Colliders/LineField.c","start":185,"end":189}},"prot":"public","static":false,"definition":"void LineField::getVertexes","returnType":"void","argsstring":"(LineField this, Vector3D vertexes[2])","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@param_ `vertexes`\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"},{"name":"Vector3D vertexes[2]"}]},{"name":"setNormalLength","qualifiedname":"LineField::setNormalLength","description":"Set the length of the line field's normal.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":90,"column":6},"body":{"uri":"source/physics/Colliders/LineField.c","start":191,"end":194}},"prot":"public","static":false,"definition":"void LineField::setNormalLength","returnType":"void","argsstring":"(LineField this, fixed_t normalLength)","paramDocs":"\n\n_@param_ `this`: LineField instance\n\n_@param_ `normalLength`: Length of the line field's normal\n\n","parameters":[{"name":"LineField this","description":"LineField Instance"},{"name":"fixed_t normalLength","description":"Length of the line field's normal"}]}],"variables":[{"name":"meshSpec","qualifiedname":"LineField::meshSpec","description":"`Mesh` used to draw the collider","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":45,"column":10},"body":{"uri":"source/physics/Colliders/LineField.h","start":45,"end":45}},"prot":"protected","static":false},{"name":"a","qualifiedname":"LineField::a","description":"Extreme of the line that defines the line field.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":48,"column":10},"body":{"uri":"source/physics/Colliders/LineField.h","start":48,"end":48}},"prot":"protected","static":false},{"name":"b","qualifiedname":"LineField::b","description":"Extreme of the line that defines the line field.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":51,"column":10},"body":{"uri":"source/physics/Colliders/LineField.h","start":51,"end":51}},"prot":"protected","static":false},{"name":"normal","qualifiedname":"LineField::normal","description":"Normal to the line defined by the points a and b.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":54,"column":10},"body":{"uri":"source/physics/Colliders/LineField.h","start":54,"end":54}},"prot":"protected","static":false},{"name":"normalLength","qualifiedname":"LineField::normalLength","description":"Length of the line field's normal.","location":{"header":{"uri":"source/physics/Colliders/LineField.h","line":57,"column":9},"body":{"uri":"source/physics/Colliders/LineField.h","start":57,"end":57}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"ListenerObject":{"__contributor":"core","name":"ListenerObject","base":"Object","description":"Class `ListenerObject`\n\nInherits from `Object`\n\nInteracts by means of events and messages.","location":{"header":{"uri":"source/base/ListenerObject.h","line":65,"column":9},"body":{"uri":"source/base/ListenerObject.h","start":66,"end":140}},"methods":[{"name":"constructor","qualifiedname":"ListenerObject::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/ListenerObject.h","line":78,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":39,"end":47}},"prot":"public","static":false,"definition":"void ListenerObject::constructor","returnType":"void","argsstring":"(ListenerObject this)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"}]},{"name":"destructor","qualifiedname":"ListenerObject::destructor","description":"Class' destructor.","location":{"header":{"uri":"source/base/ListenerObject.h","line":81,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":49,"end":59}},"prot":"public","static":false,"definition":"void ListenerObject::destructor","returnType":"void","argsstring":"(ListenerObject this)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"}]},{"name":"addEventListener","qualifiedname":"ListenerObject::addEventListener","description":"Register an object that will listen for events.","location":{"header":{"uri":"source/base/ListenerObject.h","line":87,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":61,"end":93}},"prot":"public","static":false,"definition":"void ListenerObject::addEventListener","returnType":"void","argsstring":"(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` that listen for the event\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to listen for\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"ListenerObject listener","description":"`ListenerObject` that listen for the event"},{"name":"EventListener callback"},{"name":"uint16 eventCode","description":"`Event`'s code to listen for"}]},{"name":"removeEventListener","qualifiedname":"ListenerObject::removeEventListener","description":"Remove a specific listener object from the listening to a give code with the provided callback.","location":{"header":{"uri":"source/base/ListenerObject.h","line":93,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":95,"end":140}},"prot":"public","static":false,"definition":"void ListenerObject::removeEventListener","returnType":"void","argsstring":"(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` to remove from the list of listeners\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"ListenerObject listener","description":"`ListenerObject` to remove from the list of listeners"},{"name":"EventListener callback"},{"name":"uint16 eventCode","description":"`Event`'s code to stop listen for"}]},{"name":"removeEventListeners","qualifiedname":"ListenerObject::removeEventListeners","description":"Remove all listener objects for a specific callback and code from the listeners.","location":{"header":{"uri":"source/base/ListenerObject.h","line":98,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":142,"end":187}},"prot":"public","static":false,"definition":"void ListenerObject::removeEventListeners","returnType":"void","argsstring":"(ListenerObject this, EventListener callback, uint16 eventCode)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"EventListener callback"},{"name":"uint16 eventCode","description":"`Event`'s code to stop listen for"}]},{"name":"removeEventListenerScopes","qualifiedname":"ListenerObject::removeEventListenerScopes","description":"Remove a specific listener object from the listeners.","location":{"header":{"uri":"source/base/ListenerObject.h","line":103,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":189,"end":233}},"prot":"public","static":false,"definition":"void ListenerObject::removeEventListenerScopes","returnType":"void","argsstring":"(ListenerObject this, ListenerObject listener, uint16 eventCode)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` to remove from the list of listeners\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"ListenerObject listener","description":"`ListenerObject` to remove from the list of listeners"},{"name":"uint16 eventCode","description":"`Event`'s code to stop listen for"}]},{"name":"removeAllEventListeners","qualifiedname":"ListenerObject::removeAllEventListeners","description":"Remove all listener objects.","location":{"header":{"uri":"source/base/ListenerObject.h","line":106,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":235,"end":264}},"prot":"public","static":false,"definition":"void ListenerObject::removeAllEventListeners","returnType":"void","argsstring":"(ListenerObject this)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"}]},{"name":"hasActiveEventListeners","qualifiedname":"ListenerObject::hasActiveEventListeners","description":"Check if the object has active event listeners.","location":{"header":{"uri":"source/base/ListenerObject.h","line":110,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":266,"end":269}},"prot":"public","static":false,"definition":"bool ListenerObject::hasActiveEventListeners","argsstring":"(ListenerObject this)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@return_ `bool` True if the object's list of event listeners is not empty\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"}]},{"name":"fireEvent","qualifiedname":"ListenerObject::fireEvent","description":"Fire an event with the provided code","location":{"header":{"uri":"source/base/ListenerObject.h","line":114,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":271,"end":332}},"prot":"public","static":false,"definition":"void ListenerObject::fireEvent","returnType":"void","argsstring":"(ListenerObject this, uint16 eventCode)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `eventCode`: Code of the event to fire\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"uint16 eventCode","description":"Code of the event to fire"}]},{"name":"sendMessageTo","qualifiedname":"ListenerObject::sendMessageTo","description":"Send a message to another object.","location":{"header":{"uri":"source/base/ListenerObject.h","line":121,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":334,"end":344}},"prot":"public","static":false,"definition":"void ListenerObject::sendMessageTo","returnType":"void","argsstring":"(ListenerObject this, ListenerObject receiver, uint32 message, uint32 delay, uint32 randomDelay)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `receiver`: `ListenerObject` that is the target of the message\n\n_@param_ `message`: The message's code\n\n_@param_ `delay`: Milliseconds to wait before sending the message\n\n_@param_ `randomDelay`: Range of a random delay in milliseconds to wait before sending the message\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"ListenerObject receiver","description":"`ListenerObject` that is the target of the message"},{"name":"uint32 message","description":"The message's code"},{"name":"uint32 delay","description":"Milliseconds to wait before sending the message"},{"name":"uint32 randomDelay","description":"Range of a random delay in milliseconds to wait before sending the message"}]},{"name":"sendMessageToSelf","qualifiedname":"ListenerObject::sendMessageToSelf","description":"Send a message to itself.","location":{"header":{"uri":"source/base/ListenerObject.h","line":127,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":346,"end":349}},"prot":"public","static":false,"definition":"void ListenerObject::sendMessageToSelf","returnType":"void","argsstring":"(ListenerObject this, uint32 message, uint32 delay, uint32 randomDelay)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `message`: The message's code\n\n_@param_ `delay`: Milliseconds to wait before sending the message\n\n_@param_ `randomDelay`: Range of a random delay in milliseconds to wait before sending the message\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"uint32 message","description":"The message's code"},{"name":"uint32 delay","description":"Milliseconds to wait before sending the message"},{"name":"uint32 randomDelay","description":"Range of a random delay in milliseconds to wait before sending the message"}]},{"name":"discardAllMessages","qualifiedname":"ListenerObject::discardAllMessages","description":"Discard all messages, both to be sent and to be received.","location":{"header":{"uri":"source/base/ListenerObject.h","line":130,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":351,"end":355}},"prot":"public","static":false,"definition":"void ListenerObject::discardAllMessages","returnType":"void","argsstring":"(ListenerObject this)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"}]},{"name":"discardMessages","qualifiedname":"ListenerObject::discardMessages","description":"Discard all messages with a specific code, both to be sent and to be received.","location":{"header":{"uri":"source/base/ListenerObject.h","line":134,"column":6},"body":{"uri":"source/base/ListenerObject.c","start":357,"end":361}},"prot":"public","static":false,"definition":"void ListenerObject::discardMessages","returnType":"void","argsstring":"(ListenerObject this, uint32 message)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `message`: The message's code to discard\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"uint32 message","description":"The message's code to discard"}]},{"name":"handleMessage","qualifiedname":"ListenerObject::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/base/ListenerObject.h","line":139,"column":14},"body":{"uri":"source/base/ListenerObject.c","start":363,"end":366}},"prot":"public","static":false,"definition":"bool ListenerObject::handleMessage","argsstring":"(ListenerObject this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"ListenerObject this","description":"ListenerObject Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]}],"variables":[{"name":"events","qualifiedname":"ListenerObject::events","description":"List of registered events","location":{"header":{"uri":"source/base/ListenerObject.h","line":70,"column":13},"body":{"uri":"source/base/ListenerObject.h","start":70,"end":70}},"prot":"protected","static":false},{"name":"eventFirings","qualifiedname":"ListenerObject::eventFirings","description":"Counter that keeps track of the number of fired events to prevent race conditions in nested firings.","location":{"header":{"uri":"source/base/ListenerObject.h","line":73,"column":6},"body":{"uri":"source/base/ListenerObject.h","start":73,"end":73}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"MBgmapAnimatedSprite":{"__contributor":"core","name":"MBgmapAnimatedSprite","base":"MBgmapSprite","description":"Class `FrameBlendBgmapSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose texture is allocated in BGMAP space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","line":49,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","start":50,"end":64}},"methods":[{"name":"constructor","qualifiedname":"MBgmapAnimatedSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","line":56,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.c","start":30,"end":37}},"prot":"public","static":false,"definition":"void MBgmapAnimatedSprite::constructor","returnType":"void","argsstring":"(MBgmapAnimatedSprite this, SpatialObject owner, const MBgmapAnimatedSpriteSpec *mBgmapAnimatedSpriteSpec)","paramDocs":"\n\n_@param_ `this`: MBgmapAnimatedSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `mBgmapAnimatedSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"MBgmapAnimatedSprite this","description":"MBgmapAnimatedSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const MBgmapAnimatedSpriteSpec *mBgmapAnimatedSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"updateAnimation","qualifiedname":"MBgmapAnimatedSprite::updateAnimation","description":"Update the animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","line":59,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.c","start":52,"end":73}},"prot":"public","static":false,"definition":"void MBgmapAnimatedSprite::updateAnimation","returnType":"override void","argsstring":"(MBgmapAnimatedSprite this)","paramDocs":"\n\n_@param_ `this`: MBgmapAnimatedSprite instance\n\n","parameters":[{"name":"MBgmapAnimatedSprite this","description":"MBgmapAnimatedSprite Instance"}]},{"name":"setMultiframe","qualifiedname":"MBgmapAnimatedSprite::setMultiframe","description":"Set the current multiframe.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","line":63,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.c","start":75,"end":83}},"prot":"public","static":false,"definition":"void MBgmapAnimatedSprite::setMultiframe","returnType":"override void","argsstring":"(MBgmapAnimatedSprite this, uint16 frame)","paramDocs":"\n\n_@param_ `this`: MBgmapAnimatedSprite instance\n\n_@param_ `frame`: Current animation frame\n\n","parameters":[{"name":"MBgmapAnimatedSprite this","description":"MBgmapAnimatedSprite Instance"},{"name":"uint16 frame","description":"Current animation frame"}]}],"variables":[],"enums":[],"typedefs":[{"name":"MBgmapAnimatedSpriteROMSpec","qualifiedname":"MBgmapAnimatedSprite::MBgmapAnimatedSpriteROMSpec","description":"A `MBgmapAnimatedSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","line":35,"column":40},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapAnimatedSprite.h","start":35,"end":35}},"prot":"public","static":false}]},"MBgmapSprite":{"__contributor":"core","name":"MBgmapSprite","base":"BgmapSprite","description":"Class `MBgmapSprite`\n\nInherits from `MBgmapSprite`\n\nCan display various textures across multiple BGMAP memory segments.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":67,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","start":68,"end":91}},"methods":[{"name":"constructor","qualifiedname":"MBgmapSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":85,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.c","start":50,"end":70}},"prot":"public","static":false,"definition":"void MBgmapSprite::constructor","returnType":"void","argsstring":"(MBgmapSprite this, SpatialObject owner, const MBgmapSpriteSpec *mBgmapSpriteSpec)","paramDocs":"\n\n_@param_ `this`: MBgmapSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `mBgmapSpriteSpec`\n\n","parameters":[{"name":"MBgmapSprite this","description":"MBgmapSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const MBgmapSpriteSpec *mBgmapSpriteSpec"}]},{"name":"doRender","qualifiedname":"MBgmapSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":90,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.c","start":81,"end":215}},"prot":"public","static":false,"definition":"int16 MBgmapSprite::doRender","returnType":"override ","argsstring":"(MBgmapSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: MBgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"MBgmapSprite this","description":"MBgmapSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]}],"variables":[{"name":"textures","qualifiedname":"MBgmapSprite::textures","description":"List of textures to display","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":72,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","start":72,"end":72}},"prot":"protected","static":false},{"name":"textureXOffset","qualifiedname":"MBgmapSprite::textureXOffset","description":"Cache of the first texture x offest to speed up rendering.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":75,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","start":75,"end":75}},"prot":"protected","static":false},{"name":"textureYOffset","qualifiedname":"MBgmapSprite::textureYOffset","description":"Cache of the first texture x offest to speed up rendering.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":78,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","start":78,"end":78}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"MBgmapSpriteROMSpec","qualifiedname":"MBgmapSprite::MBgmapSpriteROMSpec","description":"A `MBgmapSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","line":53,"column":32},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/MBgmapSprite.h","start":53,"end":53}},"prot":"public","static":false}]},"Math":{"__contributor":"core","name":"Math","base":"Object","description":"Class `Math`\n\nInherits from `Object`\n\nImplements miscelaneous mathematical functions.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":332,"column":8},"body":{"uri":"source/base/libgccvb/Math.h","start":333,"end":426}},"methods":[{"name":"abs","qualifiedname":"Math::abs","description":"Compute the absolute value of number.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":339,"column":21}},"prot":"public","static":true,"definition":"static int32 Math::abs","argsstring":"(int32 number)","paramDocs":"\n\n_@param_ `number`: Input number to compute the absolute value of\n\n_@return_ `static` Absolute value of the provided number\n\n","parameters":[{"description":"Input number to compute the absolute value of"}]},{"name":"floor","qualifiedname":"Math::floor","description":"Round down the provided number.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":344,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":449,"end":452}},"prot":"public","static":true,"definition":"static float Math::floor","returnType":"float","argsstring":"(float number)","paramDocs":"\n\n_@param_ `number`: Input number to round down\n\n_@return_ `static` Integral part of the provided number\n\n","parameters":[{"description":"Input number to round down"}]},{"name":"min","qualifiedname":"Math::min","description":"Return the minimum number between two numbers.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":350,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":454,"end":457}},"prot":"public","static":true,"definition":"static int32 Math::min","argsstring":"(int32 a, int32 b)","paramDocs":"\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` Minimum number between those provided\n\n","parameters":[{"name":"int32 b","description":"First number"},{"description":"Second number"}]},{"name":"max","qualifiedname":"Math::max","description":"Return the maximum number between two numbers.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":356,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":459,"end":462}},"prot":"public","static":true,"definition":"static int32 Math::max","argsstring":"(int32 a, int32 b)","paramDocs":"\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` Maximum number between those provided\n\n","parameters":[{"name":"int32 b","description":"First number"},{"description":"Second number"}]},{"name":"squareRoot","qualifiedname":"Math::squareRoot","description":"Compute the square root of the provided number (alrogithm takem from the DOOM's engine).","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":361,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":464,"end":478}},"prot":"public","static":true,"definition":"static float Math::squareRoot","returnType":"float","argsstring":"(float radicand)","paramDocs":"\n\n_@param_ `radicand`: Number to compute the square root of\n\n_@return_ `static` The square root of the provided number\n\n","parameters":[{"description":"Number to compute the square root of"}]},{"name":"squareRootFixed","qualifiedname":"Math::squareRootFixed","description":"Compute the square root of the provided number (alrogithm takem from the DOOM's engine).","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":366,"column":23},"body":{"uri":"source/base/libgccvb/Math.h","start":480,"end":504}},"prot":"public","static":true,"definition":"static fixed_t Math::squareRootFixed","argsstring":"(fixed_ext_t radicand)","paramDocs":"\n\n_@param_ `radicand`: Number to compute the square root of\n\n_@return_ `static` The square root of the provided number\n\n","parameters":[{"description":"Number to compute the square root of"}]},{"name":"randomSeed","qualifiedname":"Math::randomSeed","description":"Retrieve a random seed (algorithm taken from ).","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":370,"column":22},"body":{"uri":"source/base/libgccvb/Math.h","start":506,"end":512}},"prot":"public","static":true,"definition":"static uint32 Math::randomSeed","argsstring":"()","paramDocs":"\n\n_@return_ `static` Random seed\n\n","parameters":[]},{"name":"random","qualifiedname":"Math::random","description":"Compute a pseudo random number from the seed in the provided range.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":376,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":514,"end":521}},"prot":"public","static":true,"definition":"static int32 Math::random","argsstring":"(uint32 seed, int32 range)","paramDocs":"\n\n_@param_ `seed`: Random seed\n\n_@param_ `range`: Range for the generated pseudo random number\n\n_@return_ `static` The square root of the provided number\n\n","parameters":[{"name":"int32 range","description":"Random seed"},{"description":"Range for the generated pseudo random number"}]},{"name":"haveEqualSign","qualifiedname":"Math::haveEqualSign","description":"Check if the provided numbers have equal sign.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":382,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":523,"end":526}},"prot":"public","static":true,"definition":"static int32 Math::haveEqualSign","argsstring":"(int32 a, int32 b)","paramDocs":"\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` True if the provided numbers have equal sign; false otherwise\n\n","parameters":[{"name":"int32 b","description":"First number"},{"description":"Second number"}]},{"name":"getDigitsCount","qualifiedname":"Math::getDigitsCount","description":"Compute the number of digits that the provided number has.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":387,"column":21},"body":{"uri":"source/base/libgccvb/Math.h","start":528,"end":540}},"prot":"public","static":true,"definition":"static int32 Math::getDigitsCount","argsstring":"(int32 number)","paramDocs":"\n\n_@param_ `number`: Number to compute the digits of\n\n_@return_ `static` Number of digits of the provided number\n\n","parameters":[{"description":"Number to compute the digits of"}]},{"name":"resetRandomSeed","qualifiedname":"Math::resetRandomSeed","description":"Reset the internal random seed.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":390,"column":13},"body":{"uri":"source/base/libgccvb/Math.c","start":116,"end":119}},"prot":"public","static":true,"definition":"static void Math::resetRandomSeed","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"intInfinity","qualifiedname":"Math::intInfinity","description":"Retrieve the maximum number for the int32 data type.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":394,"column":14},"body":{"uri":"source/base/libgccvb/Math.c","start":121,"end":124}},"prot":"public","static":true,"definition":"static int32 Math::intInfinity","argsstring":"()","paramDocs":"\n\n_@return_ `static` Maximum positive value for the int32 data type\n\n","parameters":[]},{"name":"fixedInfinity","qualifiedname":"Math::fixedInfinity","description":"Retrieve the maximum number for the fixed_t data type.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":398,"column":16},"body":{"uri":"source/base/libgccvb/Math.c","start":126,"end":129}},"prot":"public","static":true,"definition":"static fixed_t Math::fixedInfinity","argsstring":"()","paramDocs":"\n\n_@return_ `static` Maximum positive value for the fixed_t data type\n\n","parameters":[]},{"name":"fixed_extInfinity","qualifiedname":"Math::fixed_extInfinity","description":"Retrieve the maximum number for the fixed_ext_t data type.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":402,"column":20},"body":{"uri":"source/base/libgccvb/Math.c","start":131,"end":134}},"prot":"public","static":true,"definition":"static fixed_ext_t Math::fixed_extInfinity","argsstring":"()","paramDocs":"\n\n_@return_ `static` Maximum positive value for the fixed_ext_t data type\n\n","parameters":[]},{"name":"aSin","qualifiedname":"Math::aSin","description":"Compute the arc sin of the provided sin.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":407,"column":14},"body":{"uri":"source/base/libgccvb/Math.c","start":136,"end":157}},"prot":"public","static":true,"definition":"static int32 Math::aSin","argsstring":"(fix7_9 sin)","paramDocs":"\n\n_@param_ `sin`: sin value\n\n_@return_ `static` Arcsin of the provided sin value\n\n","parameters":[{"description":"sin value"}]},{"name":"getAngle","qualifiedname":"Math::getAngle","description":"Compute the angle between (0, 0) and (x, y).","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":413,"column":14},"body":{"uri":"source/base/libgccvb/Math.c","start":159,"end":258}},"prot":"public","static":true,"definition":"static int32 Math::getAngle","argsstring":"(fix7_9 x, fix7_9 y)","paramDocs":"\n\n_@param_ `x`: X coordinate\n\n_@param_ `y`: Y coordinate\n\n_@return_ `static` Angle in degrees (0-512)\n\n","parameters":[{"name":"fix7_9 y","description":"X coordinate"},{"description":"Y coordinate"}]},{"name":"power","qualifiedname":"Math::power","description":"Compute the power for the provided base.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":419,"column":14},"body":{"uri":"source/base/libgccvb/Math.c","start":260,"end":263}},"prot":"public","static":true,"definition":"static int32 Math::power","argsstring":"(int32 base, int32 power)","paramDocs":"\n\n_@param_ `base`: Base\n\n_@param_ `power`: Power\n\n_@return_ `static` Base elevated to the provided power\n\n","parameters":[{"name":"int32 power","description":"Base"},{"description":"Power"}]},{"name":"powerFast","qualifiedname":"Math::powerFast","description":"Compute the power for the provided base.","location":{"header":{"uri":"source/base/libgccvb/Math.h","line":425,"column":14},"body":{"uri":"source/base/libgccvb/Math.c","start":265,"end":286}},"prot":"public","static":true,"definition":"static int32 Math::powerFast","argsstring":"(int32 base, int32 power)","paramDocs":"\n\n_@param_ `base`: Base\n\n_@param_ `power`: Power\n\n_@return_ `static` Base elevated to the provided power\n\n","parameters":[{"name":"int32 power","description":"Base"},{"description":"Power"}]}],"variables":[],"enums":[],"typedefs":[]},"Mem":{"__contributor":"core","name":"Mem","base":"Object","description":"Class `Mem`\n\nInherits from `ListenerObject`\n\nPerforms some memory copy and related procedures.","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":39,"column":8},"body":{"uri":"source/base/libgccvb/Mem.h","start":40,"end":107}},"methods":[{"name":"copyBYTE","qualifiedname":"Mem::copyBYTE","description":"Copy a block of BYTEs from the source memory address to the destination memory address","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":47,"column":20}},"prot":"public","static":true,"definition":"static void Mem::copyBYTE","returnType":"void","argsstring":"(BYTE *destination, const BYTE *source, uint32 numberOfBYTES)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to copy\n\n","parameters":[{"name":"const BYTE *source","description":"Starting destination address"},{"name":"uint32 numberOfBYTES","description":"Starting source address"},{"description":"Total number of BYTEs to copy"}]},{"name":"copyHWORD","qualifiedname":"Mem::copyHWORD","description":"Copy a block of HWORDs from the source memory address to the destination memory address","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":53,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":123,"end":129}},"prot":"public","static":true,"definition":"static void Mem::copyHWORD","returnType":"void","argsstring":"(HWORD *destination, const HWORD *source, uint32 numberOfHWORDS)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfHWORDS`: Total number of HWORDs to copy\n\n","parameters":[{"name":"const HWORD *source","description":"Starting destination address"},{"name":"uint32 numberOfHWORDS","description":"Starting source address"},{"description":"Total number of HWORDs to copy"}]},{"name":"copyWORD","qualifiedname":"Mem::copyWORD","description":"Copy a block of WORDs from the source memory address to the destination memory address","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":59,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":131,"end":137}},"prot":"public","static":true,"definition":"static void Mem::copyWORD","returnType":"void","argsstring":"(WORD *destination, const WORD *source, uint32 numberOfWORDS)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to copy\n\n","parameters":[{"name":"const WORD *source","description":"Starting destination address"},{"name":"uint32 numberOfWORDS","description":"Starting source address"},{"description":"Total number of WORDs to copy"}]},{"name":"combineBYTEs","qualifiedname":"Mem::combineBYTEs","description":"Apply a bitwise OR operation to the specified number of BYTEs from the provided source addresses and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":66,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":139,"end":145}},"prot":"public","static":true,"definition":"static void Mem::combineBYTEs","returnType":"void","argsstring":"(BYTE *destination, const BYTE *source1, const BYTE *source2, uint32 numberOfBYTES)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to combine\n\n","parameters":[{"name":"const BYTE *source1","description":"Starting destination address"},{"name":"const BYTE *source2","description":"Starting first source address"},{"name":"uint32 numberOfBYTES","description":"Starting second source address"},{"description":"Total number of BYTEs to combine"}]},{"name":"combineHWORDs","qualifiedname":"Mem::combineHWORDs","description":"Apply a bitwise OR operation to the specified number of HWORDs from the provided source addresses and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":73,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":147,"end":153}},"prot":"public","static":true,"definition":"static void Mem::combineHWORDs","returnType":"void","argsstring":"(HWORD *destination, const HWORD *source1, const HWORD *source2, uint32 numberOfWORDS)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfWORDS`\n\n","parameters":[{"name":"const HWORD *source1","description":"Starting destination address"},{"name":"const HWORD *source2","description":"Starting first source address"},{"name":"uint32 numberOfWORDS","description":"Starting second source address"},{}]},{"name":"combineWORDs","qualifiedname":"Mem::combineWORDs","description":"Apply a bitwise OR operation to the specified number of WORDs from the provided source addresses and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":80,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":155,"end":161}},"prot":"public","static":true,"definition":"static void Mem::combineWORDs","returnType":"void","argsstring":"(WORD *destination, const WORD *source1, const WORD *source2, uint32 numberOfWORDS)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to combine\n\n","parameters":[{"name":"const WORD *source1","description":"Starting destination address"},{"name":"const WORD *source2","description":"Starting first source address"},{"name":"uint32 numberOfWORDS","description":"Starting second source address"},{"description":"Total number of WORDs to combine"}]},{"name":"addOffsetToBYTE","qualifiedname":"Mem::addOffsetToBYTE","description":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":87,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":163,"end":169}},"prot":"public","static":true,"definition":"static void Mem::addOffsetToBYTE","returnType":"void","argsstring":"(BYTE *destination, const BYTE *source, uint32 numberOfBYTES, uint32 offset)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n","parameters":[{"name":"const BYTE *source","description":"Starting destination address"},{"name":"uint32 numberOfBYTES","description":"Starting source address"},{"name":"uint32 offset","description":"Total number of BYTEs to combine"},{"description":"Value to add to the data in the source address"}]},{"name":"addOffsetToHWORD","qualifiedname":"Mem::addOffsetToHWORD","description":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":94,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":171,"end":177}},"prot":"public","static":true,"definition":"static void Mem::addOffsetToHWORD","returnType":"void","argsstring":"(HWORD *destination, const HWORD *source, uint32 numberOfHWORDS, uint32 offset)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfHWORDS`: Total number of HWORDs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n","parameters":[{"name":"const HWORD *source","description":"Starting destination address"},{"name":"uint32 numberOfHWORDS","description":"Starting source address"},{"name":"uint32 offset","description":"Total number of HWORDs to combine"},{"description":"Value to add to the data in the source address"}]},{"name":"addOffsetToWORD","qualifiedname":"Mem::addOffsetToWORD","description":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":101,"column":20},"body":{"uri":"source/base/libgccvb/Mem.h","start":179,"end":185}},"prot":"public","static":true,"definition":"static void Mem::addOffsetToWORD","returnType":"void","argsstring":"(WORD *destination, const WORD *source, uint32 numberOfWORDS, uint32 offset)","paramDocs":"\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n","parameters":[{"name":"const WORD *source","description":"Starting destination address"},{"name":"uint32 numberOfWORDS","description":"Starting source address"},{"name":"uint32 offset","description":"Total number of WORDs to combine"},{"description":"Value to add to the data in the source address"}]},{"name":"clear","qualifiedname":"Mem::clear","description":"Write a determined number of zeros from the specified memory address onwards. \nIt doesn't need to be inlined since it is not used in performance critical places and it produces graphical glitches when inlined.","location":{"header":{"uri":"source/base/libgccvb/Mem.h","line":106,"column":13},"body":{"uri":"source/base/libgccvb/Mem.c","start":29,"end":37}},"prot":"public","static":true,"definition":"static void Mem::clear","returnType":"void","argsstring":"(BYTE *destination, uint32 numberOfBYTES)","paramDocs":"\n\n_@param_ `destination`: Starting address\n\n_@param_ `numberOfBYTES`: Total number of zeros to write\n\n","parameters":[{"name":"uint32 numberOfBYTES","description":"Starting address"},{"description":"Total number of zeros to write"}]}],"variables":[],"enums":[],"typedefs":[]},"MemoryPool":{"__contributor":"core","name":"MemoryPool","base":"Object","description":"Class `MemoryPool`\n\nInherits from `Object`\n\nImplements a memory pool for dynamic object allocation.","location":{"header":{"uri":"source/base/MemoryPool.h","line":60,"column":11},"body":{"uri":"source/base/MemoryPool.h","start":61,"end":100}},"methods":[{"name":"getInstance","qualifiedname":"MemoryPool::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/base/MemoryPool.h","line":80,"column":19}},"prot":"public","static":true,"definition":"static MemoryPool MemoryPool::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `MemoryPool` singleton\n\n","parameters":[]},{"name":"allocate","qualifiedname":"MemoryPool::allocate","description":"Allocate a block big enough to hold the provided amount of bytes.","location":{"header":{"uri":"source/base/MemoryPool.h","line":85,"column":13},"body":{"uri":"source/base/MemoryPool.c","start":110,"end":270}},"prot":"public","static":true,"definition":"static BYTE * MemoryPool::allocate","returnType":" *","argsstring":"(int32 numBytes)","paramDocs":"\n\n_@param_ `numBytes`: Total number of bytes to allocate\n\n_@return_ `static` A pointer to the allocated block\n\n","parameters":[{"description":"Total number of bytes to allocate"}]},{"name":"free","qualifiedname":"MemoryPool::free","description":"Free the memory block in which the provided object was allocated.","location":{"header":{"uri":"source/base/MemoryPool.h","line":89,"column":13},"body":{"uri":"source/base/MemoryPool.c","start":272,"end":324}},"prot":"public","static":true,"definition":"static void MemoryPool::free","returnType":"void","argsstring":"(BYTE *object)","paramDocs":"\n\n_@param_ `object`: Pointer to the memory block to free\n\n","parameters":[{"description":"Pointer to the memory block to free"}]},{"name":"printResumedUsage","qualifiedname":"MemoryPool::printResumedUsage","description":"Print a resume of the memory usage.","location":{"header":{"uri":"source/base/MemoryPool.h","line":94,"column":6},"body":{"uri":"source/base/MemoryPool.c","start":333,"end":384}},"prot":"public","static":false,"definition":"void MemoryPool::printResumedUsage","returnType":"void","argsstring":"(MemoryPool this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"MemoryPool this","description":"MemoryPool Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"printDetailedUsage","qualifiedname":"MemoryPool::printDetailedUsage","description":"Print all the details of the memory usage.","location":{"header":{"uri":"source/base/MemoryPool.h","line":99,"column":6},"body":{"uri":"source/base/MemoryPool.c","start":388,"end":441}},"prot":"public","static":false,"definition":"void MemoryPool::printDetailedUsage","returnType":"void","argsstring":"(MemoryPool this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"MemoryPool this","description":"MemoryPool Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"poolLocation","qualifiedname":"MemoryPool::poolLocation","description":"The actual blocks that constitute the memory pools Array of pointers to the beginning of each memory pool","location":{"header":{"uri":"source/base/MemoryPool.h","line":68,"column":6},"body":{"uri":"source/base/MemoryPool.h","start":68,"end":68}},"prot":"protected","static":false},{"name":"poolSizes","qualifiedname":"MemoryPool::poolSizes","description":"Mapping of memory pools to their block and total size.","location":{"header":{"uri":"source/base/MemoryPool.h","line":71,"column":8},"body":{"uri":"source/base/MemoryPool.h","start":71,"end":71}},"prot":"protected","static":false},{"name":"poolLastFreeBlock","qualifiedname":"MemoryPool::poolLastFreeBlock","description":"Array of pointers to the last free block found in each pool to accelerate the next search.","location":{"header":{"uri":"source/base/MemoryPool.h","line":74,"column":6},"body":{"uri":"source/base/MemoryPool.h","start":74,"end":74}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Mesh":{"__contributor":"core","name":"Mesh","base":"Wireframe","description":"Class `Mesh`\n\nInherits from `Wireframe`\n\nDraws the segments that compose the mesh.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":77,"column":1},"body":{"uri":"source/graphics/3d/Mesh.h","start":78,"end":127}},"methods":[{"name":"getRightBoxFromSpec","qualifiedname":"Mesh::getRightBoxFromSpec","description":"Retrieve the bounding box defined by the provided mesh spec's values.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":89,"column":17},"body":{"uri":"source/graphics/3d/Mesh.c","start":38,"end":150}},"prot":"protected","static":true,"definition":"static RightBox Mesh::getRightBoxFromSpec","argsstring":"(MeshSpec *meshSpec)","paramDocs":"\n\n_@param_ `meshSpec`\n\n_@return_ `static` Bounding box of the resulting mesh\n\n","parameters":[{}]},{"name":"constructor","qualifiedname":"Mesh::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":96,"column":6},"body":{"uri":"source/graphics/3d/Mesh.c","start":158,"end":170}},"prot":"public","static":false,"definition":"void Mesh::constructor","returnType":"void","argsstring":"(Mesh this, SpatialObject owner, const MeshSpec *meshSpec)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@param_ `owner`: `SpatialObject` to which the wireframe attaches to\n\n_@param_ `meshSpec`\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the wireframe attaches to"},{"name":"const MeshSpec *meshSpec"}]},{"name":"getRightBox","qualifiedname":"Mesh::getRightBox","description":"Retrieve the mesh's bounding box.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":100,"column":19},"body":{"uri":"source/graphics/3d/Mesh.c","start":183,"end":225}},"prot":"public","static":false,"definition":"RightBox Mesh::getRightBox","returnType":"override ","argsstring":"(Mesh this)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@return_ `RightBox` Bounding box of the mesh\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"}]},{"name":"getVertices","qualifiedname":"Mesh::getVertices","description":"Retrieve the list of vertices that compose the mesh.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":104,"column":22},"body":{"uri":"source/graphics/3d/Mesh.c","start":227,"end":230}},"prot":"public","static":false,"definition":"VirtualList Mesh::getVertices","returnType":"override ","argsstring":"(Mesh this)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@return_ `VirtualList` Linked list of vertices\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"}]},{"name":"render","qualifiedname":"Mesh::render","description":"Prepare the wireframe for drawing.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":108,"column":15},"body":{"uri":"source/graphics/3d/Mesh.c","start":232,"end":298}},"prot":"public","static":false,"definition":"void Mesh::render","returnType":"override void","argsstring":"(Mesh this, Vector3D relativePosition)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"},{"name":"Vector3D relativePosition","description":"Position relative to the camera's"}]},{"name":"draw","qualifiedname":"Mesh::draw","description":"Draw the wireframe to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":112,"column":15},"body":{"uri":"source/graphics/3d/Mesh.c","start":300,"end":317}},"prot":"public","static":false,"definition":"bool Mesh::draw","returnType":"override ","argsstring":"(Mesh this)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"}]},{"name":"addSegments","qualifiedname":"Mesh::addSegments","description":"Create new segments from the provided array.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":117,"column":6},"body":{"uri":"source/graphics/3d/Mesh.c","start":319,"end":348}},"prot":"public","static":false,"definition":"void Mesh::addSegments","returnType":"void","argsstring":"(Mesh this, PixelVector(*segments)[2], Vector3D displacement)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@param_ `segments`: Array of segments holding their spatial data @displacement: Displacement to add to the segments' vertices\n\n_@param_ `displacement`\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"},{"name":"PixelVector(*segments)[2]","description":"Array of segments holding their spatial data @displacement: Displacement to add to the segments' vertices"},{"name":"Vector3D displacement"}]},{"name":"addSegment","qualifiedname":"Mesh::addSegment","description":"Create a new segment from provided vectors.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":122,"column":6},"body":{"uri":"source/graphics/3d/Mesh.c","start":350,"end":394}},"prot":"public","static":false,"definition":"void Mesh::addSegment","returnType":"void","argsstring":"(Mesh this, Vector3D startVector, Vector3D endVector)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@param_ `startVector`: New segment's starting point\n\n_@param_ `endVector`: New segment's end point\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"},{"name":"Vector3D startVector","description":"New segment's starting point"},{"name":"Vector3D endVector","description":"New segment's end point"}]},{"name":"drawInterlaced","qualifiedname":"Mesh::drawInterlaced","description":"Draw the wireframe to the frame buffers in interlaced mode.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":126,"column":6},"body":{"uri":"source/graphics/3d/Mesh.c","start":396,"end":411}},"prot":"public","static":false,"definition":"bool Mesh::drawInterlaced","argsstring":"(Mesh this)","paramDocs":"\n\n_@param_ `this`: Mesh instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Mesh this","description":"Mesh Instance"}]}],"variables":[{"name":"segments","qualifiedname":"Mesh::segments","description":"List of segments","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":82,"column":13},"body":{"uri":"source/graphics/3d/Mesh.h","start":82,"end":82}},"prot":"protected","static":false},{"name":"vertices","qualifiedname":"Mesh::vertices","description":"List of vertices.","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":85,"column":13},"body":{"uri":"source/graphics/3d/Mesh.h","start":85,"end":85}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"MeshROMSpec","qualifiedname":"Mesh::MeshROMSpec","description":"A `Mesh` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/3d/Mesh.h","line":39,"column":24},"body":{"uri":"source/graphics/3d/Mesh.h","start":39,"end":39}},"prot":"public","static":false}]},"MessageDispatcher":{"__contributor":"core","name":"MessageDispatcher","base":"Object","description":"Class `MessageDispatcher`\n\nInherits from `Object`\n\nImplements a dispatcher central of message codes wrapped in a `Telegram`.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":63,"column":11},"body":{"uri":"source/base/MessageDispatcher.h","start":64,"end":145}},"methods":[{"name":"getInstance","qualifiedname":"MessageDispatcher::getInstance","description":"","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":77,"column":26}},"prot":"public","static":true,"definition":"static MessageDispatcher MessageDispatcher::getInstance","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"dispatchMessage","qualifiedname":"MessageDispatcher::dispatchMessage","description":"Dispatch a message","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":86,"column":13},"body":{"uri":"source/base/MessageDispatcher.c","start":41,"end":89}},"prot":"public","static":true,"definition":"static bool MessageDispatcher::dispatchMessage","argsstring":"(uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","paramDocs":"\n\n_@param_ `delay`: Milliseconds to wait before dispatching the message\n\n_@param_ `sender`: `Object` that sends the message\n\n_@param_ `receiver`: `Object` that receives the message\n\n_@param_ `message`: Message's code\n\n_@param_ `extraInfo`: Pointer to any extra data that must accompany the message\n\n_@return_ `static` Boolean indicating the status of the processing of the message if immediately dispatched\n\n","parameters":[{"name":"ListenerObject sender","description":"Milliseconds to wait before dispatching the message"},{"name":"ListenerObject receiver","description":"`Object` that sends the message"},{"name":"int32 message","description":"`Object` that receives the message"},{"name":"void *extraInfo","description":"Message's code"},{"description":"Pointer to any extra data that must accompany the message"}]},{"name":"dispatchDelayedMessage","qualifiedname":"MessageDispatcher::dispatchDelayedMessage","description":"Dispatch delayed message","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":94,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":97,"end":109}},"prot":"public","static":false,"definition":"void MessageDispatcher::dispatchDelayedMessage","returnType":"void","argsstring":"(MessageDispatcher this, Clock clock, uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `clock`\n\n_@param_ `delay`: Milliseconds to wait before dispatching the message\n\n_@param_ `sender`: `Object` that sends the message\n\n_@param_ `receiver`: `Object` that receives the message\n\n_@param_ `message`: Message's code\n\n_@param_ `extraInfo`: Pointer to any extra data that must accompany the message\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"Clock clock"},{"name":"uint32 delay","description":"Milliseconds to wait before dispatching the message"},{"name":"ListenerObject sender","description":"`Object` that sends the message"},{"name":"ListenerObject receiver","description":"`Object` that receives the message"},{"name":"int32 message","description":"Message's code"},{"name":"void *extraInfo","description":"Pointer to any extra data that must accompany the message"}]},{"name":"dispatchDelayedMessages","qualifiedname":"MessageDispatcher::dispatchDelayedMessages","description":"Dispatch the delayed messages whose delay has expired.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":98,"column":7},"body":{"uri":"source/base/MessageDispatcher.c","start":112,"end":190}},"prot":"public","static":false,"definition":"bool MessageDispatcher::dispatchDelayedMessages","argsstring":"(MessageDispatcher this)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"}]},{"name":"processDiscardedMessages","qualifiedname":"MessageDispatcher::processDiscardedMessages","description":"Force the destruction of discarded messages.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":101,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":192,"end":221}},"prot":"public","static":false,"definition":"void MessageDispatcher::processDiscardedMessages","returnType":"void","argsstring":"(MessageDispatcher this)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"}]},{"name":"discardDelayedMessagesWithClock","qualifiedname":"MessageDispatcher::discardDelayedMessagesWithClock","description":"Discarde delayed messages associated to the given clock.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":106,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":223,"end":240}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardDelayedMessagesWithClock","argsstring":"(MessageDispatcher this, Clock clock)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `clock`: `Clock` to search in delayed messages to discard\n\n_@return_ `bool` True if any messages is discarded\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"Clock clock","description":"`Clock` to search in delayed messages to discard"}]},{"name":"discardDelayedMessagesFromSender","qualifiedname":"MessageDispatcher::discardDelayedMessagesFromSender","description":"Discard delayed messages sent by an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":112,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":242,"end":264}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardDelayedMessagesFromSender","argsstring":"(MessageDispatcher this, ListenerObject sender, int32 message)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that originally sent the message\n\n_@param_ `message`: Message's code\n\n_@return_ `bool` True if any messages is discarded\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject sender","description":"`Object` that originally sent the message"},{"name":"int32 message","description":"Message's code"}]},{"name":"discardDelayedMessagesForReceiver","qualifiedname":"MessageDispatcher::discardDelayedMessagesForReceiver","description":"Discard delayed messages sent to an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":118,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":266,"end":288}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardDelayedMessagesForReceiver","argsstring":"(MessageDispatcher this, ListenerObject receiver, int32 message)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `receiver`: `Object` that was the target of the message\n\n_@param_ `message`: Message's code\n\n_@return_ `bool` True if any messages is discarded\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject receiver","description":"`Object` that was the target of the message"},{"name":"int32 message","description":"Message's code"}]},{"name":"discardAllDelayedMessagesFromSender","qualifiedname":"MessageDispatcher::discardAllDelayedMessagesFromSender","description":"Discard all delayed messages sent by an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":123,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":290,"end":312}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardAllDelayedMessagesFromSender","argsstring":"(MessageDispatcher this, ListenerObject sender)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that was the target of the message\n\n_@return_ `bool` True if any messages is discarded\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject sender","description":"`Object` that was the target of the message"}]},{"name":"discardAllDelayedMessagesForReceiver","qualifiedname":"MessageDispatcher::discardAllDelayedMessagesForReceiver","description":"Discard all delayed messages sent to an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":128,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":314,"end":336}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardAllDelayedMessagesForReceiver","argsstring":"(MessageDispatcher this, ListenerObject receiver)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `receiver`: `Object` that was the target of the message\n\n_@return_ `bool` True if any messages is discarded\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject receiver","description":"`Object` that was the target of the message"}]},{"name":"discardAllDelayedMessages","qualifiedname":"MessageDispatcher::discardAllDelayedMessages","description":"Discard all delayed messages sent to an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":132,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":338,"end":360}},"prot":"public","static":false,"definition":"bool MessageDispatcher::discardAllDelayedMessages","argsstring":"(MessageDispatcher this, ListenerObject listenerObject)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `listenerObject`: `Object` that the messages were originally sent to or sent by\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject listenerObject","description":"`Object` that the messages were originally sent to or sent by"}]},{"name":"print","qualifiedname":"MessageDispatcher::print","description":"Print all delayed messages sent by an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":138,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":363,"end":368}},"prot":"public","static":false,"definition":"void MessageDispatcher::print","returnType":"void","argsstring":"(MessageDispatcher this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"printAllDelayedMessagesFromSender","qualifiedname":"MessageDispatcher::printAllDelayedMessagesFromSender","description":"Print all delayed messages sent by an object.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":144,"column":6},"body":{"uri":"source/base/MessageDispatcher.c","start":372,"end":396}},"prot":"public","static":false,"definition":"void MessageDispatcher::printAllDelayedMessagesFromSender","returnType":"void","argsstring":"(MessageDispatcher this, ListenerObject sender, int16 x, int16 y)","paramDocs":"\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that originally sent the message\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"MessageDispatcher this","description":"MessageDispatcher Instance"},{"name":"ListenerObject sender","description":"`Object` that originally sent the message"},{"name":"int16 x","description":"Screen x coordinate where to print"},{"name":"int16 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"delayedMessages","qualifiedname":"MessageDispatcher::delayedMessages","description":"Linked list of queued messages to be dispatched","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":68,"column":13},"body":{"uri":"source/base/MessageDispatcher.h","start":68,"end":68}},"prot":"protected","static":false},{"name":"helperTelegram","qualifiedname":"MessageDispatcher::helperTelegram","description":"`Telegram` used when there is no stacking of telegrams.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":71,"column":10},"body":{"uri":"source/base/MessageDispatcher.h","start":71,"end":71}},"prot":"protected","static":false},{"name":"helperTelegramIsInUse","qualifiedname":"MessageDispatcher::helperTelegramIsInUse","description":"Flag that indicates the usage state of the helper telegram.","location":{"header":{"uri":"source/base/MessageDispatcher.h","line":74,"column":6},"body":{"uri":"source/base/MessageDispatcher.h","start":74,"end":74}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Object":{"__contributor":"core","name":"Object","description":"Class `Object`\n\nInherits from `Object`\n\nServes as the base class for all other classes in the engine.","location":{"header":{"uri":"source/base/Object.h","line":40,"column":9},"body":{"uri":"source/base/Object.h","start":41,"end":69}},"methods":[{"name":"getCast","qualifiedname":"Object::getCast","description":"Cast an object at runtime to a give class.","location":{"header":{"uri":"source/base/Object.h","line":56,"column":15},"body":{"uri":"source/base/Object.c","start":28,"end":170}},"prot":"public","static":true,"definition":"static Object Object::getCast","argsstring":"(void *object, ClassPointer targetClassGetClassMethod, ClassPointer baseClassGetClassMethod)","paramDocs":"\n\n_@param_ `object`: `Object` to cast\n\n_@param_ `targetClassGetClassMethod`: pointer to the target class' identifier method\n\n_@param_ `baseClassGetClassMethod`: pointer to the object's base class' identifier method\n\n_@return_ `static` Pointer to the object if the cast succeeds, NULL otherwhise.\n\n","parameters":[{"name":"ClassPointer targetClassGetClassMethod","description":"`Object` to cast"},{"name":"ClassPointer baseClassGetClassMethod","description":"pointer to the target class' identifier method"},{"description":"pointer to the object's base class' identifier method"}]},{"name":"constructor","qualifiedname":"Object::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/base/Object.h","line":59,"column":6},"body":{"uri":"source/base/Object.c","start":178,"end":180}},"prot":"public","static":false,"definition":"void Object::constructor","returnType":"void","argsstring":"(Object this)","paramDocs":"\n\n_@param_ `this`: Object instance\n\n","parameters":[{"name":"Object this","description":"Object Instance"}]},{"name":"getVTable","qualifiedname":"Object::getVTable","description":"Retrieve the object's virtual table pointer","location":{"header":{"uri":"source/base/Object.h","line":63,"column":12},"body":{"uri":"source/base/Object.c","start":194,"end":197}},"prot":"public","static":false,"definition":"const void * Object::getVTable","returnType":"const void *","argsstring":"(Object this)","paramDocs":"\n\n_@param_ `this`: Object instance\n\n_@return_ `const` Pointer to the object's virtual table pointer\n\n","parameters":[{"name":"Object this","description":"Object Instance"}]},{"name":"evolveTo","qualifiedname":"Object::evolveTo","description":"Converts the object into an instance of the target class if object's class is in the hierarchy of the target class.","location":{"header":{"uri":"source/base/Object.h","line":68,"column":6},"body":{"uri":"source/base/Object.c","start":199,"end":245}},"prot":"public","static":false,"definition":"bool Object::evolveTo","argsstring":"(Object this, const void *targetClass)","paramDocs":"\n\n_@param_ `this`: Object instance\n\n_@param_ `targetClass`: pointer to the target class' virtual table\n\n_@return_ `bool` True if successful\n\n","parameters":[{"name":"Object this","description":"Object Instance"},{"name":"const void *targetClass","description":"pointer to the target class' virtual table"}]}],"variables":[{"name":"vTable","qualifiedname":"Object::vTable","description":"Pointer to the class's virtual table","location":{"header":{"uri":"source/base/Object.h","line":47,"column":6},"body":{"uri":"source/base/Object.h","start":47,"end":47}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"ObjectAnimatedSprite":{"__contributor":"core","name":"ObjectAnimatedSprite","base":"ObjectSprite","description":"Class `BgmapAnimatedSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose graphics are allocated in OBJECT space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","line":50,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","start":51,"end":61}},"methods":[{"name":"constructor","qualifiedname":"ObjectAnimatedSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","line":57,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.c","start":28,"end":34}},"prot":"public","static":false,"definition":"void ObjectAnimatedSprite::constructor","returnType":"void","argsstring":"(ObjectAnimatedSprite this, SpatialObject owner, const ObjectAnimatedSpriteSpec *objectAnimatedSpriteSpec)","paramDocs":"\n\n_@param_ `this`: ObjectAnimatedSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `objectAnimatedSpriteSpec`\n\n","parameters":[{"name":"ObjectAnimatedSprite this","description":"ObjectAnimatedSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const ObjectAnimatedSpriteSpec *objectAnimatedSpriteSpec"}]},{"name":"updateAnimation","qualifiedname":"ObjectAnimatedSprite::updateAnimation","description":"Update the animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","line":60,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.c","start":43,"end":60}},"prot":"public","static":false,"definition":"void ObjectAnimatedSprite::updateAnimation","returnType":"override void","argsstring":"(ObjectAnimatedSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectAnimatedSprite instance\n\n","parameters":[{"name":"ObjectAnimatedSprite this","description":"ObjectAnimatedSprite Instance"}]}],"variables":[],"enums":[],"typedefs":[{"name":"ObjectAnimatedSpriteROMSpec","qualifiedname":"ObjectAnimatedSprite::ObjectAnimatedSpriteROMSpec","description":"A `ObjectAnimatedSpriteSpec` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","line":36,"column":40},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectAnimatedSprite.h","start":36,"end":36}},"prot":"public","static":false}]},"ObjectSprite":{"__contributor":"core","name":"ObjectSprite","base":"Sprite","description":"Class `ObjectSprite`\n\nInherits from `Sprite`\n\nDisplays a texture in OBJECT space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":67,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":68,"end":137}},"methods":[{"name":"constructor","qualifiedname":"ObjectSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":110,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":37,"end":75}},"prot":"public","static":false,"definition":"void ObjectSprite::constructor","returnType":"void","argsstring":"(ObjectSprite this, SpatialObject owner, const ObjectSpriteSpec *objectSpriteSpec)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `objectSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const ObjectSpriteSpec *objectSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"registerWithManager","qualifiedname":"ObjectSprite::registerWithManager","description":"Register this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":113,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":94,"end":110}},"prot":"public","static":false,"definition":"void ObjectSprite::registerWithManager","returnType":"override void","argsstring":"(ObjectSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"}]},{"name":"unregisterWithManager","qualifiedname":"ObjectSprite::unregisterWithManager","description":"Unegister this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":116,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":112,"end":120}},"prot":"public","static":false,"definition":"void ObjectSprite::unregisterWithManager","returnType":"override void","argsstring":"(ObjectSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"}]},{"name":"doRender","qualifiedname":"ObjectSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":121,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":122,"end":186}},"prot":"public","static":false,"definition":"int16 ObjectSprite::doRender","returnType":"override ","argsstring":"(ObjectSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]},{"name":"setRotation","qualifiedname":"ObjectSprite::setRotation","description":"Set the sprite's rotation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":125,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":188,"end":243}},"prot":"public","static":false,"definition":"void ObjectSprite::setRotation","returnType":"override void","argsstring":"(ObjectSprite this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n_@param_ `rotation`: `Rotation` to apply to the sprite\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"},{"name":"const Rotation *rotation","description":"`Rotation` to apply to the sprite"}]},{"name":"getTotalPixels","qualifiedname":"ObjectSprite::getTotalPixels","description":"Retrieve the sprite's total number of pixels actually displayed.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":129,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":245,"end":253}},"prot":"public","static":false,"definition":"int32 ObjectSprite::getTotalPixels","returnType":"override ","argsstring":"(ObjectSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n_@return_ `int32` `Sprite`'s total number of pixels actually displayed\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"}]},{"name":"resetTotalObjects","qualifiedname":"ObjectSprite::resetTotalObjects","description":"Force the computation of the number of OBJECTs that the sprite uses.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":132,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":255,"end":258}},"prot":"public","static":false,"definition":"void ObjectSprite::resetTotalObjects","returnType":"void","argsstring":"(ObjectSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"}]},{"name":"getTotalObjects","qualifiedname":"ObjectSprite::getTotalObjects","description":"Retrieve the number of OBJECTs that the sprite uses.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":136,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.c","start":260,"end":265}},"prot":"public","static":false,"definition":"int16 ObjectSprite::getTotalObjects","argsstring":"(ObjectSprite this)","paramDocs":"\n\n_@param_ `this`: ObjectSprite instance\n\n_@return_ `int16` Number of OBJECTs that the sprite uses\n\n","parameters":[{"name":"ObjectSprite this","description":"ObjectSprite Instance"}]}],"variables":[{"name":"totalObjects","qualifiedname":"ObjectSprite::totalObjects","description":"The number of OBJECTs that the sprite uses","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":72,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":72,"end":72}},"prot":"protected","static":false},{"name":"objectSpriteContainer","qualifiedname":"ObjectSprite::objectSpriteContainer","description":"`Container` that manages this sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":75,"column":23},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":75,"end":75}},"prot":"protected","static":false},{"name":"objectTextureSource","qualifiedname":"ObjectSprite::objectTextureSource","description":"`Texture`'s displacement in the map array.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":78,"column":21},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":78,"end":78}},"prot":"protected","static":false},{"name":"fourthWordValue","qualifiedname":"ObjectSprite::fourthWordValue","description":"Cache the computed value for the 4th entry of OBJECTs.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":83,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":83,"end":83}},"prot":"protected","static":false},{"name":"cols","qualifiedname":"ObjectSprite::cols","description":"Cache of the number of cols for the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":86,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":86,"end":86}},"prot":"protected","static":false},{"name":"rows","qualifiedname":"ObjectSprite::rows","description":"Cache of the number of cols for the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":89,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":89,"end":89}},"prot":"protected","static":false},{"name":"xDisplacementIncrement","qualifiedname":"ObjectSprite::xDisplacementIncrement","description":"Cache of the x displacamente used to flip horizontally the image.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":92,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":92,"end":92}},"prot":"protected","static":false},{"name":"yDisplacementIncrement","qualifiedname":"ObjectSprite::yDisplacementIncrement","description":"Cache of the y displacamente used to flip vertically the image.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":95,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":95,"end":95}},"prot":"protected","static":false},{"name":"xDisplacementDelta","qualifiedname":"ObjectSprite::xDisplacementDelta","description":"Cache of a displacement that is necessary to flip images horizontally while keeping their center at the same position on the screen","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":99,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":99,"end":99}},"prot":"protected","static":false},{"name":"yDisplacementDelta","qualifiedname":"ObjectSprite::yDisplacementDelta","description":"Cache of a displacement that is necessary to flip images vertically while keeping their center at the same position on the screen","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":103,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":103,"end":103}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"ObjectSpriteROMSpec","qualifiedname":"ObjectSprite::ObjectSpriteROMSpec","description":"A `ObjectSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","line":53,"column":32},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSprite.h","start":53,"end":53}},"prot":"public","static":false}]},"ObjectSpriteContainer":{"__contributor":"core","name":"ObjectSpriteContainer","base":"Sprite","description":"Class `ObjectSpriteContainer`\n\nInherits from `Sprite`\n\nManages ObjectSprites that are displayed in the same SPT.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":39,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":40,"end":137}},"methods":[{"name":"reset","qualifiedname":"ObjectSpriteContainer::reset","description":"Reset the state of the class's attributes.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":64,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":58,"end":72}},"prot":"public","static":true,"definition":"static void ObjectSpriteContainer::reset","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"prepareForRendering","qualifiedname":"ObjectSpriteContainer::prepareForRendering","description":"Prepare the class' global state for rendering.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":67,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":74,"end":78}},"prot":"public","static":true,"definition":"static void ObjectSpriteContainer::prepareForRendering","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"finishRendering","qualifiedname":"ObjectSpriteContainer::finishRendering","description":"Finish rendering.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":70,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":80,"end":89}},"prot":"public","static":true,"definition":"static void ObjectSpriteContainer::finishRendering","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"writeDRAM","qualifiedname":"ObjectSpriteContainer::writeDRAM","description":"Write cached OBJECT settings to DRAM.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":73,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":91,"end":105}},"prot":"public","static":true,"definition":"static void ObjectSpriteContainer::writeDRAM","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"constructor","qualifiedname":"ObjectSpriteContainer::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":76,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":113,"end":126}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::constructor","returnType":"void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"registerWithManager","qualifiedname":"ObjectSpriteContainer::registerWithManager","description":"Register this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":79,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":146,"end":149}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::registerWithManager","returnType":"override void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"unregisterWithManager","qualifiedname":"ObjectSpriteContainer::unregisterWithManager","description":"Unegister this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":82,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":151,"end":154}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::unregisterWithManager","returnType":"override void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"doRender","qualifiedname":"ObjectSpriteContainer::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":87,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":156,"end":161}},"prot":"public","static":false,"definition":"int16 ObjectSpriteContainer::doRender","returnType":"override ","argsstring":"(ObjectSpriteContainer this, int16 index)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]},{"name":"getTotalPixels","qualifiedname":"ObjectSpriteContainer::getTotalPixels","description":"Retrieve the total number of pixels actually displayed by all the managed sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":91,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":163,"end":171}},"prot":"public","static":false,"definition":"int32 ObjectSpriteContainer::getTotalPixels","returnType":"override ","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@return_ `int32` Total number of pixels displayed by all the managed sprites\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"invalidateRendering","qualifiedname":"ObjectSpriteContainer::invalidateRendering","description":"Invalidate the render flag.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":94,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":173,"end":179}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::invalidateRendering","returnType":"override void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"forceShow","qualifiedname":"ObjectSpriteContainer::forceShow","description":"Forcefully show the sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":97,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":181,"end":186}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::forceShow","returnType":"override void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"forceHide","qualifiedname":"ObjectSpriteContainer::forceHide","description":"Forcefully hide the sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":100,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":188,"end":192}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::forceHide","returnType":"override void","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]},{"name":"print","qualifiedname":"ObjectSpriteContainer::print","description":"Print the container's statistics.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":105,"column":15},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":194,"end":221}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::print","returnType":"override void","argsstring":"(ObjectSpriteContainer this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"registerSprite","qualifiedname":"ObjectSpriteContainer::registerSprite","description":"Register a sprite to be managed","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":110,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":223,"end":248}},"prot":"public","static":false,"definition":"bool ObjectSpriteContainer::registerSprite","argsstring":"(ObjectSpriteContainer this, ObjectSprite objectSprite)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `objectSprite`: `Sprite` to be managed\n\n_@return_ `bool` True if the sprite was successfully registered; false otherwise\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"ObjectSprite objectSprite","description":"`Sprite` to be managed"}]},{"name":"unregisterSprite","qualifiedname":"ObjectSpriteContainer::unregisterSprite","description":"Unregister a sprite to be managed","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":114,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":250,"end":261}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::unregisterSprite","returnType":"void","argsstring":"(ObjectSpriteContainer this, ObjectSprite objectSprite)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `objectSprite`: `Sprite` to no longer manage\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"ObjectSprite objectSprite","description":"`Sprite` to no longer manage"}]},{"name":"sortProgressively","qualifiedname":"ObjectSpriteContainer::sortProgressively","description":"Z sort over time the managed sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":119,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":263,"end":321}},"prot":"public","static":false,"definition":"bool ObjectSpriteContainer::sortProgressively","argsstring":"(ObjectSpriteContainer this, bool complete)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `complete`: Flag to indicate if the sorting must be complete or deferred\n\n_@return_ `bool` True if some sprites was moved to another position in the list\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"bool complete","description":"Flag to indicate if the sorting must be complete or deferred"}]},{"name":"renderSprites","qualifiedname":"ObjectSpriteContainer::renderSprites","description":"Render the managed sprites","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":124,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":323,"end":376}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::renderSprites","returnType":"void","argsstring":"(ObjectSpriteContainer this, bool evenFrame, bool updateAnimations)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `evenFrame`: Flag to control transparency effects\n\n_@param_ `updateAnimations`: Flag to allow or prevent animations to be updated\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"bool evenFrame","description":"Flag to control transparency effects"},{"name":"bool updateAnimations","description":"Flag to allow or prevent animations to be updated"}]},{"name":"showSprites","qualifiedname":"ObjectSpriteContainer::showSprites","description":"Show all sprites except the provided one.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":128,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":378,"end":394}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::showSprites","returnType":"void","argsstring":"(ObjectSpriteContainer this, ObjectSprite spareSprite)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `spareSprite`: `Sprite` to not show\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"ObjectSprite spareSprite","description":"`Sprite` to not show"}]},{"name":"hideSprites","qualifiedname":"ObjectSpriteContainer::hideSprites","description":"Hide all sprites except the provided one.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":132,"column":6}},"prot":"public","static":false,"definition":"void ObjectSpriteContainer::hideSprites","returnType":"void","argsstring":"(ObjectSpriteContainer this, ObjectSprite spareSprite)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `spareSprite`: `Sprite` to not hide\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"},{"name":"ObjectSprite spareSprite","description":"`Sprite` to not hide"}]},{"name":"getTotalUsedObjects","qualifiedname":"ObjectSpriteContainer::getTotalUsedObjects","description":"Retrieve the total number of OBJECTs used by all the managed sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":136,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.c","start":415,"end":418}},"prot":"public","static":false,"definition":"int32 ObjectSpriteContainer::getTotalUsedObjects","argsstring":"(ObjectSpriteContainer this)","paramDocs":"\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@return_ `int32` Total number of OBJECTs used by all the managed sprites\n\n","parameters":[{"name":"ObjectSpriteContainer this","description":"ObjectSpriteContainer Instance"}]}],"variables":[{"name":"objectSprites","qualifiedname":"ObjectSpriteContainer::objectSprites","description":"List of managed object sprites","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":44,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"sortingSpriteNode","qualifiedname":"ObjectSpriteContainer::sortingSpriteNode","description":"List node used to Z sort object sprites over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":47,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":47,"end":47}},"prot":"protected","static":false},{"name":"firstObjectIndex","qualifiedname":"ObjectSpriteContainer::firstObjectIndex","description":"Index of the first OBJECT.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":50,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"lastObjectIndex","qualifiedname":"ObjectSpriteContainer::lastObjectIndex","description":"Index of the last OBJECT.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":53,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"spt","qualifiedname":"ObjectSpriteContainer::spt","description":"SPT index that this container manages.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":56,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"hideSprites","qualifiedname":"ObjectSpriteContainer::hideSprites","description":"Flag to control the behavior of renderSprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","line":59,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/ObjectSpriteContainer.h","start":59,"end":59}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"ObjectTexture":{"__contributor":"core","name":"ObjectTexture","base":"Texture","description":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nA texture allocated in OBJECT memory.","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","line":52,"column":1},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","start":53,"end":60}},"methods":[{"name":"constructor","qualifiedname":"ObjectTexture::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","line":59,"column":6},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.c","start":23,"end":27}},"prot":"public","static":false,"definition":"void ObjectTexture::constructor","returnType":"void","argsstring":"(ObjectTexture this, ObjectTextureSpec *objectTextureSpec, uint16 id)","paramDocs":"\n\n_@param_ `this`: ObjectTexture instance\n\n_@param_ `objectTextureSpec`: Specification that determines how to configure the texture\n\n_@param_ `id`: `Texture`'s identificator\n\n","parameters":[{"name":"ObjectTexture this","description":"ObjectTexture Instance"},{"name":"ObjectTextureSpec *objectTextureSpec","description":"Specification that determines how to configure the texture"},{"name":"uint16 id","description":"`Texture`'s identificator"}]}],"variables":[],"enums":[],"typedefs":[{"name":"ObjectTextureSpec","qualifiedname":"ObjectTexture::ObjectTextureSpec","description":"A `ObjectTexture` spec","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","line":34,"column":27},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","start":34,"end":34}},"prot":"public","static":false},{"name":"ObjectTextureROMSpec","qualifiedname":"ObjectTexture::ObjectTextureROMSpec","description":"A `ObjectTexture` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","line":38,"column":33},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTexture.h","start":38,"end":38}},"prot":"public","static":false}]},"ObjectTextureManager":{"__contributor":"core","name":"ObjectTextureManager","base":"Object","description":"Class `BgmapTextureManager`\n\nInherits from `Texture`\n\nManages textures for OBJECT space.","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","line":33,"column":11},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","start":34,"end":52}},"methods":[{"name":"getInstance","qualifiedname":"ObjectTextureManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","line":39,"column":29}},"prot":"public","static":true,"definition":"static ObjectTextureManager ObjectTextureManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `ObjectTextureManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"ObjectTextureManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","line":42,"column":6},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.c","start":35,"end":36}},"prot":"public","static":false,"definition":"void ObjectTextureManager::reset","returnType":"void","argsstring":"(ObjectTextureManager this)","paramDocs":"\n\n_@param_ `this`: ObjectTextureManager instance\n\n","parameters":[{"name":"ObjectTextureManager this","description":"ObjectTextureManager Instance"}]},{"name":"getTexture","qualifiedname":"ObjectTextureManager::getTexture","description":"Retrieve a texture initialized with the provided spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","line":47,"column":15},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.c","start":38,"end":54}},"prot":"public","static":false,"definition":"ObjectTexture ObjectTextureManager::getTexture","argsstring":"(ObjectTextureManager this, ObjectTextureSpec *objectTextureSpec)","paramDocs":"\n\n_@param_ `this`: ObjectTextureManager instance\n\n_@param_ `objectTextureSpec`: Spec to use to initilize the desired texture\n\n_@return_ `ObjectTexture` `Texture` initialized with the provided spec\n\n","parameters":[{"name":"ObjectTextureManager this","description":"ObjectTextureManager Instance"},{"name":"ObjectTextureSpec *objectTextureSpec","description":"Spec to use to initilize the desired texture"}]},{"name":"releaseTexture","qualifiedname":"ObjectTextureManager::releaseTexture","description":"Release a texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.h","line":51,"column":6},"body":{"uri":"source/graphics/2d/Textures/Object/ObjectTextureManager.c","start":56,"end":61}},"prot":"public","static":false,"definition":"void ObjectTextureManager::releaseTexture","returnType":"void","argsstring":"(ObjectTextureManager this, ObjectTexture objectTexture)","paramDocs":"\n\n_@param_ `this`: ObjectTextureManager instance\n\n_@param_ `objectTexture`: `Texture` to release\n\n","parameters":[{"name":"ObjectTextureManager this","description":"ObjectTextureManager Instance"},{"name":"ObjectTexture objectTexture","description":"`Texture` to release"}]}],"variables":[],"enums":[],"typedefs":[]},"Optical":{"__contributor":"core","name":"Optical","base":"Object","description":"Class `Optical`\n\nInherits from `Object`\n\nComputes the values that determine the results from 3D to 2D projection.","location":{"header":{"uri":"source/base/libgccvb/Optical.h","line":32,"column":8},"body":{"uri":"source/base/libgccvb/Optical.h","start":33,"end":47}},"methods":[{"name":"getFromPixelOptical","qualifiedname":"Optical::getFromPixelOptical","description":"Converts the provided optical parameters in pixel units to optical values in meters.","location":{"header":{"uri":"source/base/libgccvb/Optical.h","line":40,"column":23}},"prot":"public","static":true,"definition":"static Optical Optical::getFromPixelOptical","argsstring":"(PixelOptical pixelOptical, CameraFrustum cameraFrustum)","paramDocs":"\n\n_@param_ `pixelOptical`: Struct that holds optical parameters in pixel units\n\n_@param_ `cameraFrustum`: `Camera`'s frustum configuration parameters\n\n_@return_ `static` `Optical` configuration parameters in meters\n\n","parameters":[{"name":"CameraFrustum cameraFrustum","description":"Struct that holds optical parameters in pixel units"},{"description":"`Camera`'s frustum configuration parameters"}]},{"name":"applyCameraFrustum","qualifiedname":"Optical::applyCameraFrustum","description":"Applies the provided camera frustum configuration to the provided optical configuration parameters.","location":{"header":{"uri":"source/base/libgccvb/Optical.h","line":46,"column":23},"body":{"uri":"source/base/libgccvb/Optical.h","start":84,"end":108}},"prot":"public","static":true,"definition":"static Optical Optical::applyCameraFrustum","argsstring":"(Optical optical, CameraFrustum cameraFrustum)","paramDocs":"\n\n_@param_ `optical`: Struct that holds optical parameters in meters\n\n_@param_ `cameraFrustum`: `Camera`'s frustum configuration parameters\n\n_@return_ `static` `Optical` configuration parameters in meters\n\n","parameters":[{"name":"CameraFrustum cameraFrustum","description":"Struct that holds optical parameters in meters"},{"description":"`Camera`'s frustum configuration parameters"}]}],"variables":[{"name":"maximumXViewDistancePower","qualifiedname":"Optical::maximumXViewDistancePower","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":205,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":205,"end":205}},"prot":"public","static":false},{"name":"maximumYViewDistancePower","qualifiedname":"Optical::maximumYViewDistancePower","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":206,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":206,"end":206}},"prot":"public","static":false},{"name":"cameraNearPlane","qualifiedname":"Optical::cameraNearPlane","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":207,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":207,"end":207}},"prot":"public","static":false},{"name":"baseDistance","qualifiedname":"Optical::baseDistance","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":208,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":208,"end":208}},"prot":"public","static":false},{"name":"horizontalViewPointCenter","qualifiedname":"Optical::horizontalViewPointCenter","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":209,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":209,"end":209}},"prot":"public","static":false},{"name":"verticalViewPointCenter","qualifiedname":"Optical::verticalViewPointCenter","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":210,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":210,"end":210}},"prot":"public","static":false},{"name":"scalingFactor","qualifiedname":"Optical::scalingFactor","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":211,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":211,"end":211}},"prot":"public","static":false},{"name":"halfWidth","qualifiedname":"Optical::halfWidth","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":212,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":212,"end":212}},"prot":"public","static":false},{"name":"halfHeight","qualifiedname":"Optical::halfHeight","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":213,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":213,"end":213}},"prot":"public","static":false},{"name":"aspectRatio","qualifiedname":"Optical::aspectRatio","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":214,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":214,"end":214}},"prot":"public","static":false},{"name":"fov","qualifiedname":"Optical::fov","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":215,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":215,"end":215}},"prot":"public","static":false},{"name":"aspectRatioXfov","qualifiedname":"Optical::aspectRatioXfov","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":216,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":216,"end":216}},"prot":"public","static":false},{"name":"farRatio1Near","qualifiedname":"Optical::farRatio1Near","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":217,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":217,"end":217}},"prot":"public","static":false},{"name":"farRatio2Near","qualifiedname":"Optical::farRatio2Near","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":218,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":218,"end":218}},"prot":"public","static":false},{"name":"projectionMultiplierHelper","qualifiedname":"Optical::projectionMultiplierHelper","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":219,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":219,"end":219}},"prot":"public","static":false},{"name":"scalingMultiplier","qualifiedname":"Optical::scalingMultiplier","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":220,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":220,"end":220}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"Optics":{"__contributor":"core","name":"Optics","base":"Object","description":"Class `Optics`\n\nInherits from `Object`\n\nComputes parallax.","location":{"header":{"uri":"source/base/Optics.h","line":32,"column":8},"body":{"uri":"source/base/Optics.h","start":33,"end":40}},"methods":[{"name":"calculateParallax","qualifiedname":"Optics::calculateParallax","description":"Calculate parallax based on the z coordinate.","location":{"header":{"uri":"source/base/Optics.h","line":39,"column":21}},"prot":"public","static":true,"definition":"static int16 Optics::calculateParallax","argsstring":"(fixed_t z)","paramDocs":"\n\n_@param_ `z`: 3D coordinate\n\n_@return_ `static` Parallax value (in pixels)\n\n","parameters":[{"description":"3D coordinate"}]}],"variables":[],"enums":[],"typedefs":[]},"OptionsSelector":{"__contributor":"core","name":"OptionsSelector","base":"ListenerObject","description":"Class `Sprite`\n\nInherits from `VisualComponent`\n\nImplements a simple interactive menu.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":88,"column":1},"body":{"uri":"source/tools/OptionsSelector.h","start":89,"end":190}},"methods":[{"name":"constructor","qualifiedname":"OptionsSelector::constructor","description":"Class' constructor","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":151,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":93,"end":114}},"prot":"public","static":false,"definition":"void OptionsSelector::constructor","returnType":"void","argsstring":"(OptionsSelector this, uint16 cols, uint16 rows, char *font, char *leftMark, char *rightMark)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `cols`: Number of columns per page\n\n_@param_ `rows`: Number of rows per page\n\n_@param_ `font`\n\n_@param_ `leftMark`: Left selection mark character\n\n_@param_ `rightMark`: Right selection mark character\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"uint16 cols","description":"Number of columns per page"},{"name":"uint16 rows","description":"Number of rows per page"},{"name":"char *font"},{"name":"char *leftMark","description":"Left selection mark character"},{"name":"char *rightMark","description":"Right selection mark character"}]},{"name":"setColumnWidth","qualifiedname":"OptionsSelector::setColumnWidth","description":"Set the maximum with of each column.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":155,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":125,"end":136}},"prot":"public","static":false,"definition":"void OptionsSelector::setColumnWidth","returnType":"void","argsstring":"(OptionsSelector this, uint8 width)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `width`: Columns' with\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"uint8 width","description":"Columns' with"}]},{"name":"setMarkCharacters","qualifiedname":"OptionsSelector::setMarkCharacters","description":"Set the markers characters.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":160,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":138,"end":142}},"prot":"public","static":false,"definition":"void OptionsSelector::setMarkCharacters","returnType":"void","argsstring":"(OptionsSelector this, char *leftMark, char *rightMark)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `leftMark`: Left selection mark character\n\n_@param_ `rightMark`: Right selection mark character\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"char *leftMark","description":"Left selection mark character"},{"name":"char *rightMark","description":"Right selection mark character"}]},{"name":"setOptions","qualifiedname":"OptionsSelector::setOptions","description":"Set the available options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":164,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":144,"end":187}},"prot":"public","static":false,"definition":"void OptionsSelector::setOptions","returnType":"void","argsstring":"(OptionsSelector this, VirtualList options)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `options`: List of options to set\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"VirtualList options","description":"List of options to set"}]},{"name":"setSelectedOption","qualifiedname":"OptionsSelector::setSelectedOption","description":"Set the selection option.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":168,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":189,"end":217}},"prot":"public","static":false,"definition":"bool OptionsSelector::setSelectedOption","argsstring":"(OptionsSelector this, int32 optionIndex)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `optionIndex`: Index of the option to select\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"int32 optionIndex","description":"Index of the option to select"}]},{"name":"selectNext","qualifiedname":"OptionsSelector::selectNext","description":"Select the next option.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":171,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":219,"end":268}},"prot":"public","static":false,"definition":"void OptionsSelector::selectNext","returnType":"void","argsstring":"(OptionsSelector this)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"}]},{"name":"selectPrevious","qualifiedname":"OptionsSelector::selectPrevious","description":"Select the previous option.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":174,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":270,"end":319}},"prot":"public","static":false,"definition":"void OptionsSelector::selectPrevious","returnType":"void","argsstring":"(OptionsSelector this)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"}]},{"name":"getSelectedOption","qualifiedname":"OptionsSelector::getSelectedOption","description":"Retrieve the selected option's index.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":178,"column":7},"body":{"uri":"source/tools/OptionsSelector.c","start":321,"end":324}},"prot":"public","static":false,"definition":"int32 OptionsSelector::getSelectedOption","argsstring":"(OptionsSelector this)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@return_ `int32` Index of the selected option\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"}]},{"name":"getNumberOfOptions","qualifiedname":"OptionsSelector::getNumberOfOptions","description":"Retrieve the total number of options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":182,"column":7},"body":{"uri":"source/tools/OptionsSelector.c","start":326,"end":329}},"prot":"public","static":false,"definition":"int32 OptionsSelector::getNumberOfOptions","argsstring":"(OptionsSelector this)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@return_ `int32` The total number of options\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"}]},{"name":"print","qualifiedname":"OptionsSelector::print","description":"Print the options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":189,"column":6},"body":{"uri":"source/tools/OptionsSelector.c","start":331,"end":446}},"prot":"public","static":false,"definition":"void OptionsSelector::print","returnType":"void","argsstring":"(OptionsSelector this, uint8 x, uint8 y, uint32 alignment, uint8 spacing)","paramDocs":"\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `alignment`: Text alignment\n\n_@param_ `spacing`: Text spacing\n\n","parameters":[{"name":"OptionsSelector this","description":"OptionsSelector Instance"},{"name":"uint8 x","description":"Screen x coordinate where to print"},{"name":"uint8 y","description":"Screen y coordinate where to print"},{"name":"uint32 alignment","description":"Text alignment"},{"name":"uint8 spacing","description":"Text spacing"}]}],"variables":[{"name":"pages","qualifiedname":"OptionsSelector::pages","description":"List of pages, each being a VirtualLists of Options","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":93,"column":13},"body":{"uri":"source/tools/OptionsSelector.h","start":93,"end":93}},"prot":"protected","static":false},{"name":"currentPage","qualifiedname":"OptionsSelector::currentPage","description":"Current page's node.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":96,"column":13},"body":{"uri":"source/tools/OptionsSelector.h","start":96,"end":96}},"prot":"protected","static":false},{"name":"currentOption","qualifiedname":"OptionsSelector::currentOption","description":"Current option's node.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":99,"column":13},"body":{"uri":"source/tools/OptionsSelector.h","start":99,"end":99}},"prot":"protected","static":false},{"name":"totalOptions","qualifiedname":"OptionsSelector::totalOptions","description":"Total number of options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":102,"column":7},"body":{"uri":"source/tools/OptionsSelector.h","start":102,"end":102}},"prot":"protected","static":false},{"name":"currentPageIndex","qualifiedname":"OptionsSelector::currentPageIndex","description":"Current page index.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":105,"column":7},"body":{"uri":"source/tools/OptionsSelector.h","start":105,"end":105}},"prot":"protected","static":false},{"name":"currentOptionIndex","qualifiedname":"OptionsSelector::currentOptionIndex","description":"","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":108,"column":7},"body":{"uri":"source/tools/OptionsSelector.h","start":108,"end":108}},"prot":"protected","static":false},{"name":"x","qualifiedname":"OptionsSelector::x","description":"Screen x coordinate where to print.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":111,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":111,"end":111}},"prot":"protected","static":false},{"name":"y","qualifiedname":"OptionsSelector::y","description":"Screen y coordinate where to print.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":114,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":114,"end":114}},"prot":"protected","static":false},{"name":"optionsLength","qualifiedname":"OptionsSelector::optionsLength","description":"The maximum length of all the options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":117,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":117,"end":117}},"prot":"protected","static":false},{"name":"alignment","qualifiedname":"OptionsSelector::alignment","description":"Text alignement.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":120,"column":8},"body":{"uri":"source/tools/OptionsSelector.h","start":120,"end":120}},"prot":"protected","static":false},{"name":"spacing","qualifiedname":"OptionsSelector::spacing","description":"Text row spacing.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":123,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":123,"end":123}},"prot":"protected","static":false},{"name":"cols","qualifiedname":"OptionsSelector::cols","description":"Number of columns per page.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":126,"column":8},"body":{"uri":"source/tools/OptionsSelector.h","start":126,"end":126}},"prot":"protected","static":false},{"name":"rows","qualifiedname":"OptionsSelector::rows","description":"Number of rows per page.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":129,"column":8},"body":{"uri":"source/tools/OptionsSelector.h","start":129,"end":129}},"prot":"protected","static":false},{"name":"columnWidth","qualifiedname":"OptionsSelector::columnWidth","description":"Width of a column (in chars)","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":132,"column":7},"body":{"uri":"source/tools/OptionsSelector.h","start":132,"end":132}},"prot":"protected","static":false},{"name":"leftMark","qualifiedname":"OptionsSelector::leftMark","description":"Left selection mark character.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":135,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":135,"end":135}},"prot":"protected","static":false},{"name":"rightMark","qualifiedname":"OptionsSelector::rightMark","description":"Right selection mark character.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":138,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":138,"end":138}},"prot":"protected","static":false},{"name":"font","qualifiedname":"OptionsSelector::font","description":"Font to use for printing the options.","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":141,"column":6},"body":{"uri":"source/tools/OptionsSelector.h","start":141,"end":141}},"prot":"protected","static":false}],"enums":[{"name":"OptionTypes","qualifiedname":"OptionsSelector::OptionTypes","description":"Types of Options","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":53,"column":1},"body":{"uri":"source/tools/OptionsSelector.h","start":54,"end":65}},"prot":"public","static":false},{"name":"OptionsAlignment","qualifiedname":"OptionsSelector::OptionsAlignment","description":"Types of text alignments","location":{"header":{"uri":"source/tools/OptionsSelector.h","line":69,"column":1},"body":{"uri":"source/tools/OptionsSelector.h","start":70,"end":74}},"prot":"public","static":false}],"typedefs":[]},"ParamTableManager":{"__contributor":"core","name":"ParamTableManager","base":"Object","description":"Class `ParamTableManager`\n\nInherits from `Object`\n\nManages param table space allocating and releasing blocks in it.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":111,"column":11},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":112,"end":168}},"methods":[{"name":"getInstance","qualifiedname":"ParamTableManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":138,"column":26}},"prot":"public","static":true,"definition":"static ParamTableManager ParamTableManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `AnimationCoordinatorFactory` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"ParamTableManager::reset","description":"Reset the animation coordinator factory's state.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":141,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":39,"end":56}},"prot":"public","static":false,"definition":"void ParamTableManager::reset","returnType":"void","argsstring":"(ParamTableManager this)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"}]},{"name":"setup","qualifiedname":"ParamTableManager::setup","description":"Configure the param table space","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":145,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":58,"end":84}},"prot":"public","static":false,"definition":"void ParamTableManager::setup","returnType":"void","argsstring":"(ParamTableManager this, int32 availableBgmapSegmentsForParamTable)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `availableBgmapSegmentsForParamTable`: Number of available BGMAP segments for the param tables\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"},{"name":"int32 availableBgmapSegmentsForParamTable","description":"Number of available BGMAP segments for the param tables"}]},{"name":"allocate","qualifiedname":"ParamTableManager::allocate","description":"Allocate a param table for the provided sprite","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":149,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":86,"end":155}},"prot":"public","static":false,"definition":"uint32 ParamTableManager::allocate","argsstring":"(ParamTableManager this, BgmapSprite bgmapSprite)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `bgmapSprite`: `Sprite` for which a param table will be allocated\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"},{"name":"BgmapSprite bgmapSprite","description":"`Sprite` for which a param table will be allocated"}]},{"name":"free","qualifiedname":"ParamTableManager::free","description":"Free the param table allocated for the provided sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":153,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":157,"end":190}},"prot":"public","static":false,"definition":"void ParamTableManager::free","returnType":"void","argsstring":"(ParamTableManager this, BgmapSprite bgmapSprite)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `bgmapSprite`: `Sprite` whose param table has to be freed\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"},{"name":"BgmapSprite bgmapSprite","description":"`Sprite` whose param table has to be freed"}]},{"name":"defragment","qualifiedname":"ParamTableManager::defragment","description":"Defragment param table space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":157,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":192,"end":248}},"prot":"public","static":false,"definition":"void ParamTableManager::defragment","returnType":"void","argsstring":"(ParamTableManager this, bool deferred)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `deferred`: Flag to defragment param table memory over time\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"},{"name":"bool deferred","description":"Flag to defragment param table memory over time"}]},{"name":"getParamTableBase","qualifiedname":"ParamTableManager::getParamTableBase","description":"Retrieve the param table displacement in bytes used to keep track of the start address of param table space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":162,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":250,"end":253}},"prot":"public","static":false,"definition":"uint32 ParamTableManager::getParamTableBase","argsstring":"(ParamTableManager this)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@return_ `uint32` Displacement in bytes to keep track of the start address of param table space\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"}]},{"name":"print","qualifiedname":"ParamTableManager::print","description":"Print the information about param table space usage.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":167,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.c","start":255,"end":270}},"prot":"public","static":false,"definition":"void ParamTableManager::print","returnType":"void","argsstring":"(ParamTableManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"ParamTableManager this","description":"ParamTableManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"size","qualifiedname":"ParamTableManager::size","description":"Total size of param table","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":116,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":116,"end":116}},"prot":"protected","static":false},{"name":"usedBytes","qualifiedname":"ParamTableManager::usedBytes","description":"Number of used bytes.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":119,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":119,"end":119}},"prot":"protected","static":false},{"name":"bgmapSprites","qualifiedname":"ParamTableManager::bgmapSprites","description":"List of sprites with allocated param tables.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":122,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":122,"end":122}},"prot":"protected","static":false},{"name":"paramTableFreeData","qualifiedname":"ParamTableManager::paramTableFreeData","description":"Struct used to keep track of the next free block in param table space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":125,"column":20},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":125,"end":125}},"prot":"protected","static":false},{"name":"previouslyMovedBgmapSprite","qualifiedname":"ParamTableManager::previouslyMovedBgmapSprite","description":"Cache of the last sprite whose param table was moved during the defragmentation of param table space","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":129,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":129,"end":129}},"prot":"protected","static":false},{"name":"paramTableBase","qualifiedname":"ParamTableManager::paramTableBase","description":"","location":{"header":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","line":132,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Bgmap/ParamTableManager.h","start":132,"end":132}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Particle":{"__contributor":"core","name":"Particle","base":"SpatialObject","description":"Class `Particle`\n\nInherits from `SpatialObject`\n\nImplements a particle that is spawned by particle systems.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":75,"column":1},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":76,"end":155}},"methods":[{"name":"constructor","qualifiedname":"Particle::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":95,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":36,"end":44}},"prot":"public","static":false,"definition":"void Particle::constructor","returnType":"void","argsstring":"(Particle this, const ParticleSpec *particleSpec)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `particleSpec`: Specification that determines how to configure the particle\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"const ParticleSpec *particleSpec","description":"Specification that determines how to configure the particle"}]},{"name":"isSubjectToGravity","qualifiedname":"Particle::isSubjectToGravity","description":"Check if the particle is subject to gravity.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":100,"column":15},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":55,"end":58}},"prot":"public","static":false,"definition":"bool Particle::isSubjectToGravity","returnType":"override ","argsstring":"(Particle this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `gravity`: Gravity vector\n\n_@return_ `bool` True if gravity can affect the particle; false otherwise\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"Vector3D gravity","description":"Gravity vector"}]},{"name":"setup","qualifiedname":"Particle::setup","description":"Configure the particle with the provided arguments.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":111,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":60,"end":100}},"prot":"public","static":false,"definition":"void Particle::setup","returnType":"void","argsstring":"(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, int16 lifeSpan, const Vector3D *position, const Vector3D *force, uint32 movementType, const AnimationFunction **animationFunctions, const char *animationName)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `spriteSpec`: Specification for a sprite to add to the particle\n\n_@param_ `wireframeSpec`: Specification for a wireframe to add to the particle\n\n_@param_ `lifeSpan`: Time that the particle must live\n\n_@param_ `position`: Starting position\n\n_@param_ `force`: Force to apply\n\n_@param_ `movementType`: Movement type on each axis\n\n_@param_ `animationFunctions`: Array of animations\n\n_@param_ `animationName`: Animation to play\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"const SpriteSpec *spriteSpec","description":"Specification for a sprite to add to the particle"},{"name":"const WireframeSpec *wireframeSpec","description":"Specification for a wireframe to add to the particle"},{"name":"int16 lifeSpan","description":"Time that the particle must live"},{"name":"const Vector3D *position","description":"Starting position"},{"name":"const Vector3D *force","description":"Force to apply"},{"name":"uint32 movementType","description":"Movement type on each axis"},{"name":"const AnimationFunction **animationFunctions","description":"Array of animations"},{"name":"const char *animationName","description":"Animation to play"}]},{"name":"resume","qualifiedname":"Particle::resume","description":"Configure the particle with the provided arguments after unpausing the game.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":118,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":102,"end":107}},"prot":"public","static":false,"definition":"void Particle::resume","returnType":"void","argsstring":"(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, const AnimationFunction **animationFunctions, const char *animationName)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `spriteSpec`: Specification for a sprite to add to the particle\n\n_@param_ `wireframeSpec`: Specification for a wireframe to add to the particle\n\n_@param_ `animationFunctions`: Array of animations\n\n_@param_ `animationName`: Animation to play\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"const SpriteSpec *spriteSpec","description":"Specification for a sprite to add to the particle"},{"name":"const WireframeSpec *wireframeSpec","description":"Specification for a wireframe to add to the particle"},{"name":"const AnimationFunction **animationFunctions","description":"Array of animations"},{"name":"const char *animationName","description":"Animation to play"}]},{"name":"suspend","qualifiedname":"Particle::suspend","description":"Prepares the particle to become inactive in this state.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":121,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":109,"end":112}},"prot":"public","static":false,"definition":"void Particle::suspend","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"expire","qualifiedname":"Particle::expire","description":"Force the particle to expire.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":124,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":114,"end":119}},"prot":"public","static":false,"definition":"void Particle::expire","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"show","qualifiedname":"Particle::show","description":"Make the particle's visual components visible.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":127,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":121,"end":132}},"prot":"public","static":false,"definition":"void Particle::show","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"hide","qualifiedname":"Particle::hide","description":"Make the particle's visual components invisible.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":130,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":134,"end":145}},"prot":"public","static":false,"definition":"void Particle::hide","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"setTransparency","qualifiedname":"Particle::setTransparency","description":"Set the transparency mode of the visual components.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":134,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":147,"end":158}},"prot":"public","static":false,"definition":"void Particle::setTransparency","returnType":"void","argsstring":"(Particle this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `transparency`\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"uint8 transparency"}]},{"name":"isVisible","qualifiedname":"Particle::isVisible","description":"Check if the visual components are visible.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":138,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":160,"end":204}},"prot":"public","static":false,"definition":"bool Particle::isVisible","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@return_ `bool` True if the the particle's sprite or wireframe are visible; false otherwise\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"reset","qualifiedname":"Particle::reset","description":"Reset the particle's state.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":141,"column":14},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":206,"end":209}},"prot":"public","static":false,"definition":"void Particle::reset","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]},{"name":"update","qualifiedname":"Particle::update","description":"Update the particle's state.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":146,"column":14},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":211,"end":230}},"prot":"public","static":false,"definition":"bool Particle::update","argsstring":"(Particle this, uint32 elapsedTime, void(*behavior)(Particle particle))","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `elapsedTime`: Elapsed time since the last call\n\n_@param_ `behavior`: Function pointer to control particle's behavior\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"uint32 elapsedTime","description":"Elapsed time since the last call"},{"name":"void(*behavior)(Particle particle)","description":"Function pointer to control particle's behavior"}]},{"name":"applyForce","qualifiedname":"Particle::applyForce","description":"Apply a force to the particle.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":151,"column":14},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":232,"end":233}},"prot":"public","static":false,"definition":"void Particle::applyForce","returnType":"void","argsstring":"(Particle this, const Vector3D *force, uint32 movementType)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `movementType`: Movement type on each axis\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"},{"name":"const Vector3D *force","description":"Force to be applied"},{"name":"uint32 movementType","description":"Movement type on each axis"}]},{"name":"configureMass","qualifiedname":"Particle::configureMass","description":"Configure the particle's mass.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":154,"column":14},"body":{"uri":"source/stage/entities/Particles/Particle.c","start":235,"end":236}},"prot":"public","static":false,"definition":"void Particle::configureMass","returnType":"void","argsstring":"(Particle this)","paramDocs":"\n\n_@param_ `this`: Particle instance\n\n","parameters":[{"name":"Particle this","description":"Particle Instance"}]}],"variables":[{"name":"lifeSpan","qualifiedname":"Particle::lifeSpan","description":"Remaining life span in milliseconds","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":80,"column":7},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":80,"end":80}},"prot":"protected","static":false},{"name":"sprite","qualifiedname":"Particle::sprite","description":"`Sprite` visual component.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":83,"column":8},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":83,"end":83}},"prot":"protected","static":false},{"name":"wireframe","qualifiedname":"Particle::wireframe","description":"`Wireframe` visual component.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":86,"column":11},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":86,"end":86}},"prot":"protected","static":false},{"name":"expired","qualifiedname":"Particle::expired","description":"If true the particle is set to be destroyed or recycled.","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":89,"column":6},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":89,"end":89}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"ParticleROMSpec","qualifiedname":"Particle::ParticleROMSpec","description":"A `Particle` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Particles/Particle.h","line":61,"column":28},"body":{"uri":"source/stage/entities/Particles/Particle.h","start":61,"end":61}},"prot":"public","static":false}]},"ParticleSystem":{"__contributor":"core","name":"ParticleSystem","base":"Entity","description":"Class `ParticleSystem`\n\nInherits from `Entity`\n\nImplements an entity that generates particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":92,"column":1},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":93,"end":220}},"methods":[{"name":"constructor","qualifiedname":"ParticleSystem::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":147,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":38,"end":55}},"prot":"public","static":false,"definition":"void ParticleSystem::constructor","returnType":"void","argsstring":"(ParticleSystem this, const ParticleSystemSpec *particleSystemSpec, int16 internalId, const char *const name)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particleSystemSpec`: Specification that determines how to configure the particle system\n\n_@param_ `internalId`: ID to internally identify this instance\n\n_@param_ `name`: Instance's name\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"const ParticleSystemSpec *particleSystemSpec","description":"Specification that determines how to configure the particle system"},{"name":"int16 internalId","description":"ID to internally identify this instance"},{"name":"const char *const name","description":"Instance's name"}]},{"name":"show","qualifiedname":"ParticleSystem::show","description":"Make this instance visible.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":150,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":72,"end":97}},"prot":"public","static":false,"definition":"void ParticleSystem::show","returnType":"override void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"hide","qualifiedname":"ParticleSystem::hide","description":"Make this instance invisible.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":153,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":99,"end":117}},"prot":"public","static":false,"definition":"void ParticleSystem::hide","returnType":"override void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"update","qualifiedname":"ParticleSystem::update","description":"Update this instance's logic.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":156,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":119,"end":219}},"prot":"public","static":false,"definition":"void ParticleSystem::update","returnType":"override void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"suspend","qualifiedname":"ParticleSystem::suspend","description":"Prepare to suspend this instance's logic.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":159,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":221,"end":236}},"prot":"public","static":false,"definition":"void ParticleSystem::suspend","returnType":"override void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"resume","qualifiedname":"ParticleSystem::resume","description":"Prepare to resume this instance's logic.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":162,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":238,"end":256}},"prot":"public","static":false,"definition":"void ParticleSystem::resume","returnType":"override void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"setTransparency","qualifiedname":"ParticleSystem::setTransparency","description":"Set this instance's transparency effects.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":166,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":258,"end":271}},"prot":"public","static":false,"definition":"void ParticleSystem::setTransparency","returnType":"override void","argsstring":"(ParticleSystem this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"uint8 transparency","description":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},{"name":"setSpec","qualifiedname":"ParticleSystem::setSpec","description":"Set the particle systems's spec.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":170,"column":15},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":273,"end":282}},"prot":"public","static":false,"definition":"void ParticleSystem::setSpec","returnType":"override void","argsstring":"(ParticleSystem this, void *particleSystemSpec)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particleSystemSpec`: Specification that determines how to configure the particle system\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"void *particleSystemSpec","description":"Specification that determines how to configure the particle system"}]},{"name":"start","qualifiedname":"ParticleSystem::start","description":"Start spawning particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":173,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":284,"end":291}},"prot":"public","static":false,"definition":"void ParticleSystem::start","returnType":"void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"pause","qualifiedname":"ParticleSystem::pause","description":"","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":176,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":293,"end":296}},"prot":"public","static":false,"definition":"void ParticleSystem::pause","returnType":"void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"unpause","qualifiedname":"ParticleSystem::unpause","description":"Resume the spawning of particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":179,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":298,"end":309}},"prot":"public","static":false,"definition":"void ParticleSystem::unpause","returnType":"void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"isPaused","qualifiedname":"ParticleSystem::isPaused","description":"Check if the spawning of particles is paused.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":183,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":311,"end":314}},"prot":"public","static":false,"definition":"bool ParticleSystem::isPaused","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@return_ `bool` True if the spawning of particles is paused; false otherwise\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"deleteAllParticles","qualifiedname":"ParticleSystem::deleteAllParticles","description":"Delete all spawned particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":186,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":316,"end":324}},"prot":"public","static":false,"definition":"void ParticleSystem::deleteAllParticles","returnType":"void","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"setLoop","qualifiedname":"ParticleSystem::setLoop","description":"Set the looping behavior of the particle system.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":191,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":326,"end":329}},"prot":"public","static":false,"definition":"void ParticleSystem::setLoop","returnType":"void","argsstring":"(ParticleSystem this, bool loop)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `loop`: If false, the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"bool loop","description":"If false, the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles"}]},{"name":"getLoop","qualifiedname":"ParticleSystem::getLoop","description":"Check the looping behavior of the particle system.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":196,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":331,"end":334}},"prot":"public","static":false,"definition":"bool ParticleSystem::getLoop","argsstring":"(ParticleSystem this)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@return_ `bool` False if the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"}]},{"name":"setSelfDestroyWhenDone","qualifiedname":"ParticleSystem::setSelfDestroyWhenDone","description":"Set the particle system to auto destroy or not when the total number of spawned particles equals the maximum number of alive particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":202,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":336,"end":339}},"prot":"public","static":false,"definition":"void ParticleSystem::setSelfDestroyWhenDone","returnType":"void","argsstring":"(ParticleSystem this, bool selfDestroyWhenDone)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `selfDestroyWhenDone`: If true, the particle system auto destroys when the total number of spawned particles equals the maximum number of alive particles.\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"bool selfDestroyWhenDone","description":"If true, the particle system auto destroys when the total number of spawned particles equals the maximum number of alive particles."}]},{"name":"setElapsedTime","qualifiedname":"ParticleSystem::setElapsedTime","description":"Set the elapsed time between calls to the update method.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":206,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":341,"end":344}},"prot":"public","static":false,"definition":"void ParticleSystem::setElapsedTime","returnType":"void","argsstring":"(ParticleSystem this, uint32 elapsedTime)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `elapsedTime`: Elapsed time between calls to the update method\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"uint32 elapsedTime","description":"Elapsed time between calls to the update method"}]},{"name":"print","qualifiedname":"ParticleSystem::print","description":"Print the particle system's status.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":211,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":346,"end":356}},"prot":"public","static":false,"definition":"void ParticleSystem::print","returnType":"void","argsstring":"(ParticleSystem this, int16 x, int16 y)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"int16 x","description":"Screen x coordinate where to print"},{"name":"int16 y","description":"Screen y coordinate where to print"}]},{"name":"particleSpawned","qualifiedname":"ParticleSystem::particleSpawned","description":"Informs itself when a particle is spawned.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":215,"column":14},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":358,"end":359}},"prot":"public","static":false,"definition":"void ParticleSystem::particleSpawned","returnType":"void","argsstring":"(ParticleSystem this, Particle particle)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particle`: The newly spawned particle\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"Particle particle","description":"The newly spawned particle"}]},{"name":"particleRecycled","qualifiedname":"ParticleSystem::particleRecycled","description":"Informs itself when a particle is recycled.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":219,"column":14},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.c","start":361,"end":362}},"prot":"public","static":false,"definition":"void ParticleSystem::particleRecycled","returnType":"void","argsstring":"(ParticleSystem this, Particle particle)","paramDocs":"\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particle`: The recycled particle\n\n","parameters":[{"name":"ParticleSystem this","description":"ParticleSystem Instance"},{"name":"Particle particle","description":"The recycled particle"}]}],"variables":[{"name":"particles","qualifiedname":"ParticleSystem::particles","description":"Linked list of particles","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":97,"column":13},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":97,"end":97}},"prot":"protected","static":false},{"name":"spawnPositionDisplacement","qualifiedname":"ParticleSystem::spawnPositionDisplacement","description":"Range for random displacement upon particle spawning.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":100,"column":10},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":100,"end":100}},"prot":"protected","static":false},{"name":"spawnForceDelta","qualifiedname":"ParticleSystem::spawnForceDelta","description":"Range for random force delta to be adde to the force applied to newly spawned particles","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":104,"column":10},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":104,"end":104}},"prot":"protected","static":false},{"name":"elapsedTime","qualifiedname":"ParticleSystem::elapsedTime","description":"Elapsed time per tick.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":107,"column":8},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":107,"end":107}},"prot":"protected","static":false},{"name":"nextSpawnTime","qualifiedname":"ParticleSystem::nextSpawnTime","description":"Time when the next particle has to be spawned.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":110,"column":7},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":110,"end":110}},"prot":"protected","static":false},{"name":"numberOfSpriteSpecs","qualifiedname":"ParticleSystem::numberOfSpriteSpecs","description":"Number of available sprite specs for particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":113,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":113,"end":113}},"prot":"protected","static":false},{"name":"numberOfWireframeSpecs","qualifiedname":"ParticleSystem::numberOfWireframeSpecs","description":"Number of available wireframes specs for particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":116,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":116,"end":116}},"prot":"protected","static":false},{"name":"aliveParticlesCount","qualifiedname":"ParticleSystem::aliveParticlesCount","description":"Number of alive particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":119,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":119,"end":119}},"prot":"protected","static":false},{"name":"totalSpawnedParticles","qualifiedname":"ParticleSystem::totalSpawnedParticles","description":"Counter of total spawned particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":122,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":122,"end":122}},"prot":"protected","static":false},{"name":"maximumNumberOfAliveParticles","qualifiedname":"ParticleSystem::maximumNumberOfAliveParticles","description":"Maximum number of alive particles at any given moment.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":125,"column":7},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":125,"end":125}},"prot":"protected","static":false},{"name":"paused","qualifiedname":"ParticleSystem::paused","description":"Flag to pause the generation of particles.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":128,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":128,"end":128}},"prot":"protected","static":false},{"name":"loop","qualifiedname":"ParticleSystem::loop","description":"If false, the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":132,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":132,"end":132}},"prot":"protected","static":false},{"name":"selfDestroyWhenDone","qualifiedname":"ParticleSystem::selfDestroyWhenDone","description":"If true, the particle system auto destroys when the total number of spawned particles equals the maximum number of alive particles","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":136,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":136,"end":136}},"prot":"protected","static":false},{"name":"applyForceToParticles","qualifiedname":"ParticleSystem::applyForceToParticles","description":"Flag to prevent computing force when not necessary.","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":139,"column":6},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":139,"end":139}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"ParticleSystemROMSpec","qualifiedname":"ParticleSystem::ParticleSystemROMSpec","description":"A `ParticleSystem` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Particles/ParticleSystem.h","line":78,"column":34},"body":{"uri":"source/stage/entities/Particles/ParticleSystem.h","start":78,"end":78}},"prot":"public","static":false}]},"PhysicalParticle":{"__contributor":"core","name":"PhysicalParticle","base":"Particle","description":"Class `PhysicalParticle`\n\nInherits from `Particle`\n\nImplements a particle that physically moves through a game stage.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":65,"column":1},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","start":66,"end":108}},"methods":[{"name":"constructor","qualifiedname":"PhysicalParticle::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":79,"column":6},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":29,"end":37}},"prot":"public","static":false,"definition":"void PhysicalParticle::constructor","returnType":"void","argsstring":"(PhysicalParticle this, const PhysicalParticleSpec *physicalParticleSpec)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `physicalParticleSpec`: Specification that determines how to configure the particle\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"},{"name":"const PhysicalParticleSpec *physicalParticleSpec","description":"Specification that determines how to configure the particle"}]},{"name":"getVelocity","qualifiedname":"PhysicalParticle::getVelocity","description":"Retrieve the particle's velocity vector.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":83,"column":25},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":54,"end":62}},"prot":"public","static":false,"definition":"const Vector3D * PhysicalParticle::getVelocity","returnType":["override const "," *"],"argsstring":"(PhysicalParticle this)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@return_ `const` Pointer to the direction towards which the particle is moving\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"}]},{"name":"setPosition","qualifiedname":"PhysicalParticle::setPosition","description":"Set the particle's position.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":87,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":64,"end":77}},"prot":"public","static":false,"definition":"void PhysicalParticle::setPosition","returnType":"override void","argsstring":"(PhysicalParticle this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `position`: 3D vector defining the particle's new position\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"},{"name":"const Vector3D *position","description":"3D vector defining the particle's new position"}]},{"name":"isSubjectToGravity","qualifiedname":"PhysicalParticle::isSubjectToGravity","description":"Check if the particle is subject to provided gravity vector.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":91,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":79,"end":87}},"prot":"public","static":false,"definition":"bool PhysicalParticle::isSubjectToGravity","returnType":"override ","argsstring":"(PhysicalParticle this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the particle; false otherwise\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"},{"name":"Vector3D gravity"}]},{"name":"reset","qualifiedname":"PhysicalParticle::reset","description":"Reset the particle's state.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":94,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":89,"end":97}},"prot":"public","static":false,"definition":"void PhysicalParticle::reset","returnType":"override void","argsstring":"(PhysicalParticle this)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"}]},{"name":"update","qualifiedname":"PhysicalParticle::update","description":"Update the particle's state.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":99,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":99,"end":112}},"prot":"public","static":false,"definition":"bool PhysicalParticle::update","returnType":"override ","argsstring":"(PhysicalParticle this, uint32 elapsedTime, void(*behavior)(Particle particle))","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `elapsedTime`: Elapsed time since the last call\n\n_@param_ `behavior`: Function pointer to control particle's behavior\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"},{"name":"uint32 elapsedTime","description":"Elapsed time since the last call"},{"name":"void(*behavior)(Particle particle)","description":"Function pointer to control particle's behavior"}]},{"name":"configureMass","qualifiedname":"PhysicalParticle::configureMass","description":"Configure the particle's mass.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":102,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":114,"end":122}},"prot":"public","static":false,"definition":"void PhysicalParticle::configureMass","returnType":"override void","argsstring":"(PhysicalParticle this)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"}]},{"name":"applyForce","qualifiedname":"PhysicalParticle::applyForce","description":"Apply a force to the particle.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":107,"column":15},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.c","start":124,"end":162}},"prot":"public","static":false,"definition":"void PhysicalParticle::applyForce","returnType":"override void","argsstring":"(PhysicalParticle this, const Vector3D *force, uint32 movementType)","paramDocs":"\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `movementType`: Movement type on each axis\n\n","parameters":[{"name":"PhysicalParticle this","description":"PhysicalParticle Instance"},{"name":"const Vector3D *force","description":"Force to be applied"},{"name":"uint32 movementType","description":"Movement type on each axis"}]}],"variables":[{"name":"physicalParticleSpec","qualifiedname":"PhysicalParticle::physicalParticleSpec","description":"Specification that determines how to configure the particle's physical body","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":70,"column":28},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","start":70,"end":70}},"prot":"protected","static":false},{"name":"body","qualifiedname":"PhysicalParticle::body","description":"`Particle`'s physical body.","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":73,"column":6},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","start":73,"end":73}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"PhysicalParticleROMSpec","qualifiedname":"PhysicalParticle::PhysicalParticleROMSpec","description":"A `PhysicalParticle` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","line":51,"column":36},"body":{"uri":"source/stage/entities/Particles/PhysicalParticle.h","start":51,"end":51}},"prot":"public","static":false}]},"PhysicalWorld":{"__contributor":"core","name":"PhysicalWorld","base":"Object","description":"Class `PhysicalWorld`\n\nInherits from `Object`\n\nManages the physical bodies in the game states.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":42,"column":1},"body":{"uri":"source/physics/PhysicalWorld.h","start":43,"end":124}},"methods":[{"name":"getElapsedTimeStep","qualifiedname":"PhysicalWorld::getElapsedTimeStep","description":"Retrieve the time that passes between each physical simulation step.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":74,"column":16},"body":{"uri":"source/physics/PhysicalWorld.c","start":39,"end":42}},"prot":"public","static":true,"definition":"static fixed_t PhysicalWorld::getElapsedTimeStep","argsstring":"()","paramDocs":"\n\n_@return_ `static` The time that passes between each physical simulation step\n\n","parameters":[]},{"name":"constructor","qualifiedname":"PhysicalWorld::constructor","description":"Class' constructor.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":77,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":267,"end":287}},"prot":"public","static":false,"definition":"void PhysicalWorld::constructor","returnType":"void","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"reset","qualifiedname":"PhysicalWorld::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":80,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":50,"end":53}},"prot":"public","static":false,"definition":"void PhysicalWorld::reset","returnType":"void","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"update","qualifiedname":"PhysicalWorld::update","description":"Update the registered bodies by advancing the physics simulations.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":83,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":55,"end":135}},"prot":"public","static":false,"definition":"void PhysicalWorld::update","returnType":"void","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"createBody","qualifiedname":"PhysicalWorld::createBody","description":"Create a body with the provided spec.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":90,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":137,"end":164}},"prot":"public","static":false,"definition":"Body PhysicalWorld::createBody","argsstring":"(PhysicalWorld this, SpatialObject owner, const PhysicalProperties *physicalProperties, uint16 axisSubjectToGravity)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `owner`: `Object` to which the body will attach to\n\n_@param_ `physicalProperties`: Spec to use to create the body\n\n_@param_ `axisSubjectToGravity`: Flag of axis on which the body is subject to gravity\n\n_@return_ `Body` Created body\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"SpatialObject owner","description":"`Object` to which the body will attach to"},{"name":"const PhysicalProperties *physicalProperties","description":"Spec to use to create the body"},{"name":"uint16 axisSubjectToGravity","description":"Flag of axis on which the body is subject to gravity"}]},{"name":"destroyBody","qualifiedname":"PhysicalWorld::destroyBody","description":"Destroy the provided body.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":94,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":166,"end":176}},"prot":"public","static":false,"definition":"void PhysicalWorld::destroyBody","returnType":"void","argsstring":"(PhysicalWorld this, Body body)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `body`\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"Body body"}]},{"name":"setTimeScale","qualifiedname":"PhysicalWorld::setTimeScale","description":"Set the time scale for time step on each call to update.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":98,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":178,"end":209}},"prot":"public","static":false,"definition":"void PhysicalWorld::setTimeScale","returnType":"void","argsstring":"(PhysicalWorld this, fixed_t timeScale)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `timeScale`: Time scale for time step on each call to update\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"fixed_t timeScale","description":"Time scale for time step on each call to update"}]},{"name":"getTimeScale","qualifiedname":"PhysicalWorld::getTimeScale","description":"Retrieve the time scale for time step on each call to update.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":102,"column":8},"body":{"uri":"source/physics/PhysicalWorld.c","start":211,"end":214}},"prot":"public","static":false,"definition":"uint32 PhysicalWorld::getTimeScale","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `uint32` Time scale for time step on each call to update\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"setGravity","qualifiedname":"PhysicalWorld::setGravity","description":"Set the physical world's gravity.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":106,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":216,"end":219}},"prot":"public","static":false,"definition":"void PhysicalWorld::setGravity","returnType":"void","argsstring":"(PhysicalWorld this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `gravity`: Gravity to set in the current physical world\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"Vector3D gravity","description":"Gravity to set in the current physical world"}]},{"name":"getGravity","qualifiedname":"PhysicalWorld::getGravity","description":"Retrieve the physical world's gravity.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":110,"column":10},"body":{"uri":"source/physics/PhysicalWorld.c","start":221,"end":224}},"prot":"public","static":false,"definition":"Vector3D PhysicalWorld::getGravity","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `Vector3D` Gravity in the current physical world\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"setFrictionCoefficient","qualifiedname":"PhysicalWorld::setFrictionCoefficient","description":"Set the physical world's friction coefficient.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":114,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":226,"end":229}},"prot":"public","static":false,"definition":"void PhysicalWorld::setFrictionCoefficient","returnType":"void","argsstring":"(PhysicalWorld this, fixed_t frictionCoefficient)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `frictionCoefficient`: Friction coefficient to set in the current physical world\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"fixed_t frictionCoefficient","description":"Friction coefficient to set in the current physical world"}]},{"name":"getFrictionCoefficient","qualifiedname":"PhysicalWorld::getFrictionCoefficient","description":"Retrieve the physical world's friction coefficient.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":118,"column":9},"body":{"uri":"source/physics/PhysicalWorld.c","start":231,"end":234}},"prot":"public","static":false,"definition":"fixed_t PhysicalWorld::getFrictionCoefficient","argsstring":"(PhysicalWorld this)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `fixed_t` Friction coefficient to set in the current physical world\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"}]},{"name":"print","qualifiedname":"PhysicalWorld::print","description":"Print the manager's statistics.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":123,"column":6},"body":{"uri":"source/physics/PhysicalWorld.c","start":243,"end":258}},"prot":"public","static":false,"definition":"void PhysicalWorld::print","returnType":"void","argsstring":"(PhysicalWorld this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"PhysicalWorld this","description":"PhysicalWorld Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"bodies","qualifiedname":"PhysicalWorld::bodies","description":"Linked list of registered bodies","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":47,"column":12},"body":{"uri":"source/physics/PhysicalWorld.h","start":47,"end":47}},"prot":"protected","static":false},{"name":"gravity","qualifiedname":"PhysicalWorld::gravity","description":"Gravity in the current physical world.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":50,"column":10},"body":{"uri":"source/physics/PhysicalWorld.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"frictionCoefficient","qualifiedname":"PhysicalWorld::frictionCoefficient","description":"Friction coefficient in the current physical world.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":53,"column":9},"body":{"uri":"source/physics/PhysicalWorld.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"timeScale","qualifiedname":"PhysicalWorld::timeScale","description":"Time scale for time step on each call to update.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":56,"column":9},"body":{"uri":"source/physics/PhysicalWorld.h","start":56,"end":56}},"prot":"protected","static":false},{"name":"cycle","qualifiedname":"PhysicalWorld::cycle","description":"Cycle of physical simulation during the current second.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":59,"column":7},"body":{"uri":"source/physics/PhysicalWorld.h","start":59,"end":59}},"prot":"protected","static":false},{"name":"skipCycles","qualifiedname":"PhysicalWorld::skipCycles","description":"Number of cycles to skip physical simulations to slow down physics.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":62,"column":7},"body":{"uri":"source/physics/PhysicalWorld.h","start":62,"end":62}},"prot":"protected","static":false},{"name":"remainingSkipCycles","qualifiedname":"PhysicalWorld::remainingSkipCycles","description":"Number of pending cycles to skip until the next physical simulation cycle.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":65,"column":7},"body":{"uri":"source/physics/PhysicalWorld.h","start":65,"end":65}},"prot":"protected","static":false},{"name":"dirty","qualifiedname":"PhysicalWorld::dirty","description":"If true, a body is pending destruction.","location":{"header":{"uri":"source/physics/PhysicalWorld.h","line":68,"column":6},"body":{"uri":"source/physics/PhysicalWorld.h","start":68,"end":68}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"PixelSize":{"__contributor":"core","name":"PixelSize","base":"Object","description":"Class `PixelSize`\n\nInherits from `Object`\n\nImplements methods to operate on `PixelSize` structs.","location":{"header":{"uri":"source/base/libgccvb/PixelSize.h","line":32,"column":8},"body":{"uri":"source/base/libgccvb/PixelSize.h","start":33,"end":40}},"methods":[{"name":"getFromSize","qualifiedname":"PixelSize::getFromSize","description":"Convert a `undefined` struct to a","location":{"header":{"uri":"source/base/libgccvb/PixelSize.h","line":39,"column":25}},"prot":"public","static":true,"definition":"static PixelSize PixelSize::getFromSize","argsstring":"(Size size)","paramDocs":"\n\n_@param_ `size`: `Size` struct to convert\n\n_@return_ `static` `PixelSize` struct\n\n","parameters":[{"description":"`Size` struct to convert"}]}],"variables":[{"name":"x","qualifiedname":"PixelSize::x","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":93,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":93,"end":93}},"prot":"public","static":false},{"name":"y","qualifiedname":"PixelSize::y","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":94,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":94,"end":94}},"prot":"public","static":false},{"name":"z","qualifiedname":"PixelSize::z","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":95,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":95,"end":95}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"PixelVector":{"__contributor":"core","name":"PixelVector","base":"Object","description":"Class `PixelVector`\n\nInherits from `Object`\n\nImplements methods to operate on `PixelVector` structs.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":34,"column":8},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":35,"end":130}},"methods":[{"name":"zero","qualifiedname":"PixelVector::zero","description":"Get a vector with all its members initialized to zero.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":40,"column":27}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::zero","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Pixel` vector with all its members initialized to zero\n\n","parameters":[]},{"name":"get","qualifiedname":"PixelVector::get","description":"Get the difference vector between two provided vectors.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":46,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":142,"end":145}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::get","argsstring":"(PixelVector from, PixelVector to)","paramDocs":"\n\n_@param_ `from`: Start vector\n\n_@param_ `to`: End vector\n\n_@return_ `static` Difference vector between the provided vectors\n\n","parameters":[{"name":"PixelVector to","description":"Start vector"},{"description":"End vector"}]},{"name":"sum","qualifiedname":"PixelVector::sum","description":"Compute the addition vector between other two provided vectors.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":52,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":147,"end":150}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::sum","argsstring":"(PixelVector a, PixelVector b)","paramDocs":"\n\n_@param_ `a`: First vector\n\n_@param_ `b`: Second vector\n\n_@return_ `static` Addition vector between the provided vectors\n\n","parameters":[{"name":"PixelVector b","description":"First vector"},{"description":"Second vector"}]},{"name":"sub","qualifiedname":"PixelVector::sub","description":"Compute the difference vector between two provided vectors.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":58,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":152,"end":155}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::sub","argsstring":"(PixelVector a, PixelVector b)","paramDocs":"\n\n_@param_ `a`: End vector\n\n_@param_ `b`: Start vector\n\n_@return_ `static` Difference vector between the provided vectors\n\n","parameters":[{"name":"PixelVector b","description":"End vector"},{"description":"Start vector"}]},{"name":"intermediate","qualifiedname":"PixelVector::intermediate","description":"Compute the intermediate vector between two provided vectors.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":64,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":157,"end":166}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::intermediate","argsstring":"(PixelVector a, PixelVector b)","paramDocs":"\n\n_@param_ `a`: First vector\n\n_@param_ `b`: Second vector\n\n_@return_ `static` Intermediate vector between the provided vectors\n\n","parameters":[{"name":"PixelVector b","description":"First vector"},{"description":"Second vector"}]},{"name":"getFromScreenPixelVector","qualifiedname":"PixelVector::getFromScreenPixelVector","description":"Transform the provided vector in screen coordinates into a normal pixel vector.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":70,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":168,"end":177}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::getFromScreenPixelVector","argsstring":"(ScreenPixelVector screenPixelVector, int16 parallax)","paramDocs":"\n\n_@param_ `screenPixelVector`: Vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n","parameters":[{"name":"int16 parallax","description":"Vector to transform"},{"description":"Parallax component for the resulting vector"}]},{"name":"getFromVector2D","qualifiedname":"PixelVector::getFromVector2D","description":"Transform the provided 2D vector in meter coordinates into a normal pixel vector.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":76,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":179,"end":188}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::getFromVector2D","argsstring":"(Vector2D vector2D, int16 parallax)","paramDocs":"\n\n_@param_ `vector2D`: 2D vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n","parameters":[{"name":"int16 parallax","description":"2D vector to transform"},{"description":"Parallax component for the resulting vector"}]},{"name":"getFromVector3D","qualifiedname":"PixelVector::getFromVector3D","description":"Transform the provided 2D vector in meter coordinates into a normal pixel vector.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":82,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":190,"end":199}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::getFromVector3D","argsstring":"(Vector3D vector3D, int16 parallax)","paramDocs":"\n\n_@param_ `vector3D`: 3D vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n","parameters":[{"name":"int16 parallax","description":"3D vector to transform"},{"description":"Parallax component for the resulting vector"}]},{"name":"getRelativeToCamera","qualifiedname":"PixelVector::getRelativeToCamera","description":"Compute the vector relative to the camera's position.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":87,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":201,"end":210}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::getRelativeToCamera","argsstring":"(PixelVector vector)","paramDocs":"\n\n_@param_ `vector`: Vector to compute the relative vector of\n\n_@return_ `static` Vector relative to the camera's position\n\n","parameters":[{"description":"Vector to compute the relative vector of"}]},{"name":"projectVector3D","qualifiedname":"PixelVector::projectVector3D","description":"Project the 3D vector to a vector in pixel units.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":93,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":212,"end":270}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::projectVector3D","argsstring":"(Vector3D vector3D, int16 parallax)","paramDocs":"\n\n_@param_ `vector3D`\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Projected vector in pixel units\n\n","parameters":[{"name":"int16 parallax"},{"description":"Parallax component for the resulting vector"}]},{"name":"transformVector3D","qualifiedname":"PixelVector::transformVector3D","description":"Transform to camera space and project the 3D vector to a vector in pixel units.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":99,"column":27},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":272,"end":277}},"prot":"public","static":true,"definition":"static PixelVector PixelVector::transformVector3D","argsstring":"(Vector3D vector)","paramDocs":"\n\n_@param_ `vector`: 3D vector to transform\n\n_@return_ `static` Projected vector in pixel units\n\n","parameters":[{"description":"3D vector to transform"}]},{"name":"length","qualifiedname":"PixelVector::length","description":"Compute the length of the provided vector.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":104,"column":23},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":279,"end":282}},"prot":"public","static":true,"definition":"static fixed_t PixelVector::length","argsstring":"(PixelVector vector)","paramDocs":"\n\n_@param_ `vector`: Vector to compute the length of\n\n_@return_ `static` Length of the provided vector\n\n","parameters":[{"description":"Vector to compute the length of"}]},{"name":"squareLength","qualifiedname":"PixelVector::squareLength","description":"Compute the squared length of the provided vector.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":109,"column":22},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":284,"end":287}},"prot":"public","static":true,"definition":"static uint32 PixelVector::squareLength","argsstring":"(PixelVector vector)","paramDocs":"\n\n_@param_ `vector`: Vector to compute the square length of\n\n_@return_ `static` Square length of the provided vector\n\n","parameters":[{"description":"Vector to compute the square length of"}]},{"name":"isVisible","qualifiedname":"PixelVector::isVisible","description":"Test if the provided vector is within the provided right box","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":116,"column":20},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":289,"end":315}},"prot":"public","static":true,"definition":"static bool PixelVector::isVisible","argsstring":"(PixelVector vector, PixelRightBox pixelRightBox, int16 padding)","paramDocs":"\n\n_@param_ `vector`: Vector to test\n\n_@param_ `pixelRightBox`: Bounding box\n\n_@param_ `padding`: Padding to be added to the bounding box\n\n_@return_ `static` True if the part of the vector is inside the bounding box; false otherwise\n\n","parameters":[{"name":"PixelRightBox pixelRightBox","description":"Vector to test"},{"name":"int16 padding","description":"Bounding box"},{"description":"Padding to be added to the bounding box"}]},{"name":"isVector3DVisible","qualifiedname":"PixelVector::isVector3DVisible","description":"Test if the provided 3D vector is within the provided right box","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":123,"column":20},"body":{"uri":"source/base/libgccvb/PixelVector.h","start":317,"end":341}},"prot":"public","static":true,"definition":"static bool PixelVector::isVector3DVisible","argsstring":"(Vector3D vector, PixelRightBox pixelRightBox, int16 padding)","paramDocs":"\n\n_@param_ `vector`: 3D vector to test\n\n_@param_ `pixelRightBox`: Bounding box\n\n_@param_ `padding`: Padding to be added to the bounding box\n\n_@return_ `static` True if the part of the vector is inside the bounding box; false otherwise\n\n","parameters":[{"name":"PixelRightBox pixelRightBox","description":"3D vector to test"},{"name":"int16 padding","description":"Bounding box"},{"description":"Padding to be added to the bounding box"}]},{"name":"print","qualifiedname":"PixelVector::print","description":"Print the vector's components.","location":{"header":{"uri":"source/base/libgccvb/PixelVector.h","line":129,"column":13},"body":{"uri":"source/base/libgccvb/PixelVector.c","start":26,"end":37}},"prot":"public","static":true,"definition":"static void PixelVector::print","returnType":"void","argsstring":"(PixelVector vector, int32 x, int32 y)","paramDocs":"\n\n_@param_ `vector`: Vector to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"int32 x","description":"Vector to print"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"description":"Screen y coordinate where to print"}]}],"variables":[{"name":"x","qualifiedname":"PixelVector::x","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":120,"column":7},"body":{"uri":"source/base/libgccvb/Types.h","start":120,"end":120}},"prot":"public","static":false},{"name":"y","qualifiedname":"PixelVector::y","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":121,"column":7},"body":{"uri":"source/base/libgccvb/Types.h","start":121,"end":121}},"prot":"public","static":false},{"name":"z","qualifiedname":"PixelVector::z","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":122,"column":7},"body":{"uri":"source/base/libgccvb/Types.h","start":122,"end":122}},"prot":"public","static":false},{"name":"parallax","qualifiedname":"PixelVector::parallax","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":123,"column":7},"body":{"uri":"source/base/libgccvb/Types.h","start":123,"end":123}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"Printing":{"__contributor":"core","name":"Printing","base":"ListenerObject","description":"Class `Printing`\n\nInherits from `ListenerObject`\n\nManages printing layer and offers various functions to write to it.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":171,"column":11},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":172,"end":360}},"methods":[{"name":"getInstance","qualifiedname":"Printing::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":209,"column":17}},"prot":"public","static":true,"definition":"static Printing Printing::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Printing` singleton\n\n","parameters":[]},{"name":"setDebugMode","qualifiedname":"Printing::setDebugMode","description":"Set mode to debug to bypass loading fonts through CharSets.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":212,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":65,"end":71}},"prot":"public","static":false,"definition":"void Printing::setDebugMode","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"reset","qualifiedname":"Printing::reset","description":"Empties internal virtual list of registered fonts.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":215,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":73,"end":94}},"prot":"public","static":false,"definition":"void Printing::reset","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"show","qualifiedname":"Printing::show","description":"Force printing layer to show up.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":218,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":96,"end":103}},"prot":"public","static":false,"definition":"void Printing::show","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"hide","qualifiedname":"Printing::hide","description":"Force printing layer to hide.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":221,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":105,"end":111}},"prot":"public","static":false,"definition":"void Printing::hide","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"loadFonts","qualifiedname":"Printing::loadFonts","description":"Add fonts to internal `VirtualList` and preload CharSets for specified fonts.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":225,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":113,"end":163}},"prot":"public","static":false,"definition":"void Printing::loadFonts","returnType":"void","argsstring":"(Printing this, FontSpec **fontSpecs)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `fontSpecs`: Array of font specs whose charset should pre preloaded\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"FontSpec **fontSpecs","description":"Array of font specs whose charset should pre preloaded"}]},{"name":"releaseFonts","qualifiedname":"Printing::releaseFonts","description":"Release fonts, free VRAM.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":228,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":165,"end":192}},"prot":"public","static":false,"definition":"void Printing::releaseFonts","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"clear","qualifiedname":"Printing::clear","description":"Clear printing area in BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":231,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":194,"end":200}},"prot":"public","static":false,"definition":"void Printing::clear","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"clearRow","qualifiedname":"Printing::clearRow","description":"Clear a given row in the printable area of BGMAP memory.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":235,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":202,"end":206}},"prot":"public","static":false,"definition":"void Printing::clearRow","returnType":"void","argsstring":"(Printing this, uint16 row)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `row`: Row to clean (0-27)\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint16 row","description":"Row to clean (0-27)"}]},{"name":"text","qualifiedname":"Printing::text","description":"Print a string.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":242,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":208,"end":215}},"prot":"public","static":false,"definition":"void Printing::text","returnType":"void","argsstring":"(Printing this, const char *string, int32 x, int32 y, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `string`: String to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `font`: Name of font to use for printing\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"const char *string","description":"String to print"},{"name":"int32 x","description":"Column to start printing at"},{"name":"int32 y","description":"Row to start printing at"},{"name":"const char *font","description":"Name of font to use for printing"}]},{"name":"int32","qualifiedname":"Printing::int32","description":"Print an integer value.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":249,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":217,"end":220}},"prot":"public","static":false,"definition":"void Printing::int32","returnType":"void","argsstring":"(Printing this, int32 value, uint8 x, uint8 y, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Integer to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `font`: Name of font to use for printing\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int32 value","description":"Integer to print"},{"name":"uint8 x","description":"Column to start printing at"},{"name":"uint8 y","description":"Row to start printing at"},{"name":"const char *font","description":"Name of font to use for printing"}]},{"name":"hex","qualifiedname":"Printing::hex","description":"Print a hex value.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":257,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":222,"end":225}},"prot":"public","static":false,"definition":"void Printing::hex","returnType":"void","argsstring":"(Printing this, WORD value, uint8 x, uint8 y, uint8 length, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Hex value to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `length`: Digits to print\n\n_@param_ `font`: Name of font to use for printing\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"WORD value","description":"Hex value to print"},{"name":"uint8 x","description":"Column to start printing at"},{"name":"uint8 y","description":"Row to start printing at"},{"name":"uint8 length","description":"Digits to print"},{"name":"const char *font","description":"Name of font to use for printing"}]},{"name":"float","qualifiedname":"Printing::float","description":"Print a float value.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":265,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":227,"end":328}},"prot":"public","static":false,"definition":"void Printing::float","returnType":"void","argsstring":"(Printing this, float value, uint8 x, uint8 y, int32 precision, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Float value to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `precision`: How many decimals to print\n\n_@param_ `font`: Name of font to use for printing\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"float value","description":"Float value to print"},{"name":"uint8 x","description":"Column to start printing at"},{"name":"uint8 y","description":"Row to start printing at"},{"name":"int32 precision","description":"How many decimals to print"},{"name":"const char *font","description":"Name of font to use for printing"}]},{"name":"setFontPage","qualifiedname":"Printing::setFontPage","description":"Writes the font's char set to CHAR memory with displacing the source pointer by numberOfChars * page.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":271,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":330,"end":340}},"prot":"public","static":false,"definition":"void Printing::setFontPage","returnType":"void","argsstring":"(Printing this, const char *font, uint16 page)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `font`: Name of font to use for printing\n\n_@param_ `page`: ROM's displacement multiplier\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"const char *font","description":"Name of font to use for printing"},{"name":"uint16 page","description":"ROM's displacement multiplier"}]},{"name":"setOrientation","qualifiedname":"Printing::setOrientation","description":"Sets the orientation for the following call to print. Resets its self automatically to horizonal.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":276,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":342,"end":358}},"prot":"public","static":false,"definition":"void Printing::setOrientation","returnType":"void","argsstring":"(Printing this, uint8 value)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: PrintingOrientation\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint8 value","description":"PrintingOrientation"}]},{"name":"setDirection","qualifiedname":"Printing::setDirection","description":"Sets the direction for the following call to print. Resets its self automatically to LTR (Left to Right).","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":281,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":360,"end":376}},"prot":"public","static":false,"definition":"void Printing::setDirection","returnType":"void","argsstring":"(Printing this, uint8 value)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: PrintingDirection\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint8 value","description":"PrintingDirection"}]},{"name":"setPrintingBgmapSegment","qualifiedname":"Printing::setPrintingBgmapSegment","description":"Cache the printing bgmap segment.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":285,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":378,"end":389}},"prot":"public","static":false,"definition":"void Printing::setPrintingBgmapSegment","returnType":"void","argsstring":"(Printing this, int8 printingBgmapSegment)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `printingBgmapSegment`: Index of the bgmap segment to print to\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int8 printingBgmapSegment","description":"Index of the bgmap segment to print to"}]},{"name":"addSprite","qualifiedname":"Printing::addSprite","description":"Create a printing sprite.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":288,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":391,"end":440}},"prot":"public","static":false,"definition":"void Printing::addSprite","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"setActiveSprite","qualifiedname":"Printing::setActiveSprite","description":"Set the active printing sprite.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":292,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":442,"end":454}},"prot":"public","static":false,"definition":"bool Printing::setActiveSprite","argsstring":"(Printing this, uint16 printingSpriteIndex)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `printingSpriteIndex`: Index of the sprite to activate\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint16 printingSpriteIndex","description":"Index of the sprite to activate"}]},{"name":"printSprite","qualifiedname":"Printing::printSprite","description":"Print active printing sprite's info.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":297,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":456,"end":462}},"prot":"public","static":false,"definition":"void Printing::printSprite","returnType":"void","argsstring":"(Printing this, int16 x, int16 y)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int16 x","description":"Screen x coordinate where to print"},{"name":"int16 y","description":"Screen y coordinate where to print"}]},{"name":"setCoordinates","qualifiedname":"Printing::setCoordinates","description":"Set the coordinates used for printing.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":304,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":472,"end":476}},"prot":"public","static":false,"definition":"void Printing::setCoordinates","returnType":"void","argsstring":"(Printing this, int16 x, int16 y, int16 z, int8 parallax)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: WORLD x coordinate\n\n_@param_ `y`: WORLD y coordinate\n\n_@param_ `z`: WORLD parallax value\n\n_@param_ `parallax`: WORLD parallax value\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int16 x","description":"WORLD x coordinate"},{"name":"int16 y","description":"WORLD y coordinate"},{"name":"int16 z","description":"WORLD parallax value"},{"name":"int8 parallax","description":"WORLD parallax value"}]},{"name":"setWorldCoordinates","qualifiedname":"Printing::setWorldCoordinates","description":"Set the coordinates of the WORLD used for printing.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":311,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":493,"end":507}},"prot":"public","static":false,"definition":"void Printing::setWorldCoordinates","returnType":"void","argsstring":"(Printing this, int16 x, int16 y, int16 z, int8 parallax)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: WORLD x coordinate\n\n_@param_ `y`: WORLD y coordinate\n\n_@param_ `z`: WORLD parallax value\n\n_@param_ `parallax`: WORLD parallax value\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int16 x","description":"WORLD x coordinate"},{"name":"int16 y","description":"WORLD y coordinate"},{"name":"int16 z","description":"WORLD parallax value"},{"name":"int8 parallax","description":"WORLD parallax value"}]},{"name":"setBgmapCoordinates","qualifiedname":"Printing::setBgmapCoordinates","description":"Set the coordinates of the BGMAP used for printing.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":317,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":519,"end":525}},"prot":"public","static":false,"definition":"void Printing::setBgmapCoordinates","returnType":"void","argsstring":"(Printing this, int16 mx, int16 my, int8 mp)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `mx`: BGMAP x coordinate\n\n_@param_ `my`: BGMAP y coordinate\n\n_@param_ `mp`: BGMAP parallax value\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"int16 mx","description":"BGMAP x coordinate"},{"name":"int16 my","description":"BGMAP y coordinate"},{"name":"int8 mp","description":"BGMAP parallax value"}]},{"name":"setWorldSize","qualifiedname":"Printing::setWorldSize","description":"Set WORLD's size.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":322,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":537,"end":543}},"prot":"public","static":false,"definition":"void Printing::setWorldSize","returnType":"void","argsstring":"(Printing this, uint16 w, uint16 h)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `w`: WORLD's width\n\n_@param_ `h`: WORLD's height\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint16 w","description":"WORLD's width"},{"name":"uint16 h","description":"WORLD's height"}]},{"name":"setTransparency","qualifiedname":"Printing::setTransparency","description":"Set sprite's transparency","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":326,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":546,"end":552}},"prot":"public","static":false,"definition":"void Printing::setTransparency","returnType":"void","argsstring":"(Printing this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `transparency`: Transparent value (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint8 transparency","description":"Transparent value (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},{"name":"setPalette","qualifiedname":"Printing::setPalette","description":"Set palette for the printing area.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":330,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":554,"end":560}},"prot":"public","static":false,"definition":"void Printing::setPalette","returnType":"void","argsstring":"(Printing this, uint8 palette)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `palette`: Palette for the printing area\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"uint8 palette","description":"Palette for the printing area"}]},{"name":"resetCoordinates","qualifiedname":"Printing::resetCoordinates","description":"Reset the coordinates of the WORLD used for printing.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":333,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":562,"end":568}},"prot":"public","static":false,"definition":"void Printing::resetCoordinates","returnType":"void","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"getWorldCoordinatesX","qualifiedname":"Printing::getWorldCoordinatesX","description":"Retrieve WORLD's gx.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":337,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":570,"end":573}},"prot":"public","static":false,"definition":"int16 Printing::getWorldCoordinatesX","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` WORLD's gx\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"getWorldCoordinatesY","qualifiedname":"Printing::getWorldCoordinatesY","description":"Retrieve WORLD's gy.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":341,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":575,"end":578}},"prot":"public","static":false,"definition":"int16 Printing::getWorldCoordinatesY","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` : WORLD's gy\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"getWorldCoordinatesP","qualifiedname":"Printing::getWorldCoordinatesP","description":"Retrieve WORLD's gp.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":345,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":580,"end":583}},"prot":"public","static":false,"definition":"int16 Printing::getWorldCoordinatesP","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` : WORLD's gp\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"getSpriteIndex","qualifiedname":"Printing::getSpriteIndex","description":"Retrieve sprite's position.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":349,"column":13},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":585,"end":588}},"prot":"public","static":false,"definition":"PixelVector Printing::getSpriteIndex","argsstring":"(Printing this)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@return_ `PixelVector` `Sprite`'s position\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"}]},{"name":"getFontByName","qualifiedname":"Printing::getFontByName","description":"Get font spec and starting position in character memory.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":354,"column":10},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":590,"end":633}},"prot":"public","static":false,"definition":"FontData * Printing::getFontByName","returnType":" *","argsstring":"(Printing this, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `font`: Name of font to get spec for\n\n_@return_ `FontData` `FontData` of desired font or default font if NULL or none could be found matching the name\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"const char *font","description":"Name of font to get spec for"}]},{"name":"getTextSize","qualifiedname":"Printing::getTextSize","description":"Get the size of a (block of) text so you can for example center it on screen.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":359,"column":10},"body":{"uri":"source/graphics/2d/Printing/Printing.c","start":635,"end":694}},"prot":"public","static":false,"definition":"FontSize Printing::getTextSize","argsstring":"(Printing this, const char *string, const char *font)","paramDocs":"\n\n_@param_ `this`: Printing instance\n\n_@param_ `string`: String to compute size for\n\n_@param_ `font`: Name of font to use for size computation\n\n","parameters":[{"name":"Printing this","description":"Printing Instance"},{"name":"const char *string","description":"String to compute size for"},{"name":"const char *font","description":"Name of font to use for size computation"}]}],"variables":[{"name":"printingSprites","qualifiedname":"Printing::printingSprites","description":"Sprites used to diplay the printing area from BGMAP memory","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":176,"column":13},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":176,"end":176}},"prot":"protected","static":false},{"name":"activePrintingSprite","qualifiedname":"Printing::activePrintingSprite","description":"Active sprite that is manipulated by this class' interface.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":179,"column":16},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":179,"end":179}},"prot":"protected","static":false},{"name":"fonts","qualifiedname":"Printing::fonts","description":"A list of loaded fonts and their respective CharSets.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":182,"column":13},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":182,"end":182}},"prot":"protected","static":false},{"name":"lastUsedFont","qualifiedname":"Printing::lastUsedFont","description":"Cache the last used font to speed up searches.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":185,"column":12},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":185,"end":185}},"prot":"protected","static":false},{"name":"lastUsedFontData","qualifiedname":"Printing::lastUsedFontData","description":"Cache the last used font data to speed up searches.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":188,"column":10},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":188,"end":188}},"prot":"protected","static":false},{"name":"mode","qualifiedname":"Printing::mode","description":"`undefined` mode (Default or ,)","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":191,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":191,"end":191}},"prot":"protected","static":false},{"name":"palette","qualifiedname":"Printing::palette","description":"Palette to use for printing.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":194,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":194,"end":194}},"prot":"protected","static":false},{"name":"orientation","qualifiedname":"Printing::orientation","description":"`Printing` orientation.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":197,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":197,"end":197}},"prot":"protected","static":false},{"name":"direction","qualifiedname":"Printing::direction","description":"`Printing` direction.","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":200,"column":7},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":200,"end":200}},"prot":"protected","static":false},{"name":"printingBgmapSegment","qualifiedname":"Printing::printingBgmapSegment","description":"`Printing` segment (BGMAP memory)","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":203,"column":6},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":203,"end":203}},"prot":"protected","static":false}],"enums":[{"name":"PrintingOrientation","qualifiedname":"Printing::PrintingOrientation","description":"","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":98,"column":1},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":99,"end":102}},"prot":"public","static":false},{"name":"PrintingDirection","qualifiedname":"Printing::PrintingDirection","description":"","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":105,"column":1},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":106,"end":109}},"prot":"public","static":false}],"typedefs":[{"name":"FontROMSpec","qualifiedname":"Printing::FontROMSpec","description":"","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":143,"column":24},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":143,"end":143}},"prot":"public","static":false},{"name":"FontROMData","qualifiedname":"Printing::FontROMData","description":"","location":{"header":{"uri":"source/graphics/2d/Printing/Printing.h","line":157,"column":24},"body":{"uri":"source/graphics/2d/Printing/Printing.h","start":157,"end":157}},"prot":"public","static":false}]},"PrintingSprite":{"__contributor":"core","name":"PrintingSprite","base":"BgmapSprite","description":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nEnables the `Printing` class to output text to the screen.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":50,"column":1},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","start":51,"end":86}},"methods":[{"name":"constructor","qualifiedname":"PrintingSprite::constructor","description":"","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":56,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":30,"end":35}},"prot":"public","static":false,"definition":"void PrintingSprite::constructor","returnType":"void","argsstring":"(PrintingSprite this, SpatialObject owner, const PrintingSpriteSpec *printingSpriteSpec)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `owner`\n\n_@param_ `printingSpriteSpec`\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"SpatialObject owner"},{"name":"const PrintingSpriteSpec *printingSpriteSpec"}]},{"name":"doRender","qualifiedname":"PrintingSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":61,"column":16},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":42,"end":57}},"prot":"public","static":false,"definition":"int16 PrintingSprite::doRender","returnType":"override ","argsstring":"(PrintingSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]},{"name":"reset","qualifiedname":"PrintingSprite::reset","description":"Reset the sprite's rendering configuration.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":64,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":59,"end":71}},"prot":"public","static":false,"definition":"void PrintingSprite::reset","returnType":"void","argsstring":"(PrintingSprite this)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"}]},{"name":"setPrintingBgmapSegment","qualifiedname":"PrintingSprite::setPrintingBgmapSegment","description":"Set the BGMAP segment used for printing.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":68,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":73,"end":79}},"prot":"public","static":false,"definition":"void PrintingSprite::setPrintingBgmapSegment","returnType":"void","argsstring":"(PrintingSprite this, int8 printingBgmapSegment)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `printingBgmapSegment`: BGMAP segment to use for printing\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"int8 printingBgmapSegment","description":"BGMAP segment to use for printing"}]},{"name":"setGValues","qualifiedname":"PrintingSprite::setGValues","description":"Set the G values to be written to the WORLD's entry mananged by the sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":74,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":81,"end":86}},"prot":"public","static":false,"definition":"void PrintingSprite::setGValues","returnType":"void","argsstring":"(PrintingSprite this, int16 gx, int16 gy, int16 gp)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `gx`: GX coordinate of the WORLD used to display the text\n\n_@param_ `gy`: GY coordinate of the WORLD used to display the text\n\n_@param_ `gp`: GP coordinate of the WORLD used to display the text\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"int16 gx","description":"GX coordinate of the WORLD used to display the text"},{"name":"int16 gy","description":"GY coordinate of the WORLD used to display the text"},{"name":"int16 gp","description":"GP coordinate of the WORLD used to display the text"}]},{"name":"setMValues","qualifiedname":"PrintingSprite::setMValues","description":"Set the M values to be written to the WORLD's entry mananged by the sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":80,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":88,"end":93}},"prot":"public","static":false,"definition":"void PrintingSprite::setMValues","returnType":"void","argsstring":"(PrintingSprite this, int16 mx, int16 my, int16 mp)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `mx`: MX coordinate of BGMAP area to be used to display the text\n\n_@param_ `my`: MY coordinate of BGMAP area to be used to display the text\n\n_@param_ `mp`: MP coordinate of BGMAP area to be used to display the text\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"int16 mx","description":"MX coordinate of BGMAP area to be used to display the text"},{"name":"int16 my","description":"MY coordinate of BGMAP area to be used to display the text"},{"name":"int16 mp","description":"MP coordinate of BGMAP area to be used to display the text"}]},{"name":"setSize","qualifiedname":"PrintingSprite::setSize","description":"Set the size of the WORLD to by used to display the text","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":85,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.c","start":95,"end":99}},"prot":"public","static":false,"definition":"void PrintingSprite::setSize","returnType":"void","argsstring":"(PrintingSprite this, uint16 width, uint16 height)","paramDocs":"\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `width`: Width of the WORLD to by used to display the text\n\n_@param_ `height`: Height of the WORLD to by used to display the text\n\n","parameters":[{"name":"PrintingSprite this","description":"PrintingSprite Instance"},{"name":"uint16 width","description":"Width of the WORLD to by used to display the text"},{"name":"uint16 height","description":"Height of the WORLD to by used to display the text"}]}],"variables":[{"name":"printingBgmapSegment","qualifiedname":"PrintingSprite::printingBgmapSegment","description":"BGMAP segment used for printing.","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":53,"column":6},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","start":53,"end":53}},"prot":"private","static":false}],"enums":[],"typedefs":[{"name":"PrintingSpriteROMSpec","qualifiedname":"PrintingSprite::PrintingSpriteROMSpec","description":"A `PrintingSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","line":36,"column":34},"body":{"uri":"source/graphics/2d/Sprites/PrintingSprite.h","start":36,"end":36}},"prot":"public","static":false}]},"Profiler":{"__contributor":"core","name":"Profiler","base":"ListenerObject","description":"Class `SoundTest`\n\nInherits from `ListenerObject`\n\nImplements profiler that permits to measure how much time a process takes to complete.","location":{"header":{"uri":"source/tools/Profiler.h","line":55,"column":11},"body":{"uri":"source/tools/Profiler.h","start":56,"end":101}},"methods":[{"name":"getInstance","qualifiedname":"Profiler::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/tools/Profiler.h","line":83,"column":17}},"prot":"public","static":true,"definition":"static Profiler Profiler::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Profiler` singleton\n\n","parameters":[]},{"name":"initialize","qualifiedname":"Profiler::initialize","description":"Initialize the profiler.","location":{"header":{"uri":"source/tools/Profiler.h","line":86,"column":6}},"prot":"public","static":false,"definition":"void Profiler::initialize","returnType":"void","argsstring":"(Profiler this)","paramDocs":"\n\n_@param_ `this`: Profiler instance\n\n","parameters":[{"name":"Profiler this","description":"Profiler Instance"}]},{"name":"reset","qualifiedname":"Profiler::reset","description":"Reset the profiler's state.","location":{"header":{"uri":"source/tools/Profiler.h","line":89,"column":6}},"prot":"public","static":false,"definition":"void Profiler::reset","returnType":"void","argsstring":"(Profiler this)","paramDocs":"\n\n_@param_ `this`: Profiler instance\n\n","parameters":[{"name":"Profiler this","description":"Profiler Instance"}]},{"name":"start","qualifiedname":"Profiler::start","description":"Start a new cycle of profiling.","location":{"header":{"uri":"source/tools/Profiler.h","line":92,"column":6}},"prot":"public","static":false,"definition":"void Profiler::start","returnType":"void","argsstring":"(Profiler this)","paramDocs":"\n\n_@param_ `this`: Profiler instance\n\n","parameters":[{"name":"Profiler this","description":"Profiler Instance"}]},{"name":"end","qualifiedname":"Profiler::end","description":"End the current profiling cycle.","location":{"header":{"uri":"source/tools/Profiler.h","line":95,"column":6}},"prot":"public","static":false,"definition":"void Profiler::end","returnType":"void","argsstring":"(Profiler this)","paramDocs":"\n\n_@param_ `this`: Profiler instance\n\n","parameters":[{"name":"Profiler this","description":"Profiler Instance"}]},{"name":"lap","qualifiedname":"Profiler::lap","description":"Register a lap during the current profiling cycle.","location":{"header":{"uri":"source/tools/Profiler.h","line":100,"column":6}},"prot":"public","static":false,"definition":"void Profiler::lap","returnType":"void","argsstring":"(Profiler this, uint32 lapType, const char *processName)","paramDocs":"\n\n_@param_ `this`: Profiler instance\n\n_@param_ `lapType`: Type of lap to record\n\n_@param_ `processName`: Name of the process during the lap\n\n","parameters":[{"name":"Profiler this","description":"Profiler Instance"},{"name":"uint32 lapType","description":"Type of lap to record"},{"name":"const char *processName","description":"Name of the process during the lap"}]}],"variables":[{"name":"laps","qualifiedname":"Profiler::laps","description":"Laps during the current profiling cycle.","location":{"header":{"uri":"source/tools/Profiler.h","line":58,"column":13},"body":{"uri":"source/tools/Profiler.h","start":58,"end":58}},"prot":"private","static":false},{"name":"timerManager","qualifiedname":"Profiler::timerManager","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":61,"column":14},"body":{"uri":"source/tools/Profiler.h","start":61,"end":61}},"prot":"private","static":false},{"name":"timeProportion","qualifiedname":"Profiler::timeProportion","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":62,"column":7},"body":{"uri":"source/tools/Profiler.h","start":62,"end":62}},"prot":"private","static":false},{"name":"lastCycleTotalTime","qualifiedname":"Profiler::lastCycleTotalTime","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":63,"column":7},"body":{"uri":"source/tools/Profiler.h","start":63,"end":63}},"prot":"private","static":false},{"name":"totalTime","qualifiedname":"Profiler::totalTime","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":64,"column":7},"body":{"uri":"source/tools/Profiler.h","start":64,"end":64}},"prot":"private","static":false},{"name":"interruptFlags","qualifiedname":"Profiler::interruptFlags","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":65,"column":8},"body":{"uri":"source/tools/Profiler.h","start":65,"end":65}},"prot":"private","static":false},{"name":"timePerGameFrameInMS","qualifiedname":"Profiler::timePerGameFrameInMS","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":66,"column":8},"body":{"uri":"source/tools/Profiler.h","start":66,"end":66}},"prot":"private","static":false},{"name":"cycles","qualifiedname":"Profiler::cycles","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":67,"column":8},"body":{"uri":"source/tools/Profiler.h","start":67,"end":67}},"prot":"private","static":false},{"name":"timerCounter","qualifiedname":"Profiler::timerCounter","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":68,"column":8},"body":{"uri":"source/tools/Profiler.h","start":68,"end":68}},"prot":"private","static":false},{"name":"previousTimerCounter","qualifiedname":"Profiler::previousTimerCounter","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":69,"column":8},"body":{"uri":"source/tools/Profiler.h","start":69,"end":69}},"prot":"private","static":false},{"name":"currentProfilingProcess","qualifiedname":"Profiler::currentProfilingProcess","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":70,"column":7},"body":{"uri":"source/tools/Profiler.h","start":70,"end":70}},"prot":"private","static":false},{"name":"started","qualifiedname":"Profiler::started","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":71,"column":6},"body":{"uri":"source/tools/Profiler.h","start":71,"end":71}},"prot":"private","static":false},{"name":"initialized","qualifiedname":"Profiler::initialized","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":72,"column":6},"body":{"uri":"source/tools/Profiler.h","start":72,"end":72}},"prot":"private","static":false},{"name":"printedProcessesNames","qualifiedname":"Profiler::printedProcessesNames","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":73,"column":6},"body":{"uri":"source/tools/Profiler.h","start":73,"end":73}},"prot":"private","static":false},{"name":"skipFrames","qualifiedname":"Profiler::skipFrames","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":74,"column":7},"body":{"uri":"source/tools/Profiler.h","start":74,"end":74}},"prot":"private","static":false},{"name":"lastLapIndex","qualifiedname":"Profiler::lastLapIndex","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":75,"column":7},"body":{"uri":"source/tools/Profiler.h","start":75,"end":75}},"prot":"private","static":false},{"name":"xpend","qualifiedname":"Profiler::xpend","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":76,"column":6},"body":{"uri":"source/tools/Profiler.h","start":76,"end":76}},"prot":"private","static":false},{"name":"playedMIDISounds","qualifiedname":"Profiler::playedMIDISounds","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":77,"column":6},"body":{"uri":"source/tools/Profiler.h","start":77,"end":77}},"prot":"private","static":false},{"name":"processedCommunications","qualifiedname":"Profiler::processedCommunications","description":"","location":{"header":{"uri":"source/tools/Profiler.h","line":78,"column":6},"body":{"uri":"source/tools/Profiler.h","start":78,"end":78}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"Rotation":{"__contributor":"core","name":"Rotation","base":"Object","description":"Class `Rotation`\n\nInherits from `Object`\n\nImplements methods to operate on `Rotation` structs.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":41,"column":8},"body":{"uri":"source/base/libgccvb/Rotation.h","start":42,"end":123}},"methods":[{"name":"zero","qualifiedname":"Rotation::zero","description":"Get a rotation with all its members initialized to zero.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":47,"column":24}},"prot":"public","static":true,"definition":"static Rotation Rotation::zero","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Rotation` with all its members initialized to zero\n\n","parameters":[]},{"name":"invert","qualifiedname":"Rotation::invert","description":"Invert the rotation's direction in all its components.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":52,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":135,"end":138}},"prot":"public","static":true,"definition":"static Rotation Rotation::invert","argsstring":"(Rotation rotation)","paramDocs":"\n\n_@param_ `rotation`: `Rotation` to invert\n\n_@return_ `static` Inverted rotation\n\n","parameters":[{"description":"`Rotation` to invert"}]},{"name":"clamp","qualifiedname":"Rotation::clamp","description":"Clamp the rotation's components to 0-511 range.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":59,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":140,"end":170}},"prot":"public","static":true,"definition":"static Rotation Rotation::clamp","argsstring":"(fixed_ext_t x, fixed_ext_t y, fixed_ext_t z)","paramDocs":"\n\n_@param_ `x`: `Rotation`'s x component to clamp\n\n_@param_ `y`: `Rotation`'s y component to clamp\n\n_@param_ `z`: `Rotation`'s z component to clamp\n\n_@return_ `static` Clamped rotation\n\n","parameters":[{"name":"fixed_ext_t y","description":"`Rotation`'s x component to clamp"},{"name":"fixed_ext_t z","description":"`Rotation`'s y component to clamp"},{"description":"`Rotation`'s z component to clamp"}]},{"name":"getShortestDifferce","qualifiedname":"Rotation::getShortestDifferce","description":"Compute the shortest angle differente between the provided angles.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":65,"column":23},"body":{"uri":"source/base/libgccvb/Rotation.h","start":172,"end":176}},"prot":"public","static":true,"definition":"static fixed_t Rotation::getShortestDifferce","argsstring":"(fixed_t angleFrom, fixed_t angleTo)","paramDocs":"\n\n_@param_ `angleFrom`: Starting angle\n\n_@param_ `angleTo`: End angle\n\n_@return_ `static` Shortest angle between the provided angles\n\n","parameters":[{"name":"fixed_t angleTo","description":"Starting angle"},{"description":"End angle"}]},{"name":"sum","qualifiedname":"Rotation::sum","description":"Add two rotations.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":71,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":178,"end":181}},"prot":"public","static":true,"definition":"static Rotation Rotation::sum","argsstring":"(Rotation a, Rotation b)","paramDocs":"\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` Addition rotation\n\n","parameters":[{"name":"Rotation b","description":"First rotation"},{"description":"Second rotation"}]},{"name":"sub","qualifiedname":"Rotation::sub","description":"Susbtract a rotation from another.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":77,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":183,"end":186}},"prot":"public","static":true,"definition":"static Rotation Rotation::sub","argsstring":"(Rotation a, Rotation b)","paramDocs":"\n\n_@param_ `a`: Minuend rotation\n\n_@param_ `b`: Subtrahend rotation\n\n_@return_ `static` Substraction rotation\n\n","parameters":[{"name":"Rotation b","description":"Minuend rotation"},{"description":"Subtrahend rotation"}]},{"name":"intermediate","qualifiedname":"Rotation::intermediate","description":"Compute the intermediate rotation between the provided ones.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":83,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":188,"end":196}},"prot":"public","static":true,"definition":"static Rotation Rotation::intermediate","argsstring":"(Rotation a, Rotation b)","paramDocs":"\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` Intermediate rotation\n\n","parameters":[{"name":"Rotation b","description":"First rotation"},{"description":"Second rotation"}]},{"name":"scalarProduct","qualifiedname":"Rotation::scalarProduct","description":"Apply a scalar product over the rotation's components","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":89,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":198,"end":201}},"prot":"public","static":true,"definition":"static Rotation Rotation::scalarProduct","argsstring":"(Rotation rotation, int16 scalar)","paramDocs":"\n\n_@param_ `rotation`: `Rotation` to scale\n\n_@param_ `scalar`: Scalar to multiply\n\n_@return_ `static` Scaled rotation\n\n","parameters":[{"name":"int16 scalar","description":"`Rotation` to scale"},{"description":"Scalar to multiply"}]},{"name":"scalarDivision","qualifiedname":"Rotation::scalarDivision","description":"Apply a scalar division over the rotation's components","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":95,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":203,"end":211}},"prot":"public","static":true,"definition":"static Rotation Rotation::scalarDivision","argsstring":"(Rotation rotation, int16 scalar)","paramDocs":"\n\n_@param_ `rotation`: `Rotation` to scale\n\n_@param_ `scalar`: Scalar divisor\n\n_@return_ `static` Scaled rotation\n\n","parameters":[{"name":"int16 scalar","description":"`Rotation` to scale"},{"description":"Scalar divisor"}]},{"name":"getRelativeToCamera","qualifiedname":"Rotation::getRelativeToCamera","description":"Compute the rotation relative to the camera's rotation.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":100,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":213,"end":216}},"prot":"public","static":true,"definition":"static Rotation Rotation::getRelativeToCamera","argsstring":"(Rotation rotation)","paramDocs":"\n\n_@param_ `rotation`: `Rotation` to compute the relative rotation of\n\n_@return_ `static` `Rotation` relative to the camera's rotation\n\n","parameters":[{"description":"`Rotation` to compute the relative rotation of"}]},{"name":"getFromPixelRotation","qualifiedname":"Rotation::getFromPixelRotation","description":"Transform the provided rotation in pixel coordinates into a normal rotation.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":105,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":218,"end":221}},"prot":"public","static":true,"definition":"static Rotation Rotation::getFromPixelRotation","argsstring":"(PixelRotation pixelRotation)","paramDocs":"\n\n_@param_ `pixelRotation`: `Rotation` to transform\n\n_@return_ `static` Transformed rotation\n\n","parameters":[{"description":"`Rotation` to transform"}]},{"name":"getFromScreenPixelRotation","qualifiedname":"Rotation::getFromScreenPixelRotation","description":"Transform the provided rotation in screen coordinates into a normal rotation.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":110,"column":24},"body":{"uri":"source/base/libgccvb/Rotation.h","start":223,"end":226}},"prot":"public","static":true,"definition":"static Rotation Rotation::getFromScreenPixelRotation","argsstring":"(ScreenPixelRotation pixelRotation)","paramDocs":"\n\n_@param_ `pixelRotation`: `Rotation` to transform\n\n_@return_ `static` Transformed rotation\n\n","parameters":[{"description":"`Rotation` to transform"}]},{"name":"areEqual","qualifiedname":"Rotation::areEqual","description":"Test if two rotations are equal.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":116,"column":20},"body":{"uri":"source/base/libgccvb/Rotation.h","start":228,"end":231}},"prot":"public","static":true,"definition":"static bool Rotation::areEqual","argsstring":"(Rotation a, Rotation b)","paramDocs":"\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` True if all the components of both rotations are equal; false otherwise\n\n","parameters":[{"name":"Rotation b","description":"First rotation"},{"description":"Second rotation"}]},{"name":"print","qualifiedname":"Rotation::print","description":"Print the rotation's components.","location":{"header":{"uri":"source/base/libgccvb/Rotation.h","line":122,"column":13},"body":{"uri":"source/base/libgccvb/Rotation.c","start":26,"end":35}},"prot":"public","static":true,"definition":"static void Rotation::print","returnType":"void","argsstring":"(Rotation rotation, int32 x, int32 y)","paramDocs":"\n\n_@param_ `rotation`: `Rotation` to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"int32 x","description":"`Rotation` to print"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"description":"Screen y coordinate where to print"}]}],"variables":[{"name":"x","qualifiedname":"Rotation::x","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":159,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":159,"end":159}},"prot":"public","static":false},{"name":"y","qualifiedname":"Rotation::y","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":162,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":162,"end":162}},"prot":"public","static":false},{"name":"z","qualifiedname":"Rotation::z","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":165,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":165,"end":165}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"RumbleManager":{"__contributor":"core","name":"RumbleManager","base":"Object","description":"Class `RumbleManager`\n\nInherits from `Object`\n\nManages rumble effects.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":121,"column":11},"body":{"uri":"source/hardware/RumbleManager.h","start":122,"end":175}},"methods":[{"name":"getInstance","qualifiedname":"RumbleManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":152,"column":22}},"prot":"public","static":true,"definition":"static RumbleManager RumbleManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `RumbleManager` singleton\n\n","parameters":[]},{"name":"startEffect","qualifiedname":"RumbleManager::startEffect","description":"Start a rumble effect configured with the provided spec.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":156,"column":13},"body":{"uri":"source/hardware/RumbleManager.c","start":37,"end":88}},"prot":"public","static":true,"definition":"static void RumbleManager::startEffect","returnType":"void","argsstring":"(const RumbleEffectSpec *rumbleEffectSpec)","paramDocs":"\n\n_@param_ `rumbleEffectSpec`: Specification of the rumble effect to play\n\n","parameters":[{"description":"Specification of the rumble effect to play"}]},{"name":"stopEffect","qualifiedname":"RumbleManager::stopEffect","description":"Stop a rumble effect configured with the provided spec.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":161,"column":13},"body":{"uri":"source/hardware/RumbleManager.c","start":90,"end":97}},"prot":"public","static":true,"definition":"static void RumbleManager::stopEffect","returnType":"void","argsstring":"(const RumbleEffectSpec *rumbleEffectSpec)","paramDocs":"\n\n_@param_ `rumbleEffectSpec`: Specification of the rumble effect to stop; if NULL, any playing effect is stoped\n\n","parameters":[{"description":"Specification of the rumble effect to stop; if NULL, any playing effect is stoped"}]},{"name":"reset","qualifiedname":"RumbleManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":164,"column":6},"body":{"uri":"source/hardware/RumbleManager.c","start":105,"end":123}},"prot":"public","static":false,"definition":"void RumbleManager::reset","returnType":"void","argsstring":"(RumbleManager this)","paramDocs":"\n\n_@param_ `this`: RumbleManager instance\n\n","parameters":[{"name":"RumbleManager this","description":"RumbleManager Instance"}]},{"name":"setAsync","qualifiedname":"RumbleManager::setAsync","description":"Set the async flag.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":168,"column":6},"body":{"uri":"source/hardware/RumbleManager.c","start":125,"end":129}},"prot":"public","static":false,"definition":"void RumbleManager::setAsync","returnType":"void","argsstring":"(RumbleManager this, bool async)","paramDocs":"\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `async`: If true, rumble commands are broadcasted asynchronously\n\n","parameters":[{"name":"RumbleManager this","description":"RumbleManager Instance"},{"name":"bool async","description":"If true, rumble commands are broadcasted asynchronously"}]},{"name":"setOverridePreviousEffect","qualifiedname":"RumbleManager::setOverridePreviousEffect","description":"Set the flag to broadcast new effects regardless of if there is a previous queue effect pending broadcasted","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":174,"column":6},"body":{"uri":"source/hardware/RumbleManager.c","start":131,"end":134}},"prot":"public","static":false,"definition":"void RumbleManager::setOverridePreviousEffect","returnType":"void","argsstring":"(RumbleManager this, bool overridePreviousEffect)","paramDocs":"\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `overridePreviousEffect`: If true, new effects are broadcasted regardless of if there is a queued effect pending broadcasting\n\n","parameters":[{"name":"RumbleManager this","description":"RumbleManager Instance"},{"name":"bool overridePreviousEffect","description":"If true, new effects are broadcasted regardless of if there is a queued effect pending broadcasting"}]}],"variables":[{"name":"communicationManager","qualifiedname":"RumbleManager::communicationManager","description":"Used to broadcast the rumble commands over the EXT port","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":126,"column":22},"body":{"uri":"source/hardware/RumbleManager.h","start":126,"end":126}},"prot":"protected","static":false},{"name":"rumbleCommands","qualifiedname":"RumbleManager::rumbleCommands","description":"Queue of commands to broadcast.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":129,"column":7},"body":{"uri":"source/hardware/RumbleManager.h","start":129,"end":129}},"prot":"protected","static":false},{"name":"async","qualifiedname":"RumbleManager::async","description":"Determines if the commands are broadcasted asynchronously, defaults to true","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":133,"column":6},"body":{"uri":"source/hardware/RumbleManager.h","start":133,"end":133}},"prot":"protected","static":false},{"name":"overridePreviousEffect","qualifiedname":"RumbleManager::overridePreviousEffect","description":"Determines if the broadcast of new effects should wait or not for a previous queue effect being completedly broadcasted","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":137,"column":6},"body":{"uri":"source/hardware/RumbleManager.h","start":137,"end":137}},"prot":"protected","static":false},{"name":"rumbleCommandIndex","qualifiedname":"RumbleManager::rumbleCommandIndex","description":"Index of the command in the queue to broadcast next.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":140,"column":7},"body":{"uri":"source/hardware/RumbleManager.h","start":140,"end":140}},"prot":"protected","static":false},{"name":"rumbleEffectSpec","qualifiedname":"RumbleManager::rumbleEffectSpec","description":"Rumble effect spec being broadcasted.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":143,"column":24},"body":{"uri":"source/hardware/RumbleManager.h","start":143,"end":143}},"prot":"protected","static":false},{"name":"cachedRumbleEffect","qualifiedname":"RumbleManager::cachedRumbleEffect","description":"Cached rumble effect to prevent broadcasting again previous send commands.","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":146,"column":18},"body":{"uri":"source/hardware/RumbleManager.h","start":146,"end":146}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"RumbleEffectROMSpec","qualifiedname":"RumbleManager::RumbleEffectROMSpec","description":"A A rumble effect spec that is stored in ROM","location":{"header":{"uri":"source/hardware/RumbleManager.h","line":107,"column":32},"body":{"uri":"source/hardware/RumbleManager.h","start":107,"end":107}},"prot":"public","static":false}]},"SRAMManager":{"__contributor":"core","name":"SRAMManager","base":"Object","description":"Class `SRAMManager`\n\nInherits from `Object`\n\nManages SRAM space since most carts requiere a proxy to address by not having all the pins routed.","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":41,"column":11},"body":{"uri":"source/hardware/SRAMManager.h","start":42,"end":72}},"methods":[{"name":"getInstance","qualifiedname":"SRAMManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":51,"column":20}},"prot":"public","static":true,"definition":"static SRAMManager SRAMManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `SRAMManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"SRAMManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":54,"column":6},"body":{"uri":"source/hardware/SRAMManager.c","start":39,"end":42}},"prot":"public","static":false,"definition":"void SRAMManager::reset","returnType":"void","argsstring":"(SRAMManager this)","paramDocs":"\n\n_@param_ `this`: SRAMManager instance\n\n","parameters":[{"name":"SRAMManager this","description":"SRAMManager Instance"}]},{"name":"clear","qualifiedname":"SRAMManager::clear","description":"Delete all data in SRAM in the provided range.","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":59,"column":6},"body":{"uri":"source/hardware/SRAMManager.c","start":44,"end":51}},"prot":"public","static":false,"definition":"void SRAMManager::clear","returnType":"void","argsstring":"(SRAMManager this, int32 startOffset, int32 endOffset)","paramDocs":"\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `startOffset`: Start offset of range to clear\n\n_@param_ `endOffset`: End address of range to clear\n\n","parameters":[{"name":"SRAMManager this","description":"SRAMManager Instance"},{"name":"int32 startOffset","description":"Start offset of range to clear"},{"name":"int32 endOffset","description":"End address of range to clear"}]},{"name":"save","qualifiedname":"SRAMManager::save","description":"Save data to SRAM.","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":65,"column":6},"body":{"uri":"source/hardware/SRAMManager.c","start":53,"end":64}},"prot":"public","static":false,"definition":"void SRAMManager::save","returnType":"void","argsstring":"(SRAMManager this, const BYTE *const source, int32 memberOffset, int32 dataSize)","paramDocs":"\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `source`: WRAM address from were data will be copied\n\n_@param_ `memberOffset`: WRAM address offset\n\n_@param_ `dataSize`: Number of BYTES to read\n\n","parameters":[{"name":"SRAMManager this","description":"SRAMManager Instance"},{"name":"const BYTE *const source","description":"WRAM address from were data will be copied"},{"name":"int32 memberOffset","description":"WRAM address offset"},{"name":"int32 dataSize","description":"Number of BYTES to read"}]},{"name":"read","qualifiedname":"SRAMManager::read","description":"Retrieve data from SRAM.","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":71,"column":6},"body":{"uri":"source/hardware/SRAMManager.c","start":66,"end":77}},"prot":"public","static":false,"definition":"void SRAMManager::read","returnType":"void","argsstring":"(SRAMManager this, BYTE *destination, int32 memberOffset, int32 dataSize)","paramDocs":"\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `destination`: WRAM address were data will be loaded\n\n_@param_ `memberOffset`: WRAM address offset\n\n_@param_ `dataSize`: Number of BYTES to read\n\n","parameters":[{"name":"SRAMManager this","description":"SRAMManager Instance"},{"name":"BYTE *destination","description":"WRAM address were data will be loaded"},{"name":"int32 memberOffset","description":"WRAM address offset"},{"name":"int32 dataSize","description":"Number of BYTES to read"}]}],"variables":[{"name":"spaceAddress","qualifiedname":"SRAMManager::spaceAddress","description":"SRAM start address","location":{"header":{"uri":"source/hardware/SRAMManager.h","line":46,"column":8},"body":{"uri":"source/hardware/SRAMManager.h","start":46,"end":46}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Scale":{"__contributor":"core","name":"Scale","base":"Object","description":"Class `Scale`\n\nInherits from `Object`\n\nImplements methods to operate on `Scale` structs.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":33,"column":8},"body":{"uri":"source/base/libgccvb/Scale.h","start":34,"end":103}},"methods":[{"name":"zero","qualifiedname":"Scale::zero","description":"Get a scale with all its members initialized to zero.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":39,"column":21}},"prot":"public","static":true,"definition":"static Scale Scale::zero","argsstring":"()","paramDocs":"\n\n_@return_ `static` `Scale` with all its members initialized to zero\n\n","parameters":[]},{"name":"unit","qualifiedname":"Scale::unit","description":"Get a unit scale with all its members are initialized to 1.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":43,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":115,"end":118}},"prot":"public","static":true,"definition":"static Scale Scale::unit","argsstring":"()","paramDocs":"\n\n_@return_ `static` Unit scale\n\n","parameters":[]},{"name":"sum","qualifiedname":"Scale::sum","description":"Compute the addition scale between other two provided scales.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":49,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":120,"end":123}},"prot":"public","static":true,"definition":"static Scale Scale::sum","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Addition scale between the provided scales\n\n","parameters":[{"name":"Scale b","description":"First scale"},{"description":"Second scale"}]},{"name":"sub","qualifiedname":"Scale::sub","description":"Compute the difference scale between two provided scales.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":55,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":125,"end":128}},"prot":"public","static":true,"definition":"static Scale Scale::sub","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: Minuend scale\n\n_@param_ `b`: Substraend scale\n\n_@return_ `static` Difference scale between the provided scales\n\n","parameters":[{"name":"Scale b","description":"Minuend scale"},{"description":"Substraend scale"}]},{"name":"intermediate","qualifiedname":"Scale::intermediate","description":"Compute the intermediate scale between two provided scales.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":61,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":130,"end":138}},"prot":"public","static":true,"definition":"static Scale Scale::intermediate","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Intermediate scale between the provided scales\n\n","parameters":[{"name":"Scale b","description":"First scale"},{"description":"Second scale"}]},{"name":"product","qualifiedname":"Scale::product","description":"Compute the product scale between two provided scales.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":67,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":140,"end":143}},"prot":"public","static":true,"definition":"static Scale Scale::product","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Product scale between the provided scales\n\n","parameters":[{"name":"Scale b","description":"First scale"},{"description":"Second scale"}]},{"name":"division","qualifiedname":"Scale::division","description":"Compute the division scale between two provided scales.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":73,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":145,"end":148}},"prot":"public","static":true,"definition":"static Scale Scale::division","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: Dividend scale\n\n_@param_ `b`: Divisor scale\n\n_@return_ `static` Division scale between the provided scales\n\n","parameters":[{"name":"Scale b","description":"Dividend scale"},{"description":"Divisor scale"}]},{"name":"scalarProduct","qualifiedname":"Scale::scalarProduct","description":"Apply a scalar product over the scale's components","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":79,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":150,"end":153}},"prot":"public","static":true,"definition":"static Scale Scale::scalarProduct","argsstring":"(Scale scale, int16 scalar)","paramDocs":"\n\n_@param_ `scale`: `Scale` to scale\n\n_@param_ `scalar`: Scalar to multiply\n\n_@return_ `static` Scaled scale\n\n","parameters":[{"name":"int16 scalar","description":"`Scale` to scale"},{"description":"Scalar to multiply"}]},{"name":"scalarDivision","qualifiedname":"Scale::scalarDivision","description":"Apply a scalar product over the scale's components","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":85,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":155,"end":163}},"prot":"public","static":true,"definition":"static Scale Scale::scalarDivision","argsstring":"(Scale scale, int16 scalar)","paramDocs":"\n\n_@param_ `scale`: `Scale` to scale\n\n_@param_ `scalar`: Scalar divisor\n\n_@return_ `static` Scaled scale\n\n","parameters":[{"name":"int16 scalar","description":"`Scale` to scale"},{"description":"Scalar divisor"}]},{"name":"getFromScreenPixelScale","qualifiedname":"Scale::getFromScreenPixelScale","description":"Transform the provided scale in screen coordinates into a normal 3D scale.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":90,"column":21},"body":{"uri":"source/base/libgccvb/Scale.h","start":165,"end":168}},"prot":"public","static":true,"definition":"static Scale Scale::getFromScreenPixelScale","argsstring":"(ScreenPixelScale screenPixelScale)","paramDocs":"\n\n_@param_ `screenPixelScale`: `Scale` to transform\n\n_@return_ `static` 3D scale\n\n","parameters":[{"description":"`Scale` to transform"}]},{"name":"areEqual","qualifiedname":"Scale::areEqual","description":"Test if two scales are equal.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":96,"column":20},"body":{"uri":"source/base/libgccvb/Scale.h","start":170,"end":173}},"prot":"public","static":true,"definition":"static bool Scale::areEqual","argsstring":"(Scale a, Scale b)","paramDocs":"\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` True if all the components of both scales are equal; false otherwise\n\n","parameters":[{"name":"Scale b","description":"First scale"},{"description":"Second scale"}]},{"name":"print","qualifiedname":"Scale::print","description":"Print the scale's components.","location":{"header":{"uri":"source/base/libgccvb/Scale.h","line":102,"column":13},"body":{"uri":"source/base/libgccvb/Scale.c","start":26,"end":35}},"prot":"public","static":true,"definition":"static void Scale::print","returnType":"void","argsstring":"(Scale scale, int32 x, int32 y)","paramDocs":"\n\n_@param_ `scale`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"int32 x"},{"name":"int32 y","description":"Screen x coordinate where to print"},{"description":"Screen y coordinate where to print"}]}],"variables":[{"name":"x","qualifiedname":"Scale::x","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":255,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":255,"end":255}},"prot":"public","static":false},{"name":"y","qualifiedname":"Scale::y","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":256,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":256,"end":256}},"prot":"public","static":false},{"name":"z","qualifiedname":"Scale::z","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":257,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":257,"end":257}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"Size":{"__contributor":"core","name":"Size","base":"Object","description":"Class `Size`\n\nInherits from `Object`\n\nImplements methods to operate on `Size` structs.","location":{"header":{"uri":"source/base/libgccvb/Size.h","line":33,"column":8},"body":{"uri":"source/base/libgccvb/Size.h","start":34,"end":41}},"methods":[{"name":"getFromPixelSize","qualifiedname":"Size::getFromPixelSize","description":"Convert a `undefined` struct to a","location":{"header":{"uri":"source/base/libgccvb/Size.h","line":40,"column":20}},"prot":"public","static":true,"definition":"static Size Size::getFromPixelSize","argsstring":"(PixelSize pixelSize)","paramDocs":"\n\n_@param_ `pixelSize`\n\n_@return_ `static` `Size` struct\n\n","parameters":[{}]}],"variables":[{"name":"x","qualifiedname":"Size::x","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":84,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":84,"end":84}},"prot":"public","static":false},{"name":"y","qualifiedname":"Size::y","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":85,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":85,"end":85}},"prot":"public","static":false},{"name":"z","qualifiedname":"Size::z","description":"","location":{"header":{"uri":"source/base/libgccvb/Types.h","line":86,"column":8},"body":{"uri":"source/base/libgccvb/Types.h","start":86,"end":86}},"prot":"public","static":false}],"enums":[],"typedefs":[]},"SolidParticle":{"__contributor":"core","name":"SolidParticle","base":"PhysicalParticle","description":"Class `SolidParticle`\n\nInherits from `PhysicalParticle`\n\nImplements a physical particle that collides with other objects in the game stage.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":74,"column":1},"body":{"uri":"source/stage/entities/Particles/SolidParticle.h","start":75,"end":120}},"methods":[{"name":"constructor","qualifiedname":"SolidParticle::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":91,"column":6},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":41,"end":82}},"prot":"public","static":false,"definition":"void SolidParticle::constructor","returnType":"void","argsstring":"(SolidParticle this, const SolidParticleSpec *solidParticleSpec)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `solidParticleSpec`: Specification that determines how to configure the particle\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"},{"name":"const SolidParticleSpec *solidParticleSpec","description":"Specification that determines how to configure the particle"}]},{"name":"handleMessage","qualifiedname":"SolidParticle::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":96,"column":15},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":102,"end":122}},"prot":"public","static":false,"definition":"bool SolidParticle::handleMessage","returnType":"override ","argsstring":"(SolidParticle this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]},{"name":"getRadius","qualifiedname":"SolidParticle::getRadius","description":"Retrieve the particle's radius.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":100,"column":18},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":124,"end":127}},"prot":"public","static":false,"definition":"fixed_t SolidParticle::getRadius","returnType":"override ","argsstring":"(SolidParticle this)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@return_ `fixed_t` Radius\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"}]},{"name":"isSubjectToGravity","qualifiedname":"SolidParticle::isSubjectToGravity","description":"Check if the particle is subject to provided gravity vector.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":104,"column":15},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":129,"end":143}},"prot":"public","static":false,"definition":"bool SolidParticle::isSubjectToGravity","returnType":"override ","argsstring":"(SolidParticle this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the particle; false otherwise\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"},{"name":"Vector3D gravity"}]},{"name":"getInGameType","qualifiedname":"SolidParticle::getInGameType","description":"Retrieve the enum that determines the type of game object.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":108,"column":17},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":145,"end":148}},"prot":"public","static":false,"definition":"uint32 SolidParticle::getInGameType","returnType":"override ","argsstring":"(SolidParticle this)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"}]},{"name":"collisionStarts","qualifiedname":"SolidParticle::collisionStarts","description":"Process a newly detected collision by one of the component colliders.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":112,"column":15},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":150,"end":181}},"prot":"public","static":false,"definition":"bool SolidParticle::collisionStarts","returnType":"override ","argsstring":"(SolidParticle this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"collisionEnds","qualifiedname":"SolidParticle::collisionEnds","description":"Process when a previously detected collision by one of the component colliders stops.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":116,"column":15},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":183,"end":199}},"prot":"public","static":false,"definition":"void SolidParticle::collisionEnds","returnType":"override void","argsstring":"(SolidParticle this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"reset","qualifiedname":"SolidParticle::reset","description":"Reset the particle's state.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":119,"column":15},"body":{"uri":"source/stage/entities/Particles/SolidParticle.c","start":201,"end":205}},"prot":"public","static":false,"definition":"void SolidParticle::reset","returnType":"override void","argsstring":"(SolidParticle this)","paramDocs":"\n\n_@param_ `this`: SolidParticle instance\n\n","parameters":[{"name":"SolidParticle this","description":"SolidParticle Instance"}]}],"variables":[{"name":"collider","qualifiedname":"SolidParticle::collider","description":"`Collider` for collision detection","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":79,"column":10},"body":{"uri":"source/stage/entities/Particles/SolidParticle.h","start":79,"end":79}},"prot":"protected","static":false},{"name":"colliderSpec","qualifiedname":"SolidParticle::colliderSpec","description":"Specification for the collider.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":82,"column":14},"body":{"uri":"source/stage/entities/Particles/SolidParticle.h","start":82,"end":82}},"prot":"protected","static":false},{"name":"solidParticleSpec","qualifiedname":"SolidParticle::solidParticleSpec","description":"Specification that determines how to configure the particle.","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":85,"column":25},"body":{"uri":"source/stage/entities/Particles/SolidParticle.h","start":85,"end":85}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"SolidParticleROMSpec","qualifiedname":"SolidParticle::SolidParticleROMSpec","description":"A `SolidParticle` spec that is stored in ROM","location":{"header":{"uri":"source/stage/entities/Particles/SolidParticle.h","line":60,"column":33},"body":{"uri":"source/stage/entities/Particles/SolidParticle.h","start":60,"end":60}},"prot":"public","static":false}]},"Sound":{"__contributor":"core","name":"Sound","base":"ListenerObject","description":"Class `Sound`\n\nInherits from `ListenerObject`\n\nImplements sound playback.","location":{"header":{"uri":"source/sound/Sound.h","line":88,"column":1},"body":{"uri":"source/sound/Sound.h","start":89,"end":258}},"methods":[{"name":"setMirror","qualifiedname":"Sound::setMirror","description":"`Mirror` the spatial positioning of the sound.","location":{"header":{"uri":"source/sound/Sound.h","line":153,"column":13},"body":{"uri":"source/sound/Sound.c","start":61,"end":64}},"prot":"public","static":true,"definition":"static void Sound::setMirror","returnType":"void","argsstring":"(Mirror mirror)","paramDocs":"\n\n_@param_ `mirror`: Struct with a flag for each axis to mirror\n\n","parameters":[{"description":"Struct with a flag for each axis to mirror"}]},{"name":"constructor","qualifiedname":"Sound::constructor","description":"Class' constructor","location":{"header":{"uri":"source/sound/Sound.h","line":159,"column":6},"body":{"uri":"source/sound/Sound.c","start":72,"end":108}},"prot":"public","static":false,"definition":"void Sound::constructor","returnType":"void","argsstring":"(Sound this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `soundSpec`: Specification that determines how to configure the sound\n\n_@param_ `soundReleaseListener`: Callback for when the sound is released\n\n_@param_ `scope`: `Object` that listens for the releasing event\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"const SoundSpec *soundSpec","description":"Specification that determines how to configure the sound"},{"name":"EventListener soundReleaseListener","description":"Callback for when the sound is released"},{"name":"ListenerObject scope","description":"`Object` that listens for the releasing event"}]},{"name":"play","qualifiedname":"Sound::play","description":"Play the sound.","location":{"header":{"uri":"source/sound/Sound.h","line":164,"column":6},"body":{"uri":"source/sound/Sound.c","start":128,"end":190}},"prot":"public","static":false,"definition":"void Sound::play","returnType":"void","argsstring":"(Sound this, const Vector3D *position, uint32 playbackType)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `position`: Pointer to the spatial position of the sound\n\n_@param_ `playbackType`: Specifies how the playback should start\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"const Vector3D *position","description":"Pointer to the spatial position of the sound"},{"name":"uint32 playbackType","description":"Specifies how the playback should start"}]},{"name":"stop","qualifiedname":"Sound::stop","description":"Stop the playback.","location":{"header":{"uri":"source/sound/Sound.h","line":167,"column":6},"body":{"uri":"source/sound/Sound.c","start":192,"end":212}},"prot":"public","static":false,"definition":"void Sound::stop","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"pause","qualifiedname":"Sound::pause","description":"Pause the playback.","location":{"header":{"uri":"source/sound/Sound.h","line":170,"column":6},"body":{"uri":"source/sound/Sound.c","start":214,"end":237}},"prot":"public","static":false,"definition":"void Sound::pause","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"unpause","qualifiedname":"Sound::unpause","description":"Unpause the playback.","location":{"header":{"uri":"source/sound/Sound.h","line":173,"column":6},"body":{"uri":"source/sound/Sound.c","start":239,"end":262}},"prot":"public","static":false,"definition":"void Sound::unpause","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"suspend","qualifiedname":"Sound::suspend","description":"Suspend the output of sound.","location":{"header":{"uri":"source/sound/Sound.h","line":176,"column":6},"body":{"uri":"source/sound/Sound.c","start":264,"end":287}},"prot":"public","static":false,"definition":"void Sound::suspend","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"resume","qualifiedname":"Sound::resume","description":"Resume the output of sound.","location":{"header":{"uri":"source/sound/Sound.h","line":179,"column":6},"body":{"uri":"source/sound/Sound.c","start":289,"end":312}},"prot":"public","static":false,"definition":"void Sound::resume","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"mute","qualifiedname":"Sound::mute","description":"Mute the sound.","location":{"header":{"uri":"source/sound/Sound.h","line":182,"column":6},"body":{"uri":"source/sound/Sound.c","start":314,"end":317}},"prot":"public","static":false,"definition":"void Sound::mute","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"unmute","qualifiedname":"Sound::unmute","description":"Unmute the sound.","location":{"header":{"uri":"source/sound/Sound.h","line":185,"column":6}},"prot":"public","static":false,"definition":"void Sound::unmute","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"rewind","qualifiedname":"Sound::rewind","description":"Rewind the playack.","location":{"header":{"uri":"source/sound/Sound.h","line":188,"column":6},"body":{"uri":"source/sound/Sound.c","start":324,"end":347}},"prot":"public","static":false,"definition":"void Sound::rewind","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"release","qualifiedname":"Sound::release","description":"Release this sound.","location":{"header":{"uri":"source/sound/Sound.h","line":191,"column":6},"body":{"uri":"source/sound/Sound.c","start":349,"end":372}},"prot":"public","static":false,"definition":"void Sound::release","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"lock","qualifiedname":"Sound::lock","description":"Prevent other requests to get a sound to steal this sound's channels.","location":{"header":{"uri":"source/sound/Sound.h","line":194,"column":6},"body":{"uri":"source/sound/Sound.c","start":374,"end":377}},"prot":"public","static":false,"definition":"void Sound::lock","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"unlock","qualifiedname":"Sound::unlock","description":"Allow other requests to get a sound to steal this sound's channels.","location":{"header":{"uri":"source/sound/Sound.h","line":197,"column":6},"body":{"uri":"source/sound/Sound.c","start":379,"end":382}},"prot":"public","static":false,"definition":"void Sound::unlock","returnType":"void","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"autoReleaseOnFinish","qualifiedname":"Sound::autoReleaseOnFinish","description":"Set the flag that allows the sound to auto release itself when playback is complete.","location":{"header":{"uri":"source/sound/Sound.h","line":201,"column":6}},"prot":"public","static":false,"definition":"void Sound::autoReleaseOnFinish","returnType":"void","argsstring":"(Sound this, bool autoReleaseOnFinish)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `autoReleaseOnFinish`: If true, the sound is released when playaback is complete\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"bool autoReleaseOnFinish","description":"If true, the sound is released when playaback is complete"}]},{"name":"setSpeed","qualifiedname":"Sound::setSpeed","description":"Set the playback's speed.","location":{"header":{"uri":"source/sound/Sound.h","line":205,"column":6},"body":{"uri":"source/sound/Sound.c","start":389,"end":396}},"prot":"public","static":false,"definition":"void Sound::setSpeed","returnType":"void","argsstring":"(Sound this, fix7_9_ext speed)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `speed`: Target playback speed\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"fix7_9_ext speed","description":"Target playback speed"}]},{"name":"getSpeed","qualifiedname":"Sound::getSpeed","description":"Retrieve the playback's speed.","location":{"header":{"uri":"source/sound/Sound.h","line":209,"column":12},"body":{"uri":"source/sound/Sound.c","start":398,"end":401}},"prot":"public","static":false,"definition":"fix7_9_ext Sound::getSpeed","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@return_ `fix7_9_ext` Target playback speed\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"setVolumenScalePower","qualifiedname":"Sound::setVolumenScalePower","description":"Set the factor (2's power) by which the final volume is reduced.","location":{"header":{"uri":"source/sound/Sound.h","line":213,"column":6},"body":{"uri":"source/sound/Sound.c","start":403,"end":411}},"prot":"public","static":false,"definition":"void Sound::setVolumenScalePower","returnType":"void","argsstring":"(Sound this, uint8 volumenScalePower)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `volumenScalePower`: Factor by which the final volume is reduced\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"uint8 volumenScalePower","description":"Factor by which the final volume is reduced"}]},{"name":"setFrequencyDelta","qualifiedname":"Sound::setFrequencyDelta","description":"Set the frequency delta to be added to the VSU's frequency registers.","location":{"header":{"uri":"source/sound/Sound.h","line":217,"column":6},"body":{"uri":"source/sound/Sound.c","start":413,"end":416}},"prot":"public","static":false,"definition":"void Sound::setFrequencyDelta","returnType":"void","argsstring":"(Sound this, uint16 frequencyDelta)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `frequencyDelta`: Delta to be added to the frequency\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"uint16 frequencyDelta","description":"Delta to be added to the frequency"}]},{"name":"getFrequencyDelta","qualifiedname":"Sound::getFrequencyDelta","description":"Retrieve the frequency delta added to the VSU's frequency registers.","location":{"header":{"uri":"source/sound/Sound.h","line":221,"column":8},"body":{"uri":"source/sound/Sound.c","start":418,"end":421}},"prot":"public","static":false,"definition":"uint16 Sound::getFrequencyDelta","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"isPlaying","qualifiedname":"Sound::isPlaying","description":"Check if the sound is playing.","location":{"header":{"uri":"source/sound/Sound.h","line":225,"column":6},"body":{"uri":"source/sound/Sound.c","start":423,"end":426}},"prot":"public","static":false,"definition":"bool Sound::isPlaying","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback is going on\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"isPaused","qualifiedname":"Sound::isPaused","description":"Check if the sound is paused.","location":{"header":{"uri":"source/sound/Sound.h","line":229,"column":6},"body":{"uri":"source/sound/Sound.c","start":428,"end":431}},"prot":"public","static":false,"definition":"bool Sound::isPaused","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback is paused\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"isFadingIn","qualifiedname":"Sound::isFadingIn","description":"Check if the sound is fading in.","location":{"header":{"uri":"source/sound/Sound.h","line":233,"column":6},"body":{"uri":"source/sound/Sound.c","start":433,"end":436}},"prot":"public","static":false,"definition":"bool Sound::isFadingIn","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback fading in\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"isFadingOut","qualifiedname":"Sound::isFadingOut","description":"Check if the sound is fading out.","location":{"header":{"uri":"source/sound/Sound.h","line":237,"column":6},"body":{"uri":"source/sound/Sound.c","start":438,"end":441}},"prot":"public","static":false,"definition":"bool Sound::isFadingOut","argsstring":"(Sound this)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback fading out\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"}]},{"name":"update","qualifiedname":"Sound::update","description":"Advance the playback on the sound's MIDI tracks.","location":{"header":{"uri":"source/sound/Sound.h","line":242,"column":6},"body":{"uri":"source/sound/Sound.c","start":443,"end":525}},"prot":"public","static":false,"definition":"void Sound::update","returnType":"void","argsstring":"(Sound this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time since the last call\n\n_@param_ `targetPCMUpdates`: Ideal Elapsed time since the last call\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"uint32 elapsedMicroseconds","description":"Elapsed time since the last call"},{"name":"uint32 targetPCMUpdates","description":"Ideal Elapsed time since the last call"}]},{"name":"print","qualifiedname":"Sound::print","description":"Print the sounds's properties.","location":{"header":{"uri":"source/sound/Sound.h","line":247,"column":6},"body":{"uri":"source/sound/Sound.c","start":527,"end":561}},"prot":"public","static":false,"definition":"void Sound::print","returnType":"void","argsstring":"(Sound this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"printPlaybackTime","qualifiedname":"Sound::printPlaybackTime","description":"Print the sounds's playback time.","location":{"header":{"uri":"source/sound/Sound.h","line":252,"column":6},"body":{"uri":"source/sound/Sound.c","start":563,"end":587}},"prot":"public","static":false,"definition":"void Sound::printPlaybackTime","returnType":"void","argsstring":"(Sound this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"printPlaybackProgress","qualifiedname":"Sound::printPlaybackProgress","description":"Print the sounds's playback progress.","location":{"header":{"uri":"source/sound/Sound.h","line":257,"column":6},"body":{"uri":"source/sound/Sound.c","start":589,"end":619}},"prot":"public","static":false,"definition":"void Sound::printPlaybackProgress","returnType":"void","argsstring":"(Sound this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Sound this","description":"Sound Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"soundSpec","qualifiedname":"Sound::soundSpec","description":"Pointer to the spec that defines how to initialize the sound","location":{"header":{"uri":"source/sound/Sound.h","line":93,"column":17},"body":{"uri":"source/sound/Sound.h","start":93,"end":93}},"prot":"protected","static":false},{"name":"position","qualifiedname":"Sound::position","description":"Pointer to vector for spatial positioning of the sound.","location":{"header":{"uri":"source/sound/Sound.h","line":96,"column":16},"body":{"uri":"source/sound/Sound.h","start":96,"end":96}},"prot":"protected","static":false},{"name":"soundTracks","qualifiedname":"Sound::soundTracks","description":"List of sound tracks.","location":{"header":{"uri":"source/sound/Sound.h","line":99,"column":13},"body":{"uri":"source/sound/Sound.h","start":99,"end":99}},"prot":"protected","static":false},{"name":"mainSoundTrack","qualifiedname":"Sound::mainSoundTrack","description":"Main sound track.","location":{"header":{"uri":"source/sound/Sound.h","line":102,"column":12},"body":{"uri":"source/sound/Sound.h","start":102,"end":102}},"prot":"protected","static":false},{"name":"speed","qualifiedname":"Sound::speed","description":"Playback speed.","location":{"header":{"uri":"source/sound/Sound.h","line":105,"column":12},"body":{"uri":"source/sound/Sound.h","start":105,"end":105}},"prot":"protected","static":false},{"name":"state","qualifiedname":"Sound::state","description":"`Sound`'s state.","location":{"header":{"uri":"source/sound/Sound.h","line":108,"column":8},"body":{"uri":"source/sound/Sound.h","start":108,"end":108}},"prot":"protected","static":false},{"name":"targetTimerResolutionFactor","qualifiedname":"Sound::targetTimerResolutionFactor","description":"Factor to apply to the tick step.","location":{"header":{"uri":"source/sound/Sound.h","line":111,"column":12},"body":{"uri":"source/sound/Sound.h","start":111,"end":111}},"prot":"protected","static":false},{"name":"tickStep","qualifiedname":"Sound::tickStep","description":"Tick step per timer interrupt.","location":{"header":{"uri":"source/sound/Sound.h","line":114,"column":12},"body":{"uri":"source/sound/Sound.h","start":114,"end":114}},"prot":"protected","static":false},{"name":"previouslyElapsedTicks","qualifiedname":"Sound::previouslyElapsedTicks","description":"Elapsed ticks in the previous update.","location":{"header":{"uri":"source/sound/Sound.h","line":117,"column":8},"body":{"uri":"source/sound/Sound.h","start":117,"end":117}},"prot":"protected","static":false},{"name":"totalPlaybackMilliseconds","qualifiedname":"Sound::totalPlaybackMilliseconds","description":"Total playback time.","location":{"header":{"uri":"source/sound/Sound.h","line":120,"column":8},"body":{"uri":"source/sound/Sound.h","start":120,"end":120}},"prot":"protected","static":false},{"name":"pcmTargetPlaybackRefreshRate","qualifiedname":"Sound::pcmTargetPlaybackRefreshRate","description":"Target refresh rate for PCM playback.","location":{"header":{"uri":"source/sound/Sound.h","line":123,"column":8},"body":{"uri":"source/sound/Sound.h","start":123,"end":123}},"prot":"protected","static":false},{"name":"frequencyDelta","qualifiedname":"Sound::frequencyDelta","description":"Delta added to the frequency registers.","location":{"header":{"uri":"source/sound/Sound.h","line":126,"column":8},"body":{"uri":"source/sound/Sound.h","start":126,"end":126}},"prot":"protected","static":false},{"name":"volumeReductionMultiplier","qualifiedname":"Sound::volumeReductionMultiplier","description":"Multiplier used for fade effects.","location":{"header":{"uri":"source/sound/Sound.h","line":129,"column":8},"body":{"uri":"source/sound/Sound.h","start":129,"end":129}},"prot":"protected","static":false},{"name":"volumeReduction","qualifiedname":"Sound::volumeReduction","description":"Volume reduction used for fade effects.","location":{"header":{"uri":"source/sound/Sound.h","line":132,"column":6},"body":{"uri":"source/sound/Sound.h","start":132,"end":132}},"prot":"protected","static":false},{"name":"volumenScalePower","qualifiedname":"Sound::volumenScalePower","description":"2's power to divide to the final volume value","location":{"header":{"uri":"source/sound/Sound.h","line":135,"column":7},"body":{"uri":"source/sound/Sound.h","start":135,"end":135}},"prot":"protected","static":false},{"name":"playbackType","qualifiedname":"Sound::playbackType","description":"Type of playback to perform (SoundPlaybackTypes)","location":{"header":{"uri":"source/sound/Sound.h","line":138,"column":7},"body":{"uri":"source/sound/Sound.h","start":138,"end":138}},"prot":"protected","static":false},{"name":"unmute","qualifiedname":"Sound::unmute","description":"If true, sound is not muted.","location":{"header":{"uri":"source/sound/Sound.h","line":141,"column":6},"body":{"uri":"source/sound/Sound.h","start":141,"end":141}},"prot":"protected","static":false},{"name":"autoReleaseOnFinish","qualifiedname":"Sound::autoReleaseOnFinish","description":"If true, the sound is released when playback is complete.","location":{"header":{"uri":"source/sound/Sound.h","line":144,"column":6},"body":{"uri":"source/sound/Sound.h","start":144,"end":144}},"prot":"protected","static":false},{"name":"locked","qualifiedname":"Sound::locked","description":"If locked, it cannot be released by external calls.","location":{"header":{"uri":"source/sound/Sound.h","line":147,"column":6},"body":{"uri":"source/sound/Sound.h","start":147,"end":147}},"prot":"protected","static":false}],"enums":[{"name":"SoundPlaybackTypes","qualifiedname":"Sound::SoundPlaybackTypes","description":"`Sound` playback types","location":{"header":{"uri":"source/sound/Sound.h","line":35,"column":1},"body":{"uri":"source/sound/Sound.h","start":36,"end":42}},"prot":"public","static":false},{"name":"SoundState","qualifiedname":"Sound::SoundState","description":"`Sound` state","location":{"header":{"uri":"source/sound/Sound.h","line":46,"column":1},"body":{"uri":"source/sound/Sound.h","start":47,"end":51}},"prot":"public","static":false}],"typedefs":[{"name":"SoundROMSpec","qualifiedname":"Sound::SoundROMSpec","description":"A `Sound` spec that is stored in ROM","location":{"header":{"uri":"source/sound/Sound.h","line":74,"column":25},"body":{"uri":"source/sound/Sound.h","start":74,"end":74}},"prot":"public","static":false},{"name":"SoundTrackROMSpec","qualifiedname":"Sound::SoundTrackROMSpec","description":"A `SoundTrack` spec that is stored in ROM","location":{"header":{"uri":"source/sound/SoundTrack.h","line":246,"column":30},"body":{"uri":"source/sound/SoundTrack.h","start":246,"end":246}},"prot":"public","static":false}]},"SoundManager":{"__contributor":"core","name":"SoundManager","base":"ListenerObject","description":"Class `SoundManager`\n\nInherits from `ListenerObject`\n\nManages the `Sound` instances.","location":{"header":{"uri":"source/sound/SoundManager.h","line":45,"column":11},"body":{"uri":"source/sound/SoundManager.h","start":46,"end":126}},"methods":[{"name":"getInstance","qualifiedname":"SoundManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/sound/SoundManager.h","line":62,"column":21}},"prot":"public","static":true,"definition":"static SoundManager SoundManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `SoundManager` singleton\n\n","parameters":[]},{"name":"playSounds","qualifiedname":"SoundManager::playSounds","description":"Play the allocated sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":66,"column":13},"body":{"uri":"source/sound/SoundManager.c","start":48,"end":56}},"prot":"public","static":true,"definition":"static void SoundManager::playSounds","returnType":"void","argsstring":"(uint32 elapsedMicroseconds)","paramDocs":"\n\n_@param_ `elapsedMicroseconds`: Elapsed time between call\n\n","parameters":[{"description":"Elapsed time between call"}]},{"name":"reset","qualifiedname":"SoundManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/sound/SoundManager.h","line":69,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":64,"end":82}},"prot":"public","static":false,"definition":"void SoundManager::reset","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"update","qualifiedname":"SoundManager::update","description":"Update the manager.","location":{"header":{"uri":"source/sound/SoundManager.h","line":72,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":84,"end":86}},"prot":"public","static":false,"definition":"void SoundManager::update","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"setPCMTargetPlaybackRefreshRate","qualifiedname":"SoundManager::setPCMTargetPlaybackRefreshRate","description":"Set the target refresh rate for PCM playback.","location":{"header":{"uri":"source/sound/SoundManager.h","line":76,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":88,"end":98}},"prot":"public","static":false,"definition":"void SoundManager::setPCMTargetPlaybackRefreshRate","returnType":"void","argsstring":"(SoundManager this, uint16 pcmTargetPlaybackRefreshRate)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `pcmTargetPlaybackRefreshRate`: Target refresh rate for PCM playback\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"uint16 pcmTargetPlaybackRefreshRate","description":"Target refresh rate for PCM playback"}]},{"name":"isPlayingSound","qualifiedname":"SoundManager::isPlayingSound","description":"Check if a sound with the provided spec is playing.","location":{"header":{"uri":"source/sound/SoundManager.h","line":80,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":100,"end":115}},"prot":"public","static":false,"definition":"bool SoundManager::isPlayingSound","argsstring":"(SoundManager this, const SoundSpec *soundSpec)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: `Sound` spec to check for\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"const SoundSpec *soundSpec","description":"`Sound` spec to check for"}]},{"name":"playSound","qualifiedname":"SoundManager::playSound","description":"Play a sound defined by the provided spec.","location":{"header":{"uri":"source/sound/SoundManager.h","line":88,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":117,"end":134}},"prot":"public","static":false,"definition":"bool SoundManager::playSound","argsstring":"(SoundManager this, const SoundSpec *soundSpec, const Vector3D *position, uint32 playbackType, EventListener soundReleaseListener, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `position`: Position for spatilly position sound\n\n_@param_ `playbackType`: How to play the sound\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"const SoundSpec *soundSpec","description":"Spec that defines the sound to play"},{"name":"const Vector3D *position","description":"Position for spatilly position sound"},{"name":"uint32 playbackType","description":"How to play the sound"},{"name":"EventListener soundReleaseListener","description":"Callback method for when the sound is released"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"getSound","qualifiedname":"SoundManager::getSound","description":"Allocate sound defined by the provided spec.","location":{"header":{"uri":"source/sound/SoundManager.h","line":94,"column":7},"body":{"uri":"source/sound/SoundManager.c","start":136,"end":144}},"prot":"public","static":false,"definition":"Sound SoundManager::getSound","argsstring":"(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"const SoundSpec *soundSpec","description":"Spec that defines the sound to play"},{"name":"EventListener soundReleaseListener","description":"Callback method for when the sound is released"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"findSound","qualifiedname":"SoundManager::findSound","description":"Retrieve a previously allocated sound defined by the provided spec.","location":{"header":{"uri":"source/sound/SoundManager.h","line":100,"column":7},"body":{"uri":"source/sound/SoundManager.c","start":146,"end":168}},"prot":"public","static":false,"definition":"Sound SoundManager::findSound","argsstring":"(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"const SoundSpec *soundSpec","description":"Spec that defines the sound to play"},{"name":"EventListener soundReleaseListener","description":"Callback method for when the sound is released"},{"name":"ListenerObject scope","description":"`Object` on which to perform the callback"}]},{"name":"muteAllSounds","qualifiedname":"SoundManager::muteAllSounds","description":"Mute all playing sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":103,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":170,"end":180}},"prot":"public","static":false,"definition":"void SoundManager::muteAllSounds","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"unmuteAllSounds","qualifiedname":"SoundManager::unmuteAllSounds","description":"Unmute all playing sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":106,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":182,"end":192}},"prot":"public","static":false,"definition":"void SoundManager::unmuteAllSounds","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"rewindAllSounds","qualifiedname":"SoundManager::rewindAllSounds","description":"Rewind all playing sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":109,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":194,"end":204}},"prot":"public","static":false,"definition":"void SoundManager::rewindAllSounds","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"stopAllSounds","qualifiedname":"SoundManager::stopAllSounds","description":"Stop all playing sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":113,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":206,"end":259}},"prot":"public","static":false,"definition":"void SoundManager::stopAllSounds","returnType":"void","argsstring":"(SoundManager this, bool release, SoundSpec **excludedSounds)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `release`\n\n_@param_ `excludedSounds`: Array of sound specs to not stop\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"bool release"},{"name":"SoundSpec **excludedSounds","description":"Array of sound specs to not stop"}]},{"name":"lock","qualifiedname":"SoundManager::lock","description":"Refuse petitions to play or allocate sounds are processed.","location":{"header":{"uri":"source/sound/SoundManager.h","line":116,"column":6}},"prot":"public","static":false,"definition":"void SoundManager::lock","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"unlock","qualifiedname":"SoundManager::unlock","description":"Allow petitions to play or allocate sounds are processed.","location":{"header":{"uri":"source/sound/SoundManager.h","line":119,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":266,"end":269}},"prot":"public","static":false,"definition":"void SoundManager::unlock","returnType":"void","argsstring":"(SoundManager this)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"}]},{"name":"print","qualifiedname":"SoundManager::print","description":"Print the manager's status.","location":{"header":{"uri":"source/sound/SoundManager.h","line":122,"column":6}},"prot":"public","static":false,"definition":"void SoundManager::print","returnType":"void","argsstring":"(SoundManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"int32 x"},{"name":"int32 y"}]},{"name":"printPlaybackTime","qualifiedname":"SoundManager::printPlaybackTime","description":"Print playback time of the playing sounds.","location":{"header":{"uri":"source/sound/SoundManager.h","line":125,"column":6},"body":{"uri":"source/sound/SoundManager.c","start":272,"end":285}},"prot":"public","static":false,"definition":"void SoundManager::printPlaybackTime","returnType":"void","argsstring":"(SoundManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n","parameters":[{"name":"SoundManager this","description":"SoundManager Instance"},{"name":"int32 x"},{"name":"int32 y"}]}],"variables":[{"name":"sounds","qualifiedname":"SoundManager::sounds","description":"List of playing sounds","location":{"header":{"uri":"source/sound/SoundManager.h","line":50,"column":13},"body":{"uri":"source/sound/SoundManager.h","start":50,"end":50}},"prot":"protected","static":false},{"name":"targetPCMUpdates","qualifiedname":"SoundManager::targetPCMUpdates","description":"Target PCM cycles per game cycle.","location":{"header":{"uri":"source/sound/SoundManager.h","line":53,"column":8},"body":{"uri":"source/sound/SoundManager.h","start":53,"end":53}},"prot":"protected","static":false},{"name":"lock","qualifiedname":"SoundManager::lock","description":"If raised, no petitions to play or allocate sounds are processed.","location":{"header":{"uri":"source/sound/SoundManager.h","line":56,"column":6},"body":{"uri":"source/sound/SoundManager.h","start":56,"end":56}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"SoundTest":{"__contributor":"core","name":"SoundTest","base":"Tool","description":"Class `SoundTest`\n\nInherits from `Tool`\n\nImplements a tool to test sounds.","location":{"header":{"uri":"source/tools/SoundTest.h","line":34,"column":11},"body":{"uri":"source/tools/SoundTest.h","start":35,"end":60}},"methods":[{"name":"getInstance","qualifiedname":"SoundTest::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/tools/SoundTest.h","line":46,"column":18}},"prot":"public","static":true,"definition":"static SoundTest SoundTest::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `SoundTest` singleton\n\n","parameters":[]},{"name":"update","qualifiedname":"SoundTest::update","description":"Update the tool's state.","location":{"header":{"uri":"source/tools/SoundTest.h","line":49,"column":15},"body":{"uri":"source/tools/SoundTest.c","start":42,"end":55}},"prot":"public","static":false,"definition":"void SoundTest::update","returnType":"override void","argsstring":"(SoundTest this)","paramDocs":"\n\n_@param_ `this`: SoundTest instance\n\n","parameters":[{"name":"SoundTest this","description":"SoundTest Instance"}]},{"name":"show","qualifiedname":"SoundTest::show","description":"Show the tool.","location":{"header":{"uri":"source/tools/SoundTest.h","line":52,"column":15},"body":{"uri":"source/tools/SoundTest.c","start":57,"end":75}},"prot":"public","static":false,"definition":"void SoundTest::show","returnType":"override void","argsstring":"(SoundTest this)","paramDocs":"\n\n_@param_ `this`: SoundTest instance\n\n","parameters":[{"name":"SoundTest this","description":"SoundTest Instance"}]},{"name":"hide","qualifiedname":"SoundTest::hide","description":"Hide the tool.","location":{"header":{"uri":"source/tools/SoundTest.h","line":55,"column":15},"body":{"uri":"source/tools/SoundTest.c","start":77,"end":83}},"prot":"public","static":false,"definition":"void SoundTest::hide","returnType":"override void","argsstring":"(SoundTest this)","paramDocs":"\n\n_@param_ `this`: SoundTest instance\n\n","parameters":[{"name":"SoundTest this","description":"SoundTest Instance"}]},{"name":"processUserInput","qualifiedname":"SoundTest::processUserInput","description":"Process the provided user pressed key.","location":{"header":{"uri":"source/tools/SoundTest.h","line":59,"column":15},"body":{"uri":"source/tools/SoundTest.c","start":85,"end":245}},"prot":"public","static":false,"definition":"void SoundTest::processUserInput","returnType":"override void","argsstring":"(SoundTest this, uint16 pressedKey)","paramDocs":"\n\n_@param_ `this`: SoundTest instance\n\n_@param_ `pressedKey`: User pressed key\n\n","parameters":[{"name":"SoundTest this","description":"SoundTest Instance"},{"name":"uint16 pressedKey","description":"User pressed key"}]}],"variables":[{"name":"sound","qualifiedname":"SoundTest::sound","description":"Currently tested sound.","location":{"header":{"uri":"source/tools/SoundTest.h","line":37,"column":7},"body":{"uri":"source/tools/SoundTest.h","start":37,"end":37}},"prot":"private","static":false},{"name":"soundIndex","qualifiedname":"SoundTest::soundIndex","description":"Index of the selected sound.","location":{"header":{"uri":"source/tools/SoundTest.h","line":40,"column":8},"body":{"uri":"source/tools/SoundTest.h","start":40,"end":40}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"SoundTestState":{"__contributor":"core","name":"SoundTestState","base":"ToolState","description":"Class `SoundTestState`\n\nInherits from `ToolState`\n\nImplements a tool state to test sounds.","location":{"header":{"uri":"source/states/ToolStates/SoundTestState.h","line":32,"column":11},"body":{"uri":"source/states/ToolStates/SoundTestState.h","start":33,"end":45}},"methods":[{"name":"getInstance","qualifiedname":"SoundTestState::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/states/ToolStates/SoundTestState.h","line":36,"column":23}},"prot":"private","static":true,"definition":"static SoundTestState SoundTestState::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `SoundTestState` singleton\n\n","parameters":[]},{"name":"enter","qualifiedname":"SoundTestState::enter","description":"Prepares the object to enter this state.","location":{"header":{"uri":"source/states/ToolStates/SoundTestState.h","line":40,"column":15},"body":{"uri":"source/states/ToolStates/SoundTestState.c","start":39,"end":47}},"prot":"private","static":false,"definition":"void SoundTestState::enter","returnType":"override void","argsstring":"(SoundTestState this, void *owner)","paramDocs":"\n\n_@param_ `this`: SoundTestState instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n","parameters":[{"name":"SoundTestState this","description":"SoundTestState Instance"},{"name":"void *owner","description":"`Object` that is entering in this state"}]},{"name":"isKeyCombination","qualifiedname":"SoundTestState::isKeyCombination","description":"Check if the provided user input unlocks the tool managed by this state.","location":{"header":{"uri":"source/states/ToolStates/SoundTestState.h","line":44,"column":15},"body":{"uri":"source/states/ToolStates/SoundTestState.c","start":49,"end":52}},"prot":"private","static":false,"definition":"bool SoundTestState::isKeyCombination","returnType":"override ","argsstring":"(SoundTestState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: SoundTestState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n","parameters":[{"name":"SoundTestState this","description":"SoundTestState Instance"},{"name":"const UserInput *userInput"}]}],"variables":[],"enums":[],"typedefs":[]},"SoundTrack":{"__contributor":"core","name":"SoundTrack","base":"Object","description":"Class `SoundTrack`\n\nInherits from `Object`\n\nImplements a sound track.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":260,"column":1},"body":{"uri":"source/sound/SoundTrack.h","start":261,"end":363}},"methods":[{"name":"setPCMTargetPlaybackRefreshRate","qualifiedname":"SoundTrack::setPCMTargetPlaybackRefreshRate","description":"Set the target refresh rate for PCM playback.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":310,"column":13},"body":{"uri":"source/sound/SoundTrack.c","start":41,"end":44}},"prot":"public","static":true,"definition":"static void SoundTrack::setPCMTargetPlaybackRefreshRate","returnType":"void","argsstring":"(uint16 pcmTargetPlaybackRefreshRate)","paramDocs":"\n\n_@param_ `pcmTargetPlaybackRefreshRate`: Target refresh rate for PCM playback\n\n","parameters":[{"description":"Target refresh rate for PCM playback"}]},{"name":"constructor","qualifiedname":"SoundTrack::constructor","description":"Class' constructor","location":{"header":{"uri":"source/sound/SoundTrack.h","line":314,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":164,"end":183}},"prot":"public","static":false,"definition":"void SoundTrack::constructor","returnType":"void","argsstring":"(SoundTrack this, const SoundTrackSpec *soundTrackSpec)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `soundTrackSpec`: Specification that determines how to configure the sound track\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"},{"name":"const SoundTrackSpec *soundTrackSpec","description":"Specification that determines how to configure the sound track"}]},{"name":"start","qualifiedname":"SoundTrack::start","description":"Start the playback.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":318,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":53,"end":64}},"prot":"public","static":false,"definition":"void SoundTrack::start","returnType":"void","argsstring":"(SoundTrack this, bool wasPaused)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `wasPaused`: If true, the playback is resuming\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"},{"name":"bool wasPaused","description":"If true, the playback is resuming"}]},{"name":"stop","qualifiedname":"SoundTrack::stop","description":"Stop the playback.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":321,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":66,"end":72}},"prot":"public","static":false,"definition":"void SoundTrack::stop","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"pause","qualifiedname":"SoundTrack::pause","description":"Pause the playback.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":324,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":74,"end":75}},"prot":"public","static":false,"definition":"void SoundTrack::pause","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"unpause","qualifiedname":"SoundTrack::unpause","description":"Unpause the playback.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":327,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":77,"end":78}},"prot":"public","static":false,"definition":"void SoundTrack::unpause","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"suspend","qualifiedname":"SoundTrack::suspend","description":"Suspend the output of sound.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":330,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":80,"end":81}},"prot":"public","static":false,"definition":"void SoundTrack::suspend","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"resume","qualifiedname":"SoundTrack::resume","description":"Resume the output of sound.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":333,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":83,"end":84}},"prot":"public","static":false,"definition":"void SoundTrack::resume","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"rewind","qualifiedname":"SoundTrack::rewind","description":"Rewind the track.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":336,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":86,"end":105}},"prot":"public","static":false,"definition":"void SoundTrack::rewind","returnType":"void","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"update","qualifiedname":"SoundTrack::update","description":"Advance the playback on the sound's MIDI tracks.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":349,"column":6},"body":{"uri":"source/sound/SoundTrack.c","start":107,"end":124}},"prot":"public","static":false,"definition":"bool SoundTrack::update","argsstring":"(SoundTrack this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates, fix7_9_ext tickStep, fix7_9_ext targetTimerResolutionFactor, fixed_t leftVolumeFactor, fixed_t rightVolumeFactor, int8 volumeReduction, uint8 volumenScalePower, uint16 frequencyDelta)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time since the last call\n\n_@param_ `targetPCMUpdates`: Ideal Elapsed time since the last call\n\n_@param_ `tickStep`: Tick step per timer interrupt\n\n_@param_ `targetTimerResolutionFactor`: Factor to apply to the tick step\n\n_@param_ `leftVolumeFactor`: Factor to apply to the left speaker's volume\n\n_@param_ `rightVolumeFactor`: Factor to apply to the right speaker's volume\n\n_@param_ `volumeReduction`: Volume reduction used for fade effects\n\n_@param_ `volumenScalePower`: 2's power to divide to the final volume value\n\n_@param_ `frequencyDelta`: added to the frequency registers\n\n_@return_ `bool` True if the playback is complete; false otherwise\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"},{"name":"uint32 elapsedMicroseconds","description":"Elapsed time since the last call"},{"name":"uint32 targetPCMUpdates","description":"Ideal Elapsed time since the last call"},{"name":"fix7_9_ext tickStep","description":"Tick step per timer interrupt"},{"name":"fix7_9_ext targetTimerResolutionFactor","description":"Factor to apply to the tick step"},{"name":"fixed_t leftVolumeFactor","description":"Factor to apply to the left speaker's volume"},{"name":"fixed_t rightVolumeFactor","description":"Factor to apply to the right speaker's volume"},{"name":"int8 volumeReduction","description":"Volume reduction used for fade effects"},{"name":"uint8 volumenScalePower","description":"2's power to divide to the final volume value"},{"name":"uint16 frequencyDelta","description":"added to the frequency registers"}]},{"name":"getTicks","qualifiedname":"SoundTrack::getTicks","description":"Retrieve the sound track's total ticks.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":353,"column":8},"body":{"uri":"source/sound/SoundTrack.c","start":126,"end":129}},"prot":"public","static":false,"definition":"uint32 SoundTrack::getTicks","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@return_ `uint32` Total number of ticks\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"getElapsedTicksPercentaje","qualifiedname":"SoundTrack::getElapsedTicksPercentaje","description":"Retrieve the sound track's percentage of elapsed ticks.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":357,"column":7},"body":{"uri":"source/sound/SoundTrack.c","start":131,"end":139}},"prot":"public","static":false,"definition":"float SoundTrack::getElapsedTicksPercentaje","returnType":"float","argsstring":"(SoundTrack this)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@return_ `float` Percentaje of elapsed ticks\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"}]},{"name":"getTotalPlaybackMilliseconds","qualifiedname":"SoundTrack::getTotalPlaybackMilliseconds","description":"Retrieve the total time of playback in milliseconds.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":362,"column":8},"body":{"uri":"source/sound/SoundTrack.c","start":141,"end":155}},"prot":"public","static":false,"definition":"uint32 SoundTrack::getTotalPlaybackMilliseconds","argsstring":"(SoundTrack this, uint16 targetTimerResolutionUS)","paramDocs":"\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `targetTimerResolutionUS`: Target timer resolution in US\n\n_@return_ `uint32` The total time of playback in milliseconds\n\n","parameters":[{"name":"SoundTrack this","description":"SoundTrack Instance"},{"name":"uint16 targetTimerResolutionUS","description":"Target timer resolution in US"}]}],"variables":[{"name":"soundTrackSpec","qualifiedname":"SoundTrack::soundTrackSpec","description":"Pointer to the spec that defines how to initialize the soundtrack","location":{"header":{"uri":"source/sound/SoundTrack.h","line":265,"column":22},"body":{"uri":"source/sound/SoundTrack.h","start":265,"end":265}},"prot":"protected","static":false},{"name":"samples","qualifiedname":"SoundTrack::samples","description":"Channel's effective length.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":268,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":268,"end":268}},"prot":"protected","static":false},{"name":"cursor","qualifiedname":"SoundTrack::cursor","description":"Position within the sound track.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":271,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":271,"end":271}},"prot":"protected","static":false},{"name":"cursorSxINT","qualifiedname":"SoundTrack::cursorSxINT","description":"SxINT cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":274,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":274,"end":274}},"prot":"protected","static":false},{"name":"cursorSxLRV","qualifiedname":"SoundTrack::cursorSxLRV","description":"SxLRV cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":277,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":277,"end":277}},"prot":"protected","static":false},{"name":"cursorSxFQ","qualifiedname":"SoundTrack::cursorSxFQ","description":"SxFQ cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":280,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":280,"end":280}},"prot":"protected","static":false},{"name":"cursorSxEV0","qualifiedname":"SoundTrack::cursorSxEV0","description":"SxEV0 cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":283,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":283,"end":283}},"prot":"protected","static":false},{"name":"cursorSxEV1","qualifiedname":"SoundTrack::cursorSxEV1","description":"SxEV1 cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":286,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":286,"end":286}},"prot":"protected","static":false},{"name":"cursorSxRAM","qualifiedname":"SoundTrack::cursorSxRAM","description":"SxRAM cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":289,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":289,"end":289}},"prot":"protected","static":false},{"name":"cursorSxSWP","qualifiedname":"SoundTrack::cursorSxSWP","description":"SxSWP cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":292,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":292,"end":292}},"prot":"protected","static":false},{"name":"ticks","qualifiedname":"SoundTrack::ticks","description":"Total number of ticks.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":295,"column":8},"body":{"uri":"source/sound/SoundTrack.h","start":295,"end":295}},"prot":"protected","static":false},{"name":"elapsedTicks","qualifiedname":"SoundTrack::elapsedTicks","description":"Ticks before moving the cursor.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":298,"column":12},"body":{"uri":"source/sound/SoundTrack.h","start":298,"end":298}},"prot":"protected","static":false},{"name":"nextElapsedTicksTarget","qualifiedname":"SoundTrack::nextElapsedTicksTarget","description":"Next ticks target.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":301,"column":12},"body":{"uri":"source/sound/SoundTrack.h","start":301,"end":301}},"prot":"protected","static":false},{"name":"finished","qualifiedname":"SoundTrack::finished","description":"If true, the playback is complete.","location":{"header":{"uri":"source/sound/SoundTrack.h","line":304,"column":6},"body":{"uri":"source/sound/SoundTrack.h","start":304,"end":304}},"prot":"protected","static":false}],"enums":[{"name":"SoundTrackTypes","qualifiedname":"SoundTrack::SoundTrackTypes","description":"`Sound` track types","location":{"header":{"uri":"source/sound/SoundTrack.h","line":170,"column":1},"body":{"uri":"source/sound/SoundTrack.h","start":171,"end":174}},"prot":"public","static":false},{"name":"SoundEvents","qualifiedname":"SoundTrack::SoundEvents","description":"`Sound` events that the sound player recongnizes","location":{"header":{"uri":"source/sound/SoundTrack.h","line":178,"column":1},"body":{"uri":"source/sound/SoundTrack.h","start":179,"end":190}},"prot":"public","static":false}],"typedefs":[]},"SpatialObject":{"__contributor":"core","name":"SpatialObject","base":"ListenerObject","description":"Class `SpatialObject`\n\nInherits from `ListenerObject`\n\nDefines objects that occupy a place in 3D space.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":33,"column":1},"body":{"uri":"source/stage/SpatialObject.h","start":34,"end":121}},"methods":[{"name":"constructor","qualifiedname":"SpatialObject::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/SpatialObject.h","line":43,"column":6},"body":{"uri":"source/stage/SpatialObject.c","start":25,"end":38}},"prot":"public","static":false,"definition":"void SpatialObject::constructor","returnType":"void","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getTransformation","qualifiedname":"SpatialObject::getTransformation","description":"Retrieve the object's transformation.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":47,"column":22},"body":{"uri":"source/stage/SpatialObject.c","start":47,"end":50}},"prot":"public","static":false,"definition":"const Transformation * SpatialObject::getTransformation","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D transformation\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getPosition","qualifiedname":"SpatialObject::getPosition","description":"Retrieve the object's position.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":51,"column":16},"body":{"uri":"source/stage/SpatialObject.c","start":52,"end":55}},"prot":"public","static":false,"definition":"const Vector3D * SpatialObject::getPosition","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D vector defining its position\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getRotation","qualifiedname":"SpatialObject::getRotation","description":"Retrieve the object's rotation.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":55,"column":16},"body":{"uri":"source/stage/SpatialObject.c","start":57,"end":60}},"prot":"public","static":false,"definition":"const Rotation * SpatialObject::getRotation","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D rotation\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getScale","qualifiedname":"SpatialObject::getScale","description":"Retrieve the object's scale.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":59,"column":13},"body":{"uri":"source/stage/SpatialObject.c","start":62,"end":65}},"prot":"public","static":false,"definition":"const Scale * SpatialObject::getScale","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getRadius","qualifiedname":"SpatialObject::getRadius","description":"Retrieve the object's radius.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":63,"column":17},"body":{"uri":"source/stage/SpatialObject.c","start":67,"end":70}},"prot":"public","static":false,"definition":"fixed_t SpatialObject::getRadius","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` Radius\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getVelocity","qualifiedname":"SpatialObject::getVelocity","description":"Retrieve the object's velocity vector.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":67,"column":24},"body":{"uri":"source/stage/SpatialObject.c","start":72,"end":77}},"prot":"public","static":false,"definition":"const Vector3D * SpatialObject::getVelocity","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getSpeed","qualifiedname":"SpatialObject::getSpeed","description":"Retrieve the object's current speed (velocity vector's magnitude).","location":{"header":{"uri":"source/stage/SpatialObject.h","line":71,"column":17},"body":{"uri":"source/stage/SpatialObject.c","start":79,"end":82}},"prot":"public","static":false,"definition":"fixed_t SpatialObject::getSpeed","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s current speed (velocity vector's magnitude)\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getBounciness","qualifiedname":"SpatialObject::getBounciness","description":"Retrieve the object's bounciness factor.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":75,"column":17},"body":{"uri":"source/stage/SpatialObject.c","start":84,"end":87}},"prot":"public","static":false,"definition":"fixed_t SpatialObject::getBounciness","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"getFrictionCoefficient","qualifiedname":"SpatialObject::getFrictionCoefficient","description":"Retrieve the object's friction coefficient.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":79,"column":17},"body":{"uri":"source/stage/SpatialObject.c","start":89,"end":92}},"prot":"public","static":false,"definition":"fixed_t SpatialObject::getFrictionCoefficient","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s friction coefficient\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"setPosition","qualifiedname":"SpatialObject::setPosition","description":"Set the object's position.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":83,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":94,"end":97}},"prot":"public","static":false,"definition":"void SpatialObject::setPosition","returnType":"void","argsstring":"(SpatialObject this, const Vector3D *position)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const Vector3D *position","description":"3D vector defining the object's new position"}]},{"name":"setRotation","qualifiedname":"SpatialObject::setRotation","description":"Set the object's rotation.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":87,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":99,"end":102}},"prot":"public","static":false,"definition":"void SpatialObject::setRotation","returnType":"void","argsstring":"(SpatialObject this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `rotation`: `Rotation`\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const Rotation *rotation","description":"`Rotation`"}]},{"name":"setScale","qualifiedname":"SpatialObject::setScale","description":"Set the object's scale.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":91,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":104,"end":107}},"prot":"public","static":false,"definition":"void SpatialObject::setScale","returnType":"void","argsstring":"(SpatialObject this, const Scale *scale)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `scale`: `Scale`\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const Scale *scale","description":"`Scale`"}]},{"name":"setDirection","qualifiedname":"SpatialObject::setDirection","description":"Set the direction towards which the object must move.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":95,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":109,"end":110}},"prot":"public","static":false,"definition":"void SpatialObject::setDirection","returnType":"void","argsstring":"(SpatialObject this, const Vector3D *direction)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const Vector3D *direction","description":"Pointer to a direction vector"}]},{"name":"getDirection","qualifiedname":"SpatialObject::getDirection","description":"Retrieve the direction towards which the object is moving.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":99,"column":24},"body":{"uri":"source/stage/SpatialObject.c","start":112,"end":117}},"prot":"public","static":false,"definition":"const Vector3D * SpatialObject::getDirection","returnType":["const "," *"],"argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"isSubjectToGravity","qualifiedname":"SpatialObject::isSubjectToGravity","description":"Check if the object is subject to provided gravity vector.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":103,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":119,"end":122}},"prot":"public","static":false,"definition":"bool SpatialObject::isSubjectToGravity","argsstring":"(SpatialObject this, Vector3D gravity)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"Vector3D gravity"}]},{"name":"getInGameType","qualifiedname":"SpatialObject::getInGameType","description":"Retrieve the enum that determines the type of game object.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":107,"column":16},"body":{"uri":"source/stage/SpatialObject.c","start":124,"end":127}},"prot":"public","static":false,"definition":"uint32 SpatialObject::getInGameType","argsstring":"(SpatialObject this)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"}]},{"name":"collisionStarts","qualifiedname":"SpatialObject::collisionStarts","description":"Process a newly detected collision by one of the component colliders.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":112,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":129,"end":132}},"prot":"public","static":false,"definition":"bool SpatialObject::collisionStarts","argsstring":"(SpatialObject this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n_@return_ `bool` True if the collider must keep track of the collision to detect if it persists and when it ends; false otherwise\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"collisionPersists","qualifiedname":"SpatialObject::collisionPersists","description":"Process a going on collision detected by one of the component colliders.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":116,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":134,"end":135}},"prot":"public","static":false,"definition":"void SpatialObject::collisionPersists","returnType":"void","argsstring":"(SpatialObject this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]},{"name":"collisionEnds","qualifiedname":"SpatialObject::collisionEnds","description":"Process when a previously detected collision by one of the component colliders stops.","location":{"header":{"uri":"source/stage/SpatialObject.h","line":120,"column":14},"body":{"uri":"source/stage/SpatialObject.c","start":137,"end":138}},"prot":"public","static":false,"definition":"void SpatialObject::collisionEnds","returnType":"void","argsstring":"(SpatialObject this, const CollisionInformation *collisionInformation)","paramDocs":"\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n","parameters":[{"name":"SpatialObject this","description":"SpatialObject Instance"},{"name":"const CollisionInformation *collisionInformation","description":"Information struct about the collision to resolve"}]}],"variables":[{"name":"transformation","qualifiedname":"SpatialObject::transformation","description":"3D transformation","location":{"header":{"uri":"source/stage/SpatialObject.h","line":38,"column":16},"body":{"uri":"source/stage/SpatialObject.h","start":38,"end":38}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Sphere":{"__contributor":"core","name":"Sphere","base":"Wireframe","description":"Class `Sphere`\n\nInherits from `Wireframe`\n\nDraws a cirle that represents a 3D sphere.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":56,"column":1},"body":{"uri":"source/graphics/3d/Sphere.h","start":57,"end":94}},"methods":[{"name":"constructor","qualifiedname":"Sphere::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":77,"column":6},"body":{"uri":"source/graphics/3d/Sphere.c","start":28,"end":47}},"prot":"public","static":false,"definition":"void Sphere::constructor","returnType":"void","argsstring":"(Sphere this, SpatialObject owner, const SphereSpec *sphereSpec)","paramDocs":"\n\n_@param_ `this`: Sphere instance\n\n_@param_ `owner`: `SpatialObject` to which the wireframe attaches to\n\n_@param_ `sphereSpec`\n\n","parameters":[{"name":"Sphere this","description":"Sphere Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the wireframe attaches to"},{"name":"const SphereSpec *sphereSpec"}]},{"name":"render","qualifiedname":"Sphere::render","description":"Prepare the wireframe for drawing.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":81,"column":15},"body":{"uri":"source/graphics/3d/Sphere.c","start":56,"end":64}},"prot":"public","static":false,"definition":"void Sphere::render","returnType":"override void","argsstring":"(Sphere this, Vector3D relativePosition)","paramDocs":"\n\n_@param_ `this`: Sphere instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n","parameters":[{"name":"Sphere this","description":"Sphere Instance"},{"name":"Vector3D relativePosition","description":"Position relative to the camera's"}]},{"name":"draw","qualifiedname":"Sphere::draw","description":"Draw the wireframe to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":85,"column":15},"body":{"uri":"source/graphics/3d/Sphere.c","start":66,"end":82}},"prot":"public","static":false,"definition":"bool Sphere::draw","returnType":"override ","argsstring":"(Sphere this)","paramDocs":"\n\n_@param_ `this`: Sphere instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Sphere this","description":"Sphere Instance"}]},{"name":"setRadius","qualifiedname":"Sphere::setRadius","description":"Set the sphere's radius.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":89,"column":6},"body":{"uri":"source/graphics/3d/Sphere.c","start":84,"end":87}},"prot":"public","static":false,"definition":"void Sphere::setRadius","returnType":"void","argsstring":"(Sphere this, fixed_t radius)","paramDocs":"\n\n_@param_ `this`: Sphere instance\n\n_@param_ `radius`: `Sphere`'s radius\n\n","parameters":[{"name":"Sphere this","description":"Sphere Instance"},{"name":"fixed_t radius","description":"`Sphere`'s radius"}]},{"name":"getRadius","qualifiedname":"Sphere::getRadius","description":"Retrieve the sphere's radius.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":93,"column":9},"body":{"uri":"source/graphics/3d/Sphere.c","start":89,"end":92}},"prot":"public","static":false,"definition":"fixed_t Sphere::getRadius","argsstring":"(Sphere this)","paramDocs":"\n\n_@param_ `this`: Sphere instance\n\n_@return_ `fixed_t` `Sphere`'s radius\n\n","parameters":[{"name":"Sphere this","description":"Sphere Instance"}]}],"variables":[{"name":"position","qualifiedname":"Sphere::position","description":"Position at which to draw the wireframe","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":61,"column":13},"body":{"uri":"source/graphics/3d/Sphere.h","start":61,"end":61}},"prot":"protected","static":false},{"name":"radius","qualifiedname":"Sphere::radius","description":"Radius of the sphere.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":64,"column":9},"body":{"uri":"source/graphics/3d/Sphere.h","start":64,"end":64}},"prot":"protected","static":false},{"name":"scaledRadius","qualifiedname":"Sphere::scaledRadius","description":"Used radius of the sphere's to draw it.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":67,"column":8},"body":{"uri":"source/graphics/3d/Sphere.h","start":67,"end":67}},"prot":"protected","static":false},{"name":"drawCenter","qualifiedname":"Sphere::drawCenter","description":"Flag to control the drawing of the sphere's center point.","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":70,"column":6},"body":{"uri":"source/graphics/3d/Sphere.h","start":70,"end":70}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"SphereROMSpec","qualifiedname":"Sphere::SphereROMSpec","description":"A `Sphere` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/3d/Sphere.h","line":42,"column":26},"body":{"uri":"source/graphics/3d/Sphere.h","start":42,"end":42}},"prot":"public","static":false}]},"Sprite":{"__contributor":"core","name":"Sprite","base":"VisualComponent","description":"Class `Sprite`\n\nInherits from `VisualComponent`\n\nDisplays a `Texture` on the screen.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":97,"column":9},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":98,"end":384}},"methods":[{"name":"constructor","qualifiedname":"Sprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":146,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":45,"end":75}},"prot":"public","static":false,"definition":"void Sprite::constructor","returnType":"void","argsstring":"(Sprite this, SpatialObject owner, const SpriteSpec *spriteSpec)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `spriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const SpriteSpec *spriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"render","qualifiedname":"Sprite::render","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":151,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":92,"end":173}},"prot":"public","static":false,"definition":"int16 Sprite::render","argsstring":"(Sprite this, int16 index, bool updateAnimation)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@param_ `updateAnimation`\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"},{"name":"bool updateAnimation"}]},{"name":"getTexture","qualifiedname":"Sprite::getTexture","description":"Retrieve the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":155,"column":9},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":175,"end":178}},"prot":"public","static":false,"definition":"Texture Sprite::getTexture","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `Texture` `Texture` displayed by the sprite\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getIndex","qualifiedname":"Sprite::getIndex","description":"Retrieve the index that determines the region of DRAM that this sprite configured","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":159,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":180,"end":183}},"prot":"public","static":false,"definition":"int16 Sprite::getIndex","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getHead","qualifiedname":"Sprite::getHead","description":"Retrieve the head flags for DRAM entries.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":163,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":185,"end":188}},"prot":"public","static":false,"definition":"uint16 Sprite::getHead","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Head flags for DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getHalfWidth","qualifiedname":"Sprite::getHalfWidth","description":"Retrieve the sprite's texture's half weight.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":167,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":190,"end":193}},"prot":"public","static":false,"definition":"int32 Sprite::getHalfWidth","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int32` `Sprite`'s texture's half weight\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getHalfHeight","qualifiedname":"Sprite::getHalfHeight","description":"Retrieve the sprite's texture's half height.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":171,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":195,"end":198}},"prot":"public","static":false,"definition":"int32 Sprite::getHalfHeight","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int32` `Sprite`'s texture's half height\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveHead","qualifiedname":"Sprite::getEffectiveHead","description":"Retrieve the head flags written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":175,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":200,"end":209}},"prot":"public","static":false,"definition":"uint32 Sprite::getEffectiveHead","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint32` Head flags written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveWidth","qualifiedname":"Sprite::getEffectiveWidth","description":"Retrieve the weight written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":179,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":211,"end":220}},"prot":"public","static":false,"definition":"uint16 Sprite::getEffectiveWidth","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Weight written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveHeight","qualifiedname":"Sprite::getEffectiveHeight","description":"Retrieve the height written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":183,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":222,"end":231}},"prot":"public","static":false,"definition":"uint16 Sprite::getEffectiveHeight","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Height written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveX","qualifiedname":"Sprite::getEffectiveX","description":"Retrieve the X coordinate written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":187,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":233,"end":242}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveX","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` X coordinate written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveY","qualifiedname":"Sprite::getEffectiveY","description":"Retrieve the Y coordinate written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":191,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":244,"end":253}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveY","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` Y coordinate written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveP","qualifiedname":"Sprite::getEffectiveP","description":"Retrieve the P value written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":195,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":255,"end":264}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveP","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` P value written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveMX","qualifiedname":"Sprite::getEffectiveMX","description":"Retrieve the MX coordinate written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":199,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":266,"end":275}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveMX","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MX coordinate written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveMY","qualifiedname":"Sprite::getEffectiveMY","description":"Retrieve the MY coordinate written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":203,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":277,"end":286}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveMY","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MY coordinate written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getEffectiveMP","qualifiedname":"Sprite::getEffectiveMP","description":"Retrieve the MP value written in the DRAM entries determined by index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":207,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":288,"end":297}},"prot":"public","static":false,"definition":"int16 Sprite::getEffectiveMP","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MP value written to DRAM entries\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isVisible","qualifiedname":"Sprite::isVisible","description":"Check if the sprite is visible.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":211,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":299,"end":302}},"prot":"public","static":false,"definition":"bool Sprite::isVisible","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite is visible; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isHidden","qualifiedname":"Sprite::isHidden","description":"Check if the sprite is hidden.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":215,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":304,"end":307}},"prot":"public","static":false,"definition":"bool Sprite::isHidden","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite is hidden; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isBgmap","qualifiedname":"Sprite::isBgmap","description":"Check if the sprite displays a texture in BGMAP mode.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":219,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":309,"end":312}},"prot":"public","static":false,"definition":"bool Sprite::isBgmap","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in BGMAP mode; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isObject","qualifiedname":"Sprite::isObject","description":"Check if the sprite displays a texture in OBJECT mode.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":223,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":314,"end":317}},"prot":"public","static":false,"definition":"bool Sprite::isObject","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in OBJECT mode; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isAffine","qualifiedname":"Sprite::isAffine","description":"Check if the sprite displays a texture in AFFINE mode.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":227,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":319,"end":322}},"prot":"public","static":false,"definition":"bool Sprite::isAffine","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in AFFINE mode; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isHBias","qualifiedname":"Sprite::isHBias","description":"Check if the sprite displays a texture in HBIAS mode.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":231,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":324,"end":327}},"prot":"public","static":false,"definition":"bool Sprite::isHBias","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in HBIAS mode; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"createAnimationController","qualifiedname":"Sprite::createAnimationController","description":"Create an animation controller for this sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":234,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":329,"end":353}},"prot":"public","static":false,"definition":"void Sprite::createAnimationController","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getAnimationController","qualifiedname":"Sprite::getAnimationController","description":"Retrieve the sprite's animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":238,"column":21},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":355,"end":358}},"prot":"public","static":false,"definition":"AnimationController Sprite::getAnimationController","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `AnimationController` sprite's animation controller\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"play","qualifiedname":"Sprite::play","description":"Play the animation with the provided name from the provided array of animation functions.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":245,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":360,"end":374}},"prot":"public","static":false,"definition":"bool Sprite::play","argsstring":"(Sprite this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@param_ `animationName`: Name of the animation to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const AnimationFunction *animationFunctions[]","description":"Array of animation functions to look for the animation function to replay"},{"name":"const char *animationName","description":"Name of the animation to play"},{"name":"ListenerObject scope","description":"`Object` that will be notified of playback events"}]},{"name":"replay","qualifiedname":"Sprite::replay","description":"Replay the last playing animation, if any, from the provided array of animation functions.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":250,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":376,"end":387}},"prot":"public","static":false,"definition":"bool Sprite::replay","argsstring":"(Sprite this, const AnimationFunction *animationFunctions[])","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@return_ `bool` True if the animation started playing again; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const AnimationFunction *animationFunctions[]","description":"Array of animation functions to look for the animation function to replay"}]},{"name":"pause","qualifiedname":"Sprite::pause","description":"Pause or unpause the currently playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":254,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":389,"end":396}},"prot":"public","static":false,"definition":"void Sprite::pause","returnType":"void","argsstring":"(Sprite this, bool pause)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"bool pause","description":"Flag that signals if the animation must be paused or unpaused"}]},{"name":"stop","qualifiedname":"Sprite::stop","description":"Stop any playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":257,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":398,"end":404}},"prot":"public","static":false,"definition":"void Sprite::stop","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isPlaying","qualifiedname":"Sprite::isPlaying","description":"Check if an animation is playing.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":261,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":406,"end":415}},"prot":"public","static":false,"definition":"bool Sprite::isPlaying","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"isPlayingAnimation","qualifiedname":"Sprite::isPlayingAnimation","description":"Check if the animation whose name is provided is playing.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":266,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":417,"end":425}},"prot":"public","static":false,"definition":"bool Sprite::isPlayingAnimation","argsstring":"(Sprite this, char *animationName)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"char *animationName","description":"Name of the animation to check"}]},{"name":"nextFrame","qualifiedname":"Sprite::nextFrame","description":"Skip the currently playing animation to the next frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":269,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":427,"end":434}},"prot":"public","static":false,"definition":"void Sprite::nextFrame","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"previousFrame","qualifiedname":"Sprite::previousFrame","description":"Rewind the currently playing animation to the previous frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":272,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":436,"end":443}},"prot":"public","static":false,"definition":"void Sprite::previousFrame","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setActualFrame","qualifiedname":"Sprite::setActualFrame","description":"Skip the currently playing animation to the provided frame.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":277,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":445,"end":455}},"prot":"public","static":false,"definition":"void Sprite::setActualFrame","returnType":"void","argsstring":"(Sprite this, int16 actualFrame)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `actualFrame`: The frame of the playing animation to skip to\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"int16 actualFrame","description":"The frame of the playing animation to skip to"}]},{"name":"getActualFrame","qualifiedname":"Sprite::getActualFrame","description":"Retrieve the actual frame of the playing animation if any.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":281,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":457,"end":465}},"prot":"public","static":false,"definition":"int16 Sprite::getActualFrame","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setFrameDuration","qualifiedname":"Sprite::setFrameDuration","description":"Set the duration in game cycles for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":285,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":467,"end":473}},"prot":"public","static":false,"definition":"void Sprite::setFrameDuration","returnType":"void","argsstring":"(Sprite this, uint8 frameDuration)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frameDuration`: Duration in game cycles for each frame of animation\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"uint8 frameDuration","description":"Duration in game cycles for each frame of animation"}]},{"name":"getFrameDuration","qualifiedname":"Sprite::getFrameDuration","description":"Retrieve the duration in game cycles for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":289,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":475,"end":483}},"prot":"public","static":false,"definition":"uint8 Sprite::getFrameDuration","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setFrameDurationDecrement","qualifiedname":"Sprite::setFrameDurationDecrement","description":"Set the decrement to frameDuration in each game cycle for each frame of animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":293,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":485,"end":491}},"prot":"public","static":false,"definition":"void Sprite::setFrameDurationDecrement","returnType":"void","argsstring":"(Sprite this, uint8 frameDurationDecrement)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frameDurationDecrement`\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"uint8 frameDurationDecrement"}]},{"name":"getPlayingAnimationName","qualifiedname":"Sprite::getPlayingAnimationName","description":"Retrieve the animation function's name currently playing if any","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":297,"column":12},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":493,"end":501}},"prot":"public","static":false,"definition":"const char * Sprite::getPlayingAnimationName","returnType":"const char *","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setPosition","qualifiedname":"Sprite::setPosition","description":"Set the position cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":301,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":503,"end":512}},"prot":"public","static":false,"definition":"void Sprite::setPosition","returnType":"void","argsstring":"(Sprite this, const PixelVector *position)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `position`: Position cache to save\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const PixelVector *position","description":"Position cache to save"}]},{"name":"getPosition","qualifiedname":"Sprite::getPosition","description":"Retrieve the position cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":305,"column":19},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":514,"end":517}},"prot":"public","static":false,"definition":"const PixelVector * Sprite::getPosition","returnType":["const "," *"],"argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setDisplacement","qualifiedname":"Sprite::setDisplacement","description":"Set the position displacement.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":309,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":519,"end":523}},"prot":"public","static":false,"definition":"void Sprite::setDisplacement","returnType":"void","argsstring":"(Sprite this, const PixelVector *displacement)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `displacement`: Displacement added to the sprite's position\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const PixelVector *displacement","description":"Displacement added to the sprite's position"}]},{"name":"getDisplacement","qualifiedname":"Sprite::getDisplacement","description":"Retrieve the position displacement.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":313,"column":19},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":525,"end":528}},"prot":"public","static":false,"definition":"const PixelVector * Sprite::getDisplacement","returnType":["const "," *"],"argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `const` Displacement added to the sprite's position\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"getDisplacedPosition","qualifiedname":"Sprite::getDisplacedPosition","description":"Retrieve the cached position plus the position displacement.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":317,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":530,"end":541}},"prot":"public","static":false,"definition":"PixelVector Sprite::getDisplacedPosition","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `PixelVector` Cached position plus the position displacement\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"addChar","qualifiedname":"Sprite::addChar","description":"Add the color provided color data to a CHAR in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":322,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":543,"end":551}},"prot":"public","static":false,"definition":"void Sprite::addChar","returnType":"void","argsstring":"(Sprite this, const Point *texturePoint, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const Point *texturePoint","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putChar","qualifiedname":"Sprite::putChar","description":"Replace a CHAR in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":327,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":553,"end":561}},"prot":"public","static":false,"definition":"void Sprite::putChar","returnType":"void","argsstring":"(Sprite this, const Point *texturePoint, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const Point *texturePoint","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putPixel","qualifiedname":"Sprite::putPixel","description":"Replace a pixel in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":332,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":563,"end":571}},"prot":"public","static":false,"definition":"void Sprite::putPixel","returnType":"void","argsstring":"(Sprite this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePixel`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `charSetPixel`\n\n_@param_ `newPixelColor`\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const Point *texturePixel","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const Pixel *charSetPixel"},{"name":"BYTE newPixelColor"}]},{"name":"registerWithManager","qualifiedname":"Sprite::registerWithManager","description":"Register this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":335,"column":14}},"prot":"public","static":false,"definition":"virtual void Sprite::registerWithManager","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"unregisterWithManager","qualifiedname":"Sprite::unregisterWithManager","description":"Unegister this sprite with the appropriate sprites manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":338,"column":14}},"prot":"public","static":false,"definition":"virtual void Sprite::unregisterWithManager","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"hasSpecialEffects","qualifiedname":"Sprite::hasSpecialEffects","description":"Check if the sprite has special effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":342,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":573,"end":576}},"prot":"public","static":false,"definition":"bool Sprite::hasSpecialEffects","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite has special effects\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"doRender","qualifiedname":"Sprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":347,"column":15}},"prot":"public","static":false,"definition":"virtual int16 Sprite::doRender","argsstring":"(Sprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `virtual` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]},{"name":"invalidateRendering","qualifiedname":"Sprite::invalidateRendering","description":"Invalidate the flags that determine if the sprite requires rendering.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":350,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":578,"end":582}},"prot":"public","static":false,"definition":"void Sprite::invalidateRendering","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"updateAnimation","qualifiedname":"Sprite::updateAnimation","description":"Update the animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":353,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":584,"end":585}},"prot":"public","static":false,"definition":"void Sprite::updateAnimation","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"processEffects","qualifiedname":"Sprite::processEffects","description":"Process special effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":356,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":587,"end":588}},"prot":"public","static":false,"definition":"void Sprite::processEffects","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setMultiframe","qualifiedname":"Sprite::setMultiframe","description":"Set the current multiframe.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":360,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":590,"end":591}},"prot":"public","static":false,"definition":"void Sprite::setMultiframe","returnType":"void","argsstring":"(Sprite this, uint16 frame)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frame`: Current animation frame\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"uint16 frame","description":"Current animation frame"}]},{"name":"forceShow","qualifiedname":"Sprite::forceShow","description":"Forcefully show the sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":363,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":593,"end":598}},"prot":"public","static":false,"definition":"void Sprite::forceShow","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"forceHide","qualifiedname":"Sprite::forceHide","description":"Forcefully hide the sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":366,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":600,"end":605}},"prot":"public","static":false,"definition":"void Sprite::forceHide","returnType":"void","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"setRotation","qualifiedname":"Sprite::setRotation","description":"Set the rotation cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":370,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":607,"end":611}},"prot":"public","static":false,"definition":"void Sprite::setRotation","returnType":"void","argsstring":"(Sprite this, const Rotation *rotation)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `rotation`: `Rotation` cache to save\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const Rotation *rotation","description":"`Rotation` cache to save"}]},{"name":"setScale","qualifiedname":"Sprite::setScale","description":"Set the scale cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":374,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":613,"end":616}},"prot":"public","static":false,"definition":"void Sprite::setScale","returnType":"void","argsstring":"(Sprite this, const PixelScale *scale)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `scale`: `Scale` cache to save\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"const PixelScale *scale","description":"`Scale` cache to save"}]},{"name":"getTotalPixels","qualifiedname":"Sprite::getTotalPixels","description":"Retrieve the sprite's total number of pixels actually displayed.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":378,"column":15}},"prot":"public","static":false,"definition":"virtual int32 Sprite::getTotalPixels","argsstring":"(Sprite this)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@return_ `virtual` `Sprite`'s total number of pixels actually displayed\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"}]},{"name":"print","qualifiedname":"Sprite::print","description":"Print the sprite's properties.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":383,"column":14},"body":{"uri":"source/graphics/2d/Sprites/Sprite.c","start":618,"end":710}},"prot":"public","static":false,"definition":"void Sprite::print","returnType":"void","argsstring":"(Sprite this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Sprite instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Sprite this","description":"Sprite Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"checkIfWithinScreenSpace","qualifiedname":"Sprite::checkIfWithinScreenSpace","description":"Flag to check if rendered even if outside the screen","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":102,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":102,"end":102}},"prot":"protected","static":false},{"name":"position","qualifiedname":"Sprite::position","description":"Position cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":105,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":105,"end":105}},"prot":"protected","static":false},{"name":"displacement","qualifiedname":"Sprite::displacement","description":"Displacement added to the sprite's position.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":108,"column":13},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":108,"end":108}},"prot":"protected","static":false},{"name":"rotation","qualifiedname":"Sprite::rotation","description":"`Rotation` cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":111,"column":10},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":111,"end":111}},"prot":"protected","static":false},{"name":"index","qualifiedname":"Sprite::index","description":"Index of the block in DRAM that the sprite configures to display its texture","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":115,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":115,"end":115}},"prot":"protected","static":false},{"name":"scale","qualifiedname":"Sprite::scale","description":"`Scale` cache.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":118,"column":12},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":118,"end":118}},"prot":"protected","static":false},{"name":"head","qualifiedname":"Sprite::head","description":"Head flags for DRAM entries.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":121,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":121,"end":121}},"prot":"protected","static":false},{"name":"halfWidth","qualifiedname":"Sprite::halfWidth","description":"Cache of the texture's half width.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":124,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":124,"end":124}},"prot":"protected","static":false},{"name":"halfHeight","qualifiedname":"Sprite::halfHeight","description":"Cache of the texture's half height.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":127,"column":7},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":127,"end":127}},"prot":"protected","static":false},{"name":"animationController","qualifiedname":"Sprite::animationController","description":"Animation controller.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":130,"column":21},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":130,"end":130}},"prot":"protected","static":false},{"name":"texture","qualifiedname":"Sprite::texture","description":"`Texture` to display.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":133,"column":9},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":133,"end":133}},"prot":"protected","static":false},{"name":"updateAnimationFrame","qualifiedname":"Sprite::updateAnimationFrame","description":"Flag to allow/prohibit the update of the animation.","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":136,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":136,"end":136}},"prot":"protected","static":false},{"name":"transformed","qualifiedname":"Sprite::transformed","description":"Flag to invalidate the spatial properties caches (position, rotation, scale)","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":139,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":139,"end":139}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"SpriteROMSpec","qualifiedname":"Sprite::SpriteROMSpec","description":"A `Sprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":55,"column":26},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":55,"end":55}},"prot":"public","static":false},{"name":"AnimationFunctionROMSpec","qualifiedname":"Sprite::AnimationFunctionROMSpec","description":"An `AnimationFunction` that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Sprite.h","line":83,"column":33},"body":{"uri":"source/graphics/2d/Sprites/Sprite.h","start":83,"end":83}},"prot":"public","static":false}]},"SpriteManager":{"__contributor":"core","name":"SpriteManager","base":"Object","description":"Class PrinSpriteManagerting\n\nInherits from `ListenerObject`\n\nManages all the sprite instances.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":54,"column":11},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":55,"end":242}},"methods":[{"name":"getInstance","qualifiedname":"SpriteManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":116,"column":22}},"prot":"public","static":true,"definition":"static SpriteManager SpriteManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `SpriteManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"SpriteManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":119,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":70,"end":110}},"prot":"public","static":false,"definition":"void SpriteManager::reset","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"setAnimationsClock","qualifiedname":"SpriteManager::setAnimationsClock","description":"Set the clock that determines if the animations must be updated or not.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":123,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":112,"end":115}},"prot":"public","static":false,"definition":"void SpriteManager::setAnimationsClock","returnType":"void","argsstring":"(SpriteManager this, Clock clock)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `clock`\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Clock clock"}]},{"name":"createSprite","qualifiedname":"SpriteManager::createSprite","description":"Create a sprite with the provided spec.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":129,"column":8},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":117,"end":129}},"prot":"public","static":false,"definition":"Sprite SpriteManager::createSprite","argsstring":"(SpriteManager this, SpatialObject owner, const SpriteSpec *spriteSpec)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `owner`: `Object` to which the sprite will attach to\n\n_@param_ `spriteSpec`: Spec to use to create the sprite\n\n_@return_ `Sprite` Created sprite\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"SpatialObject owner","description":"`Object` to which the sprite will attach to"},{"name":"const SpriteSpec *spriteSpec","description":"Spec to use to create the sprite"}]},{"name":"destroySprite","qualifiedname":"SpriteManager::destroySprite","description":"Destroy the provided sprite.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":133,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":131,"end":145}},"prot":"public","static":false,"definition":"void SpriteManager::destroySprite","returnType":"void","argsstring":"(SpriteManager this, Sprite sprite)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to destroy\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Sprite sprite","description":"`Sprite` to destroy"}]},{"name":"registerSprite","qualifiedname":"SpriteManager::registerSprite","description":"Register a sprite to be managed","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":138,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":147,"end":193}},"prot":"public","static":false,"definition":"bool SpriteManager::registerSprite","argsstring":"(SpriteManager this, Sprite sprite)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to be managed\n\n_@return_ `bool` True if the sprite was successfully registered; false otherwise\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Sprite sprite","description":"`Sprite` to be managed"}]},{"name":"unregisterSprite","qualifiedname":"SpriteManager::unregisterSprite","description":"Unregister a sprite to be managed","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":142,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":195,"end":213}},"prot":"public","static":false,"definition":"void SpriteManager::unregisterSprite","returnType":"void","argsstring":"(SpriteManager this, Sprite sprite)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to no longer manage\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Sprite sprite","description":"`Sprite` to no longer manage"}]},{"name":"setupObjectSpriteContainers","qualifiedname":"SpriteManager::setupObjectSpriteContainers","description":"Configure the object sprite containers.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":147,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":215,"end":251}},"prot":"public","static":false,"definition":"void SpriteManager::setupObjectSpriteContainers","returnType":"void","argsstring":"(SpriteManager this, int16 size[4], int16 z[4])","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `size`: Array with the number of OBJECTS for each container\n\n_@param_ `z`: Array of Z coordinates for each container\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int16 size[4]","description":"Array with the number of OBJECTS for each container"},{"name":"int16 z[4]","description":"Array of Z coordinates for each container"}]},{"name":"setMaximumParamTableRowsToComputePerCall","qualifiedname":"SpriteManager::setMaximumParamTableRowsToComputePerCall","description":"Set the number of param table rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":151,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":255,"end":258}},"prot":"public","static":false,"definition":"void SpriteManager::setMaximumParamTableRowsToComputePerCall","returnType":"void","argsstring":"(SpriteManager this, int32 maximumParamTableRowsToComputePerCall)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `maximumParamTableRowsToComputePerCall`: Number of param table rows to write during each rendering cycle\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int32 maximumParamTableRowsToComputePerCall","description":"Number of param table rows to write during each rendering cycle"}]},{"name":"getMaximumParamTableRowsToComputePerCall","qualifiedname":"SpriteManager::getMaximumParamTableRowsToComputePerCall","description":"Retrieve the number of param table rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":155,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":260,"end":263}},"prot":"public","static":false,"definition":"int32 SpriteManager::getMaximumParamTableRowsToComputePerCall","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int32` Number of param table rows to write during each rendering cycle\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"setTexturesMaximumRowsToWrite","qualifiedname":"SpriteManager::setTexturesMaximumRowsToWrite","description":"Set the number of texture rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":159,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":265,"end":268}},"prot":"public","static":false,"definition":"void SpriteManager::setTexturesMaximumRowsToWrite","returnType":"void","argsstring":"(SpriteManager this, uint8 texturesMaximumRowsToWrite)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `texturesMaximumRowsToWrite`: Number of texture rows to write during each rendering cycle\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"uint8 texturesMaximumRowsToWrite","description":"Number of texture rows to write during each rendering cycle"}]},{"name":"getTexturesMaximumRowsToWrite","qualifiedname":"SpriteManager::getTexturesMaximumRowsToWrite","description":"Get the number of texture rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":163,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":270,"end":273}},"prot":"public","static":false,"definition":"int8 SpriteManager::getTexturesMaximumRowsToWrite","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int8` Number of texture rows to write during each rendering cycle\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"deferTextureUpdating","qualifiedname":"SpriteManager::deferTextureUpdating","description":"Enable or disable the texture writing over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":168,"column":6}},"prot":"public","static":false,"definition":"void SpriteManager::deferTextureUpdating","returnType":"void","argsstring":"(SpriteManager this, bool deferTextureUpdating)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `deferTextureUpdating`: If true, textures are written overtime; otherwise they are written in a single pass\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"bool deferTextureUpdating","description":"If true, textures are written overtime; otherwise they are written in a single pass"}]},{"name":"deferParamTableEffects","qualifiedname":"SpriteManager::deferParamTableEffects","description":"Enable or disable the writing of param tables over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":173,"column":6}},"prot":"public","static":false,"definition":"void SpriteManager::deferParamTableEffects","returnType":"void","argsstring":"(SpriteManager this, bool deferAffineTransformations)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `deferAffineTransformations`: If true, param tables are written overtime; otherwise they are written in a single pass\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"bool deferAffineTransformations","description":"If true, param tables are written overtime; otherwise they are written in a single pass"}]},{"name":"sortSprites","qualifiedname":"SpriteManager::sortSprites","description":"Force the Z sorting of all sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":176,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":285,"end":290}},"prot":"public","static":false,"definition":"void SpriteManager::sortSprites","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"prepareAll","qualifiedname":"SpriteManager::prepareAll","description":"Force the rendering and drawing of all sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":179,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":292,"end":326}},"prot":"public","static":false,"definition":"void SpriteManager::prepareAll","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"render","qualifiedname":"SpriteManager::render","description":"Render sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":182,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":328,"end":391}},"prot":"public","static":false,"definition":"void SpriteManager::render","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"forceRendering","qualifiedname":"SpriteManager::forceRendering","description":"Force the rendering of all sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":185,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":393,"end":399}},"prot":"public","static":false,"definition":"void SpriteManager::forceRendering","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"renderAndDraw","qualifiedname":"SpriteManager::renderAndDraw","description":"Force the rendering and drawing of all sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":188,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":401,"end":407}},"prot":"public","static":false,"definition":"void SpriteManager::renderAndDraw","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"writeDRAM","qualifiedname":"SpriteManager::writeDRAM","description":"Copy DRAM cache data to real DRAM space.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":191,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":409,"end":446}},"prot":"public","static":false,"definition":"void SpriteManager::writeDRAM","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"writeTextures","qualifiedname":"SpriteManager::writeTextures","description":"Force the writing of graphical data to DRAM space.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":194,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":448,"end":462}},"prot":"public","static":false,"definition":"void SpriteManager::writeTextures","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"showSprites","qualifiedname":"SpriteManager::showSprites","description":"Show all sprites except the provided one.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":199,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":464,"end":507}},"prot":"public","static":false,"definition":"void SpriteManager::showSprites","returnType":"void","argsstring":"(SpriteManager this, Sprite spareSprite, bool showPrinting)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spareSprite`: `Sprite` to not show\n\n_@param_ `showPrinting`: Flag to allow/prohibit the display of the printing sprite\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Sprite spareSprite","description":"`Sprite` to not show"},{"name":"bool showPrinting","description":"Flag to allow/prohibit the display of the printing sprite"}]},{"name":"hideSprites","qualifiedname":"SpriteManager::hideSprites","description":"Hide all sprites except the provided one.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":204,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":509,"end":546}},"prot":"public","static":false,"definition":"void SpriteManager::hideSprites","returnType":"void","argsstring":"(SpriteManager this, Sprite spareSprite, bool hidePrinting)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spareSprite`: `Sprite` to not hide\n\n_@param_ `hidePrinting`\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"Sprite spareSprite","description":"`Sprite` to not hide"},{"name":"bool hidePrinting"}]},{"name":"computeTotalPixelsDrawn","qualifiedname":"SpriteManager::computeTotalPixelsDrawn","description":"Compute the total pixels drawn.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":207,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":548,"end":551}},"prot":"public","static":false,"definition":"void SpriteManager::computeTotalPixelsDrawn","returnType":"void","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"getFreeLayer","qualifiedname":"SpriteManager::getFreeLayer","description":"Retrieve the free WORLD layer during the last rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":211,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":553,"end":556}},"prot":"public","static":false,"definition":"int8 SpriteManager::getFreeLayer","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int8` Free WORLD layer during the last rendering cycle\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"getNumberOfSprites","qualifiedname":"SpriteManager::getNumberOfSprites","description":"Retrieve the total number of registerd sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":215,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":558,"end":561}},"prot":"public","static":false,"definition":"int32 SpriteManager::getNumberOfSprites","argsstring":"(SpriteManager this)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int32` Total number of registerd sprites\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"}]},{"name":"getSpriteAtIndex","qualifiedname":"SpriteManager::getSpriteAtIndex","description":"Retrieve the sprite at the provided position in the list of sprites.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":220,"column":8},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":563,"end":581}},"prot":"public","static":false,"definition":"Sprite SpriteManager::getSpriteAtIndex","argsstring":"(SpriteManager this, int16 index)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `index`: Index of the node in the list of sprites\n\n_@return_ `Sprite` `Sprite` at the provided position in the list of sprites\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int16 index","description":"Index of the node in the list of sprites"}]},{"name":"getObjectSpriteContainer","qualifiedname":"SpriteManager::getObjectSpriteContainer","description":"Retrieve the object sprite container closer to the provided position.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":225,"column":23},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":583,"end":615}},"prot":"public","static":false,"definition":"ObjectSpriteContainer SpriteManager::getObjectSpriteContainer","argsstring":"(SpriteManager this, fixed_t z)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `z`: Z coordinate\n\n_@return_ `ObjectSpriteContainer` `Object` sprite container closer to the provided position\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"fixed_t z","description":"Z coordinate"}]},{"name":"getObjectSpriteContainerBySPT","qualifiedname":"SpriteManager::getObjectSpriteContainerBySPT","description":"Retrieve the object sprite container that manages the provided STP.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":230,"column":23},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":617,"end":640}},"prot":"public","static":false,"definition":"ObjectSpriteContainer SpriteManager::getObjectSpriteContainerBySPT","argsstring":"(SpriteManager this, int32 spt)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spt`: OBJECT space SPT\n\n_@return_ `ObjectSpriteContainer` `Object` sprite container that manages the provided STP\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int32 spt","description":"OBJECT space SPT"}]},{"name":"print","qualifiedname":"SpriteManager::print","description":"Print sprites statistics.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":236,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":642,"end":701}},"prot":"public","static":false,"definition":"void SpriteManager::print","returnType":"void","argsstring":"(SpriteManager this, int32 x, int32 y, bool resumed)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `resumed`: If true it only prints the most important statistics\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"},{"name":"bool resumed","description":"If true it only prints the most important statistics"}]},{"name":"printObjectSpriteContainersStatus","qualifiedname":"SpriteManager::printObjectSpriteContainersStatus","description":"Print object sprite containers statistics.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":241,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.c","start":703,"end":716}},"prot":"public","static":false,"definition":"void SpriteManager::printObjectSpriteContainersStatus","returnType":"void","argsstring":"(SpriteManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"SpriteManager this","description":"SpriteManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"animationsClock","qualifiedname":"SpriteManager::animationsClock","description":"`Clock` for the animations","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":59,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":59,"end":59}},"prot":"protected","static":false},{"name":"printing","qualifiedname":"SpriteManager::printing","description":"Cache printing manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":62,"column":10},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":62,"end":62}},"prot":"protected","static":false},{"name":"paramTableManager","qualifiedname":"SpriteManager::paramTableManager","description":"Cache param table manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":65,"column":19},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":65,"end":65}},"prot":"protected","static":false},{"name":"charSetManager","qualifiedname":"SpriteManager::charSetManager","description":"Cache charset manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":68,"column":16},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":68,"end":68}},"prot":"protected","static":false},{"name":"bgmapTextureManager","qualifiedname":"SpriteManager::bgmapTextureManager","description":"Cache BGMAP texture manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":71,"column":21},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":71,"end":71}},"prot":"protected","static":false},{"name":"objectTextureManager","qualifiedname":"SpriteManager::objectTextureManager","description":"Cache OBJECT texture manager.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":74,"column":22},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":74,"end":74}},"prot":"protected","static":false},{"name":"sprites","qualifiedname":"SpriteManager::sprites","description":"List of sprites to render.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":77,"column":13},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":77,"end":77}},"prot":"protected","static":false},{"name":"objectSpriteContainers","qualifiedname":"SpriteManager::objectSpriteContainers","description":"List of object sprite containers.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":80,"column":13},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":80,"end":80}},"prot":"protected","static":false},{"name":"specialSprites","qualifiedname":"SpriteManager::specialSprites","description":"List of sprites with special effects.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":83,"column":13},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":83,"end":83}},"prot":"protected","static":false},{"name":"sortingSpriteNode","qualifiedname":"SpriteManager::sortingSpriteNode","description":"List node used for for z sorting over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":86,"column":13},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":86,"end":86}},"prot":"protected","static":false},{"name":"totalPixelsDrawn","qualifiedname":"SpriteManager::totalPixelsDrawn","description":"Total pixels currently drawn.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":89,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":89,"end":89}},"prot":"protected","static":false},{"name":"maximumParamTableRowsToComputePerCall","qualifiedname":"SpriteManager::maximumParamTableRowsToComputePerCall","description":"Number of param table rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":92,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":92,"end":92}},"prot":"protected","static":false},{"name":"evenFrame","qualifiedname":"SpriteManager::evenFrame","description":"Flag to distinguish between even and odd game frames.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":95,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":95,"end":95}},"prot":"protected","static":false},{"name":"freeLayer","qualifiedname":"SpriteManager::freeLayer","description":"Free WORLD layer during the last rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":98,"column":7},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":98,"end":98}},"prot":"protected","static":false},{"name":"texturesMaximumRowsToWrite","qualifiedname":"SpriteManager::texturesMaximumRowsToWrite","description":"Number of texture rows to write during each rendering cycle.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":101,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":101,"end":101}},"prot":"protected","static":false},{"name":"deferTextureUpdating","qualifiedname":"SpriteManager::deferTextureUpdating","description":"Flag to defer texturing writing over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":104,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":104,"end":104}},"prot":"protected","static":false},{"name":"deferParamTableEffects","qualifiedname":"SpriteManager::deferParamTableEffects","description":"Flag to defer param tables writing over time.","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":107,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":107,"end":107}},"prot":"protected","static":false},{"name":"completeSort","qualifiedname":"SpriteManager::completeSort","description":"","location":{"header":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","line":110,"column":6},"body":{"uri":"source/graphics/2d/Sprites/SpriteManager.h","start":110,"end":110}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Stage":{"__contributor":"core","name":"Stage","base":"Container","description":"Class `Stage`\n\nInherits from `Container`\n\nImplements a container that represents a game level.","location":{"header":{"uri":"source/stage/Stage.h","line":229,"column":1},"body":{"uri":"source/stage/Stage.h","start":230,"end":348}},"methods":[{"name":"constructor","qualifiedname":"Stage::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/Stage.h","line":275,"column":6},"body":{"uri":"source/stage/Stage.c","start":123,"end":142}},"prot":"public","static":false,"definition":"void Stage::constructor","returnType":"void","argsstring":"(Stage this, StageSpec *stageSpec)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `stageSpec`: Specification that determines how to configure the stage\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"StageSpec *stageSpec","description":"Specification that determines how to configure the stage"}]},{"name":"suspend","qualifiedname":"Stage::suspend","description":"Prepare to suspend this instance's logic.","location":{"header":{"uri":"source/stage/Stage.h","line":278,"column":15},"body":{"uri":"source/stage/Stage.c","start":194,"end":221}},"prot":"public","static":false,"definition":"void Stage::suspend","returnType":"override void","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"resume","qualifiedname":"Stage::resume","description":"Prepare to resume this instance's logic.","location":{"header":{"uri":"source/stage/Stage.h","line":281,"column":15},"body":{"uri":"source/stage/Stage.c","start":223,"end":260}},"prot":"public","static":false,"definition":"void Stage::resume","returnType":"override void","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"getSpec","qualifiedname":"Stage::getSpec","description":"Retrieve the stage's spec.","location":{"header":{"uri":"source/stage/Stage.h","line":285,"column":11},"body":{"uri":"source/stage/Stage.c","start":262,"end":265}},"prot":"public","static":false,"definition":"StageSpec * Stage::getSpec","returnType":" *","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@return_ `StageSpec` Specification that determines how the stage was configured\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"configureTimer","qualifiedname":"Stage::configureTimer","description":"Configure the timer.","location":{"header":{"uri":"source/stage/Stage.h","line":288,"column":6},"body":{"uri":"source/stage/Stage.c","start":267,"end":270}},"prot":"public","static":false,"definition":"void Stage::configureTimer","returnType":"void","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"configurePalettes","qualifiedname":"Stage::configurePalettes","description":"Configure the color palettes.","location":{"header":{"uri":"source/stage/Stage.h","line":291,"column":6},"body":{"uri":"source/stage/Stage.c","start":272,"end":275}},"prot":"public","static":false,"definition":"void Stage::configurePalettes","returnType":"void","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"getPaletteConfig","qualifiedname":"Stage::getPaletteConfig","description":"Retrieve the palette configuration for the stage.","location":{"header":{"uri":"source/stage/Stage.h","line":295,"column":15},"body":{"uri":"source/stage/Stage.c","start":277,"end":280}},"prot":"public","static":false,"definition":"PaletteConfig Stage::getPaletteConfig","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@return_ `PaletteConfig` Palette configuration struct\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"registerEntities","qualifiedname":"Stage::registerEntities","description":"Register the stage's spec entities in the streaming list.","location":{"header":{"uri":"source/stage/Stage.h","line":298,"column":6},"body":{"uri":"source/stage/Stage.c","start":282,"end":368}},"prot":"public","static":false,"definition":"void Stage::registerEntities","returnType":"void","argsstring":"(Stage this, VirtualList positionedEntitiesToIgnore)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntitiesToIgnore`\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"VirtualList positionedEntitiesToIgnore"}]},{"name":"getStageEntityDescriptions","qualifiedname":"Stage::getStageEntityDescriptions","description":"Retrieve the list of stage entity descriptions.","location":{"header":{"uri":"source/stage/Stage.h","line":302,"column":13},"body":{"uri":"source/stage/Stage.c","start":370,"end":373}},"prot":"public","static":false,"definition":"VirtualList Stage::getStageEntityDescriptions","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@return_ `VirtualList` List of stage entity descriptions used to initialize the entities that populate the stage\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"addEntityLoadingListener","qualifiedname":"Stage::addEntityLoadingListener","description":"Register an event listener for the event when a new entity is instantiated.","location":{"header":{"uri":"source/stage/Stage.h","line":307,"column":6},"body":{"uri":"source/stage/Stage.c","start":375,"end":392}},"prot":"public","static":false,"definition":"void Stage::addEntityLoadingListener","returnType":"void","argsstring":"(Stage this, ListenerObject scope, EventListener callback)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `scope`: `Object` that will be notified of event\n\n_@param_ `callback`: Callback to inform the parent when the new entity is loaded\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"ListenerObject scope","description":"`Object` that will be notified of event"},{"name":"EventListener callback","description":"Callback to inform the parent when the new entity is loaded"}]},{"name":"spawnChildEntity","qualifiedname":"Stage::spawnChildEntity","description":"Spawn a new child and configure it with the provided positioned entity struct.","location":{"header":{"uri":"source/stage/Stage.h","line":312,"column":8},"body":{"uri":"source/stage/Stage.c","start":394,"end":397}},"prot":"public","static":false,"definition":"Entity Stage::spawnChildEntity","argsstring":"(Stage this, const PositionedEntity *const positionedEntity, bool permanent)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n_@param_ `permanent`: If true, the entity is not subject to the streaming\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"const PositionedEntity *const positionedEntity","description":"Struct that defines which entity spec to use to configure the new child"},{"name":"bool permanent","description":"If true, the entity is not subject to the streaming"}]},{"name":"destroyChildEntity","qualifiedname":"Stage::destroyChildEntity","description":"Destroy a stage's child.","location":{"header":{"uri":"source/stage/Stage.h","line":316,"column":6},"body":{"uri":"source/stage/Stage.c","start":399,"end":435}},"prot":"public","static":false,"definition":"void Stage::destroyChildEntity","returnType":"void","argsstring":"(Stage this, Entity child)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `child`: `Entity` to destroy\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"Entity child","description":"`Entity` to destroy"}]},{"name":"streamAll","qualifiedname":"Stage::streamAll","description":"Stream in or/and out all pending entities.","location":{"header":{"uri":"source/stage/Stage.h","line":319,"column":6},"body":{"uri":"source/stage/Stage.c","start":437,"end":472}},"prot":"public","static":false,"definition":"void Stage::streamAll","returnType":"void","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"getSounds","qualifiedname":"Stage::getSounds","description":"Retrieve the sounds that are playing in the stage.","location":{"header":{"uri":"source/stage/Stage.h","line":323,"column":13},"body":{"uri":"source/stage/Stage.c","start":474,"end":477}},"prot":"public","static":false,"definition":"VirtualList Stage::getSounds","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@return_ `VirtualList` List of playing sounds\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"fadeSounds","qualifiedname":"Stage::fadeSounds","description":"Fade in or out the registered sounds","location":{"header":{"uri":"source/stage/Stage.h","line":327,"column":6},"body":{"uri":"source/stage/Stage.c","start":479,"end":497}},"prot":"public","static":false,"definition":"void Stage::fadeSounds","returnType":"void","argsstring":"(Stage this, uint32 playbackType)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `playbackType`: Specifies how the playback should start\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"uint32 playbackType","description":"Specifies how the playback should start"}]},{"name":"print","qualifiedname":"Stage::print","description":"Print the stage's state.","location":{"header":{"uri":"source/stage/Stage.h","line":332,"column":6},"body":{"uri":"source/stage/Stage.c","start":500,"end":539}},"prot":"public","static":false,"definition":"void Stage::print","returnType":"void","argsstring":"(Stage this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]},{"name":"stream","qualifiedname":"Stage::stream","description":"Stream in or out entities within or outside the camera's range.","location":{"header":{"uri":"source/stage/Stage.h","line":335,"column":14},"body":{"uri":"source/stage/Stage.c","start":542,"end":569}},"prot":"public","static":false,"definition":"bool Stage::stream","argsstring":"(Stage this)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"}]},{"name":"configure","qualifiedname":"Stage::configure","description":"Configure the stage with the entities defined in its spec.","location":{"header":{"uri":"source/stage/Stage.h","line":339,"column":14},"body":{"uri":"source/stage/Stage.c","start":571,"end":611}},"prot":"public","static":false,"definition":"void Stage::configure","returnType":"void","argsstring":"(Stage this, VirtualList positionedEntitiesToIgnore)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntitiesToIgnore`: List of positioned entity structs to register for streaming\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"VirtualList positionedEntitiesToIgnore","description":"List of positioned entity structs to register for streaming"}]},{"name":"unloadOutOfRangeEntities","qualifiedname":"Stage::unloadOutOfRangeEntities","description":"These are not meant to be called externally. They are declared here because of the preprocessor's limitations for forward declarations in source files. Don't call these.","location":{"header":{"uri":"source/stage/Stage.h","line":346,"column":6},"body":{"uri":"source/stage/Stage.c","start":619,"end":700}},"prot":"private","static":false,"definition":"bool Stage::unloadOutOfRangeEntities","argsstring":"(Stage this, int32 defer)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `defer`\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"int32 defer"}]},{"name":"loadInRangeEntities","qualifiedname":"Stage::loadInRangeEntities","description":"","location":{"header":{"uri":"source/stage/Stage.h","line":347,"column":10},"body":{"uri":"source/stage/Stage.c","start":702,"end":810}},"prot":"private","static":false,"definition":"bool Stage::loadInRangeEntities","argsstring":"(Stage this, int32 defer)","paramDocs":"\n\n_@param_ `this`: Stage instance\n\n_@param_ `defer`\n\n","parameters":[{"name":"Stage this","description":"Stage Instance"},{"name":"int32 defer"}]}],"variables":[{"name":"stageSpec","qualifiedname":"Stage::stageSpec","description":"Pointer to the spec that defines how to initialize the stage","location":{"header":{"uri":"source/stage/Stage.h","line":234,"column":11},"body":{"uri":"source/stage/Stage.h","start":234,"end":234}},"prot":"protected","static":false},{"name":"entityFactory","qualifiedname":"Stage::entityFactory","description":"Factory to create this entity's children.","location":{"header":{"uri":"source/stage/Stage.h","line":237,"column":15},"body":{"uri":"source/stage/Stage.h","start":237,"end":237}},"prot":"protected","static":false},{"name":"stageEntityDescriptions","qualifiedname":"Stage::stageEntityDescriptions","description":"List of structs that holds precomputed information about the configuration of then entites that will populate the stage","location":{"header":{"uri":"source/stage/Stage.h","line":241,"column":13},"body":{"uri":"source/stage/Stage.h","start":241,"end":241}},"prot":"protected","static":false},{"name":"streamingHeadNode","qualifiedname":"Stage::streamingHeadNode","description":"Pivot node for streaming.","location":{"header":{"uri":"source/stage/Stage.h","line":244,"column":13},"body":{"uri":"source/stage/Stage.h","start":244,"end":244}},"prot":"protected","static":false},{"name":"sounds","qualifiedname":"Stage::sounds","description":"","location":{"header":{"uri":"source/stage/Stage.h","line":247,"column":13},"body":{"uri":"source/stage/Stage.h","start":247,"end":247}},"prot":"protected","static":false},{"name":"entityLoadingListeners","qualifiedname":"Stage::entityLoadingListeners","description":"List of listeners for entity loading.","location":{"header":{"uri":"source/stage/Stage.h","line":250,"column":13},"body":{"uri":"source/stage/Stage.h","start":250,"end":250}},"prot":"protected","static":false},{"name":"streamingPhase","qualifiedname":"Stage::streamingPhase","description":"Index for streaming method to execute in the current game cycle.","location":{"header":{"uri":"source/stage/Stage.h","line":253,"column":7},"body":{"uri":"source/stage/Stage.h","start":253,"end":253}},"prot":"protected","static":false},{"name":"streamingAmplitude","qualifiedname":"Stage::streamingAmplitude","description":"Amount of entity descriptions to check for streaming in entitis.","location":{"header":{"uri":"source/stage/Stage.h","line":256,"column":8},"body":{"uri":"source/stage/Stage.h","start":256,"end":256}},"prot":"protected","static":false},{"name":"focusEntity","qualifiedname":"Stage::focusEntity","description":"Must keep track of the camera's focus entity in order to restore it when resuming the stage's owner state","location":{"header":{"uri":"source/stage/Stage.h","line":260,"column":8},"body":{"uri":"source/stage/Stage.h","start":260,"end":260}},"prot":"protected","static":false},{"name":"nextEntityId","qualifiedname":"Stage::nextEntityId","description":"Next ID to use for new entities.","location":{"header":{"uri":"source/stage/Stage.h","line":263,"column":7},"body":{"uri":"source/stage/Stage.h","start":263,"end":263}},"prot":"protected","static":false},{"name":"reverseStreaming","qualifiedname":"Stage::reverseStreaming","description":"Flag to determine the direction of the stream in.","location":{"header":{"uri":"source/stage/Stage.h","line":266,"column":6},"body":{"uri":"source/stage/Stage.h","start":266,"end":266}},"prot":"protected","static":false},{"name":"cameraPosition","qualifiedname":"Stage::cameraPosition","description":"Cache of the camera's position for resuming the game.","location":{"header":{"uri":"source/stage/Stage.h","line":269,"column":10},"body":{"uri":"source/stage/Stage.h","start":269,"end":269}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"StageROMSpec","qualifiedname":"Stage::StageROMSpec","description":"A `Stage` spec that is stored in ROM","location":{"header":{"uri":"source/stage/Stage.h","line":193,"column":25},"body":{"uri":"source/stage/Stage.h","start":193,"end":193}},"prot":"public","static":false}]},"StageEditor":{"__contributor":"core","name":"StageEditor","base":"Tool","description":"Class `SoundTest`\n\nInherits from `Tool`\n\nImplements a tool that permits to manipulate a stage's entities.","location":{"header":{"uri":"source/tools/StageEditor.h","line":50,"column":11},"body":{"uri":"source/tools/StageEditor.h","start":51,"end":88}},"methods":[{"name":"getInstance","qualifiedname":"StageEditor::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/tools/StageEditor.h","line":74,"column":20}},"prot":"public","static":true,"definition":"static StageEditor StageEditor::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `StageEditor` singleton\n\n","parameters":[]},{"name":"update","qualifiedname":"StageEditor::update","description":"Update the tool's state.","location":{"header":{"uri":"source/tools/StageEditor.h","line":77,"column":15},"body":{"uri":"source/tools/StageEditor.c","start":84,"end":85}},"prot":"public","static":false,"definition":"void StageEditor::update","returnType":"override void","argsstring":"(StageEditor this)","paramDocs":"\n\n_@param_ `this`: StageEditor instance\n\n","parameters":[{"name":"StageEditor this","description":"StageEditor Instance"}]},{"name":"show","qualifiedname":"StageEditor::show","description":"Show the tool.","location":{"header":{"uri":"source/tools/StageEditor.h","line":80,"column":15},"body":{"uri":"source/tools/StageEditor.c","start":87,"end":96}},"prot":"public","static":false,"definition":"void StageEditor::show","returnType":"override void","argsstring":"(StageEditor this)","paramDocs":"\n\n_@param_ `this`: StageEditor instance\n\n","parameters":[{"name":"StageEditor this","description":"StageEditor Instance"}]},{"name":"hide","qualifiedname":"StageEditor::hide","description":"Hide the tool.","location":{"header":{"uri":"source/tools/StageEditor.h","line":83,"column":15},"body":{"uri":"source/tools/StageEditor.c","start":98,"end":107}},"prot":"public","static":false,"definition":"void StageEditor::hide","returnType":"override void","argsstring":"(StageEditor this)","paramDocs":"\n\n_@param_ `this`: StageEditor instance\n\n","parameters":[{"name":"StageEditor this","description":"StageEditor Instance"}]},{"name":"processUserInput","qualifiedname":"StageEditor::processUserInput","description":"Process the provided user pressed key.","location":{"header":{"uri":"source/tools/StageEditor.h","line":87,"column":15},"body":{"uri":"source/tools/StageEditor.c","start":109,"end":151}},"prot":"public","static":false,"definition":"void StageEditor::processUserInput","returnType":"override void","argsstring":"(StageEditor this, uint16 pressedKey)","paramDocs":"\n\n_@param_ `this`: StageEditor instance\n\n_@param_ `pressedKey`: User pressed key\n\n","parameters":[{"name":"StageEditor this","description":"StageEditor Instance"},{"name":"uint16 pressedKey","description":"User pressed key"}]}],"variables":[{"name":"entityNode","qualifiedname":"StageEditor::entityNode","description":"Node of the stage's selected entity.","location":{"header":{"uri":"source/tools/StageEditor.h","line":53,"column":13},"body":{"uri":"source/tools/StageEditor.h","start":53,"end":53}},"prot":"private","static":false},{"name":"wireframe","qualifiedname":"StageEditor::wireframe","description":"Current entity's wireframe.","location":{"header":{"uri":"source/tools/StageEditor.h","line":56,"column":11},"body":{"uri":"source/tools/StageEditor.h","start":56,"end":56}},"prot":"private","static":false},{"name":"userEntitySprite","qualifiedname":"StageEditor::userEntitySprite","description":"`Sprite` to display new entities to be added to the stage.","location":{"header":{"uri":"source/tools/StageEditor.h","line":59,"column":8},"body":{"uri":"source/tools/StageEditor.h","start":59,"end":59}},"prot":"private","static":false},{"name":"userEntitySelector","qualifiedname":"StageEditor::userEntitySelector","description":"","location":{"header":{"uri":"source/tools/StageEditor.h","line":62,"column":17},"body":{"uri":"source/tools/StageEditor.h","start":62,"end":62}},"prot":"private","static":false},{"name":"state","qualifiedname":"StageEditor::state","description":"Editor's state.","location":{"header":{"uri":"source/tools/StageEditor.h","line":65,"column":7},"body":{"uri":"source/tools/StageEditor.h","start":65,"end":65}},"prot":"private","static":false},{"name":"translationStepSize","qualifiedname":"StageEditor::translationStepSize","description":"","location":{"header":{"uri":"source/tools/StageEditor.h","line":68,"column":7},"body":{"uri":"source/tools/StageEditor.h","start":68,"end":68}},"prot":"private","static":false}],"enums":[{"name":"StageEditorStates","qualifiedname":"StageEditor::StageEditorStates","description":"","location":{"header":{"uri":"source/tools/StageEditor.c","line":67,"column":1},"body":{"uri":"source/tools/StageEditor.c","start":68,"end":76}},"prot":"public","static":false}],"typedefs":[]},"StageEditorState":{"__contributor":"core","name":"StageEditorState","base":"ToolState","description":"Class `StageEditorState`\n\nInherits from `ToolState`\n\nImplements a tool state to manipulate stages.","location":{"header":{"uri":"source/states/ToolStates/StageEditorState.h","line":31,"column":11},"body":{"uri":"source/states/ToolStates/StageEditorState.h","start":32,"end":42}},"methods":[{"name":"getInstance","qualifiedname":"StageEditorState::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/states/ToolStates/StageEditorState.h","line":37,"column":25}},"prot":"public","static":true,"definition":"static StageEditorState StageEditorState::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `StageEditorState` singleton\n\n","parameters":[]},{"name":"isKeyCombination","qualifiedname":"StageEditorState::isKeyCombination","description":"Check if the provided user input unlocks the tool managed by this state.","location":{"header":{"uri":"source/states/ToolStates/StageEditorState.h","line":41,"column":15},"body":{"uri":"source/states/ToolStates/StageEditorState.c","start":39,"end":42}},"prot":"public","static":false,"definition":"bool StageEditorState::isKeyCombination","returnType":"override ","argsstring":"(StageEditorState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: StageEditorState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n","parameters":[{"name":"StageEditorState this","description":"StageEditorState Instance"},{"name":"const UserInput *userInput"}]}],"variables":[],"enums":[],"typedefs":[]},"State":{"__contributor":"core","name":"State","base":"ListenerObject","description":"Class `State`\n\nInherits from `ListenerObject`\n\nImplements a behavioral model to be used in a finite state machine.","location":{"header":{"uri":"source/base/State.h","line":39,"column":9},"body":{"uri":"source/base/State.h","start":40,"end":73}},"methods":[{"name":"constructor","qualifiedname":"State::constructor","description":"Class's constructor","location":{"header":{"uri":"source/base/State.h","line":44,"column":6},"body":{"uri":"source/base/State.c","start":23,"end":27}},"prot":"public","static":false,"definition":"void State::constructor","returnType":"void","argsstring":"(State this)","paramDocs":"\n\n_@param_ `this`: State instance\n\n","parameters":[{"name":"State this","description":"State Instance"}]},{"name":"destructor","qualifiedname":"State::destructor","description":"Class's destructor.","location":{"header":{"uri":"source/base/State.h","line":47,"column":6},"body":{"uri":"source/base/State.c","start":29,"end":34}},"prot":"public","static":false,"definition":"void State::destructor","returnType":"void","argsstring":"(State this)","paramDocs":"\n\n_@param_ `this`: State instance\n\n","parameters":[{"name":"State this","description":"State Instance"}]},{"name":"enter","qualifiedname":"State::enter","description":"Prepares the object to enter this state.","location":{"header":{"uri":"source/base/State.h","line":51,"column":14},"body":{"uri":"source/base/State.c","start":36,"end":37}},"prot":"public","static":false,"definition":"void State::enter","returnType":"void","argsstring":"(State this, void *owner)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is entering in this state"}]},{"name":"execute","qualifiedname":"State::execute","description":"Updates the object in this state.","location":{"header":{"uri":"source/base/State.h","line":55,"column":14},"body":{"uri":"source/base/State.c","start":39,"end":40}},"prot":"public","static":false,"definition":"void State::execute","returnType":"void","argsstring":"(State this, void *owner)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"exit","qualifiedname":"State::exit","description":"Prepares the object to exit this state.","location":{"header":{"uri":"source/base/State.h","line":59,"column":14},"body":{"uri":"source/base/State.c","start":42,"end":43}},"prot":"public","static":false,"definition":"void State::exit","returnType":"void","argsstring":"(State this, void *owner)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is exiting this state"}]},{"name":"suspend","qualifiedname":"State::suspend","description":"Prepares the object to become inactive in this state.","location":{"header":{"uri":"source/base/State.h","line":63,"column":14},"body":{"uri":"source/base/State.c","start":45,"end":46}},"prot":"public","static":false,"definition":"void State::suspend","returnType":"void","argsstring":"(State this, void *owner)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"resume","qualifiedname":"State::resume","description":"Prepares the object to become active in this state.","location":{"header":{"uri":"source/base/State.h","line":67,"column":14},"body":{"uri":"source/base/State.c","start":48,"end":49}},"prot":"public","static":false,"definition":"void State::resume","returnType":"void","argsstring":"(State this, void *owner)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"processMessage","qualifiedname":"State::processMessage","description":"Process a `Telegram` sent to an object that is in this state.","location":{"header":{"uri":"source/base/State.h","line":72,"column":14},"body":{"uri":"source/base/State.c","start":51,"end":54}},"prot":"public","static":false,"definition":"bool State::processMessage","argsstring":"(State this, void *owner, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n_@param_ `telegram`: `Telegram` to process\n\n","parameters":[{"name":"State this","description":"State Instance"},{"name":"void *owner","description":"`Object` that is in this state"},{"name":"Telegram telegram","description":"`Telegram` to process"}]}],"variables":[],"enums":[],"typedefs":[]},"StateMachine":{"__contributor":"core","name":"StateMachine","base":"ListenerObject","description":"Class `StateMachine`\n\nInherits from `ListenerObject`\n\nImplements a behavioral model of finite states.","location":{"header":{"uri":"source/base/StateMachine.h","line":55,"column":1},"body":{"uri":"source/base/StateMachine.h","start":56,"end":139}},"methods":[{"name":"constructor","qualifiedname":"StateMachine::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/StateMachine.h","line":80,"column":6},"body":{"uri":"source/base/StateMachine.c","start":35,"end":46}},"prot":"public","static":false,"definition":"void StateMachine::constructor","returnType":"void","argsstring":"(StateMachine this, void *owner)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `owner`\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"void *owner"}]},{"name":"handleMessage","qualifiedname":"StateMachine::handleMessage","description":"Process a `Telegram`.","location":{"header":{"uri":"source/base/StateMachine.h","line":85,"column":15},"body":{"uri":"source/base/StateMachine.c","start":67,"end":75}},"prot":"public","static":false,"definition":"bool StateMachine::handleMessage","returnType":"override ","argsstring":"(StateMachine this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"Telegram telegram","description":"`Telegram` to process"}]},{"name":"transitionTo","qualifiedname":"StateMachine::transitionTo","description":"Instructs the machine to change to the provided state by the transition specified by command","location":{"header":{"uri":"source/base/StateMachine.h","line":91,"column":6},"body":{"uri":"source/base/StateMachine.c","start":77,"end":93}},"prot":"public","static":false,"definition":"bool StateMachine::transitionTo","argsstring":"(StateMachine this, State state, int16 command)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to transition to\n\n_@param_ `command`: Enum that specifies the type of transition defined in StateOperations\n\n_@return_ `bool` true if the machine is not scheduled for a transition already, false otherwise\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"State state","description":"`State` to transition to"},{"name":"int16 command","description":"Enum that specifies the type of transition defined in StateOperations"}]},{"name":"swapState","qualifiedname":"StateMachine::swapState","description":"Swap the state at the top of the stack by the provided state.","location":{"header":{"uri":"source/base/StateMachine.h","line":95,"column":6},"body":{"uri":"source/base/StateMachine.c","start":95,"end":127}},"prot":"public","static":false,"definition":"void StateMachine::swapState","returnType":"void","argsstring":"(StateMachine this, State newState)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `newState`: `State` to put at the top of the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"State newState","description":"`State` to put at the top of the stack"}]},{"name":"pushState","qualifiedname":"StateMachine::pushState","description":"Push the provided state at the top of the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":99,"column":6},"body":{"uri":"source/base/StateMachine.c","start":129,"end":153}},"prot":"public","static":false,"definition":"void StateMachine::pushState","returnType":"void","argsstring":"(StateMachine this, State newState)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `newState`: `State` to push at the top of the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"State newState","description":"`State` to push at the top of the stack"}]},{"name":"popState","qualifiedname":"StateMachine::popState","description":"Pop the top most state in the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":102,"column":6},"body":{"uri":"source/base/StateMachine.c","start":155,"end":182}},"prot":"public","static":false,"definition":"void StateMachine::popState","returnType":"void","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"popAllStates","qualifiedname":"StateMachine::popAllStates","description":"Pop all the states in the stack and leave it empty.","location":{"header":{"uri":"source/base/StateMachine.h","line":105,"column":6},"body":{"uri":"source/base/StateMachine.c","start":184,"end":187}},"prot":"public","static":false,"definition":"void StateMachine::popAllStates","returnType":"void","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"update","qualifiedname":"StateMachine::update","description":"Updates the state at the top of the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":108,"column":7},"body":{"uri":"source/base/StateMachine.c","start":189,"end":201}},"prot":"public","static":false,"definition":"State StateMachine::update","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"isInState","qualifiedname":"StateMachine::isInState","description":"Check if the top most state in the stack is the provided one.","location":{"header":{"uri":"source/base/StateMachine.h","line":113,"column":6},"body":{"uri":"source/base/StateMachine.c","start":203,"end":206}},"prot":"public","static":false,"definition":"bool StateMachine::isInState","argsstring":"(StateMachine this, State state)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to compare against the state at the top of the stack\n\n_@return_ `bool` true if the provided state is the top most state in the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"State state","description":"`State` to compare against the state at the top of the stack"}]},{"name":"hasStateInTheStack","qualifiedname":"StateMachine::hasStateInTheStack","description":"Check if the provided state is in the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":118,"column":6},"body":{"uri":"source/base/StateMachine.c","start":208,"end":211}},"prot":"public","static":false,"definition":"bool StateMachine::hasStateInTheStack","argsstring":"(StateMachine this, State state)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to check\n\n_@return_ `bool` true if the provided state is in the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"},{"name":"State state","description":"`State` to check"}]},{"name":"getStateStack","qualifiedname":"StateMachine::getStateStack","description":"Retrieve the stack of states.","location":{"header":{"uri":"source/base/StateMachine.h","line":122,"column":13},"body":{"uri":"source/base/StateMachine.c","start":213,"end":216}},"prot":"public","static":false,"definition":"VirtualList StateMachine::getStateStack","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `VirtualList` Linked list of states\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"getCurrentState","qualifiedname":"StateMachine::getCurrentState","description":"Retrieve the state at the top of the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":126,"column":7},"body":{"uri":"source/base/StateMachine.c","start":218,"end":221}},"prot":"public","static":false,"definition":"State StateMachine::getCurrentState","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State` at the top of the stack of states\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"getNextState","qualifiedname":"StateMachine::getNextState","description":"Retrieve the state that the machine is pending transition to.","location":{"header":{"uri":"source/base/StateMachine.h","line":130,"column":7},"body":{"uri":"source/base/StateMachine.c","start":223,"end":226}},"prot":"public","static":false,"definition":"State StateMachine::getNextState","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State` that the machine has to transition to\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"getPreviousState","qualifiedname":"StateMachine::getPreviousState","description":"Retrieve the state that was before at the top of the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":134,"column":7},"body":{"uri":"source/base/StateMachine.c","start":228,"end":240}},"prot":"public","static":false,"definition":"State StateMachine::getPreviousState","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State`: the state that was previously at the top of the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]},{"name":"getStackSize","qualifiedname":"StateMachine::getStackSize","description":"Retrieve the number of states in the stack.","location":{"header":{"uri":"source/base/StateMachine.h","line":138,"column":7},"body":{"uri":"source/base/StateMachine.c","start":242,"end":245}},"prot":"public","static":false,"definition":"int32 StateMachine::getStackSize","argsstring":"(StateMachine this)","paramDocs":"\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `int32` Number of states in the stack\n\n","parameters":[{"name":"StateMachine this","description":"StateMachine Instance"}]}],"variables":[{"name":"owner","qualifiedname":"StateMachine::owner","description":"Owner of this instance","location":{"header":{"uri":"source/base/StateMachine.h","line":60,"column":6},"body":{"uri":"source/base/StateMachine.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"stateStack","qualifiedname":"StateMachine::stateStack","description":"Linked list of states.","location":{"header":{"uri":"source/base/StateMachine.h","line":63,"column":13},"body":{"uri":"source/base/StateMachine.h","start":63,"end":63}},"prot":"protected","static":false},{"name":"currentState","qualifiedname":"StateMachine::currentState","description":"`State` at the top of the stack of states.","location":{"header":{"uri":"source/base/StateMachine.h","line":66,"column":7},"body":{"uri":"source/base/StateMachine.h","start":66,"end":66}},"prot":"protected","static":false},{"name":"previousState","qualifiedname":"StateMachine::previousState","description":"Previous state at the top of the stack of states.","location":{"header":{"uri":"source/base/StateMachine.h","line":69,"column":7},"body":{"uri":"source/base/StateMachine.h","start":69,"end":69}},"prot":"protected","static":false},{"name":"nextState","qualifiedname":"StateMachine::nextState","description":"`State` to push on top of the stack of states.","location":{"header":{"uri":"source/base/StateMachine.h","line":72,"column":7},"body":{"uri":"source/base/StateMachine.h","start":72,"end":72}},"prot":"protected","static":false},{"name":"transition","qualifiedname":"StateMachine::transition","description":"Enum that determines the next state transition.","location":{"header":{"uri":"source/base/StateMachine.h","line":75,"column":7},"body":{"uri":"source/base/StateMachine.h","start":75,"end":75}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Stopwatch":{"__contributor":"core","name":"Stopwatch","base":"ListenerObject","description":"Class `Stopwatch`\n\nInherits from `ListenerObject`\n\nImplements a stopwatch to keep track of time passage.","location":{"header":{"uri":"source/base/Stopwatch.h","line":32,"column":1},"body":{"uri":"source/base/Stopwatch.h","start":33,"end":68}},"methods":[{"name":"constructor","qualifiedname":"Stopwatch::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/Stopwatch.h","line":54,"column":6},"body":{"uri":"source/base/Stopwatch.c","start":27,"end":35}},"prot":"public","static":false,"definition":"void Stopwatch::constructor","returnType":"void","argsstring":"(Stopwatch this)","paramDocs":"\n\n_@param_ `this`: Stopwatch instance\n\n","parameters":[{"name":"Stopwatch this","description":"Stopwatch Instance"}]},{"name":"destructor","qualifiedname":"Stopwatch::destructor","description":"Class' destructor.","location":{"header":{"uri":"source/base/Stopwatch.h","line":57,"column":6},"body":{"uri":"source/base/Stopwatch.c","start":37,"end":45}},"prot":"public","static":false,"definition":"void Stopwatch::destructor","returnType":"void","argsstring":"(Stopwatch this)","paramDocs":"\n\n_@param_ `this`: Stopwatch instance\n\n","parameters":[{"name":"Stopwatch this","description":"Stopwatch Instance"}]},{"name":"reset","qualifiedname":"Stopwatch::reset","description":"Reset the state of the stopwatch.","location":{"header":{"uri":"source/base/Stopwatch.h","line":60,"column":6},"body":{"uri":"source/base/Stopwatch.c","start":47,"end":54}},"prot":"public","static":false,"definition":"void Stopwatch::reset","returnType":"void","argsstring":"(Stopwatch this)","paramDocs":"\n\n_@param_ `this`: Stopwatch instance\n\n","parameters":[{"name":"Stopwatch this","description":"Stopwatch Instance"}]},{"name":"update","qualifiedname":"Stopwatch::update","description":"Update the state of the stopwatch.","location":{"header":{"uri":"source/base/Stopwatch.h","line":63,"column":6},"body":{"uri":"source/base/Stopwatch.c","start":56,"end":59}},"prot":"public","static":false,"definition":"void Stopwatch::update","returnType":"void","argsstring":"(Stopwatch this)","paramDocs":"\n\n_@param_ `this`: Stopwatch instance\n\n","parameters":[{"name":"Stopwatch this","description":"Stopwatch Instance"}]},{"name":"lap","qualifiedname":"Stopwatch::lap","description":"Register a new lap.","location":{"header":{"uri":"source/base/Stopwatch.h","line":67,"column":7},"body":{"uri":"source/base/Stopwatch.c","start":61,"end":103}},"prot":"public","static":false,"definition":"float Stopwatch::lap","returnType":"float","argsstring":"(Stopwatch this)","paramDocs":"\n\n_@param_ `this`: Stopwatch instance\n\n_@return_ `float` Elapsed time during the last lap\n\n","parameters":[{"name":"Stopwatch this","description":"Stopwatch Instance"}]}],"variables":[{"name":"milliSeconds","qualifiedname":"Stopwatch::milliSeconds","description":"Elapsed time in milliseconds","location":{"header":{"uri":"source/base/Stopwatch.h","line":37,"column":8},"body":{"uri":"source/base/Stopwatch.h","start":37,"end":37}},"prot":"protected","static":false},{"name":"interrupts","qualifiedname":"Stopwatch::interrupts","description":"Interrupts counter.","location":{"header":{"uri":"source/base/Stopwatch.h","line":40,"column":8},"body":{"uri":"source/base/Stopwatch.h","start":40,"end":40}},"prot":"protected","static":false},{"name":"timerCounter","qualifiedname":"Stopwatch::timerCounter","description":"Timer counter's configuration value.","location":{"header":{"uri":"source/base/Stopwatch.h","line":43,"column":8},"body":{"uri":"source/base/Stopwatch.h","start":43,"end":43}},"prot":"protected","static":false},{"name":"previousTimerCounter","qualifiedname":"Stopwatch::previousTimerCounter","description":"Last registered timer counter's configuration value.","location":{"header":{"uri":"source/base/Stopwatch.h","line":46,"column":8},"body":{"uri":"source/base/Stopwatch.h","start":46,"end":46}},"prot":"protected","static":false},{"name":"timeProportion","qualifiedname":"Stopwatch::timeProportion","description":"Ratio between elapsed time per interrupt and timer counter's value.","location":{"header":{"uri":"source/base/Stopwatch.h","line":49,"column":7},"body":{"uri":"source/base/Stopwatch.h","start":49,"end":49}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"StopwatchManager":{"__contributor":"core","name":"StopwatchManager","base":"Object","description":"Class `StopwatchManager`\n\nInherits from `Object`\n\nManages the instances of `Stopwatch`.","location":{"header":{"uri":"source/base/StopwatchManager.h","line":39,"column":11},"body":{"uri":"source/base/StopwatchManager.h","start":40,"end":65}},"methods":[{"name":"getInstance","qualifiedname":"StopwatchManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/base/StopwatchManager.h","line":50,"column":25}},"prot":"public","static":true,"definition":"static StopwatchManager StopwatchManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `FrameRate` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"StopwatchManager::reset","description":"Reset all the registered stopwatches.","location":{"header":{"uri":"source/base/StopwatchManager.h","line":53,"column":6},"body":{"uri":"source/base/StopwatchManager.c","start":36,"end":45}},"prot":"public","static":false,"definition":"void StopwatchManager::reset","returnType":"void","argsstring":"(StopwatchManager this)","paramDocs":"\n\n_@param_ `this`: StopwatchManager instance\n\n","parameters":[{"name":"StopwatchManager this","description":"StopwatchManager Instance"}]},{"name":"register","qualifiedname":"StopwatchManager::register","description":"Register a new stopwatch","location":{"header":{"uri":"source/base/StopwatchManager.h","line":57,"column":6},"body":{"uri":"source/base/StopwatchManager.c","start":47,"end":53}},"prot":"public","static":false,"definition":"void StopwatchManager::register","returnType":"void","argsstring":"(StopwatchManager this, Stopwatch clock)","paramDocs":"\n\n_@param_ `this`: StopwatchManager instance\n\n_@param_ `clock`: `Stopwatch` to register\n\n","parameters":[{"name":"StopwatchManager this","description":"StopwatchManager Instance"},{"name":"Stopwatch clock","description":"`Stopwatch` to register"}]},{"name":"unregister","qualifiedname":"StopwatchManager::unregister","description":"Unregister stopwatch.","location":{"header":{"uri":"source/base/StopwatchManager.h","line":61,"column":6},"body":{"uri":"source/base/StopwatchManager.c","start":55,"end":58}},"prot":"public","static":false,"definition":"void StopwatchManager::unregister","returnType":"void","argsstring":"(StopwatchManager this, Stopwatch clock)","paramDocs":"\n\n_@param_ `this`: StopwatchManager instance\n\n_@param_ `clock`: `Stopwatch` to unregister\n\n","parameters":[{"name":"StopwatchManager this","description":"StopwatchManager Instance"},{"name":"Stopwatch clock","description":"`Stopwatch` to unregister"}]},{"name":"update","qualifiedname":"StopwatchManager::update","description":"Update the stopwatches.","location":{"header":{"uri":"source/base/StopwatchManager.h","line":64,"column":6},"body":{"uri":"source/base/StopwatchManager.c","start":60,"end":69}},"prot":"public","static":false,"definition":"void StopwatchManager::update","returnType":"void","argsstring":"(StopwatchManager this)","paramDocs":"\n\n_@param_ `this`: StopwatchManager instance\n\n","parameters":[{"name":"StopwatchManager this","description":"StopwatchManager Instance"}]}],"variables":[{"name":"stopwatchs","qualifiedname":"StopwatchManager::stopwatchs","description":"","location":{"header":{"uri":"source/base/StopwatchManager.h","line":44,"column":13},"body":{"uri":"source/base/StopwatchManager.h","start":44,"end":44}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Telegram":{"__contributor":"core","name":"Telegram","base":"Object","description":"Class `Telegram`\n\nInherits from `Object`\n\nWraps a message to be sent to an `Object`.","location":{"header":{"uri":"source/base/Telegram.h","line":32,"column":1},"body":{"uri":"source/base/Telegram.h","start":33,"end":72}},"methods":[{"name":"constructor","qualifiedname":"Telegram::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/Telegram.h","line":55,"column":6},"body":{"uri":"source/base/Telegram.c","start":23,"end":33}},"prot":"public","static":false,"definition":"void Telegram::constructor","returnType":"void","argsstring":"(Telegram this, void *sender, void *receiver, int32 message, void *extraInfo)","paramDocs":"\n\n_@param_ `this`: Telegram instance\n\n_@param_ `sender`: The object that sends the message\n\n_@param_ `receiver`: The object that sends the message\n\n_@param_ `message`: The message's code\n\n_@param_ `extraInfo`: Additional information that may accompany the message\n\n","parameters":[{"name":"Telegram this","description":"Telegram Instance"},{"name":"void *sender","description":"The object that sends the message"},{"name":"void *receiver","description":"The object that sends the message"},{"name":"int32 message","description":"The message's code"},{"name":"void *extraInfo","description":"Additional information that may accompany the message"}]},{"name":"getSender","qualifiedname":"Telegram::getSender","description":"Retrieve the `Telegram`'s sender.","location":{"header":{"uri":"source/base/Telegram.h","line":59,"column":6},"body":{"uri":"source/base/Telegram.c","start":46,"end":49}},"prot":"public","static":false,"definition":"void * Telegram::getSender","returnType":"void *","argsstring":"(Telegram this)","paramDocs":"\n\n_@param_ `this`: Telegram instance\n\n","parameters":[{"name":"Telegram this","description":"Telegram Instance"}]},{"name":"getReceiver","qualifiedname":"Telegram::getReceiver","description":"Retrieve the `Telegram`'s receiver.","location":{"header":{"uri":"source/base/Telegram.h","line":63,"column":6},"body":{"uri":"source/base/Telegram.c","start":51,"end":54}},"prot":"public","static":false,"definition":"void * Telegram::getReceiver","returnType":"void *","argsstring":"(Telegram this)","paramDocs":"\n\n_@param_ `this`: Telegram instance\n\n","parameters":[{"name":"Telegram this","description":"Telegram Instance"}]},{"name":"getMessage","qualifiedname":"Telegram::getMessage","description":"Retrieve the `Telegram`'s message code.","location":{"header":{"uri":"source/base/Telegram.h","line":67,"column":7},"body":{"uri":"source/base/Telegram.c","start":56,"end":59}},"prot":"public","static":false,"definition":"int32 Telegram::getMessage","argsstring":"(Telegram this)","paramDocs":"\n\n_@param_ `this`: Telegram instance\n\n_@return_ `int32` The message's code\n\n","parameters":[{"name":"Telegram this","description":"Telegram Instance"}]},{"name":"getExtraInfo","qualifiedname":"Telegram::getExtraInfo","description":"Retrieve the `Telegram`'s sender.","location":{"header":{"uri":"source/base/Telegram.h","line":71,"column":6},"body":{"uri":"source/base/Telegram.c","start":61,"end":64}},"prot":"public","static":false,"definition":"void * Telegram::getExtraInfo","returnType":"void *","argsstring":"(Telegram this)","paramDocs":"\n\n_@param_ `this`: Telegram instance\n\n","parameters":[{"name":"Telegram this","description":"Telegram Instance"}]}],"variables":[{"name":"message","qualifiedname":"Telegram::message","description":"The message's code","location":{"header":{"uri":"source/base/Telegram.h","line":37,"column":7},"body":{"uri":"source/base/Telegram.h","start":37,"end":37}},"prot":"protected","static":false},{"name":"extraInfo","qualifiedname":"Telegram::extraInfo","description":"Additional information that may accompany the message.","location":{"header":{"uri":"source/base/Telegram.h","line":40,"column":6},"body":{"uri":"source/base/Telegram.h","start":40,"end":40}},"prot":"protected","static":false},{"name":"sender","qualifiedname":"Telegram::sender","description":"The object that sends the message.","location":{"header":{"uri":"source/base/Telegram.h","line":43,"column":6},"body":{"uri":"source/base/Telegram.h","start":43,"end":43}},"prot":"protected","static":false},{"name":"receiver","qualifiedname":"Telegram::receiver","description":"The object that receives the message.","location":{"header":{"uri":"source/base/Telegram.h","line":46,"column":6},"body":{"uri":"source/base/Telegram.h","start":46,"end":46}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"TextObjectSprite":{"__contributor":"core","name":"TextObjectSprite","base":"ObjectSprite","description":"Class `TextObjectSprite`\n\nInherits from `Sprite`\n\nDisplays a text in OBJECT space.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":59,"column":1},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":60,"end":86}},"methods":[{"name":"constructor","qualifiedname":"TextObjectSprite::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":80,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.c","start":38,"end":49}},"prot":"public","static":false,"definition":"void TextObjectSprite::constructor","returnType":"void","argsstring":"(TextObjectSprite this, SpatialObject owner, const TextObjectSpriteSpec *textObjectSpriteSpec)","paramDocs":"\n\n_@param_ `this`: TextObjectSprite instance\n\n_@param_ `owner`: `SpatialObject` to which the sprite attaches to\n\n_@param_ `textObjectSpriteSpec`: Specification that determines how to configure the sprite\n\n","parameters":[{"name":"TextObjectSprite this","description":"TextObjectSprite Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the sprite attaches to"},{"name":"const TextObjectSpriteSpec *textObjectSpriteSpec","description":"Specification that determines how to configure the sprite"}]},{"name":"doRender","qualifiedname":"TextObjectSprite::doRender","description":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":85,"column":16},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.c","start":60,"end":137}},"prot":"public","static":false,"definition":"int16 TextObjectSprite::doRender","returnType":"override ","argsstring":"(TextObjectSprite this, int16 index)","paramDocs":"\n\n_@param_ `this`: TextObjectSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n","parameters":[{"name":"TextObjectSprite this","description":"TextObjectSprite Instance"},{"name":"int16 index","description":"Determines the region of DRAM that this sprite is allowed to configure"}]}],"variables":[{"name":"text","qualifiedname":"TextObjectSprite::text","description":"Pointer to the text to display","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":64,"column":12},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":64,"end":64}},"prot":"protected","static":false},{"name":"font","qualifiedname":"TextObjectSprite::font","description":"Pointer to the font name to use.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":67,"column":12},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":67,"end":67}},"prot":"protected","static":false},{"name":"palette","qualifiedname":"TextObjectSprite::palette","description":"Palette to apply when rendering the text.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":70,"column":8},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":70,"end":70}},"prot":"protected","static":false},{"name":"printed","qualifiedname":"TextObjectSprite::printed","description":"Flag to avoid printing the text every frame cycle if not necessary.","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":73,"column":6},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":73,"end":73}},"prot":"protected","static":false}],"enums":[],"typedefs":[{"name":"TextObjectSpriteROMSpec","qualifiedname":"TextObjectSprite::TextObjectSpriteROMSpec","description":"A `TextObjectSprite` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","line":45,"column":36},"body":{"uri":"source/graphics/2d/Sprites/Object/TextObjectSprite.h","start":45,"end":45}},"prot":"public","static":false}]},"Texture":{"__contributor":"core","name":"Texture","base":"ListenerObject","description":"Class `CharSet`\n\nInherits from `ListenerObject`\n\nA texture to be displayed by a sprite.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":88,"column":9},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":89,"end":243}},"methods":[{"name":"reset","qualifiedname":"Texture::reset","description":"Reset class' state.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":121,"column":13},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":45,"end":56}},"prot":"private","static":true,"definition":"static void Texture::reset","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"updateTextures","qualifiedname":"Texture::updateTextures","description":"Update texture pending rewriting of data in DRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":127,"column":13},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":58,"end":68}},"prot":"private","static":true,"definition":"static void Texture::updateTextures","returnType":"void","argsstring":"(int16 maximumTextureRowsToWrite, bool defer)","paramDocs":"\n\n_@param_ `maximumTextureRowsToWrite`: Number of texture rows to write during this call\n\n_@param_ `defer`: If true, the texture data is written overtime; otherwise all is written in a single pass\n\n","parameters":[{"name":"bool defer","description":"Number of texture rows to write during this call"},{"description":"If true, the texture data is written overtime; otherwise all is written in a single pass"}]},{"name":"getTotalCols","qualifiedname":"Texture::getTotalCols","description":"Retrieve the total horizontal size of the textures defined by the provided spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":132,"column":15},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":70,"end":90}},"prot":"private","static":true,"definition":"static uint32 Texture::getTotalCols","argsstring":"(TextureSpec *textureSpec)","paramDocs":"\n\n_@param_ `textureSpec`: Spec of which to compute the horizontal size\n\n_@return_ `static` Total horizontal size of the textures defined by the provided spec\n\n","parameters":[{"description":"Spec of which to compute the horizontal size"}]},{"name":"getTotalRows","qualifiedname":"Texture::getTotalRows","description":"Retrieve the total vertical size of the textures defined by the provided spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":137,"column":15},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":92,"end":109}},"prot":"private","static":true,"definition":"static uint32 Texture::getTotalRows","argsstring":"(TextureSpec *textureSpec)","paramDocs":"\n\n_@param_ `textureSpec`: Spec of which to compute the vertical size\n\n_@return_ `static` Total vertical size of the textures defined by the provided spec\n\n","parameters":[{"description":"Spec of which to compute the vertical size"}]},{"name":"constructor","qualifiedname":"Texture::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":144,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":209,"end":235}},"prot":"public","static":false,"definition":"void Texture::constructor","returnType":"void","argsstring":"(Texture this, TextureSpec *textureSpec, uint16 id)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `textureSpec`: Specification that determines how to configure the texture\n\n_@param_ `id`: `Texture`'s identificator\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"TextureSpec *textureSpec","description":"Specification that determines how to configure the texture"},{"name":"uint16 id","description":"`Texture`'s identificator"}]},{"name":"getId","qualifiedname":"Texture::getId","description":"Retrieve the texture's identificator.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":148,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":255,"end":258}},"prot":"public","static":false,"definition":"uint16 Texture::getId","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint16` `Texture`'s identificator\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"setSpec","qualifiedname":"Texture::setSpec","description":"Set the texture's spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":152,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":260,"end":283}},"prot":"public","static":false,"definition":"void Texture::setSpec","returnType":"void","argsstring":"(Texture this, TextureSpec *textureSpec)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `textureSpec`: Specification that determines how to configure the texture\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"TextureSpec *textureSpec","description":"Specification that determines how to configure the texture"}]},{"name":"getSpec","qualifiedname":"Texture::getSpec","description":"Retrieve the texture's spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":156,"column":13},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":285,"end":288}},"prot":"public","static":false,"definition":"TextureSpec * Texture::getSpec","returnType":" *","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `TextureSpec` Specification that determines how to configure the texture\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"getCharSet","qualifiedname":"Texture::getCharSet","description":"Retrieve the texture's char set.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":161,"column":9},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":290,"end":298}},"prot":"public","static":false,"definition":"CharSet Texture::getCharSet","argsstring":"(Texture this, uint32 loadIfNeeded)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `loadIfNeeded`: If true and the char set is not loaded, loads it\n\n_@return_ `CharSet` `Texture`'s char set\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"uint32 loadIfNeeded","description":"If true and the char set is not loaded, loads it"}]},{"name":"increaseUsageCount","qualifiedname":"Texture::increaseUsageCount","description":"Increase the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":164,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":300,"end":303}},"prot":"public","static":false,"definition":"void Texture::increaseUsageCount","returnType":"void","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"decreaseUsageCount","qualifiedname":"Texture::decreaseUsageCount","description":"Decrease the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":167,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":305,"end":318}},"prot":"public","static":false,"definition":"bool Texture::decreaseUsageCount","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"getUsageCount","qualifiedname":"Texture::getUsageCount","description":"Retrieve the usage count.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":171,"column":7},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":320,"end":323}},"prot":"public","static":false,"definition":"uint8 Texture::getUsageCount","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint8` Usage count\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"setPalette","qualifiedname":"Texture::setPalette","description":"Set the palette index to use by the graphical data.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":175,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":325,"end":330}},"prot":"public","static":false,"definition":"void Texture::setPalette","returnType":"void","argsstring":"(Texture this, uint8 palette)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `palette`: Palette index to use by the graphical data\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"uint8 palette","description":"Palette index to use by the graphical data"}]},{"name":"getPalette","qualifiedname":"Texture::getPalette","description":"Retrieve the palette index used the graphical data.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":179,"column":7},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":332,"end":335}},"prot":"public","static":false,"definition":"uint8 Texture::getPalette","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint8` Palette index used by the graphical data\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"getNumberOfFrames","qualifiedname":"Texture::getNumberOfFrames","description":"Retrieve the number frames specified by the texture's spec.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":183,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":337,"end":340}},"prot":"public","static":false,"definition":"uint32 Texture::getNumberOfFrames","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Number frames specified by the texture's spec\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"setFrame","qualifiedname":"Texture::setFrame","description":"Write to DRAM the graphical data of the map that corresponds to the specified frame.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":187,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":342,"end":354}},"prot":"public","static":false,"definition":"void Texture::setFrame","returnType":"void","argsstring":"(Texture this, uint16 frame)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `frame`: The frame that species the block inside the map array to write to DRAM\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"uint16 frame","description":"The frame that species the block inside the map array to write to DRAM"}]},{"name":"getFrame","qualifiedname":"Texture::getFrame","description":"Retrieve frame that species the block inside the map array to write to DRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":191,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":356,"end":359}},"prot":"public","static":false,"definition":"uint16 Texture::getFrame","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint16` The frame that species the block inside the map array to write to DRAM\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"getCols","qualifiedname":"Texture::getCols","description":"Retrieve the texture's horizontal size in tiles.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":195,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":361,"end":364}},"prot":"public","static":false,"definition":"uint32 Texture::getCols","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Horizontal size in tiles\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"getRows","qualifiedname":"Texture::getRows","description":"Retrieve the texture's vertical size in tiles.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":199,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":366,"end":369}},"prot":"public","static":false,"definition":"uint32 Texture::getRows","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Vertical size in tiles\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"isWritten","qualifiedname":"Texture::isWritten","description":"Check if the texture's data is completely writen to DRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":203,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":371,"end":374}},"prot":"public","static":false,"definition":"bool Texture::isWritten","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture's data is completely writing to DRAM\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"isShared","qualifiedname":"Texture::isShared","description":"Check if the texture is a shared one.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":207,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":376,"end":389}},"prot":"public","static":false,"definition":"bool Texture::isShared","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture is shared; false otherwise\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"isSingleFrame","qualifiedname":"Texture::isSingleFrame","description":"Check if the texture has only one frame.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":211,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":391,"end":394}},"prot":"public","static":false,"definition":"bool Texture::isSingleFrame","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture has only one frame; false otherwise\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"isMultiframe","qualifiedname":"Texture::isMultiframe","description":"Check if the texture is a multiframe texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":215,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":396,"end":399}},"prot":"public","static":false,"definition":"bool Texture::isMultiframe","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture is multiframe; false otherwise\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"addChar","qualifiedname":"Texture::addChar","description":"Add the color provided color data to a CHAR in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":220,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":401,"end":410}},"prot":"public","static":false,"definition":"void Texture::addChar","returnType":"void","argsstring":"(Texture this, const Point *texturePoint, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"const Point *texturePoint","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putChar","qualifiedname":"Texture::putChar","description":"Replace a CHAR in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":225,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":412,"end":421}},"prot":"public","static":false,"definition":"void Texture::putChar","returnType":"void","argsstring":"(Texture this, const Point *texturePoint, const uint32 *newChar)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"const Point *texturePoint","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const uint32 *newChar","description":"Color data array for the CHAR"}]},{"name":"putPixel","qualifiedname":"Texture::putPixel","description":"Replace a pixel in the sprite's texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":230,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":423,"end":431}},"prot":"public","static":false,"definition":"void Texture::putPixel","returnType":"void","argsstring":"(Texture this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePixel`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `charSetPixel`\n\n_@param_ `newPixelColor`\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"const Point *texturePixel","description":"Coordinate in texture's space of the CHAR to replace"},{"name":"const Pixel *charSetPixel"},{"name":"BYTE newPixelColor"}]},{"name":"prepare","qualifiedname":"Texture::prepare","description":"Prepare the texture to write its graphical data to DRAM during the next render cycle.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":234,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":433,"end":440}},"prot":"public","static":false,"definition":"void Texture::prepare","returnType":"void","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]},{"name":"write","qualifiedname":"Texture::write","description":"Write graphical data to the allocated DRAM space.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":239,"column":14},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":442,"end":467}},"prot":"public","static":false,"definition":"bool Texture::write","argsstring":"(Texture this, int16 maximumTextureRowsToWrite)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n_@param_ `maximumTextureRowsToWrite`: Number of texture rows to write during this call\n\n_@return_ `bool` True if the texture was written; false if it fails\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"},{"name":"int16 maximumTextureRowsToWrite","description":"Number of texture rows to write during this call"}]},{"name":"rewrite","qualifiedname":"Texture::rewrite","description":"Rewrite graphical data to the allocated DRAM space.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":242,"column":14},"body":{"uri":"source/graphics/2d/Textures/Texture.c","start":469,"end":481}},"prot":"public","static":false,"definition":"void Texture::rewrite","returnType":"void","argsstring":"(Texture this)","paramDocs":"\n\n_@param_ `this`: Texture instance\n\n","parameters":[{"name":"Texture this","description":"Texture Instance"}]}],"variables":[{"name":"doUpdate","qualifiedname":"Texture::doUpdate","description":"Pointer to the implementation that updates graphical data in DRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":91,"column":1},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":91,"end":91}},"prot":"private","static":false},{"name":"charSet","qualifiedname":"Texture::charSet","description":"Char set that holds the pixel data used by the texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":94,"column":9},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":94,"end":94}},"prot":"private","static":false},{"name":"textureSpec","qualifiedname":"Texture::textureSpec","description":"Spec used to configure the texture.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":97,"column":13},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":97,"end":97}},"prot":"private","static":false},{"name":"mapDisplacement","qualifiedname":"Texture::mapDisplacement","description":"Displacement inside the map array modified according to the frame's value.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":100,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":100,"end":100}},"prot":"private","static":false},{"name":"id","qualifiedname":"Texture::id","description":"Identificator.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":103,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":103,"end":103}},"prot":"private","static":false},{"name":"frame","qualifiedname":"Texture::frame","description":"Indicator of the block inside the map array to write to DRAM.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":106,"column":8},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":106,"end":106}},"prot":"private","static":false},{"name":"palette","qualifiedname":"Texture::palette","description":"Palette index to use by the graphical data.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":109,"column":7},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":109,"end":109}},"prot":"private","static":false},{"name":"status","qualifiedname":"Texture::status","description":"Writing status flag.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":112,"column":7},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":112,"end":112}},"prot":"private","static":false},{"name":"usageCount","qualifiedname":"Texture::usageCount","description":"Number of references to this texture instance.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":115,"column":7},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":115,"end":115}},"prot":"private","static":false},{"name":"update","qualifiedname":"Texture::update","description":"Flag to signal that the texture needs to update DRAM in the next render cycle.","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":118,"column":6},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":118,"end":118}},"prot":"private","static":false}],"enums":[],"typedefs":[{"name":"TextureROMSpec","qualifiedname":"Texture::TextureROMSpec","description":"A `Texture` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/2d/Textures/Texture.h","line":74,"column":27},"body":{"uri":"source/graphics/2d/Textures/Texture.h","start":74,"end":74}},"prot":"public","static":false}]},"TimerManager":{"__contributor":"core","name":"TimerManager","base":"Object","description":"Class `TimerManager`\n\nInherits from `Object`\n\nManages rumble effects.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":79,"column":11},"body":{"uri":"source/hardware/TimerManager.h","start":80,"end":220}},"methods":[{"name":"getInstance","qualifiedname":"TimerManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/TimerManager.h","line":115,"column":21}},"prot":"public","static":true,"definition":"static TimerManager TimerManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `TimerManager` singleton\n\n","parameters":[]},{"name":"interruptHandler","qualifiedname":"TimerManager::interruptHandler","description":"Interrupt handler for timer's interrupts.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":118,"column":13},"body":{"uri":"source/hardware/TimerManager.c","start":42,"end":84}},"prot":"public","static":true,"definition":"static void TimerManager::interruptHandler","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"reset","qualifiedname":"TimerManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":121,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":102,"end":112}},"prot":"public","static":false,"definition":"void TimerManager::reset","returnType":"void","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"resetTimerCounter","qualifiedname":"TimerManager::resetTimerCounter","description":"Reset timer's counter.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":124,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":114,"end":133}},"prot":"public","static":false,"definition":"void TimerManager::resetTimerCounter","returnType":"void","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"configure","qualifiedname":"TimerManager::configure","description":"Configure the timer with the provided arguments.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":130,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":135,"end":141}},"prot":"public","static":false,"definition":"void TimerManager::configure","returnType":"void","argsstring":"(TimerManager this, uint16 timerResolution, uint16 targetTimePerInterrupt, uint16 targetTimePerInterrupttUnits)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `timerResolution`: Timer's resolution (__TIMER_100US or __TIMER_20US)\n\n_@param_ `targetTimePerInterrupt`: Target elapsed time between timer interrupts\n\n_@param_ `targetTimePerInterrupttUnits`: Timer interrupt's target time units\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint16 timerResolution","description":"Timer's resolution (__TIMER_100US or __TIMER_20US)"},{"name":"uint16 targetTimePerInterrupt","description":"Target elapsed time between timer interrupts"},{"name":"uint16 targetTimePerInterrupttUnits","description":"Timer interrupt's target time units"}]},{"name":"applySettings","qualifiedname":"TimerManager::applySettings","description":"Apply the settings to the hardware timer.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":134,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":143,"end":152}},"prot":"public","static":false,"definition":"void TimerManager::applySettings","returnType":"void","argsstring":"(TimerManager this, bool enable)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `enable`: If true, the hardware timer is enabled\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"bool enable","description":"If true, the hardware timer is enabled"}]},{"name":"enable","qualifiedname":"TimerManager::enable","description":"Enable the timer.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":137,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":154,"end":159}},"prot":"public","static":false,"definition":"void TimerManager::enable","returnType":"void","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"disable","qualifiedname":"TimerManager::disable","description":"Disable the timer.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":140,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":161,"end":166}},"prot":"public","static":false,"definition":"void TimerManager::disable","returnType":"void","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"setResolution","qualifiedname":"TimerManager::setResolution","description":"Set the timer's resolution.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":144,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":168,"end":216}},"prot":"public","static":false,"definition":"void TimerManager::setResolution","returnType":"void","argsstring":"(TimerManager this, uint16 resolution)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `resolution`: __TIMER_20US or __TIMER_100US\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint16 resolution","description":"__TIMER_20US or __TIMER_100US"}]},{"name":"getResolution","qualifiedname":"TimerManager::getResolution","description":"Retrieve the timer's resolution.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":148,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":218,"end":221}},"prot":"public","static":false,"definition":"uint16 TimerManager::getResolution","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Timer's resolution\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getResolutionInUS","qualifiedname":"TimerManager::getResolutionInUS","description":"Retrieve the timer's resolution in microseconds.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":152,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":223,"end":245}},"prot":"public","static":false,"definition":"uint16 TimerManager::getResolutionInUS","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Timer's resolution in microseconds\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"setTargetTimePerInterrupt","qualifiedname":"TimerManager::setTargetTimePerInterrupt","description":"Set the target time between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":156,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":247,"end":283}},"prot":"public","static":false,"definition":"void TimerManager::setTargetTimePerInterrupt","returnType":"void","argsstring":"(TimerManager this, uint16 targetTimePerInterrupt)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `targetTimePerInterrupt`: Target time between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint16 targetTimePerInterrupt","description":"Target time between interrupt calls"}]},{"name":"getTargetTimePerInterrupt","qualifiedname":"TimerManager::getTargetTimePerInterrupt","description":"Retrieve the target time between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":160,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":285,"end":288}},"prot":"public","static":false,"definition":"uint16 TimerManager::getTargetTimePerInterrupt","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Target time between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getTargetTimePerInterruptInMS","qualifiedname":"TimerManager::getTargetTimePerInterruptInMS","description":"Retrieve the target time in milliseconds between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":164,"column":7},"body":{"uri":"source/hardware/TimerManager.c","start":290,"end":311}},"prot":"public","static":false,"definition":"float TimerManager::getTargetTimePerInterruptInMS","returnType":"float","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `float` Target time in milliseconds between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getTargetTimePerInterruptInUS","qualifiedname":"TimerManager::getTargetTimePerInterruptInUS","description":"Retrieve the target time in microseconds between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":168,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":313,"end":334}},"prot":"public","static":false,"definition":"uint32 TimerManager::getTargetTimePerInterruptInUS","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Target time in microseconds between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"setTargetTimePerInterruptUnits","qualifiedname":"TimerManager::setTargetTimePerInterruptUnits","description":"Set the target time units between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":172,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":336,"end":353}},"prot":"public","static":false,"definition":"void TimerManager::setTargetTimePerInterruptUnits","returnType":"void","argsstring":"(TimerManager this, uint16 targetTimePerInterrupttUnits)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `targetTimePerInterrupttUnits`: Target time units between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint16 targetTimePerInterrupttUnits","description":"Target time units between interrupt calls"}]},{"name":"getTargetTimePerInterruptUnits","qualifiedname":"TimerManager::getTargetTimePerInterruptUnits","description":"Retrieve the target time units between interrupt calls.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":176,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":355,"end":358}},"prot":"public","static":false,"definition":"uint16 TimerManager::getTargetTimePerInterruptUnits","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Target time units between interrupt calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getTimerCounter","qualifiedname":"TimerManager::getTimerCounter","description":"Retrieve the configured timer counter.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":180,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":360,"end":363}},"prot":"public","static":false,"definition":"uint16 TimerManager::getTimerCounter","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Configured timer counter\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getCurrentTimerCounter","qualifiedname":"TimerManager::getCurrentTimerCounter","description":"Retrieve the current timer counter.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":184,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":365,"end":368}},"prot":"public","static":false,"definition":"uint16 TimerManager::getCurrentTimerCounter","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Current timer counter\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getMinimumTimePerInterruptStep","qualifiedname":"TimerManager::getMinimumTimePerInterruptStep","description":"Retrieve the minimum timer per interrupt step.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":188,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":370,"end":385}},"prot":"public","static":false,"definition":"uint16 TimerManager::getMinimumTimePerInterruptStep","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Minimum timer per interrupt step\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getElapsedMilliseconds","qualifiedname":"TimerManager::getElapsedMilliseconds","description":"Retrieve elapsed milliseconds since the last call to reset.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":192,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":387,"end":390}},"prot":"public","static":false,"definition":"uint32 TimerManager::getElapsedMilliseconds","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Elapsed milliseconds since the last call to reset\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"getTotalElapsedMilliseconds","qualifiedname":"TimerManager::getTotalElapsedMilliseconds","description":"Retrieve elapsed milliseconds since the start of the program.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":196,"column":8},"body":{"uri":"source/hardware/TimerManager.c","start":392,"end":395}},"prot":"public","static":false,"definition":"uint32 TimerManager::getTotalElapsedMilliseconds","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Elapsed milliseconds since the start of the program\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"wait","qualifiedname":"TimerManager::wait","description":"Halt the program by the provided time.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":200,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":397,"end":411}},"prot":"public","static":false,"definition":"void TimerManager::wait","returnType":"void","argsstring":"(TimerManager this, uint32 milliseconds)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `milliseconds`: Time to halt the program\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint32 milliseconds","description":"Time to halt the program"}]},{"name":"repeatMethodCall","qualifiedname":"TimerManager::repeatMethodCall","description":"Call a method on the provided scope a numer of time during a lapse of time.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":207,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":413,"end":437}},"prot":"public","static":false,"definition":"void TimerManager::repeatMethodCall","returnType":"void","argsstring":"(TimerManager this, uint32 callTimes, uint32 duration, ListenerObject object, void(*method)(ListenerObject, uint32))","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `callTimes`: Number of calls to produce during the total duration\n\n_@param_ `duration`: Time that must take the callTimes\n\n_@param_ `object`: Called method's scope\n\n_@param_ `method`: Method to call\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint32 callTimes","description":"Number of calls to produce during the total duration"},{"name":"uint32 duration","description":"Time that must take the callTimes"},{"name":"ListenerObject object","description":"Called method's scope"},{"name":"void(*method)(ListenerObject","description":"Method to call"}]},{"name":"frameStarted","qualifiedname":"TimerManager::frameStarted","description":"Call when the next frame starts.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":211,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":439,"end":454}},"prot":"public","static":false,"definition":"void TimerManager::frameStarted","returnType":"void","argsstring":"(TimerManager this, uint32 elapsedMicroseconds)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `elapsedMicroseconds`: Elapsed microseconds between calls\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"uint32 elapsedMicroseconds","description":"Elapsed microseconds between calls"}]},{"name":"nextSecondStarted","qualifiedname":"TimerManager::nextSecondStarted","description":"Call when the next second starts.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":214,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":456,"end":476}},"prot":"public","static":false,"definition":"void TimerManager::nextSecondStarted","returnType":"void","argsstring":"(TimerManager this)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"}]},{"name":"print","qualifiedname":"TimerManager::print","description":"Print the manager's configuration.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":219,"column":6},"body":{"uri":"source/hardware/TimerManager.c","start":478,"end":523}},"prot":"public","static":false,"definition":"void TimerManager::print","returnType":"void","argsstring":"(TimerManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"TimerManager this","description":"TimerManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"elapsedMilliseconds","qualifiedname":"TimerManager::elapsedMilliseconds","description":"Elapsed milliseconds since the last call to reset.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":82,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":82,"end":82}},"prot":"private","static":false},{"name":"elapsedMicroseconds","qualifiedname":"TimerManager::elapsedMicroseconds","description":"Elapsed microseconds.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":85,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":85,"end":85}},"prot":"private","static":false},{"name":"totalElapsedMilliseconds","qualifiedname":"TimerManager::totalElapsedMilliseconds","description":"Elapsed milliseconds since the start of the program.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":88,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":88,"end":88}},"prot":"private","static":false},{"name":"resolution","qualifiedname":"TimerManager::resolution","description":"Timer's resolution.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":91,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":91,"end":91}},"prot":"private","static":false},{"name":"interruptsPerSecond","qualifiedname":"TimerManager::interruptsPerSecond","description":"Interrupts during the last secoond.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":94,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":94,"end":94}},"prot":"private","static":false},{"name":"interruptsPerGameFrame","qualifiedname":"TimerManager::interruptsPerGameFrame","description":"Interrupts during the last game frame.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":97,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":97,"end":97}},"prot":"private","static":false},{"name":"elapsedMicrosecondsPerInterrupt","qualifiedname":"TimerManager::elapsedMicrosecondsPerInterrupt","description":"Elapsed microseconds per interrupt.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":100,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":100,"end":100}},"prot":"private","static":false},{"name":"targetTimePerInterrupt","qualifiedname":"TimerManager::targetTimePerInterrupt","description":"Target elapsed time per interrupt.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":103,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":103,"end":103}},"prot":"private","static":false},{"name":"targetTimePerInterrupttUnits","qualifiedname":"TimerManager::targetTimePerInterrupttUnits","description":"Units of the target time per interrupt.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":106,"column":8},"body":{"uri":"source/hardware/TimerManager.h","start":106,"end":106}},"prot":"private","static":false},{"name":"tcrValue","qualifiedname":"TimerManager::tcrValue","description":"Last written value to the TCR registry.","location":{"header":{"uri":"source/hardware/TimerManager.h","line":109,"column":7},"body":{"uri":"source/hardware/TimerManager.h","start":109,"end":109}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"Tool":{"__contributor":"core","name":"Tool","base":"Object","description":"Class `Tool`\n\nInherits from `Object`\n\nDefines an interface for debugging tools.","location":{"header":{"uri":"source/tools/Tool.h","line":33,"column":9},"body":{"uri":"source/tools/Tool.h","start":34,"end":67}},"methods":[{"name":"constructor","qualifiedname":"Tool::constructor","description":"Class' constructor","location":{"header":{"uri":"source/tools/Tool.h","line":43,"column":6},"body":{"uri":"source/tools/Tool.c","start":52,"end":57}},"prot":"public","static":false,"definition":"void Tool::constructor","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]},{"name":"setStage","qualifiedname":"Tool::setStage","description":"Set the stage to work with.","location":{"header":{"uri":"source/tools/Tool.h","line":47,"column":6},"body":{"uri":"source/tools/Tool.c","start":65,"end":68}},"prot":"public","static":false,"definition":"void Tool::setStage","returnType":"void","argsstring":"(Tool this, Stage stage)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n_@param_ `stage`: `Stage` to work with\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"},{"name":"Stage stage","description":"`Stage` to work with"}]},{"name":"processUserInput","qualifiedname":"Tool::processUserInput","description":"Process the provided user pressed key.","location":{"header":{"uri":"source/tools/Tool.h","line":51,"column":14}},"prot":"public","static":false,"definition":"virtual void Tool::processUserInput","returnType":"void","argsstring":"(Tool this, uint16 pressedKey)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n_@param_ `pressedKey`: User pressed key\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"},{"name":"uint16 pressedKey","description":"User pressed key"}]},{"name":"dimmGame","qualifiedname":"Tool::dimmGame","description":"Dimm down the game.","location":{"header":{"uri":"source/tools/Tool.h","line":54,"column":14},"body":{"uri":"source/tools/Tool.c","start":70,"end":85}},"prot":"public","static":false,"definition":"void Tool::dimmGame","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]},{"name":"lightUpGame","qualifiedname":"Tool::lightUpGame","description":"Light up the game.","location":{"header":{"uri":"source/tools/Tool.h","line":57,"column":14},"body":{"uri":"source/tools/Tool.c","start":87,"end":93}},"prot":"public","static":false,"definition":"void Tool::lightUpGame","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]},{"name":"update","qualifiedname":"Tool::update","description":"Update the tool's state.","location":{"header":{"uri":"source/tools/Tool.h","line":60,"column":14}},"prot":"public","static":false,"definition":"virtual void Tool::update","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]},{"name":"show","qualifiedname":"Tool::show","description":"Show the tool.","location":{"header":{"uri":"source/tools/Tool.h","line":63,"column":14}},"prot":"public","static":false,"definition":"virtual void Tool::show","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]},{"name":"hide","qualifiedname":"Tool::hide","description":"Hide the tool.","location":{"header":{"uri":"source/tools/Tool.h","line":66,"column":14}},"prot":"public","static":false,"definition":"virtual void Tool::hide","returnType":"void","argsstring":"(Tool this)","paramDocs":"\n\n_@param_ `this`: Tool instance\n\n","parameters":[{"name":"Tool this","description":"Tool Instance"}]}],"variables":[{"name":"stage","qualifiedname":"Tool::stage","description":"The stage to work with","location":{"header":{"uri":"source/tools/Tool.h","line":38,"column":7},"body":{"uri":"source/tools/Tool.h","start":38,"end":38}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"ToolState":{"__contributor":"core","name":"ToolState","base":"GameState","description":"Class `ToolState`\n\nInherits from `GameState`\n\nDefines an interface for game states that uses various debug tools.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":39,"column":9},"body":{"uri":"source/states/ToolStates/ToolState.h","start":40,"end":72}},"methods":[{"name":"constructor","qualifiedname":"ToolState::constructor","description":"Class' constructor","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":47,"column":6},"body":{"uri":"source/states/ToolStates/ToolState.c","start":27,"end":32}},"prot":"public","static":false,"definition":"void ToolState::constructor","returnType":"void","argsstring":"(ToolState this)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"}]},{"name":"enter","qualifiedname":"ToolState::enter","description":"Prepares the object to enter this state.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":51,"column":15},"body":{"uri":"source/states/ToolStates/ToolState.c","start":42,"end":58}},"prot":"public","static":false,"definition":"void ToolState::enter","returnType":"override void","argsstring":"(ToolState this, void *owner)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"},{"name":"void *owner","description":"`Object` that is entering in this state"}]},{"name":"execute","qualifiedname":"ToolState::execute","description":"Updates the object in this state.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":55,"column":15},"body":{"uri":"source/states/ToolStates/ToolState.c","start":60,"end":66}},"prot":"public","static":false,"definition":"void ToolState::execute","returnType":"override void","argsstring":"(ToolState this, void *owner)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"},{"name":"void *owner","description":"`Object` that is in this state"}]},{"name":"exit","qualifiedname":"ToolState::exit","description":"Prepares the object to exit this state.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":59,"column":15},"body":{"uri":"source/states/ToolStates/ToolState.c","start":68,"end":77}},"prot":"public","static":false,"definition":"void ToolState::exit","returnType":"override void","argsstring":"(ToolState this, void *owner)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"},{"name":"void *owner","description":"`Object` that is exiting this state"}]},{"name":"processUserInput","qualifiedname":"ToolState::processUserInput","description":"Process the provided user input.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":63,"column":15},"body":{"uri":"source/states/ToolStates/ToolState.c","start":79,"end":85}},"prot":"public","static":false,"definition":"void ToolState::processUserInput","returnType":"override void","argsstring":"(ToolState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@param_ `userInput`: Struct with the current user input information\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"},{"name":"const UserInput *userInput","description":"Struct with the current user input information"}]},{"name":"stream","qualifiedname":"ToolState::stream","description":"Stream in or out the stage entities within or outside the camera's range.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":67,"column":15},"body":{"uri":"source/states/ToolStates/ToolState.c","start":87,"end":90}},"prot":"public","static":false,"definition":"bool ToolState::stream","returnType":"override ","argsstring":"(ToolState this)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@return_ `bool` True if at least some entity was streamed in or out\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"}]},{"name":"isKeyCombination","qualifiedname":"ToolState::isKeyCombination","description":"Check if the provided user input unlocks the tool managed by this state.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":71,"column":14}},"prot":"public","static":false,"definition":"virtual bool ToolState::isKeyCombination","argsstring":"(ToolState this, const UserInput *userInput)","paramDocs":"\n\n_@param_ `this`: ToolState instance\n\n_@param_ `userInput`\n\n_@return_ `virtual` True if the input matches the combination defined by the state\n\n","parameters":[{"name":"ToolState this","description":"ToolState Instance"},{"name":"const UserInput *userInput"}]}],"variables":[{"name":"tool","qualifiedname":"ToolState::tool","description":"The tool that the state uses.","location":{"header":{"uri":"source/states/ToolStates/ToolState.h","line":42,"column":6},"body":{"uri":"source/states/ToolStates/ToolState.h","start":42,"end":42}},"prot":"private","static":false}],"enums":[],"typedefs":[]},"UIContainer":{"__contributor":"core","name":"UIContainer","base":"Container","description":"Class `UIContainer`\n\nInherits from `Container`\n\nImplements a container whose children are always fixed to the camera","location":{"header":{"uri":"source/stage/UIContainer.h","line":33,"column":1},"body":{"uri":"source/stage/UIContainer.h","start":34,"end":50}},"methods":[{"name":"constructor","qualifiedname":"UIContainer::constructor","description":"Class' constructor","location":{"header":{"uri":"source/stage/UIContainer.h","line":39,"column":6},"body":{"uri":"source/stage/UIContainer.c","start":34,"end":46}},"prot":"public","static":false,"definition":"void UIContainer::constructor","returnType":"void","argsstring":"(UIContainer this, PositionedEntity *childrenPositionedEntities)","paramDocs":"\n\n_@param_ `this`: UIContainer instance\n\n_@param_ `childrenPositionedEntities`: Array of specs that define how to configure the container's children\n\n","parameters":[{"name":"UIContainer this","description":"UIContainer Instance"},{"name":"PositionedEntity *childrenPositionedEntities","description":"Array of specs that define how to configure the container's children"}]},{"name":"transform","qualifiedname":"UIContainer::transform","description":"Compute the container's global transformation.","location":{"header":{"uri":"source/stage/UIContainer.h","line":45,"column":15},"body":{"uri":"source/stage/UIContainer.c","start":57,"end":66}},"prot":"public","static":false,"definition":"void UIContainer::transform","returnType":"override void","argsstring":"(UIContainer this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","paramDocs":"\n\n_@param_ `this`: UIContainer instance\n\n_@param_ `environmentTransform`: Reference environment for the local transformation\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n","parameters":[{"name":"UIContainer this","description":"UIContainer Instance"},{"name":"const Transformation *environmentTransform","description":"Reference environment for the local transformation"},{"name":"uint8 invalidateTransformationFlag","description":"Flag that determines which transfomation's components must be recomputed"}]},{"name":"spawnChildEntity","qualifiedname":"UIContainer::spawnChildEntity","description":"Spawn a new child and configure it with the provided positioned entity struct.","location":{"header":{"uri":"source/stage/UIContainer.h","line":49,"column":8},"body":{"uri":"source/stage/UIContainer.c","start":68,"end":85}},"prot":"public","static":false,"definition":"Entity UIContainer::spawnChildEntity","argsstring":"(UIContainer this, const PositionedEntity *const positionedEntity)","paramDocs":"\n\n_@param_ `this`: UIContainer instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n","parameters":[{"name":"UIContainer this","description":"UIContainer Instance"},{"name":"const PositionedEntity *const positionedEntity","description":"Struct that defines which entity spec to use to configure the new child"}]}],"variables":[],"enums":[],"typedefs":[]},"Utilities":{"__contributor":"core","name":"Utilities","base":"Object","description":"Class `Utilities`\n\nInherits from `Object`\n\nImplements miscelaneous methods related to strings manipulation.","location":{"header":{"uri":"source/base/libgccvb/Utilities.h","line":54,"column":8},"body":{"uri":"source/base/libgccvb/Utilities.h","start":55,"end":79}},"methods":[{"name":"itoa","qualifiedname":"Utilities::itoa","description":"Convert a number into a string.","location":{"header":{"uri":"source/base/libgccvb/Utilities.h","line":63,"column":20}},"prot":"public","static":true,"definition":"static char * Utilities::itoa","returnType":"char *","argsstring":"(uint32 number, uint32 base, int32 digits)","paramDocs":"\n\n_@param_ `number`: Number to convert\n\n_@param_ `base`: Number's numeric base\n\n_@param_ `digits`: Number's digits count\n\n_@return_ `static` Pointer to a string\n\n","parameters":[{"name":"uint32 base","description":"Number to convert"},{"name":"int32 digits","description":"Number's numeric base"},{"description":"Number's digits count"}]},{"name":"toUppercase","qualifiedname":"Utilities::toUppercase","description":"Convert a string to upppercase","location":{"header":{"uri":"source/base/libgccvb/Utilities.h","line":68,"column":26},"body":{"uri":"source/base/libgccvb/Utilities.h","start":113,"end":126}},"prot":"public","static":true,"definition":"static const char * Utilities::toUppercase","returnType":"const char *","argsstring":"(const char *string)","paramDocs":"\n\n_@param_ `string`: String to convert\n\n_@return_ `static` Pointer to the uppercase string\n\n","parameters":[{"description":"String to convert"}]},{"name":"toLowercase","qualifiedname":"Utilities::toLowercase","description":"Convert a string to lowercase","location":{"header":{"uri":"source/base/libgccvb/Utilities.h","line":73,"column":26},"body":{"uri":"source/base/libgccvb/Utilities.h","start":128,"end":141}},"prot":"public","static":true,"definition":"static const char * Utilities::toLowercase","returnType":"const char *","argsstring":"(const char *string)","paramDocs":"\n\n_@param_ `string`: String to convert\n\n_@return_ `static` Pointer to the lowercase string\n\n","parameters":[{"description":"String to convert"}]},{"name":"reverse","qualifiedname":"Utilities::reverse","description":"Reverse a string","location":{"header":{"uri":"source/base/libgccvb/Utilities.h","line":78,"column":22},"body":{"uri":"source/base/libgccvb/Utilities.h","start":143,"end":151}},"prot":"public","static":true,"definition":"static uint32 Utilities::reverse","argsstring":"(uint32 x, int32 bits)","paramDocs":"\n\n_@param_ `x`\n\n_@param_ `bits`\n\n_@return_ `static` Pointer to the reversed string\n\n","parameters":[{"name":"int32 bits"},{}]}],"variables":[],"enums":[],"typedefs":[]},"VIPManager":{"__contributor":"core","name":"VIPManager","base":"ListenerObject","description":"Class `VIPManager`\n\nInherits from `ListenerObject`\n\nManages the VIP.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":277,"column":11},"body":{"uri":"source/hardware/VIPManager.h","start":278,"end":407}},"methods":[{"name":"getInstance","qualifiedname":"VIPManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/VIPManager.h","line":317,"column":19}},"prot":"public","static":true,"definition":"static VIPManager VIPManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `VIPManager` singleton\n\n","parameters":[]},{"name":"interruptHandler","qualifiedname":"VIPManager::interruptHandler","description":"Interrupt handler for timer's interrupts.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":320,"column":13},"body":{"uri":"source/hardware/VIPManager.c","start":85,"end":129}},"prot":"public","static":true,"definition":"static void VIPManager::interruptHandler","returnType":"void","argsstring":"()","paramDocs":"\n\n","parameters":[]},{"name":"reset","qualifiedname":"VIPManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":323,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":137,"end":155}},"prot":"public","static":false,"definition":"void VIPManager::reset","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"enableCustomInterrupts","qualifiedname":"VIPManager::enableCustomInterrupts","description":"Enable VIP interrupts that the engine doesn't use.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":327,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":157,"end":160}},"prot":"public","static":false,"definition":"void VIPManager::enableCustomInterrupts","returnType":"void","argsstring":"(VIPManager this, uint16 customInterrupts)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `customInterrupts`: Interrupts to enable\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"uint16 customInterrupts","description":"Interrupts to enable"}]},{"name":"enableMultiplexedInterrupts","qualifiedname":"VIPManager::enableMultiplexedInterrupts","description":"Set the multiplexed interrupts that are allowed","location":{"header":{"uri":"source/hardware/VIPManager.h","line":331,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":162,"end":169}},"prot":"public","static":false,"definition":"void VIPManager::enableMultiplexedInterrupts","returnType":"void","argsstring":"(VIPManager this, uint32 enabledMultiplexedInterrupts)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `enabledMultiplexedInterrupts`: Multiplexed interrupts to allow\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"uint32 enabledMultiplexedInterrupts","description":"Multiplexed interrupts to allow"}]},{"name":"startDrawing","qualifiedname":"VIPManager::startDrawing","description":"Start VIP drawing operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":334,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":171,"end":179}},"prot":"public","static":false,"definition":"void VIPManager::startDrawing","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"resumeDrawing","qualifiedname":"VIPManager::resumeDrawing","description":"Resume VIP drawing operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":337,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":181,"end":188}},"prot":"public","static":false,"definition":"void VIPManager::resumeDrawing","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"suspendDrawing","qualifiedname":"VIPManager::suspendDrawing","description":"Suspend VIP drawing operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":340,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":190,"end":196}},"prot":"public","static":false,"definition":"void VIPManager::suspendDrawing","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"stopDrawing","qualifiedname":"VIPManager::stopDrawing","description":"Stop VIP drawing operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":343,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":198,"end":206}},"prot":"public","static":false,"definition":"void VIPManager::stopDrawing","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"startDisplaying","qualifiedname":"VIPManager::startDisplaying","description":"Start VIP displaying operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":346,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":208,"end":212}},"prot":"public","static":false,"definition":"void VIPManager::startDisplaying","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"stopDisplaying","qualifiedname":"VIPManager::stopDisplaying","description":"Stop VIP displaying operations.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":349,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":214,"end":218}},"prot":"public","static":false,"definition":"void VIPManager::stopDisplaying","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"setFrameCycle","qualifiedname":"VIPManager::setFrameCycle","description":"Set the FRMCYC value","location":{"header":{"uri":"source/hardware/VIPManager.h","line":353,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":220,"end":234}},"prot":"public","static":false,"definition":"void VIPManager::setFrameCycle","returnType":"void","argsstring":"(VIPManager this, uint8 frameCycle)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `frameCycle`: FRMCYC value\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"uint8 frameCycle","description":"FRMCYC value"}]},{"name":"configurePalettes","qualifiedname":"VIPManager::configurePalettes","description":"Configure the VIP's palettes with the provided configuration.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":357,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":236,"end":249}},"prot":"public","static":false,"definition":"void VIPManager::configurePalettes","returnType":"void","argsstring":"(VIPManager this, PaletteConfig *paletteConfig)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `paletteConfig`: Palettes configuration\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"PaletteConfig *paletteConfig","description":"Palettes configuration"}]},{"name":"setupColumnTable","qualifiedname":"VIPManager::setupColumnTable","description":"Setup the column table with the provided spec.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":361,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":251,"end":271}},"prot":"public","static":false,"definition":"void VIPManager::setupColumnTable","returnType":"void","argsstring":"(VIPManager this, ColumnTableSpec *columnTableSpec)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `columnTableSpec`: Specification for the configuration of the column table\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"ColumnTableSpec *columnTableSpec","description":"Specification for the configuration of the column table"}]},{"name":"setupBrightness","qualifiedname":"VIPManager::setupBrightness","description":"Configure the brightness registers with the provided configuration.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":365,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":273,"end":279}},"prot":"public","static":false,"definition":"void VIPManager::setupBrightness","returnType":"void","argsstring":"(VIPManager this, Brightness *brightness)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `brightness`: `Brightness` configuration\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"Brightness *brightness","description":"`Brightness` configuration"}]},{"name":"setupBrightnessRepeat","qualifiedname":"VIPManager::setupBrightnessRepeat","description":"Configure the column table brightness repeat values.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":369,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":281,"end":304}},"prot":"public","static":false,"definition":"void VIPManager::setupBrightnessRepeat","returnType":"void","argsstring":"(VIPManager this, BrightnessRepeatSpec *brightnessRepeat)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `brightnessRepeat`: `Brightness` configuration\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"BrightnessRepeatSpec *brightnessRepeat","description":"`Brightness` configuration"}]},{"name":"setBackgroundColor","qualifiedname":"VIPManager::setBackgroundColor","description":"Configure the background color.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":373,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":306,"end":311}},"prot":"public","static":false,"definition":"void VIPManager::setBackgroundColor","returnType":"void","argsstring":"(VIPManager this, uint8 color)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `color`: Color to apply to the background\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"uint8 color","description":"Color to apply to the background"}]},{"name":"upBrightness","qualifiedname":"VIPManager::upBrightness","description":"Up the brightness to the maximum.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":376,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":313,"end":319}},"prot":"public","static":false,"definition":"void VIPManager::upBrightness","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"lowerBrightness","qualifiedname":"VIPManager::lowerBrightness","description":"Lower the brightness to the minimum.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":379,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":321,"end":327}},"prot":"public","static":false,"definition":"void VIPManager::lowerBrightness","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"pushFrontPostProcessingEffect","qualifiedname":"VIPManager::pushFrontPostProcessingEffect","description":"Push a post processing effect at the start of the list of effects.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":384,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":329,"end":345}},"prot":"public","static":false,"definition":"void VIPManager::pushFrontPostProcessingEffect","returnType":"void","argsstring":"(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"pushBackPostProcessingEffect","qualifiedname":"VIPManager::pushBackPostProcessingEffect","description":"Push a post processing effect at the end of the list of effects.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":389,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":347,"end":363}},"prot":"public","static":false,"definition":"void VIPManager::pushBackPostProcessingEffect","returnType":"void","argsstring":"(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"removePostProcessingEffect","qualifiedname":"VIPManager::removePostProcessingEffect","description":"Remove a post-processing effect from the list of effects.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":394,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":365,"end":377}},"prot":"public","static":false,"definition":"void VIPManager::removePostProcessingEffect","returnType":"void","argsstring":"(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"removePostProcessingEffects","qualifiedname":"VIPManager::removePostProcessingEffects","description":"Remove all a post-processing effects.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":397,"column":6},"body":{"uri":"source/hardware/VIPManager.c","start":379,"end":382}},"prot":"public","static":false,"definition":"void VIPManager::removePostProcessingEffects","returnType":"void","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"getCurrentInterrupt","qualifiedname":"VIPManager::getCurrentInterrupt","description":"Retrieve the registry of the interrupts being processed.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":401,"column":8},"body":{"uri":"source/hardware/VIPManager.c","start":384,"end":387}},"prot":"public","static":false,"definition":"uint16 VIPManager::getCurrentInterrupt","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@return_ `uint16` The registry of the interrupts being processed\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]},{"name":"getGameFrameDuration","qualifiedname":"VIPManager::getGameFrameDuration","description":"Retrieve the time in milliseconds that each game frame lasts.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":406,"column":8},"body":{"uri":"source/hardware/VIPManager.c","start":389,"end":392}},"prot":"public","static":false,"definition":"uint16 VIPManager::getGameFrameDuration","argsstring":"(VIPManager this)","paramDocs":"\n\n_@param_ `this`: VIPManager instance\n\n_@return_ `uint16` Time in milliseconds that the game frame last according to the FRMCYC configuration\n\n","parameters":[{"name":"VIPManager this","description":"VIPManager Instance"}]}],"variables":[{"name":"postProcessingEffects","qualifiedname":"VIPManager::postProcessingEffects","description":"Linked list of post processing effects to be applied after the VIP's drawing operations are completed","location":{"header":{"uri":"source/hardware/VIPManager.h","line":283,"column":13},"body":{"uri":"source/hardware/VIPManager.h","start":283,"end":283}},"prot":"protected","static":false},{"name":"currentDrawingFrameBufferSet","qualifiedname":"VIPManager::currentDrawingFrameBufferSet","description":"Frame buffers set using during the current game frame.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":286,"column":8},"body":{"uri":"source/hardware/VIPManager.h","start":286,"end":286}},"prot":"protected","static":false},{"name":"enabledMultiplexedInterrupts","qualifiedname":"VIPManager::enabledMultiplexedInterrupts","description":"Enum that determines which multiplexed interrupts are allowed.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":289,"column":8},"body":{"uri":"source/hardware/VIPManager.h","start":289,"end":289}},"prot":"protected","static":false},{"name":"customInterrupts","qualifiedname":"VIPManager::customInterrupts","description":"Allows VIP interrupts that the engine doesn't use.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":292,"column":8},"body":{"uri":"source/hardware/VIPManager.h","start":292,"end":292}},"prot":"protected","static":false},{"name":"currrentInterrupt","qualifiedname":"VIPManager::currrentInterrupt","description":"Register of the interrupts being processed.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":295,"column":8},"body":{"uri":"source/hardware/VIPManager.h","start":295,"end":295}},"prot":"protected","static":false},{"name":"gameFrameDuration","qualifiedname":"VIPManager::gameFrameDuration","description":"Time in milliseconds that the game frame last according to the FRMCYC configuration","location":{"header":{"uri":"source/hardware/VIPManager.h","line":299,"column":8},"body":{"uri":"source/hardware/VIPManager.h","start":299,"end":299}},"prot":"protected","static":false},{"name":"isDrawingAllowed","qualifiedname":"VIPManager::isDrawingAllowed","description":"If true, XPEN is raised.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":302,"column":6},"body":{"uri":"source/hardware/VIPManager.h","start":302,"end":302}},"prot":"protected","static":false},{"name":"processingGAMESTART","qualifiedname":"VIPManager::processingGAMESTART","description":"If true, a VIP interrupt happened while in the midst of GAMESTART.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":305,"column":15},"body":{"uri":"source/hardware/VIPManager.h","start":305,"end":305}},"prot":"protected","static":false},{"name":"processingXPEND","qualifiedname":"VIPManager::processingXPEND","description":"If true, a VIP interrupt happened while in the midst of XPEND.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":308,"column":15},"body":{"uri":"source/hardware/VIPManager.h","start":308,"end":308}},"prot":"protected","static":false},{"name":"FRAMESTARTDuringXPEND","qualifiedname":"VIPManager::FRAMESTARTDuringXPEND","description":"If true, FRAMESTART happened during XPEND.","location":{"header":{"uri":"source/hardware/VIPManager.h","line":311,"column":15},"body":{"uri":"source/hardware/VIPManager.h","start":311,"end":311}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"VSUManager":{"__contributor":"core","name":"VSUManager","base":"Object","description":"Class `VSUManager`\n\nInherits from `Object`\n\nManages the VSU.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":164,"column":11},"body":{"uri":"source/hardware/VSUManager.h","start":165,"end":240}},"methods":[{"name":"getInstance","qualifiedname":"VSUManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/hardware/VSUManager.h","line":200,"column":19}},"prot":"public","static":true,"definition":"static VSUManager VSUManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `VSUManager` singleton\n\n","parameters":[]},{"name":"playSounds","qualifiedname":"VSUManager::playSounds","description":"Play the allocated sounds.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":204,"column":13}},"prot":"public","static":true,"definition":"static void VSUManager::playSounds","returnType":"void","argsstring":"(uint32 elapsedMicroseconds)","paramDocs":"\n\n_@param_ `elapsedMicroseconds`: Elapsed time between call\n\n","parameters":[{"description":"Elapsed time between call"}]},{"name":"applySoundSourceConfiguration","qualifiedname":"VSUManager::applySoundSourceConfiguration","description":"Apply a sound source configuration to a VSU sound source with the provided data.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":208,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":146,"end":163}},"prot":"public","static":false,"definition":"void VSUManager::applySoundSourceConfiguration","returnType":"void","argsstring":"(VSUManager this, const VSUSoundSourceConfiguration *vsuSoundSourceConfiguration)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `vsuSoundSourceConfiguration`: VSU sound source configuration\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"},{"name":"const VSUSoundSourceConfiguration *vsuSoundSourceConfiguration","description":"VSU sound source configuration"}]},{"name":"applyPCMSampleToSoundSource","qualifiedname":"VSUManager::applyPCMSampleToSoundSource","description":"Apply a sound source configuration to a VSU sound source with the provided data for PCM playback.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":212,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":165,"end":184}},"prot":"public","static":false,"definition":"void VSUManager::applyPCMSampleToSoundSource","returnType":"void","argsstring":"(VSUManager this, int8 sample)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `sample`: PCM sample data\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"},{"name":"int8 sample","description":"PCM sample data"}]},{"name":"reset","qualifiedname":"VSUManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":215,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":186,"end":259}},"prot":"public","static":false,"definition":"void VSUManager::reset","returnType":"void","argsstring":"(VSUManager this)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"}]},{"name":"setMode","qualifiedname":"VSUManager::setMode","description":"Set the playback mode (stops any playing sound).","location":{"header":{"uri":"source/hardware/VSUManager.h","line":219,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":261,"end":266}},"prot":"public","static":false,"definition":"void VSUManager::setMode","returnType":"void","argsstring":"(VSUManager this, uint32 playbackMode)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `playbackMode`: kPlaybackNative or kPlaybackPCM\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"},{"name":"uint32 playbackMode","description":"kPlaybackNative or kPlaybackPCM"}]},{"name":"update","qualifiedname":"VSUManager::update","description":"Update the manager.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":222,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":268,"end":281}},"prot":"public","static":false,"definition":"void VSUManager::update","returnType":"void","argsstring":"(VSUManager this)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"}]},{"name":"stopAllSounds","qualifiedname":"VSUManager::stopAllSounds","description":"Stop all sound sources.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":225,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":283,"end":286}},"prot":"public","static":false,"definition":"void VSUManager::stopAllSounds","returnType":"void","argsstring":"(VSUManager this)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"}]},{"name":"enableQueue","qualifiedname":"VSUManager::enableQueue","description":"Enable queueing petitions to play sounds.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":228,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":288,"end":291}},"prot":"public","static":false,"definition":"void VSUManager::enableQueue","returnType":"void","argsstring":"(VSUManager this)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"}]},{"name":"disableQueue","qualifiedname":"VSUManager::disableQueue","description":"Disable queueing petitions to play sounds (if there are no sound sources availables at the time of request, the petition is ignored).","location":{"header":{"uri":"source/hardware/VSUManager.h","line":233,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":293,"end":296}},"prot":"public","static":false,"definition":"void VSUManager::disableQueue","returnType":"void","argsstring":"(VSUManager this)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"}]},{"name":"print","qualifiedname":"VSUManager::print","description":"Print the manager's status.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":236,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":304,"end":379}},"prot":"public","static":false,"definition":"void VSUManager::print","returnType":"void","argsstring":"(VSUManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"},{"name":"int32 x"},{"name":"int32 y"}]},{"name":"printWaveFormStatus","qualifiedname":"VSUManager::printWaveFormStatus","description":"Print waveforms.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":239,"column":6},"body":{"uri":"source/hardware/VSUManager.c","start":383,"end":392}},"prot":"public","static":false,"definition":"void VSUManager::printWaveFormStatus","returnType":"void","argsstring":"(VSUManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n","parameters":[{"name":"VSUManager this","description":"VSUManager Instance"},{"name":"int32 x"},{"name":"int32 y"}]}],"variables":[{"name":"queuedVSUSoundSourceConfigurations","qualifiedname":"VSUManager::queuedVSUSoundSourceConfigurations","description":"List of queued sound source configurations","location":{"header":{"uri":"source/hardware/VSUManager.h","line":169,"column":13},"body":{"uri":"source/hardware/VSUManager.h","start":169,"end":169}},"prot":"protected","static":false},{"name":"vsuSoundSourceConfigurations","qualifiedname":"VSUManager::vsuSoundSourceConfigurations","description":"Mapping of VSU sound source configurations.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":172,"column":29},"body":{"uri":"source/hardware/VSUManager.h","start":172,"end":172}},"prot":"protected","static":false},{"name":"waveforms","qualifiedname":"VSUManager::waveforms","description":"Mapping of waveworms.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":175,"column":10},"body":{"uri":"source/hardware/VSUManager.h","start":175,"end":175}},"prot":"protected","static":false},{"name":"ticks","qualifiedname":"VSUManager::ticks","description":"Elapsed ticks.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":178,"column":12},"body":{"uri":"source/hardware/VSUManager.h","start":178,"end":178}},"prot":"protected","static":false},{"name":"targetPCMUpdates","qualifiedname":"VSUManager::targetPCMUpdates","description":"Target PCM cycles per game cycle.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":181,"column":8},"body":{"uri":"source/hardware/VSUManager.h","start":181,"end":181}},"prot":"protected","static":false},{"name":"playbackMode","qualifiedname":"VSUManager::playbackMode","description":"Playback mode.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":184,"column":8},"body":{"uri":"source/hardware/VSUManager.h","start":184,"end":184}},"prot":"protected","static":false},{"name":"allowQueueingSoundRequests","qualifiedname":"VSUManager::allowQueueingSoundRequests","description":"If false and if there are no sound sources availables at the time of request, the petition is ignored","location":{"header":{"uri":"source/hardware/VSUManager.h","line":188,"column":6},"body":{"uri":"source/hardware/VSUManager.h","start":188,"end":188}},"prot":"protected","static":false},{"name":"haveUsedSoundSources","qualifiedname":"VSUManager::haveUsedSoundSources","description":"Flag to skip sound source releasing if not necessary.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":191,"column":6},"body":{"uri":"source/hardware/VSUManager.h","start":191,"end":191}},"prot":"protected","static":false},{"name":"haveQueuedRequests","qualifiedname":"VSUManager::haveQueuedRequests","description":"Flag to skip pending sound source dispatching if not necessary.","location":{"header":{"uri":"source/hardware/VSUManager.h","line":194,"column":6},"body":{"uri":"source/hardware/VSUManager.h","start":194,"end":194}},"prot":"protected","static":false}],"enums":[{"name":"VSUSoundSouceTypes","qualifiedname":"VSUManager::VSUSoundSouceTypes","description":"`Sound` source types","location":{"header":{"uri":"source/hardware/VSUManager.h","line":40,"column":1},"body":{"uri":"source/hardware/VSUManager.h","start":41,"end":45}},"prot":"public","static":false},{"name":"VSUPlaybackModes","qualifiedname":"VSUManager::VSUPlaybackModes","description":"Playback types","location":{"header":{"uri":"source/hardware/VSUManager.h","line":49,"column":1},"body":{"uri":"source/hardware/VSUManager.h","start":50,"end":53}},"prot":"public","static":false}],"typedefs":[]},"VUEngine":{"__contributor":"core","name":"VUEngine","base":"ListenerObject","description":"Class `VUEngine`\n\nInherits from `ListenerObject`\n\nImplements the game's life cycle.","location":{"header":{"uri":"source/VUEngine.h","line":82,"column":11},"body":{"uri":"source/VUEngine.h","start":83,"end":297}},"methods":[{"name":"getInstance","qualifiedname":"VUEngine::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/VUEngine.h","line":144,"column":17}},"prot":"public","static":true,"definition":"static VUEngine VUEngine::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `VUEngine` singleton\n\n","parameters":[]},{"name":"handleMessage","qualifiedname":"VUEngine::handleMessage","description":"Receive and process a `Telegram`.","location":{"header":{"uri":"source/VUEngine.h","line":149,"column":15},"body":{"uri":"source/VUEngine.c","start":97,"end":102}},"prot":"public","static":false,"definition":"bool VUEngine::handleMessage","returnType":"override ","argsstring":"(VUEngine this, Telegram telegram)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"Telegram telegram","description":"Received telegram to process"}]},{"name":"reset","qualifiedname":"VUEngine::reset","description":"Reset the engine's sub components.","location":{"header":{"uri":"source/VUEngine.h","line":153,"column":6},"body":{"uri":"source/VUEngine.c","start":104,"end":139}},"prot":"public","static":false,"definition":"void VUEngine::reset","returnType":"void","argsstring":"(VUEngine this, bool resetSounds)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `resetSounds`: If false, any playing sounds will keep playing\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"bool resetSounds","description":"If false, any playing sounds will keep playing"}]},{"name":"resetClock","qualifiedname":"VUEngine::resetClock","description":"Reset the engine's main clock.","location":{"header":{"uri":"source/VUEngine.h","line":156,"column":6},"body":{"uri":"source/VUEngine.c","start":141,"end":144}},"prot":"public","static":false,"definition":"void VUEngine::resetClock","returnType":"void","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"start","qualifiedname":"VUEngine::start","description":"Start the game with the provided game state.","location":{"header":{"uri":"source/VUEngine.h","line":160,"column":6},"body":{"uri":"source/VUEngine.c","start":146,"end":161}},"prot":"public","static":false,"definition":"void VUEngine::start","returnType":"void","argsstring":"(VUEngine this, GameState state)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state the engine must enter when starting\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState state","description":"Game state the engine must enter when starting"}]},{"name":"pause","qualifiedname":"VUEngine::pause","description":"Pause the game by pushing the provided game state into the engine's state machine's stack.","location":{"header":{"uri":"source/VUEngine.h","line":164,"column":6},"body":{"uri":"source/VUEngine.c","start":163,"end":173}},"prot":"public","static":false,"definition":"void VUEngine::pause","returnType":"void","argsstring":"(VUEngine this, GameState pauseState)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `pauseState`: Pause game state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState pauseState","description":"Pause game state"}]},{"name":"unpause","qualifiedname":"VUEngine::unpause","description":"Unpause the game by removing the provided game state from the engine's state machine's stack.","location":{"header":{"uri":"source/VUEngine.h","line":168,"column":6},"body":{"uri":"source/VUEngine.c","start":175,"end":189}},"prot":"public","static":false,"definition":"void VUEngine::unpause","returnType":"void","argsstring":"(VUEngine this, GameState pauseState)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `pauseState`: Pause game state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState pauseState","description":"Pause game state"}]},{"name":"setState","qualifiedname":"VUEngine::setState","description":"Ste the current game state at the top of the engine's state machine's stack.","location":{"header":{"uri":"source/VUEngine.h","line":172,"column":6},"body":{"uri":"source/VUEngine.c","start":191,"end":201}},"prot":"public","static":false,"definition":"void VUEngine::setState","returnType":"void","argsstring":"(VUEngine this, GameState gameState)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameState`\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState gameState"}]},{"name":"addState","qualifiedname":"VUEngine::addState","description":"Add a game state to the top of the engine's state machine's stack.","location":{"header":{"uri":"source/VUEngine.h","line":176,"column":6},"body":{"uri":"source/VUEngine.c","start":203,"end":213}},"prot":"public","static":false,"definition":"void VUEngine::addState","returnType":"void","argsstring":"(VUEngine this, GameState state)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state to push\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState state","description":"Game state to push"}]},{"name":"changeState","qualifiedname":"VUEngine::changeState","description":"Swap the game state at the top of the engine's state machine's stack wht the provided one.","location":{"header":{"uri":"source/VUEngine.h","line":180,"column":6},"body":{"uri":"source/VUEngine.c","start":215,"end":225}},"prot":"public","static":false,"definition":"void VUEngine::changeState","returnType":"void","argsstring":"(VUEngine this, GameState state)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state to swap to\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"GameState state","description":"Game state to swap to"}]},{"name":"isInToolState","qualifiedname":"VUEngine::isInToolState","description":"Check if the engine's state machine is in a tool state.","location":{"header":{"uri":"source/VUEngine.h","line":184,"column":6},"body":{"uri":"source/VUEngine.c","start":227,"end":239}},"prot":"public","static":false,"definition":"bool VUEngine::isInToolState","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the engine's state machine is in a tool state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"isInToolStateTransition","qualifiedname":"VUEngine::isInToolStateTransition","description":"Check if the engine's state machine is entering or exiting a tool state.","location":{"header":{"uri":"source/VUEngine.h","line":188,"column":6}},"prot":"public","static":false,"definition":"bool VUEngine::isInToolStateTransition","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the engine's state machine is entering or exiting a tool state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getCurrentState","qualifiedname":"VUEngine::getCurrentState","description":"Retrieve the current state.","location":{"header":{"uri":"source/VUEngine.h","line":192,"column":11},"body":{"uri":"source/VUEngine.c","start":246,"end":250}},"prot":"public","static":false,"definition":"GameState VUEngine::getCurrentState","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `GameState` Current game state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getPreviousState","qualifiedname":"VUEngine::getPreviousState","description":"Retrieve the previous state.","location":{"header":{"uri":"source/VUEngine.h","line":196,"column":11},"body":{"uri":"source/VUEngine.c","start":252,"end":256}},"prot":"public","static":false,"definition":"GameState VUEngine::getPreviousState","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `GameState` Previous game state\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getUIContainer","qualifiedname":"VUEngine::getUIContainer","description":"Retrieve the current UI container.","location":{"header":{"uri":"source/VUEngine.h","line":200,"column":13},"body":{"uri":"source/VUEngine.c","start":258,"end":269}},"prot":"public","static":false,"definition":"UIContainer VUEngine::getUIContainer","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `UIContainer` Current game state's UI container\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getStage","qualifiedname":"VUEngine::getStage","description":"Retrieve the current stage.","location":{"header":{"uri":"source/VUEngine.h","line":204,"column":7},"body":{"uri":"source/VUEngine.c","start":271,"end":282}},"prot":"public","static":false,"definition":"Stage VUEngine::getStage","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Stage` Current game state's stage\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getPhysicalWorld","qualifiedname":"VUEngine::getPhysicalWorld","description":"Retrieve the current game state's physical world.","location":{"header":{"uri":"source/VUEngine.h","line":208,"column":15},"body":{"uri":"source/VUEngine.c","start":284,"end":296}},"prot":"public","static":false,"definition":"PhysicalWorld VUEngine::getPhysicalWorld","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `PhysicalWorld` Current game state's physical world\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getCollisionManager","qualifiedname":"VUEngine::getCollisionManager","description":"Retrieve the current game state's collision manager.","location":{"header":{"uri":"source/VUEngine.h","line":212,"column":18},"body":{"uri":"source/VUEngine.c","start":298,"end":310}},"prot":"public","static":false,"definition":"CollisionManager VUEngine::getCollisionManager","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `CollisionManager` Current game state's collision manager\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getStateMachine","qualifiedname":"VUEngine::getStateMachine","description":"Retrieve the engine's state machine.","location":{"header":{"uri":"source/VUEngine.h","line":216,"column":14},"body":{"uri":"source/VUEngine.c","start":312,"end":315}},"prot":"public","static":false,"definition":"StateMachine VUEngine::getStateMachine","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `StateMachine` Engine's state machine\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getClock","qualifiedname":"VUEngine::getClock","description":"Retrieve the engine's main clock.","location":{"header":{"uri":"source/VUEngine.h","line":220,"column":7},"body":{"uri":"source/VUEngine.c","start":317,"end":320}},"prot":"public","static":false,"definition":"Clock VUEngine::getClock","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Engine's main clock\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getLogicsClock","qualifiedname":"VUEngine::getLogicsClock","description":"Retrieve the current game state's logics clock.","location":{"header":{"uri":"source/VUEngine.h","line":224,"column":7},"body":{"uri":"source/VUEngine.c","start":322,"end":326}},"prot":"public","static":false,"definition":"Clock VUEngine::getLogicsClock","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's logics clock\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getMessagingClock","qualifiedname":"VUEngine::getMessagingClock","description":"Retrieve the current game state's messaging clock.","location":{"header":{"uri":"source/VUEngine.h","line":228,"column":7},"body":{"uri":"source/VUEngine.c","start":328,"end":332}},"prot":"public","static":false,"definition":"Clock VUEngine::getMessagingClock","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's messaging clock\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getPhysicsClock","qualifiedname":"VUEngine::getPhysicsClock","description":"Retrieve the current game state's physics clock.","location":{"header":{"uri":"source/VUEngine.h","line":232,"column":7},"body":{"uri":"source/VUEngine.c","start":334,"end":338}},"prot":"public","static":false,"definition":"Clock VUEngine::getPhysicsClock","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's physics clock\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getProcessName","qualifiedname":"VUEngine::getProcessName","description":"Retrieve the current process' name.","location":{"header":{"uri":"source/VUEngine.h","line":236,"column":6},"body":{"uri":"source/VUEngine.c","start":340,"end":343}},"prot":"public","static":false,"definition":"char * VUEngine::getProcessName","returnType":"char *","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `char` Current process' name\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"getGameFrameDuration","qualifiedname":"VUEngine::getGameFrameDuration","description":"Retrieve the duration of game frames.","location":{"header":{"uri":"source/VUEngine.h","line":240,"column":8},"body":{"uri":"source/VUEngine.c","start":345,"end":348}},"prot":"public","static":false,"definition":"uint16 VUEngine::getGameFrameDuration","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `uint16` Duration in milliseconds of game frames\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"setGameFrameRate","qualifiedname":"VUEngine::setGameFrameRate","description":"Set the target frame rate.","location":{"header":{"uri":"source/VUEngine.h","line":244,"column":6},"body":{"uri":"source/VUEngine.c","start":350,"end":359}},"prot":"public","static":false,"definition":"void VUEngine::setGameFrameRate","returnType":"void","argsstring":"(VUEngine this, uint16 gameFrameRate)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameRate`: New frame rate target\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"uint16 gameFrameRate","description":"New frame rate target"}]},{"name":"enableKeypad","qualifiedname":"VUEngine::enableKeypad","description":"Enable user input.","location":{"header":{"uri":"source/VUEngine.h","line":247,"column":6},"body":{"uri":"source/VUEngine.c","start":361,"end":364}},"prot":"public","static":false,"definition":"void VUEngine::enableKeypad","returnType":"void","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"disableKeypad","qualifiedname":"VUEngine::disableKeypad","description":"Disable user input.","location":{"header":{"uri":"source/VUEngine.h","line":250,"column":6},"body":{"uri":"source/VUEngine.c","start":366,"end":369}},"prot":"public","static":false,"definition":"void VUEngine::disableKeypad","returnType":"void","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"setSaveDataManager","qualifiedname":"VUEngine::setSaveDataManager","description":"Set the saved data manager.","location":{"header":{"uri":"source/VUEngine.h","line":254,"column":6},"body":{"uri":"source/VUEngine.c","start":371,"end":374}},"prot":"public","static":false,"definition":"void VUEngine::setSaveDataManager","returnType":"void","argsstring":"(VUEngine this, ListenerObject saveDataManager)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `saveDataManager`\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"ListenerObject saveDataManager"}]},{"name":"getSaveDataManager","qualifiedname":"VUEngine::getSaveDataManager","description":"Retrieve the saved data manager.","location":{"header":{"uri":"source/VUEngine.h","line":258,"column":16},"body":{"uri":"source/VUEngine.c","start":376,"end":379}},"prot":"public","static":false,"definition":"ListenerObject VUEngine::getSaveDataManager","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `ListenerObject` Save data manager\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"pushFrontPostProcessingEffect","qualifiedname":"VUEngine::pushFrontPostProcessingEffect","description":"Push a post processing effect at the start of the list of effects.","location":{"header":{"uri":"source/VUEngine.h","line":263,"column":6},"body":{"uri":"source/VUEngine.c","start":381,"end":384}},"prot":"public","static":false,"definition":"void VUEngine::pushFrontPostProcessingEffect","returnType":"void","argsstring":"(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"pushBackPostProcessingEffect","qualifiedname":"VUEngine::pushBackPostProcessingEffect","description":"Push a post processing effect at the end of the list of effects.","location":{"header":{"uri":"source/VUEngine.h","line":268,"column":6},"body":{"uri":"source/VUEngine.c","start":386,"end":389}},"prot":"public","static":false,"definition":"void VUEngine::pushBackPostProcessingEffect","returnType":"void","argsstring":"(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"removePostProcessingEffect","qualifiedname":"VUEngine::removePostProcessingEffect","description":"Remove a post-processing effect from the list of effects.","location":{"header":{"uri":"source/VUEngine.h","line":273,"column":6},"body":{"uri":"source/VUEngine.c","start":391,"end":394}},"prot":"public","static":false,"definition":"void VUEngine::removePostProcessingEffect","returnType":"void","argsstring":"(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"PostProcessingEffect postProcessingEffect","description":"Post-processing effect function"},{"name":"SpatialObject spatialObject","description":"Post-processing effect function's scope"}]},{"name":"frameStarted","qualifiedname":"VUEngine::frameStarted","description":"Called when the VIP reaches FRAMESTART.","location":{"header":{"uri":"source/VUEngine.h","line":277,"column":6},"body":{"uri":"source/VUEngine.c","start":396,"end":466}},"prot":"public","static":false,"definition":"void VUEngine::frameStarted","returnType":"void","argsstring":"(VUEngine this, uint16 gameFrameDuration)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameDuration`: Time in milliseconds that each game frame lasts.\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"uint16 gameFrameDuration","description":"Time in milliseconds that each game frame lasts."}]},{"name":"gameFrameStarted","qualifiedname":"VUEngine::gameFrameStarted","description":"Called when the VIP reaches GAMESTART.","location":{"header":{"uri":"source/VUEngine.h","line":281,"column":6}},"prot":"public","static":false,"definition":"void VUEngine::gameFrameStarted","returnType":"void","argsstring":"(VUEngine this, uint16 gameFrameDuration)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameDuration`: Time in milliseconds that each game frame lasts.\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"uint16 gameFrameDuration","description":"Time in milliseconds that each game frame lasts."}]},{"name":"isPaused","qualifiedname":"VUEngine::isPaused","description":"Check if the game is paused.","location":{"header":{"uri":"source/VUEngine.h","line":285,"column":6}},"prot":"public","static":false,"definition":"bool VUEngine::isPaused","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the game is paused; false otherwise\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"wait","qualifiedname":"VUEngine::wait","description":"Halt the game by the provided time.","location":{"header":{"uri":"source/VUEngine.h","line":289,"column":6},"body":{"uri":"source/VUEngine.c","start":492,"end":495}},"prot":"public","static":false,"definition":"void VUEngine::wait","returnType":"void","argsstring":"(VUEngine this, uint32 milliSeconds)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `milliSeconds`\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"},{"name":"uint32 milliSeconds"}]},{"name":"prepareGraphics","qualifiedname":"VUEngine::prepareGraphics","description":"Force the complete initialization of all graphics.","location":{"header":{"uri":"source/VUEngine.h","line":292,"column":6},"body":{"uri":"source/VUEngine.c","start":497,"end":500}},"prot":"public","static":false,"definition":"void VUEngine::prepareGraphics","returnType":"void","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]},{"name":"startProfiling","qualifiedname":"VUEngine::startProfiling","description":"Start profiling the game.","location":{"header":{"uri":"source/VUEngine.h","line":295,"column":6}},"prot":"public","static":false,"definition":"void VUEngine::startProfiling","returnType":"void","argsstring":"(VUEngine this)","paramDocs":"\n\n_@param_ `this`: VUEngine instance\n\n","parameters":[{"name":"VUEngine this","description":"VUEngine Instance"}]}],"variables":[{"name":"stateMachine","qualifiedname":"VUEngine::stateMachine","description":"Engine's main state machine","location":{"header":{"uri":"source/VUEngine.h","line":87,"column":14},"body":{"uri":"source/VUEngine.h","start":87,"end":87}},"prot":"protected","static":false},{"name":"clock","qualifiedname":"VUEngine::clock","description":"Global timer.","location":{"header":{"uri":"source/VUEngine.h","line":90,"column":7},"body":{"uri":"source/VUEngine.h","start":90,"end":90}},"prot":"protected","static":false},{"name":"clockManager","qualifiedname":"VUEngine::clockManager","description":"Clocks manager.","location":{"header":{"uri":"source/VUEngine.h","line":93,"column":14},"body":{"uri":"source/VUEngine.h","start":93,"end":93}},"prot":"protected","static":false},{"name":"keypadManager","qualifiedname":"VUEngine::keypadManager","description":"Keypad manager.","location":{"header":{"uri":"source/VUEngine.h","line":96,"column":15},"body":{"uri":"source/VUEngine.h","start":96,"end":96}},"prot":"protected","static":false},{"name":"vipManager","qualifiedname":"VUEngine::vipManager","description":"VIP manager.","location":{"header":{"uri":"source/VUEngine.h","line":99,"column":12},"body":{"uri":"source/VUEngine.h","start":99,"end":99}},"prot":"protected","static":false},{"name":"wireframeManager","qualifiedname":"VUEngine::wireframeManager","description":"`Wireframe` manager.","location":{"header":{"uri":"source/VUEngine.h","line":102,"column":18},"body":{"uri":"source/VUEngine.h","start":102,"end":102}},"prot":"protected","static":false},{"name":"spriteManager","qualifiedname":"VUEngine::spriteManager","description":"Spritems manager.","location":{"header":{"uri":"source/VUEngine.h","line":105,"column":15},"body":{"uri":"source/VUEngine.h","start":105,"end":105}},"prot":"protected","static":false},{"name":"timerManager","qualifiedname":"VUEngine::timerManager","description":"Timer manager.","location":{"header":{"uri":"source/VUEngine.h","line":108,"column":14},"body":{"uri":"source/VUEngine.h","start":108,"end":108}},"prot":"protected","static":false},{"name":"communicationManager","qualifiedname":"VUEngine::communicationManager","description":"Communication manager.","location":{"header":{"uri":"source/VUEngine.h","line":111,"column":22},"body":{"uri":"source/VUEngine.h","start":111,"end":111}},"prot":"protected","static":false},{"name":"soundManager","qualifiedname":"VUEngine::soundManager","description":"`Sound` manager.","location":{"header":{"uri":"source/VUEngine.h","line":114,"column":14},"body":{"uri":"source/VUEngine.h","start":114,"end":114}},"prot":"protected","static":false},{"name":"frameRate","qualifiedname":"VUEngine::frameRate","description":"Frame manager.","location":{"header":{"uri":"source/VUEngine.h","line":117,"column":11},"body":{"uri":"source/VUEngine.h","start":117,"end":117}},"prot":"protected","static":false},{"name":"camera","qualifiedname":"VUEngine::camera","description":"Game's camera.","location":{"header":{"uri":"source/VUEngine.h","line":120,"column":8},"body":{"uri":"source/VUEngine.h","start":120,"end":120}},"prot":"protected","static":false},{"name":"saveDataManager","qualifiedname":"VUEngine::saveDataManager","description":"Saved data manager.","location":{"header":{"uri":"source/VUEngine.h","line":123,"column":16},"body":{"uri":"source/VUEngine.h","start":123,"end":123}},"prot":"protected","static":false},{"name":"processName","qualifiedname":"VUEngine::processName","description":"Current process' name.","location":{"header":{"uri":"source/VUEngine.h","line":126,"column":6},"body":{"uri":"source/VUEngine.h","start":126,"end":126}},"prot":"protected","static":false},{"name":"currentGameCycleEnded","qualifiedname":"VUEngine::currentGameCycleEnded","description":"Flag used to measure the FPS.","location":{"header":{"uri":"source/VUEngine.h","line":129,"column":15},"body":{"uri":"source/VUEngine.h","start":129,"end":129}},"prot":"protected","static":false},{"name":"gameFrameStarted","qualifiedname":"VUEngine::gameFrameStarted","description":"Flag used to lock the frame rate.","location":{"header":{"uri":"source/VUEngine.h","line":132,"column":15},"body":{"uri":"source/VUEngine.h","start":132,"end":132}},"prot":"protected","static":false},{"name":"isPaused","qualifiedname":"VUEngine::isPaused","description":"If true, the game is paused.","location":{"header":{"uri":"source/VUEngine.h","line":135,"column":6},"body":{"uri":"source/VUEngine.h","start":135,"end":135}},"prot":"protected","static":false},{"name":"isInToolStateTransition","qualifiedname":"VUEngine::isInToolStateTransition","description":"Flag raised when entering or exiting a tool state.","location":{"header":{"uri":"source/VUEngine.h","line":138,"column":6},"body":{"uri":"source/VUEngine.h","start":138,"end":138}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"VirtualCircularList":{"__contributor":"core","name":"VirtualCircularList","base":"Object","description":"Class `VirtualCircularList`\n\nInherits from `Object`\n\nImplements a circular linked list of non fixed data type elements.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":39,"column":1},"body":{"uri":"source/base/VirtualCircularList.h","start":40,"end":151}},"methods":[{"name":"constructor","qualifiedname":"VirtualCircularList::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":52,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":40,"end":47}},"prot":"public","static":false,"definition":"void VirtualCircularList::constructor","returnType":"void","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"front","qualifiedname":"VirtualCircularList::front","description":"Retrieve the first data element of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":56,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":59,"end":62}},"prot":"public","static":false,"definition":"void * VirtualCircularList::front","returnType":"void *","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"back","qualifiedname":"VirtualCircularList::back","description":"Retrieve the last data element of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":60,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":64,"end":67}},"prot":"public","static":false,"definition":"void * VirtualCircularList::back","returnType":"void *","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"begin","qualifiedname":"VirtualCircularList::begin","description":"Retrieve the first node of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":64,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":69,"end":72}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::begin","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `VirtualNode` First node\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"end","qualifiedname":"VirtualCircularList::end","description":"Retrieve the last node of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":68,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":74,"end":77}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::end","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `VirtualNode` Last node\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"find","qualifiedname":"VirtualCircularList::find","description":"Retrieve the node that holds the provided data.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":73,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":79,"end":98}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::find","argsstring":"(VirtualCircularList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `VirtualNode` Node that holds the provided data\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"const void *const data","description":"Pointer to the data to look for"}]},{"name":"getDataIndex","qualifiedname":"VirtualCircularList::getDataIndex","description":"Retrieve the index of the node holding the provided data pointer.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":78,"column":7},"body":{"uri":"source/base/VirtualCircularList.c","start":146,"end":167}},"prot":"public","static":false,"definition":"int32 VirtualCircularList::getDataIndex","argsstring":"(VirtualCircularList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `int32` The index of the data in the linked list\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"const void *const data","description":"Pointer to the data to look for"}]},{"name":"getNode","qualifiedname":"VirtualCircularList::getNode","description":"Retrieve the node at provided position within the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":83,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":100,"end":144}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::getNode","argsstring":"(VirtualCircularList this, int32 index)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `index`: Index within the list\n\n_@return_ `VirtualNode` Node at the provided index\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"int32 index","description":"Index within the list"}]},{"name":"getNodeIndex","qualifiedname":"VirtualCircularList::getNodeIndex","description":"Retrieve the index of the provided node.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":88,"column":7},"body":{"uri":"source/base/VirtualCircularList.c","start":169,"end":191}},"prot":"public","static":false,"definition":"int32 VirtualCircularList::getNodeIndex","argsstring":"(VirtualCircularList this, VirtualNode node)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Node to look for\n\n_@return_ `int32` The index of the node in the linked list\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"VirtualNode node","description":"Node to look for"}]},{"name":"getDataAtIndex","qualifiedname":"VirtualCircularList::getDataAtIndex","description":"Retrieve the data at the provided index in the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":93,"column":6}},"prot":"public","static":false,"definition":"void * VirtualCircularList::getDataAtIndex","returnType":"void *","argsstring":"(VirtualCircularList this, int32 index)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `index`: Index within the list\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"int32 index","description":"Index within the list"}]},{"name":"getCount","qualifiedname":"VirtualCircularList::getCount","description":"Retrieve the number of nodes in the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":97,"column":7},"body":{"uri":"source/base/VirtualCircularList.c","start":193,"end":217}},"prot":"public","static":false,"definition":"int32 VirtualCircularList::getCount","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `int32` Number of nodes in the list\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"pushFront","qualifiedname":"VirtualCircularList::pushFront","description":"Add a new node to the start of the list with the provided data.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":102,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":219,"end":248}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::pushFront","argsstring":"(VirtualCircularList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"pushBack","qualifiedname":"VirtualCircularList::pushBack","description":"Add a new node to the end of the list with the provided data.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":107,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":250,"end":279}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::pushBack","argsstring":"(VirtualCircularList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"insertAfter","qualifiedname":"VirtualCircularList::insertAfter","description":"Add a new node to the list with the provided data after the provided node.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":113,"column":13},"body":{"uri":"source/base/VirtualCircularList.c","start":281,"end":319}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::insertAfter","argsstring":"(VirtualCircularList this, VirtualNode node, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"VirtualNode node","description":"Reference node"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"insertBefore","qualifiedname":"VirtualCircularList::insertBefore","description":"Add a new node to the list with the provided data before the provided node.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":119,"column":13}},"prot":"public","static":false,"definition":"VirtualNode VirtualCircularList::insertBefore","argsstring":"(VirtualCircularList this, VirtualNode node, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"VirtualNode node","description":"Reference node"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"popFront","qualifiedname":"VirtualCircularList::popFront","description":"Remove the first node of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":123,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":321,"end":350}},"prot":"public","static":false,"definition":"void * VirtualCircularList::popFront","returnType":"void *","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"popBack","qualifiedname":"VirtualCircularList::popBack","description":"Remove the last node of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":127,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":352,"end":381}},"prot":"public","static":false,"definition":"void * VirtualCircularList::popBack","returnType":"void *","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"removeNode","qualifiedname":"VirtualCircularList::removeNode","description":"Remove the provided node from the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":132,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":383,"end":426}},"prot":"public","static":false,"definition":"bool VirtualCircularList::removeNode","argsstring":"(VirtualCircularList this, VirtualNode node)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Node to remove\n\n_@return_ `bool` True if the node was successfully removed\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"VirtualNode node","description":"Node to remove"}]},{"name":"removeData","qualifiedname":"VirtualCircularList::removeData","description":"Remove the provided data from the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":137,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":428,"end":431}},"prot":"public","static":false,"definition":"bool VirtualCircularList::removeData","argsstring":"(VirtualCircularList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to remove from the list\n\n_@return_ `bool` True if the data was successfully removed\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"const void *const data","description":"Pointer to the data to remove from the list"}]},{"name":"reverse","qualifiedname":"VirtualCircularList::reverse","description":"Reverse the nodes of the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":140,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":433,"end":459}},"prot":"public","static":false,"definition":"void VirtualCircularList::reverse","returnType":"void","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"copy","qualifiedname":"VirtualCircularList::copy","description":"Copy the elements from the provided list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":144,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":461,"end":483}},"prot":"public","static":false,"definition":"void VirtualCircularList::copy","returnType":"void","argsstring":"(VirtualCircularList this, VirtualCircularList sourceList)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `sourceList`: List with the elements to copy\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"},{"name":"VirtualCircularList sourceList","description":"List with the elements to copy"}]},{"name":"clear","qualifiedname":"VirtualCircularList::clear","description":"Remove all the nodes from the list without deleting the data.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":147,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":485,"end":506}},"prot":"public","static":false,"definition":"void VirtualCircularList::clear","returnType":"void","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]},{"name":"deleteData","qualifiedname":"VirtualCircularList::deleteData","description":"Delete all the data and nodes from the list.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":150,"column":6},"body":{"uri":"source/base/VirtualCircularList.c","start":508,"end":542}},"prot":"public","static":false,"definition":"void VirtualCircularList::deleteData","returnType":"void","argsstring":"(VirtualCircularList this)","paramDocs":"\n\n_@param_ `this`: VirtualCircularList instance\n\n","parameters":[{"name":"VirtualCircularList this","description":"VirtualCircularList Instance"}]}],"variables":[{"name":"head","qualifiedname":"VirtualCircularList::head","description":"List's first node","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":44,"column":13},"body":{"uri":"source/base/VirtualCircularList.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"tail","qualifiedname":"VirtualCircularList::tail","description":"List's last element.","location":{"header":{"uri":"source/base/VirtualCircularList.h","line":47,"column":13},"body":{"uri":"source/base/VirtualCircularList.h","start":47,"end":47}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"VirtualList":{"__contributor":"core","name":"VirtualList","base":"Object","description":"Class `VirtualList`\n\nInherits from `Object`\n\nImplements a linked list of non fixed data type elements.","location":{"header":{"uri":"source/base/VirtualList.h","line":33,"column":1},"body":{"uri":"source/base/VirtualList.h","start":34,"end":148}},"methods":[{"name":"constructor","qualifiedname":"VirtualList::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/VirtualList.h","line":46,"column":6},"body":{"uri":"source/base/VirtualList.c","start":40,"end":47}},"prot":"public","static":false,"definition":"void VirtualList::constructor","returnType":"void","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"destructor","qualifiedname":"VirtualList::destructor","description":"Class' destructor.","location":{"header":{"uri":"source/base/VirtualList.h","line":49,"column":6},"body":{"uri":"source/base/VirtualList.c","start":49,"end":57}},"prot":"public","static":false,"definition":"void VirtualList::destructor","returnType":"void","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"front","qualifiedname":"VirtualList::front","description":"Retrieve the first data element of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":53,"column":6},"body":{"uri":"source/base/VirtualList.c","start":59,"end":62}},"prot":"public","static":false,"definition":"void * VirtualList::front","returnType":"void *","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"back","qualifiedname":"VirtualList::back","description":"Retrieve the last data element of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":57,"column":6},"body":{"uri":"source/base/VirtualList.c","start":64,"end":67}},"prot":"public","static":false,"definition":"void * VirtualList::back","returnType":"void *","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"begin","qualifiedname":"VirtualList::begin","description":"Retrieve the first node of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":61,"column":13},"body":{"uri":"source/base/VirtualList.c","start":69,"end":72}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::begin","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `VirtualNode` First node\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"end","qualifiedname":"VirtualList::end","description":"Retrieve the last node of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":65,"column":13},"body":{"uri":"source/base/VirtualList.c","start":74,"end":77}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::end","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `VirtualNode` Last node\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"find","qualifiedname":"VirtualList::find","description":"Retrieve the node that holds the provided data.","location":{"header":{"uri":"source/base/VirtualList.h","line":70,"column":13},"body":{"uri":"source/base/VirtualList.c","start":79,"end":86}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::find","argsstring":"(VirtualList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `VirtualNode` Node that holds the provided data\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"const void *const data","description":"Pointer to the data to look for"}]},{"name":"getDataIndex","qualifiedname":"VirtualList::getDataIndex","description":"Retrieve the index of the node holding the provided data pointer.","location":{"header":{"uri":"source/base/VirtualList.h","line":75,"column":7},"body":{"uri":"source/base/VirtualList.c","start":134,"end":142}},"prot":"public","static":false,"definition":"int32 VirtualList::getDataIndex","argsstring":"(VirtualList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `int32` The index of the data in the linked list\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"const void *const data","description":"Pointer to the data to look for"}]},{"name":"getNode","qualifiedname":"VirtualList::getNode","description":"Retrieve the node at provided position within the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":80,"column":13},"body":{"uri":"source/base/VirtualList.c","start":88,"end":132}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::getNode","argsstring":"(VirtualList this, int32 index)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `index`: Index within the list\n\n_@return_ `VirtualNode` Node at the provided index\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"int32 index","description":"Index within the list"}]},{"name":"getNodeIndex","qualifiedname":"VirtualList::getNodeIndex","description":"Retrieve the index of the provided node.","location":{"header":{"uri":"source/base/VirtualList.h","line":85,"column":7},"body":{"uri":"source/base/VirtualList.c","start":144,"end":152}},"prot":"public","static":false,"definition":"int32 VirtualList::getNodeIndex","argsstring":"(VirtualList this, VirtualNode node)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Node to look for\n\n_@return_ `int32` The index of the node in the linked list\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"VirtualNode node","description":"Node to look for"}]},{"name":"getDataAtIndex","qualifiedname":"VirtualList::getDataAtIndex","description":"Retrieve the data at the provided index in the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":90,"column":6},"body":{"uri":"source/base/VirtualList.c","start":154,"end":174}},"prot":"public","static":false,"definition":"void * VirtualList::getDataAtIndex","returnType":"void *","argsstring":"(VirtualList this, int32 index)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `index`: Index within the list\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"int32 index","description":"Index within the list"}]},{"name":"getCount","qualifiedname":"VirtualList::getCount","description":"Retrieve the number of nodes in the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":94,"column":7},"body":{"uri":"source/base/VirtualList.c","start":176,"end":194}},"prot":"public","static":false,"definition":"int32 VirtualList::getCount","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `int32` Number of nodes in the list\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"pushFront","qualifiedname":"VirtualList::pushFront","description":"Add a new node to the start of the list with the provided data.","location":{"header":{"uri":"source/base/VirtualList.h","line":99,"column":13},"body":{"uri":"source/base/VirtualList.c","start":196,"end":224}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::pushFront","argsstring":"(VirtualList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"pushBack","qualifiedname":"VirtualList::pushBack","description":"Add a new node to the end of the list with the provided data.","location":{"header":{"uri":"source/base/VirtualList.h","line":104,"column":13},"body":{"uri":"source/base/VirtualList.c","start":226,"end":254}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::pushBack","argsstring":"(VirtualList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"insertAfter","qualifiedname":"VirtualList::insertAfter","description":"Add a new node to the list with the provided data after the provided node.","location":{"header":{"uri":"source/base/VirtualList.h","line":110,"column":13},"body":{"uri":"source/base/VirtualList.c","start":256,"end":299}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::insertAfter","argsstring":"(VirtualList this, VirtualNode node, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"VirtualNode node","description":"Reference node"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"insertBefore","qualifiedname":"VirtualList::insertBefore","description":"Add a new node to the list with the provided data before the provided node.","location":{"header":{"uri":"source/base/VirtualList.h","line":116,"column":13},"body":{"uri":"source/base/VirtualList.c","start":301,"end":343}},"prot":"public","static":false,"definition":"VirtualNode VirtualList::insertBefore","argsstring":"(VirtualList this, VirtualNode node, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"VirtualNode node","description":"Reference node"},{"name":"const void *const data","description":"Pointer to the data to insert into the list"}]},{"name":"popFront","qualifiedname":"VirtualList::popFront","description":"Remove the first node of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":120,"column":6},"body":{"uri":"source/base/VirtualList.c","start":345,"end":378}},"prot":"public","static":false,"definition":"void * VirtualList::popFront","returnType":"void *","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"popBack","qualifiedname":"VirtualList::popBack","description":"Remove the last node of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":124,"column":6},"body":{"uri":"source/base/VirtualList.c","start":380,"end":413}},"prot":"public","static":false,"definition":"void * VirtualList::popBack","returnType":"void *","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"removeNode","qualifiedname":"VirtualList::removeNode","description":"Remove the provided node from the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":129,"column":6},"body":{"uri":"source/base/VirtualList.c","start":415,"end":432}},"prot":"public","static":false,"definition":"bool VirtualList::removeNode","argsstring":"(VirtualList this, VirtualNode node)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Node to remove\n\n_@return_ `bool` True if the node was successfully removed\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"VirtualNode node","description":"Node to remove"}]},{"name":"removeData","qualifiedname":"VirtualList::removeData","description":"Remove the provided data from the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":134,"column":6},"body":{"uri":"source/base/VirtualList.c","start":434,"end":437}},"prot":"public","static":false,"definition":"bool VirtualList::removeData","argsstring":"(VirtualList this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to remove from the list\n\n_@return_ `bool` True if the data was successfully removed\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"const void *const data","description":"Pointer to the data to remove from the list"}]},{"name":"reverse","qualifiedname":"VirtualList::reverse","description":"Reverse the nodes of the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":137,"column":6},"body":{"uri":"source/base/VirtualList.c","start":439,"end":469}},"prot":"public","static":false,"definition":"void VirtualList::reverse","returnType":"void","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"copy","qualifiedname":"VirtualList::copy","description":"Copy the elements from the provided list.","location":{"header":{"uri":"source/base/VirtualList.h","line":141,"column":6},"body":{"uri":"source/base/VirtualList.c","start":471,"end":490}},"prot":"public","static":false,"definition":"void VirtualList::copy","returnType":"void","argsstring":"(VirtualList this, VirtualList sourceList)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `sourceList`: List with the elements to copy\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"},{"name":"VirtualList sourceList","description":"List with the elements to copy"}]},{"name":"clear","qualifiedname":"VirtualList::clear","description":"Remove all the nodes from the list without deleting the data.","location":{"header":{"uri":"source/base/VirtualList.h","line":144,"column":6},"body":{"uri":"source/base/VirtualList.c","start":492,"end":511}},"prot":"public","static":false,"definition":"void VirtualList::clear","returnType":"void","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]},{"name":"deleteData","qualifiedname":"VirtualList::deleteData","description":"Delete all the data and nodes from the list.","location":{"header":{"uri":"source/base/VirtualList.h","line":147,"column":6},"body":{"uri":"source/base/VirtualList.c","start":513,"end":541}},"prot":"public","static":false,"definition":"void VirtualList::deleteData","returnType":"void","argsstring":"(VirtualList this)","paramDocs":"\n\n_@param_ `this`: VirtualList instance\n\n","parameters":[{"name":"VirtualList this","description":"VirtualList Instance"}]}],"variables":[{"name":"head","qualifiedname":"VirtualList::head","description":"List's first node","location":{"header":{"uri":"source/base/VirtualList.h","line":38,"column":13},"body":{"uri":"source/base/VirtualList.h","start":38,"end":38}},"prot":"protected","static":false},{"name":"tail","qualifiedname":"VirtualList::tail","description":"List's last element.","location":{"header":{"uri":"source/base/VirtualList.h","line":41,"column":13},"body":{"uri":"source/base/VirtualList.h","start":41,"end":41}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"VirtualNode":{"__contributor":"core","name":"VirtualNode","base":"Object","description":"Class `VirtualNode`\n\nInherits from `Object`\n\nImplements an element of linked lists.","location":{"header":{"uri":"source/base/VirtualNode.h","line":32,"column":1},"body":{"uri":"source/base/VirtualNode.h","start":33,"end":66}},"methods":[{"name":"constructor","qualifiedname":"VirtualNode::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/VirtualNode.h","line":49,"column":6},"body":{"uri":"source/base/VirtualNode.c","start":23,"end":31}},"prot":"public","static":false,"definition":"void VirtualNode::constructor","returnType":"void","argsstring":"(VirtualNode this, const void *const data)","paramDocs":"\n\n_@param_ `this`: VirtualNode instance\n\n_@param_ `data`: Pointer to the data hold by this node\n\n","parameters":[{"name":"VirtualNode this","description":"VirtualNode Instance"},{"name":"const void *const data","description":"Pointer to the data hold by this node"}]},{"name":"getData","qualifiedname":"VirtualNode::getData","description":"Retrieve the pointer to the data.","location":{"header":{"uri":"source/base/VirtualNode.h","line":53,"column":6},"body":{"uri":"source/base/VirtualNode.c","start":40,"end":43}},"prot":"public","static":false,"definition":"void * VirtualNode::getData","returnType":"void *","argsstring":"(VirtualNode this)","paramDocs":"\n\n_@param_ `this`: VirtualNode instance\n\n","parameters":[{"name":"VirtualNode this","description":"VirtualNode Instance"}]},{"name":"getNext","qualifiedname":"VirtualNode::getNext","description":"Retrieve the next node in the linked list.","location":{"header":{"uri":"source/base/VirtualNode.h","line":57,"column":13},"body":{"uri":"source/base/VirtualNode.c","start":45,"end":48}},"prot":"public","static":false,"definition":"VirtualNode VirtualNode::getNext","argsstring":"(VirtualNode this)","paramDocs":"\n\n_@param_ `this`: VirtualNode instance\n\n_@return_ `VirtualNode` Next node in the linked list\n\n","parameters":[{"name":"VirtualNode this","description":"VirtualNode Instance"}]},{"name":"getPrevious","qualifiedname":"VirtualNode::getPrevious","description":"Retrieve the previous node in the linked list.","location":{"header":{"uri":"source/base/VirtualNode.h","line":61,"column":13},"body":{"uri":"source/base/VirtualNode.c","start":50,"end":53}},"prot":"public","static":false,"definition":"VirtualNode VirtualNode::getPrevious","argsstring":"(VirtualNode this)","paramDocs":"\n\n_@param_ `this`: VirtualNode instance\n\n_@return_ `VirtualNode` Previous node in the linked list\n\n","parameters":[{"name":"VirtualNode this","description":"VirtualNode Instance"}]},{"name":"swapData","qualifiedname":"VirtualNode::swapData","description":"Swap the data with another node","location":{"header":{"uri":"source/base/VirtualNode.h","line":65,"column":6},"body":{"uri":"source/base/VirtualNode.c","start":55,"end":65}},"prot":"public","static":false,"definition":"void VirtualNode::swapData","returnType":"void","argsstring":"(VirtualNode this, VirtualNode node)","paramDocs":"\n\n_@param_ `this`: VirtualNode instance\n\n_@param_ `node`: Node to swap data with\n\n","parameters":[{"name":"VirtualNode this","description":"VirtualNode Instance"},{"name":"VirtualNode node","description":"Node to swap data with"}]}],"variables":[{"name":"next","qualifiedname":"VirtualNode::next","description":"Pointer to the next node in the linked list","location":{"header":{"uri":"source/base/VirtualNode.h","line":37,"column":13},"body":{"uri":"source/base/VirtualNode.h","start":37,"end":37}},"prot":"protected","static":false},{"name":"previous","qualifiedname":"VirtualNode::previous","description":"Pointer to the previous node in the linked list.","location":{"header":{"uri":"source/base/VirtualNode.h","line":40,"column":13},"body":{"uri":"source/base/VirtualNode.h","start":40,"end":40}},"prot":"protected","static":false},{"name":"data","qualifiedname":"VirtualNode::data","description":"Pointer to the data.","location":{"header":{"uri":"source/base/VirtualNode.h","line":43,"column":6},"body":{"uri":"source/base/VirtualNode.h","start":43,"end":43}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"VisualComponent":{"__contributor":"core","name":"VisualComponent","base":"Component","description":"Class `VirtualNode`\n\nInherits from `Object`\n\nImplements an element of linked lists.","location":{"header":{"uri":"source/base/VisualComponent.h","line":39,"column":9},"body":{"uri":"source/base/VisualComponent.h","start":40,"end":72}},"methods":[{"name":"constructor","qualifiedname":"VisualComponent::constructor","description":"Class' constructor","location":{"header":{"uri":"source/base/VisualComponent.h","line":57,"column":6},"body":{"uri":"source/base/VisualComponent.c","start":26,"end":32}},"prot":"public","static":false,"definition":"void VisualComponent::constructor","returnType":"void","argsstring":"(VisualComponent this, SpatialObject owner, const VisualComponentSpec *visualComponentSpec)","paramDocs":"\n\n_@param_ `this`: VisualComponent instance\n\n_@param_ `owner`: `SpatialObject` that this component attaches to\n\n_@param_ `visualComponentSpec`: Pointer to the spec that defines how to initialize the visual component\n\n","parameters":[{"name":"VisualComponent this","description":"VisualComponent Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` that this component attaches to"},{"name":"const VisualComponentSpec *visualComponentSpec","description":"Pointer to the spec that defines how to initialize the visual component"}]},{"name":"show","qualifiedname":"VisualComponent::show","description":"Make the visual component visible.","location":{"header":{"uri":"source/base/VisualComponent.h","line":60,"column":6}},"prot":"public","static":false,"definition":"void VisualComponent::show","returnType":"void","argsstring":"(VisualComponent this)","paramDocs":"\n\n_@param_ `this`: VisualComponent instance\n\n","parameters":[{"name":"VisualComponent this","description":"VisualComponent Instance"}]},{"name":"hide","qualifiedname":"VisualComponent::hide","description":"Make the visual component invisible.","location":{"header":{"uri":"source/base/VisualComponent.h","line":63,"column":6},"body":{"uri":"source/base/VisualComponent.c","start":46,"end":50}},"prot":"public","static":false,"definition":"void VisualComponent::hide","returnType":"void","argsstring":"(VisualComponent this)","paramDocs":"\n\n_@param_ `this`: VisualComponent instance\n\n","parameters":[{"name":"VisualComponent this","description":"VisualComponent Instance"}]},{"name":"getTransparent","qualifiedname":"VisualComponent::getTransparent","description":"Retrieve the transparency mode","location":{"header":{"uri":"source/base/VisualComponent.h","line":67,"column":7},"body":{"uri":"source/base/VisualComponent.c","start":52,"end":55}},"prot":"public","static":false,"definition":"uint8 VisualComponent::getTransparent","argsstring":"(VisualComponent this)","paramDocs":"\n\n_@param_ `this`: VisualComponent instance\n\n_@return_ `uint8` Transparecy effect\n\n","parameters":[{"name":"VisualComponent this","description":"VisualComponent Instance"}]},{"name":"setTransparency","qualifiedname":"VisualComponent::setTransparency","description":"Set the transparency mode","location":{"header":{"uri":"source/base/VisualComponent.h","line":71,"column":6},"body":{"uri":"source/base/VisualComponent.c","start":57,"end":60}},"prot":"public","static":false,"definition":"void VisualComponent::setTransparency","returnType":"void","argsstring":"(VisualComponent this, uint8 transparency)","paramDocs":"\n\n_@param_ `this`: VisualComponent instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n","parameters":[{"name":"VisualComponent this","description":"VisualComponent Instance"},{"name":"uint8 transparency","description":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]}],"variables":[{"name":"transparency","qualifiedname":"VisualComponent::transparency","description":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)","location":{"header":{"uri":"source/base/VisualComponent.h","line":44,"column":7},"body":{"uri":"source/base/VisualComponent.h","start":44,"end":44}},"prot":"protected","static":false},{"name":"show","qualifiedname":"VisualComponent::show","description":"Show state flag (__HIDE, __SHOW_NEXT_FRAME, __SHOW)","location":{"header":{"uri":"source/base/VisualComponent.h","line":47,"column":7},"body":{"uri":"source/base/VisualComponent.h","start":47,"end":47}},"prot":"protected","static":false},{"name":"rendered","qualifiedname":"VisualComponent::rendered","description":"Rendering status flag.","location":{"header":{"uri":"source/base/VisualComponent.h","line":50,"column":6},"body":{"uri":"source/base/VisualComponent.h","start":50,"end":50}},"prot":"protected","static":false}],"enums":[],"typedefs":[]},"Wireframe":{"__contributor":"core","name":"Wireframe","base":"VisualComponent","description":"Class `Wireframe`\n\nInherits from `VisualComponent`\n\nDraws 3D shapes to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":77,"column":9},"body":{"uri":"source/graphics/3d/Wireframe.h","start":78,"end":131}},"methods":[{"name":"constructor","qualifiedname":"Wireframe::constructor","description":"Class' constructor","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":101,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.c","start":37,"end":61}},"prot":"public","static":false,"definition":"void Wireframe::constructor","returnType":"void","argsstring":"(Wireframe this, SpatialObject owner, const WireframeSpec *wireframeSpec)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `owner`: `SpatialObject` to which the wireframe attaches to\n\n_@param_ `wireframeSpec`: Specification that determines how to configure the wireframe\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"},{"name":"SpatialObject owner","description":"`SpatialObject` to which the wireframe attaches to"},{"name":"const WireframeSpec *wireframeSpec","description":"Specification that determines how to configure the wireframe"}]},{"name":"setDisplacement","qualifiedname":"Wireframe::setDisplacement","description":"Set the displacement relative to the owner's spatial position","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":105,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.c","start":72,"end":75}},"prot":"public","static":false,"definition":"void Wireframe::setDisplacement","returnType":"void","argsstring":"(Wireframe this, Vector3D displacement)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `displacement`: Displacement relative to the owner's spatial position\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"},{"name":"Vector3D displacement","description":"Displacement relative to the owner's spatial position"}]},{"name":"isVisible","qualifiedname":"Wireframe::isVisible","description":"Check if the wireframe is visible.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":109,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.c","start":77,"end":80}},"prot":"public","static":false,"definition":"bool Wireframe::isVisible","argsstring":"(Wireframe this)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `bool` True if the wireframe is visible; false otherwise\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"}]},{"name":"prepareForRender","qualifiedname":"Wireframe::prepareForRender","description":"Configure the wireframe to be drawn.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":114,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.c","start":82,"end":181}},"prot":"public","static":false,"definition":"bool Wireframe::prepareForRender","argsstring":"(Wireframe this, Vector3D *relativePosition)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `relativePosition`\n\n_@return_ `bool` True if the wireframe is visible within the camera's frustum; false otherwise\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"},{"name":"Vector3D *relativePosition"}]},{"name":"getRightBox","qualifiedname":"Wireframe::getRightBox","description":"Retrieve the mesh's bounding box.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":118,"column":18},"body":{"uri":"source/graphics/3d/Wireframe.c","start":183,"end":186}},"prot":"public","static":false,"definition":"RightBox Wireframe::getRightBox","argsstring":"(Wireframe this)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `RightBox` Bounding box of the mesh\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"}]},{"name":"getVertices","qualifiedname":"Wireframe::getVertices","description":"Retrieve the list of vertices that compose the mesh.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":122,"column":21},"body":{"uri":"source/graphics/3d/Wireframe.c","start":188,"end":191}},"prot":"public","static":false,"definition":"VirtualList Wireframe::getVertices","argsstring":"(Wireframe this)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `VirtualList` Linked list of vertices\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"}]},{"name":"render","qualifiedname":"Wireframe::render","description":"Prepare the wireframe for drawing.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":126,"column":14},"body":{"uri":"source/graphics/3d/Wireframe.c","start":193,"end":194}},"prot":"public","static":false,"definition":"void Wireframe::render","returnType":"void","argsstring":"(Wireframe this, Vector3D relativePosition)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"},{"name":"Vector3D relativePosition","description":"Position relative to the camera's"}]},{"name":"draw","qualifiedname":"Wireframe::draw","description":"Draw the wireframe to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":130,"column":14}},"prot":"public","static":false,"definition":"virtual bool Wireframe::draw","argsstring":"(Wireframe this)","paramDocs":"\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `virtual` True if at least one pixel is drawn; false otherwise\n\n","parameters":[{"name":"Wireframe this","description":"Wireframe Instance"}]}],"variables":[{"name":"displacement","qualifiedname":"Wireframe::displacement","description":"Displacement relative to the owner's spatial position.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":80,"column":10},"body":{"uri":"source/graphics/3d/Wireframe.h","start":80,"end":80}},"prot":"private","static":false},{"name":"squaredDistanceToCamera","qualifiedname":"Wireframe::squaredDistanceToCamera","description":"`Wireframe`'s squared distance to the camera's position.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":83,"column":13},"body":{"uri":"source/graphics/3d/Wireframe.h","start":83,"end":83}},"prot":"private","static":false},{"name":"drawn","qualifiedname":"Wireframe::drawn","description":"Flag that indicates that the wireframe has been drawn.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":86,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.h","start":86,"end":86}},"prot":"private","static":false},{"name":"interlaced","qualifiedname":"Wireframe::interlaced","description":"Flag to render the wireframe in interlaced mode.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":89,"column":6},"body":{"uri":"source/graphics/3d/Wireframe.h","start":89,"end":89}},"prot":"private","static":false},{"name":"color","qualifiedname":"Wireframe::color","description":"Color for the wireframe.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":92,"column":7},"body":{"uri":"source/graphics/3d/Wireframe.h","start":92,"end":92}},"prot":"private","static":false},{"name":"bufferIndex","qualifiedname":"Wireframe::bufferIndex","description":"Index of the last frame buffer used in interlaced mode.","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":95,"column":7},"body":{"uri":"source/graphics/3d/Wireframe.h","start":95,"end":95}},"prot":"private","static":false}],"enums":[],"typedefs":[{"name":"WireframeROMSpec","qualifiedname":"Wireframe::WireframeROMSpec","description":"A `Wireframe` spec that is stored in ROM","location":{"header":{"uri":"source/graphics/3d/Wireframe.h","line":63,"column":29},"body":{"uri":"source/graphics/3d/Wireframe.h","start":63,"end":63}},"prot":"public","static":false}]},"WireframeManager":{"__contributor":"core","name":"WireframeManager","base":"ListenerObject","description":"Class `WireframeManager`\n\nInherits from `ListenerObject`\n\nManages instances of `Wireframe`.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":46,"column":11},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":47,"end":122}},"methods":[{"name":"getInstance","qualifiedname":"WireframeManager::getInstance","description":"Method to retrieve the singleton instance","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":71,"column":25}},"prot":"public","static":true,"definition":"static WireframeManager WireframeManager::getInstance","argsstring":"()","paramDocs":"\n\n_@return_ `static` `WireframeManager` singleton\n\n","parameters":[]},{"name":"reset","qualifiedname":"WireframeManager::reset","description":"Reset the manager's state.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":74,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":50,"end":62}},"prot":"public","static":false,"definition":"void WireframeManager::reset","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"enable","qualifiedname":"WireframeManager::enable","description":"Enable wireframe rendering and drawing.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":77,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":64,"end":67}},"prot":"public","static":false,"definition":"void WireframeManager::enable","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"disable","qualifiedname":"WireframeManager::disable","description":"Disable wireframe rendering and drawing.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":80,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":69,"end":72}},"prot":"public","static":false,"definition":"void WireframeManager::disable","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"createWireframe","qualifiedname":"WireframeManager::createWireframe","description":"Create a wireframe with the provided spec.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":86,"column":11},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":74,"end":91}},"prot":"public","static":false,"definition":"Wireframe WireframeManager::createWireframe","argsstring":"(WireframeManager this, const WireframeSpec *wireframeSpec, SpatialObject owner)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframeSpec`: Spec to use to create the wireframe\n\n_@param_ `owner`: `Object` to which the wireframe will attach to\n\n_@return_ `Wireframe` Created wireframe\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"},{"name":"const WireframeSpec *wireframeSpec","description":"Spec to use to create the wireframe"},{"name":"SpatialObject owner","description":"`Object` to which the wireframe will attach to"}]},{"name":"destroyWireframe","qualifiedname":"WireframeManager::destroyWireframe","description":"Destroy the provided wireframe.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":90,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":93,"end":112}},"prot":"public","static":false,"definition":"void WireframeManager::destroyWireframe","returnType":"void","argsstring":"(WireframeManager this, Wireframe wireframe)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to destroy\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"},{"name":"Wireframe wireframe","description":"`Wireframe` to destroy"}]},{"name":"registerWireframe","qualifiedname":"WireframeManager::registerWireframe","description":"Register a wireframe to be managed","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":95,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":114,"end":133}},"prot":"public","static":false,"definition":"bool WireframeManager::registerWireframe","argsstring":"(WireframeManager this, Wireframe wireframe)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to be managed\n\n_@return_ `bool` True if the wireframe was successfully registered; false otherwise\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"},{"name":"Wireframe wireframe","description":"`Wireframe` to be managed"}]},{"name":"unregisterWireframe","qualifiedname":"WireframeManager::unregisterWireframe","description":"Unregister a wireframe to be managed","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":100,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":135,"end":145}},"prot":"public","static":false,"definition":"bool WireframeManager::unregisterWireframe","argsstring":"(WireframeManager this, Wireframe wireframe)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to no longer manage\n\n_@return_ `bool` True if the wireframe was successfully unregistered; false otherwise\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"},{"name":"Wireframe wireframe","description":"`Wireframe` to no longer manage"}]},{"name":"render","qualifiedname":"WireframeManager::render","description":"Prepare wireframe's graphical data for drawing.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":103,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":147,"end":204}},"prot":"public","static":false,"definition":"void WireframeManager::render","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"draw","qualifiedname":"WireframeManager::draw","description":"Draw wireframes to the frame buffers.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":106,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":206,"end":244}},"prot":"public","static":false,"definition":"void WireframeManager::draw","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"showWireframes","qualifiedname":"WireframeManager::showWireframes","description":"Show all wireframes.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":109,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":246,"end":254}},"prot":"public","static":false,"definition":"void WireframeManager::showWireframes","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"hideWireframes","qualifiedname":"WireframeManager::hideWireframes","description":"Hide all wireframes.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":112,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":256,"end":264}},"prot":"public","static":false,"definition":"void WireframeManager::hideWireframes","returnType":"void","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"hasWireframes","qualifiedname":"WireframeManager::hasWireframes","description":"Check if there are any registered wireframes.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":116,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":266,"end":269}},"prot":"public","static":false,"definition":"bool WireframeManager::hasWireframes","argsstring":"(WireframeManager this)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@return_ `bool` True if there are any registered wireframes; false otherwise\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"}]},{"name":"print","qualifiedname":"WireframeManager::print","description":"Print the manager's state.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":121,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.c","start":272,"end":282}},"prot":"public","static":false,"definition":"void WireframeManager::print","returnType":"void","argsstring":"(WireframeManager this, int32 x, int32 y)","paramDocs":"\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n","parameters":[{"name":"WireframeManager this","description":"WireframeManager Instance"},{"name":"int32 x","description":"Screen x coordinate where to print"},{"name":"int32 y","description":"Screen y coordinate where to print"}]}],"variables":[{"name":"stopDrawing","qualifiedname":"WireframeManager::stopDrawing","description":"Flag used to break the drawing due to high frame time","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":51,"column":15},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":51,"end":51}},"prot":"protected","static":false},{"name":"evenFrame","qualifiedname":"WireframeManager::evenFrame","description":"Flag to distinguish between even and odd game frames.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":54,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":54,"end":54}},"prot":"protected","static":false},{"name":"disabled","qualifiedname":"WireframeManager::disabled","description":"Disabled wireframe drawing.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":57,"column":6},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":57,"end":57}},"prot":"protected","static":false},{"name":"renderedWireframes","qualifiedname":"WireframeManager::renderedWireframes","description":"Number of rendered wireframes during the last game cycle.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":60,"column":7},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":60,"end":60}},"prot":"protected","static":false},{"name":"drawnWireframes","qualifiedname":"WireframeManager::drawnWireframes","description":"Number of drawing wireframes during the last game cycle.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":63,"column":7},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":63,"end":63}},"prot":"protected","static":false},{"name":"wireframes","qualifiedname":"WireframeManager::wireframes","description":"List of wireframes to render and draw.","location":{"header":{"uri":"source/graphics/3d/WireframeManager.h","line":66,"column":13},"body":{"uri":"source/graphics/3d/WireframeManager.h","start":66,"end":66}},"prot":"protected","static":false}],"enums":[],"typedefs":[]}}}