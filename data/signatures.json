{"Actor::constructor":{"signature":"void Actor::constructor(Actor this, const ActorSpec *actorSpec, int16 internalId, const char *const name)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const ActorSpec *actorSpec","documentation":"Specification that determines how to configure the actor"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"},{"label":"const char *const name","documentation":"Name to assign to the new instance"}]},"Actor::handleMessage":{"signature":"bool Actor::handleMessage(Actor this, Telegram telegram)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"Telegram telegram","documentation":"`Telegram` to process"}]},"Actor::getVelocity":{"signature":"const Vector3D * Actor::getVelocity(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::getSpeed":{"signature":"fixed_t Actor::getSpeed(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::getBounciness":{"signature":"fixed_t Actor::getBounciness(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::setPosition":{"signature":"void Actor::setPosition(Actor this, const Vector3D *position)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const Vector3D *position","documentation":"3D vector defining the object's new position"}]},"Actor::setDirection":{"signature":"void Actor::setDirection(Actor this, const Vector3D *direction)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const Vector3D *direction","documentation":"Pointer to a direction vector"}]},"Actor::getDirection":{"signature":"const Vector3D * Actor::getDirection(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::isSubjectToGravity":{"signature":"bool Actor::isSubjectToGravity(Actor this, Vector3D gravity)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"Vector3D gravity"}]},"Actor::collisionStarts":{"signature":"bool Actor::collisionStarts(Actor this, const CollisionInformation *collisionInformation)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"Actor::collisionEnds":{"signature":"void Actor::collisionEnds(Actor this, const CollisionInformation *collisionInformation)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"Actor::setLocalPosition":{"signature":"void Actor::setLocalPosition(Actor this, const Vector3D *position)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const Vector3D *position","documentation":"New local position"}]},"Actor::changeEnvironment":{"signature":"void Actor::changeEnvironment(Actor this, Transformation *environmentTransform)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"Transformation *environmentTransform","documentation":"New reference environment for the local transformation"}]},"Actor::removeComponents":{"signature":"void Actor::removeComponents(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::update":{"signature":"void Actor::update(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::createStateMachine":{"signature":"void Actor::createStateMachine(Actor this, State state)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"State state","documentation":"`State` that the state machine must enter"}]},"Actor::getBody":{"signature":"Body Actor::getBody(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::isMoving":{"signature":"bool Actor::isMoving(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::stopAllMovement":{"signature":"void Actor::stopAllMovement(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::stopMovement":{"signature":"void Actor::stopMovement(Actor this, uint16 axis)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"uint16 axis","documentation":"Axis on which to stop the movement of the actor's body"}]},"Actor::getMaximumSpeed":{"signature":"fixed_t Actor::getMaximumSpeed(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::setVelocity":{"signature":"bool Actor::setVelocity(Actor this, const Vector3D *velocity, bool checkIfCanMove)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const Vector3D *velocity"},{"label":"bool checkIfCanMove","documentation":"If true, the actor checks that none of its colliders will enter a collision if it were to move in the direction of the provided velocity"}]},"Actor::applyForce":{"signature":"bool Actor::applyForce(Actor this, const Vector3D *force, bool checkIfCanMove)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"const Vector3D *force","documentation":"Force to be applied"},{"label":"bool checkIfCanMove","documentation":"If true, the actor checks that none of its colliders will"}]},"Actor::canMoveTowards":{"signature":"bool Actor::canMoveTowards(Actor this, Vector3D direction)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"Vector3D direction","documentation":"Direction vector to check"}]},"Actor::isBouncy":{"signature":"bool Actor::isBouncy(Actor this)","parameters":[{"label":"Actor this","documentation":"Actor Instance"}]},"Actor::isSensibleToCollidingObjectBouncinessOnCollision":{"signature":"bool Actor::isSensibleToCollidingObjectBouncinessOnCollision(Actor this, SpatialObject collidingObject)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"SpatialObject collidingObject"}]},"Actor::isSensibleToCollidingObjectFrictionOnCollision":{"signature":"bool Actor::isSensibleToCollidingObjectFrictionOnCollision(Actor this, SpatialObject collidingObject)","parameters":[{"label":"Actor this","documentation":"Actor Instance"},{"label":"SpatialObject collidingObject"}]},"Affine::transform":{"signature":"static int16 Affine::transform(Affine this, uint32 param, int16 paramTableRow, fixed_t targetHalfWidth, fixed_t targetHalfHeight, fix13_3 mx, fix13_3 my, fixed_t halfWidth, fixed_t halfHeight, const PixelScale *scale, const Rotation *rotation)","parameters":[{"label":"Affine this","documentation":"Affine Instance"},{"label":"uint32 param","documentation":"Displacement within param tables space"},{"label":"int16 paramTableRow","documentation":"Displacement within the specified param table"},{"label":"fixed_t targetHalfWidth","documentation":"Image's target half width"},{"label":"fixed_t targetHalfHeight","documentation":"Image's target half height"},{"label":"fix13_3 mx","documentation":"Image's x coordinate"},{"label":"fix13_3 my","documentation":"Image's y coordinate"},{"label":"fixed_t halfWidth","documentation":"Image's half width"},{"label":"fixed_t halfHeight","documentation":"Image's half height"},{"label":"const PixelScale *scale","documentation":"Target scale"},{"label":"const Rotation *rotation","documentation":"Target rotation"}]},"AnimatedEntity::constructor":{"signature":"void AnimatedEntity::constructor(AnimatedEntity this, AnimatedEntitySpec *animatedEntitySpec, int16 internalId, const char *const name)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"AnimatedEntitySpec *animatedEntitySpec","documentation":"Specification that determines how to configure the actor"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"},{"label":"const char *const name","documentation":"Name to assign to the new instance"}]},"AnimatedEntity::ready":{"signature":"void AnimatedEntity::ready(AnimatedEntity this, bool recursive)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"bool recursive","documentation":"If true, the ready call is propagated to its children, grand children, etc."}]},"AnimatedEntity::resume":{"signature":"void AnimatedEntity::resume(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::handlePropagatedString":{"signature":"bool AnimatedEntity::handlePropagatedString(AnimatedEntity this, const char *string)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"const char *string","documentation":"Propagated string"}]},"AnimatedEntity::playAnimation":{"signature":"bool AnimatedEntity::playAnimation(AnimatedEntity this, const char *animationName)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"const char *animationName","documentation":"Name of the animation to play"}]},"AnimatedEntity::pauseAnimation":{"signature":"void AnimatedEntity::pauseAnimation(AnimatedEntity this, bool pause)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"bool pause","documentation":"Flag that signals if the animation must be paused or unpaused"}]},"AnimatedEntity::stopAnimation":{"signature":"void AnimatedEntity::stopAnimation(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::isPlaying":{"signature":"bool AnimatedEntity::isPlaying(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::isPlayingAnimation":{"signature":"bool AnimatedEntity::isPlayingAnimation(AnimatedEntity this, char *animationName)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"char *animationName","documentation":"Name of the animation to check"}]},"AnimatedEntity::getPlayingAnimationName":{"signature":"const char * AnimatedEntity::getPlayingAnimationName(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::setActualFrame":{"signature":"void AnimatedEntity::setActualFrame(AnimatedEntity this, int16 frame)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"},{"label":"int16 frame"}]},"AnimatedEntity::nextFrame":{"signature":"void AnimatedEntity::nextFrame(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::previousFrame":{"signature":"void AnimatedEntity::previousFrame(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::getActualFrame":{"signature":"int16 AnimatedEntity::getActualFrame(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimatedEntity::getNumberOfFrames":{"signature":"int32 AnimatedEntity::getNumberOfFrames(AnimatedEntity this)","parameters":[{"label":"AnimatedEntity this","documentation":"AnimatedEntity Instance"}]},"AnimationController::constructor":{"signature":"void AnimationController::constructor(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::play":{"signature":"bool AnimationController::play(AnimationController this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"const AnimationFunction *animationFunctions[]"},{"label":"const char *animationName","documentation":"Name of the animation to play"},{"label":"ListenerObject scope","documentation":"`Object` that will be notified of playback events"}]},"AnimationController::playAnimationFunction":{"signature":"void AnimationController::playAnimationFunction(AnimationController this, const AnimationFunction *animationFunction, ListenerObject scope)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"const AnimationFunction *animationFunction","documentation":"Animation function to play"},{"label":"ListenerObject scope","documentation":"`Object` that will be notified of playback events"}]},"AnimationController::replay":{"signature":"bool AnimationController::replay(AnimationController this, const AnimationFunction *animationFunctions[])","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"const AnimationFunction *animationFunctions[]","documentation":"Array of animation functions to look for the animation function to replay"}]},"AnimationController::pause":{"signature":"void AnimationController::pause(AnimationController this, bool pause)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"bool pause","documentation":"Flag that signals if the animation must be paused or unpaused"}]},"AnimationController::stop":{"signature":"void AnimationController::stop(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::updateAnimation":{"signature":"bool AnimationController::updateAnimation(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::isPlaying":{"signature":"bool AnimationController::isPlaying(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::isPlayingFunction":{"signature":"bool AnimationController::isPlayingFunction(AnimationController this, const char *animationName)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"const char *animationName","documentation":"Name of the animation to check"}]},"AnimationController::nextFrame":{"signature":"void AnimationController::nextFrame(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::previousFrame":{"signature":"void AnimationController::previousFrame(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::setActualFrame":{"signature":"bool AnimationController::setActualFrame(AnimationController this, int16 actualFrame)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"int16 actualFrame","documentation":"The frame of the playing animation to skip to"}]},"AnimationController::getActualFrame":{"signature":"int16 AnimationController::getActualFrame(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::getActualFrameIndex":{"signature":"int16 AnimationController::getActualFrameIndex(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::setFrameDuration":{"signature":"void AnimationController::setFrameDuration(AnimationController this, uint8 frameDuration)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"uint8 frameDuration","documentation":"Duration in game cycles for each frame of animation"}]},"AnimationController::getFrameDuration":{"signature":"uint8 AnimationController::getFrameDuration(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::setFrameDurationDecrement":{"signature":"void AnimationController::setFrameDurationDecrement(AnimationController this, uint8 frameCycleDecrement)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"uint8 frameCycleDecrement","documentation":"Decrement to frameDuration in each game cycle for each frame of animation"}]},"AnimationController::getFrameDurationDecrement":{"signature":"uint8 AnimationController::getFrameDurationDecrement(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::setAnimationCoordinator":{"signature":"void AnimationController::setAnimationCoordinator(AnimationController this, AnimationCoordinator animationCoordinator)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"},{"label":"AnimationCoordinator animationCoordinator","documentation":"Animation coordinator for this animation controller"}]},"AnimationController::getAnimationCoordinator":{"signature":"AnimationCoordinator AnimationController::getAnimationCoordinator(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::getPlayingAnimationFunction":{"signature":"const AnimationFunction * AnimationController::getPlayingAnimationFunction(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::getPlayingAnimationName":{"signature":"const char * AnimationController::getPlayingAnimationName(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationController::getNumberOfFrames":{"signature":"int32 AnimationController::getNumberOfFrames(AnimationController this)","parameters":[{"label":"AnimationController this","documentation":"AnimationController Instance"}]},"AnimationCoordinator::constructor":{"signature":"void AnimationCoordinator::constructor(AnimationCoordinator this, const CharSetSpec *charSetSpec, ListenerObject scope)","parameters":[{"label":"AnimationCoordinator this","documentation":"AnimationCoordinator Instance"},{"label":"const CharSetSpec *charSetSpec","documentation":"Spec shared by the animation controllers to coordinate"},{"label":"ListenerObject scope","documentation":"`Object` that might need to listen for playback related events"}]},"AnimationCoordinator::playAnimation":{"signature":"bool AnimationCoordinator::playAnimation(AnimationCoordinator this, AnimationController animationController, const AnimationFunction **animationFunctions, const char *animationName)","parameters":[{"label":"AnimationCoordinator this","documentation":"AnimationCoordinator Instance"},{"label":"AnimationController animationController","documentation":"Animation controller on which to play the animation"},{"label":"const AnimationFunction **animationFunctions","documentation":"Array of animation functions in which to look for the animation to play"},{"label":"const char *animationName","documentation":"Name of the animation to play"}]},"AnimationCoordinator::addAnimationController":{"signature":"void AnimationCoordinator::addAnimationController(AnimationCoordinator this, AnimationController animationController)","parameters":[{"label":"AnimationCoordinator this","documentation":"AnimationCoordinator Instance"},{"label":"AnimationController animationController","documentation":"Animation controller to coordinate"}]},"AnimationCoordinator::removeAnimationController":{"signature":"void AnimationCoordinator::removeAnimationController(AnimationCoordinator this, AnimationController animationController)","parameters":[{"label":"AnimationCoordinator this","documentation":"AnimationCoordinator Instance"},{"label":"AnimationController animationController","documentation":"Coordinated animation controller to remove"}]},"AnimationCoordinator::getCharSetSpec":{"signature":"const CharSetSpec * AnimationCoordinator::getCharSetSpec(AnimationCoordinator this)","parameters":[{"label":"AnimationCoordinator this","documentation":"AnimationCoordinator Instance"}]},"AnimationCoordinatorFactory::reset":{"signature":"void AnimationCoordinatorFactory::reset(AnimationCoordinatorFactory this)","parameters":[{"label":"AnimationCoordinatorFactory this","documentation":"AnimationCoordinatorFactory Instance"}]},"AnimationCoordinatorFactory::getCoordinator":{"signature":"AnimationCoordinator AnimationCoordinatorFactory::getCoordinator(AnimationCoordinatorFactory this, AnimationController animationController, ListenerObject scope, const CharSetSpec *charSetSpec)","parameters":[{"label":"AnimationCoordinatorFactory this","documentation":"AnimationCoordinatorFactory Instance"},{"label":"AnimationController animationController","documentation":"Animation controller to potentially coordinate"},{"label":"ListenerObject scope","documentation":"`Object` that might need to listen for playback related events"},{"label":"const CharSetSpec *charSetSpec"}]},"AnimationInspector::update":{"signature":"void AnimationInspector::update(AnimationInspector this)","parameters":[{"label":"AnimationInspector this","documentation":"AnimationInspector Instance"}]},"AnimationInspector::show":{"signature":"void AnimationInspector::show(AnimationInspector this)","parameters":[{"label":"AnimationInspector this","documentation":"AnimationInspector Instance"}]},"AnimationInspector::hide":{"signature":"void AnimationInspector::hide(AnimationInspector this)","parameters":[{"label":"AnimationInspector this","documentation":"AnimationInspector Instance"}]},"AnimationInspector::processUserInput":{"signature":"void AnimationInspector::processUserInput(AnimationInspector this, uint16 pressedKey)","parameters":[{"label":"AnimationInspector this","documentation":"AnimationInspector Instance"},{"label":"uint16 pressedKey","documentation":"User pressed key"}]},"AnimationInspectorState::isKeyCombination":{"signature":"bool AnimationInspectorState::isKeyCombination(AnimationInspectorState this, const UserInput *userInput)","parameters":[{"label":"AnimationInspectorState this","documentation":"AnimationInspectorState Instance"},{"label":"const UserInput *userInput"}]},"Asterisk::constructor":{"signature":"void Asterisk::constructor(Asterisk this, SpatialObject owner, const AsteriskSpec *asteriskSpec)","parameters":[{"label":"Asterisk this","documentation":"Asterisk Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the wireframe attaches to"},{"label":"const AsteriskSpec *asteriskSpec","documentation":"Specification that determines how to configure the wireframe"}]},"Asterisk::render":{"signature":"void Asterisk::render(Asterisk this, Vector3D relativePosition)","parameters":[{"label":"Asterisk this","documentation":"Asterisk Instance"},{"label":"Vector3D relativePosition","documentation":"Position relative to the camera's"}]},"Asterisk::draw":{"signature":"bool Asterisk::draw(Asterisk this)","parameters":[{"label":"Asterisk this","documentation":"Asterisk Instance"}]},"Ball::project":{"signature":"static void Ball::project(Ball this, Vector3D center, fixed_t radius, Vector3D vector, fixed_t *min, fixed_t *max)","parameters":[{"label":"Ball this","documentation":"Ball Instance"},{"label":"Vector3D center","documentation":"Center of the circle whose diameter is projected"},{"label":"fixed_t radius","documentation":"Radius of the circle whose diameter is projected"},{"label":"Vector3D vector","documentation":"Vector onto which to project the circle's diameter"},{"label":"fixed_t *min"},{"label":"fixed_t *max"}]},"Ball::constructor":{"signature":"void Ball::constructor(Ball this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"Ball this","documentation":"Ball Instance"},{"label":"SpatialObject owner"},{"label":"const ColliderSpec *colliderSpec"}]},"Ball::resize":{"signature":"void Ball::resize(Ball this, fixed_t sizeDelta)","parameters":[{"label":"Ball this","documentation":"Ball Instance"},{"label":"fixed_t sizeDelta","documentation":"Delta to add to the collider's size"}]},"Ball::configureWireframe":{"signature":"void Ball::configureWireframe(Ball this)","parameters":[{"label":"Ball this","documentation":"Ball Instance"}]},"Ball::print":{"signature":"void Ball::print(Ball this, int32 x, int32 y)","parameters":[{"label":"Ball this","documentation":"Ball Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Behavior::create":{"signature":"static Behavior Behavior::create(Behavior this, SpatialObject owner, const BehaviorSpec *behaviorSpec)","parameters":[{"label":"Behavior this","documentation":"Behavior Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the behavior attaches to"},{"label":"const BehaviorSpec *behaviorSpec","documentation":"Specification that determines how to configure the behavior"}]},"Behavior::constructor":{"signature":"void Behavior::constructor(Behavior this, SpatialObject owner, const BehaviorSpec *behaviorSpec)","parameters":[{"label":"Behavior this","documentation":"Behavior Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the behavior attaches to"},{"label":"const BehaviorSpec *behaviorSpec","documentation":"Specification that determines how to configure the behavior"}]},"Behavior::enable":{"signature":"void Behavior::enable(Behavior this)","parameters":[{"label":"Behavior this","documentation":"Behavior Instance"}]},"Behavior::disable":{"signature":"void Behavior::disable(Behavior this)","parameters":[{"label":"Behavior this","documentation":"Behavior Instance"}]},"Behavior::isEnabled":{"signature":"bool Behavior::isEnabled(Behavior this)","parameters":[{"label":"Behavior this","documentation":"Behavior Instance"}]},"BgmapAnimatedSprite::constructor":{"signature":"void BgmapAnimatedSprite::constructor(BgmapAnimatedSprite this, SpatialObject owner, const BgmapAnimatedSpriteSpec *bgmapAnimatedSpriteSpec)","parameters":[{"label":"BgmapAnimatedSprite this","documentation":"BgmapAnimatedSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const BgmapAnimatedSpriteSpec *bgmapAnimatedSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"BgmapAnimatedSprite::updateAnimation":{"signature":"void BgmapAnimatedSprite::updateAnimation(BgmapAnimatedSprite this)","parameters":[{"label":"BgmapAnimatedSprite this","documentation":"BgmapAnimatedSprite Instance"}]},"BgmapSprite::constructor":{"signature":"void BgmapSprite::constructor(BgmapSprite this, SpatialObject owner, const BgmapSpriteSpec *bgmapSpriteSpec)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const BgmapSpriteSpec *bgmapSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"BgmapSprite::registerWithManager":{"signature":"void BgmapSprite::registerWithManager(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::unregisterWithManager":{"signature":"void BgmapSprite::unregisterWithManager(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::hasSpecialEffects":{"signature":"bool BgmapSprite::hasSpecialEffects(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::processEffects":{"signature":"void BgmapSprite::processEffects(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::doRender":{"signature":"int16 BgmapSprite::doRender(BgmapSprite this, int16 index)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"BgmapSprite::setMultiframe":{"signature":"void BgmapSprite::setMultiframe(BgmapSprite this, uint16 frame)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"uint16 frame","documentation":"Current animation frame"}]},"BgmapSprite::setRotation":{"signature":"void BgmapSprite::setRotation(BgmapSprite this, const Rotation *rotation)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation` to apply to the sprite"}]},"BgmapSprite::setScale":{"signature":"void BgmapSprite::setScale(BgmapSprite this, const PixelScale *scale)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"const PixelScale *scale","documentation":"`Scale` to apply to the sprite"}]},"BgmapSprite::getTotalPixels":{"signature":"int32 BgmapSprite::getTotalPixels(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::configureTexture":{"signature":"void BgmapSprite::configureTexture(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::setMode":{"signature":"void BgmapSprite::setMode(BgmapSprite this, uint16 display, uint16 mode)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"uint16 display","documentation":"Displays on which to show the sprite (__WORLD_ON, __WORLD_LON or __WORLD_RON)"},{"label":"uint16 mode","documentation":"The mode to use to display the sprite (__WORLD_BGMAP | __WORLD_AFFINE | __WORLD_HBIAS)"}]},"BgmapSprite::setParam":{"signature":"void BgmapSprite::setParam(BgmapSprite this, uint32 param)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"uint32 param","documentation":"Offset within param table space"}]},"BgmapSprite::getParam":{"signature":"uint32 BgmapSprite::getParam(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::getParamTableRow":{"signature":"int16 BgmapSprite::getParamTableRow(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::invalidateParamTable":{"signature":"void BgmapSprite::invalidateParamTable(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::onTextureRewritten":{"signature":"bool BgmapSprite::onTextureRewritten(BgmapSprite this, ListenerObject eventFirer)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"},{"label":"ListenerObject eventFirer","documentation":"The rewrite texture"}]},"BgmapSprite::applyAffineTransformations":{"signature":"void BgmapSprite::applyAffineTransformations(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapSprite::applyHbiasEffects":{"signature":"void BgmapSprite::applyHbiasEffects(BgmapSprite this)","parameters":[{"label":"BgmapSprite this","documentation":"BgmapSprite Instance"}]},"BgmapTexture::constructor":{"signature":"void BgmapTexture::constructor(BgmapTexture this, BgmapTextureSpec *bgmapTextureSpec, uint16 id)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"BgmapTextureSpec *bgmapTextureSpec","documentation":"Specification that determines how to configure the texture"},{"label":"uint16 id","documentation":"`Texture`'s identificator"}]},"BgmapTexture::write":{"signature":"bool BgmapTexture::write(BgmapTexture this, int16 maximumTextureRowsToWrite)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"int16 maximumTextureRowsToWrite","documentation":"Number of texture rows to write during this call"}]},"BgmapTexture::rewrite":{"signature":"void BgmapTexture::rewrite(BgmapTexture this)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"}]},"BgmapTexture::setSegment":{"signature":"void BgmapTexture::setSegment(BgmapTexture this, int8 segment)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"int8 segment","documentation":"BGMAP segment where the graphical data is allocated"}]},"BgmapTexture::getSegment":{"signature":"int8 BgmapTexture::getSegment(BgmapTexture this)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"}]},"BgmapTexture::setOffsets":{"signature":"void BgmapTexture::setOffsets(BgmapTexture this, int16 xOffset, int16 yOffset)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"int16 xOffset","documentation":"X coordinate in tiles of the graphical data inside BGMAP memory"},{"label":"int16 yOffset","documentation":"Y coordinate in tiles of the graphical data inside BGMAP memory"}]},"BgmapTexture::getXOffset":{"signature":"int16 BgmapTexture::getXOffset(BgmapTexture this)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"}]},"BgmapTexture::getYOffset":{"signature":"int16 BgmapTexture::getYOffset(BgmapTexture this)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"}]},"BgmapTexture::setHorizontalFlip":{"signature":"void BgmapTexture::setHorizontalFlip(BgmapTexture this, bool value)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"bool value","documentation":"If true, the texture is flipped horizontally"}]},"BgmapTexture::setVerticalFlip":{"signature":"void BgmapTexture::setVerticalFlip(BgmapTexture this, bool value)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"},{"label":"bool value","documentation":"If true, the texture is flipped vertically"}]},"BgmapTexture::getRemainingRowsToBeWritten":{"signature":"int8 BgmapTexture::getRemainingRowsToBeWritten(BgmapTexture this)","parameters":[{"label":"BgmapTexture this","documentation":"BgmapTexture Instance"}]},"BgmapTextureManager::reset":{"signature":"void BgmapTextureManager::reset(BgmapTextureManager this)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"}]},"BgmapTextureManager::clearBgmapSegment":{"signature":"void BgmapTextureManager::clearBgmapSegment(BgmapTextureManager this, int32 segment)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"int32 segment","documentation":"Index of the BGMAP segment to clear"}]},"BgmapTextureManager::calculateAvailableBgmapSegments":{"signature":"void BgmapTextureManager::calculateAvailableBgmapSegments(BgmapTextureManager this)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"}]},"BgmapTextureManager::getAvailableBgmapSegmentsForTextures":{"signature":"int8 BgmapTextureManager::getAvailableBgmapSegmentsForTextures(BgmapTextureManager this)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"}]},"BgmapTextureManager::getPrintingBgmapSegment":{"signature":"int8 BgmapTextureManager::getPrintingBgmapSegment(BgmapTextureManager this)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"}]},"BgmapTextureManager::loadTextures":{"signature":"void BgmapTextureManager::loadTextures(BgmapTextureManager this, const TextureSpec **textureSpecs)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"const TextureSpec **textureSpecs","documentation":"Array of texture specs in function of which to load textures"}]},"BgmapTextureManager::getTexture":{"signature":"BgmapTexture BgmapTextureManager::getTexture(BgmapTextureManager this, BgmapTextureSpec *bgmapTextureSpec, int16 minimumSegment, bool mustLiveAtEvenSegment, uint32 scValue)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"BgmapTextureSpec *bgmapTextureSpec","documentation":"Spec to use to initilize the desired texture"},{"label":"int16 minimumSegment","documentation":"Minimum BGMAP segment where to allocate the texture"},{"label":"bool mustLiveAtEvenSegment","documentation":"Required BGMAP segment where to allocate the texture"},{"label":"uint32 scValue","documentation":"SC configuration value for multi segment textures"}]},"BgmapTextureManager::releaseTexture":{"signature":"void BgmapTextureManager::releaseTexture(BgmapTextureManager this, BgmapTexture bgmapTexture)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"BgmapTexture bgmapTexture","documentation":"`Texture` to release"}]},"BgmapTextureManager::getXOffset":{"signature":"int16 BgmapTextureManager::getXOffset(BgmapTextureManager this, int32 id)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"int32 id","documentation":"`Texture`'s id"}]},"BgmapTextureManager::getYOffset":{"signature":"int16 BgmapTextureManager::getYOffset(BgmapTextureManager this, int32 id)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"int32 id","documentation":"`Texture`'s id"}]},"BgmapTextureManager::print":{"signature":"void BgmapTextureManager::print(BgmapTextureManager this, int32 x, int32 y)","parameters":[{"label":"BgmapTextureManager this","documentation":"BgmapTextureManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Body::computeInstantaneousSpeed":{"signature":"static fixed_t Body::computeInstantaneousSpeed(Body this, fixed_t forceMagnitude, fixed_t gravity, fixed_t mass, fixed_t friction, fixed_t maximumSpeed)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t forceMagnitude","documentation":"Magnitude of the applied force"},{"label":"fixed_t gravity","documentation":"Gravity acceleration vector that affects the resulting speed"},{"label":"fixed_t mass","documentation":"The mass that will aquire the computed speed"},{"label":"fixed_t friction","documentation":"Friction affecting the mass that will aquire the computed speed"},{"label":"fixed_t maximumSpeed","documentation":"Maximum value that the computated speed can reach"}]},"Body::constructor":{"signature":"void Body::constructor(Body this, SpatialObject owner, const PhysicalProperties *physicalProperties, uint16 axisSubjectToGravity)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the body attaches to"},{"label":"const PhysicalProperties *physicalProperties","documentation":"Struct that specifies the physical properties of bodies"},{"label":"uint16 axisSubjectToGravity","documentation":"Axis on which the body is subject to gravity"}]},"Body::reset":{"signature":"void Body::reset(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::clearNormal":{"signature":"void Body::clearNormal(Body this, ListenerObject referent)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"ListenerObject referent","documentation":"Normal vector affecting the body's owner"}]},"Body::update":{"signature":"void Body::update(Body this, uint16 cycle, fix7_9_ext elapsedTime)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"uint16 cycle","documentation":"Cycle number during the current second"},{"label":"fix7_9_ext elapsedTime","documentation":"Elapsed time since the last call to this method"}]},"Body::applyForce":{"signature":"uint8 Body::applyForce(Body this, const Vector3D *force)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"const Vector3D *force","documentation":"Force to be applied"}]},"Body::bounce":{"signature":"void Body::bounce(Body this, ListenerObject bounceReferent, Vector3D bouncingPlaneNormal, fixed_t frictionCoefficient, fixed_t bounciness)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"ListenerObject bounceReferent","documentation":"Referent of the normal to the plane on which the body has to bounce"},{"label":"Vector3D bouncingPlaneNormal","documentation":"Normal of the plane on which the body has to bounce"},{"label":"fixed_t frictionCoefficient","documentation":"Friction coefficient of the bounce referent"},{"label":"fixed_t bounciness","documentation":"Bounciness coefficient of the bounce referent"}]},"Body::stopMovement":{"signature":"uint16 Body::stopMovement(Body this, uint16 axis)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"uint16 axis","documentation":"Flag indicating the axises on which the movement has to stop"}]},"Body::setVelocity":{"signature":"void Body::setVelocity(Body this, const Vector3D *velocity)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"const Vector3D *velocity","documentation":"Pointer to a velocity vector"}]},"Body::getVelocity":{"signature":"const Vector3D * Body::getVelocity(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setDirection":{"signature":"void Body::setDirection(Body this, const Vector3D *direction)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"const Vector3D *direction","documentation":"Pointer to a direction vector"}]},"Body::getDirection":{"signature":"const Vector3D * Body::getDirection(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setAxisSubjectToGravity":{"signature":"void Body::setAxisSubjectToGravity(Body this, uint16 axisSubjectToGravity)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"uint16 axisSubjectToGravity","documentation":"Flag containing the axises on which the body is subject to gravity"}]},"Body::getAxisSubjectToGravity":{"signature":"uint16 Body::getAxisSubjectToGravity(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setBounciness":{"signature":"void Body::setBounciness(Body this, fixed_t bounciness)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t bounciness","documentation":"Value to set as the body's bounciness factor (between 0 and 1)"}]},"Body::getBounciness":{"signature":"fixed_t Body::getBounciness(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setFrictionCoefficient":{"signature":"void Body::setFrictionCoefficient(Body this, fixed_t frictionCoefficient)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t frictionCoefficient","documentation":"Value to set as the body's friction coefficient (between 0 and __MAXIMUM_FRICTION_COEFFICIENT)"}]},"Body::getFrictionCoefficient":{"signature":"fixed_t Body::getFrictionCoefficient(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setMass":{"signature":"void Body::setMass(Body this, fixed_t mass)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t mass"}]},"Body::getMass":{"signature":"fixed_t Body::getMass(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setPosition":{"signature":"void Body::setPosition(Body this, const Vector3D *position, SpatialObject caller)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"const Vector3D *position","documentation":"3D vector defining the body's new position"},{"label":"SpatialObject caller","documentation":"Must be the body's owner; otherwise the call to this method doesn't have any effect"}]},"Body::getPosition":{"signature":"const Vector3D * Body::getPosition(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setMaximumVelocity":{"signature":"void Body::setMaximumVelocity(Body this, Vector3D maximumVelocity)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"Vector3D maximumVelocity","documentation":"3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)"}]},"Body::getMaximumVelocity":{"signature":"Vector3D Body::getMaximumVelocity(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::setMaximumSpeed":{"signature":"void Body::setMaximumSpeed(Body this, fixed_t maximumSpeed)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t maximumSpeed","documentation":"Maximum magnitude of the body's velocity"}]},"Body::getMaximumSpeed":{"signature":"fixed_t Body::getMaximumSpeed(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::sendMessages":{"signature":"void Body::sendMessages(Body this, bool value)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"bool value","documentation":"If true, the body sends messages to its owner when its movement state changes"}]},"Body::setSkipCycles":{"signature":"void Body::setSkipCycles(Body this, int8 skipCycles)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"int8 skipCycles","documentation":"Number of cycles to skip physical simulations to slow down physics"}]},"Body::setSurroundingFrictionCoefficient":{"signature":"void Body::setSurroundingFrictionCoefficient(Body this, fixed_t surroundingFrictionCoefficient)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"fixed_t surroundingFrictionCoefficient","documentation":"`Body`'s friction coefficient of the its surroundings"}]},"Body::getSpeed":{"signature":"fixed_t Body::getSpeed(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::getMovementOnAllAxis":{"signature":"uint16 Body::getMovementOnAllAxis(Body this)","parameters":[{"label":"Body this","documentation":"Body Instance"}]},"Body::print":{"signature":"void Body::print(Body this, int32 x, int32 y)","parameters":[{"label":"Body this","documentation":"Body Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Box::project":{"signature":"static void Box::project(Box this, Vector3D vertexes[8], Vector3D vector, fixed_t *min, fixed_t *max)","parameters":[{"label":"Box this","documentation":"Box Instance"},{"label":"Vector3D vertexes[8]","documentation":"Array of vectors to project"},{"label":"Vector3D vector","documentation":"Vector onto which make the projections"},{"label":"fixed_t *min"},{"label":"fixed_t *max"}]},"Box::constructor":{"signature":"void Box::constructor(Box this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"Box this","documentation":"Box Instance"},{"label":"SpatialObject owner"},{"label":"const ColliderSpec *colliderSpec"}]},"Box::resize":{"signature":"void Box::resize(Box this, fixed_t sizeDelta)","parameters":[{"label":"Box this","documentation":"Box Instance"},{"label":"fixed_t sizeDelta","documentation":"Delta to add to the collider's size"}]},"Box::configureWireframe":{"signature":"void Box::configureWireframe(Box this)","parameters":[{"label":"Box this","documentation":"Box Instance"}]},"Box::print":{"signature":"void Box::print(Box this, int32 x, int32 y)","parameters":[{"label":"Box this","documentation":"Box Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Box::getVertexes":{"signature":"void Box::getVertexes(Box this, Vector3D vertexes[8])","parameters":[{"label":"Box this","documentation":"Box Instance"},{"label":"Vector3D vertexes[8]"}]},"Box::projectOntoItself":{"signature":"void Box::projectOntoItself(Box this)","parameters":[{"label":"Box this","documentation":"Box Instance"}]},"Camera::reset":{"signature":"void Camera::reset(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setup":{"signature":"void Camera::setup(Camera this, PixelOptical pixelOptical, CameraFrustum cameraFrustum)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"PixelOptical pixelOptical","documentation":"Configuration struct for the projection functions"},{"label":"CameraFrustum cameraFrustum","documentation":"Player's point of view configuration"}]},"Camera::setCameraMovementManager":{"signature":"void Camera::setCameraMovementManager(Camera this, CameraMovementManager cameraMovementManager)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"CameraMovementManager cameraMovementManager","documentation":"Movement manager"}]},"Camera::getCameraMovementManager":{"signature":"CameraMovementManager Camera::getCameraMovementManager(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setCameraEffectManager":{"signature":"void Camera::setCameraEffectManager(Camera this, CameraEffectManager cameraEffectManager)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"CameraEffectManager cameraEffectManager","documentation":"Special effects manager"}]},"Camera::getCameraEffectManager":{"signature":"CameraEffectManager Camera::getCameraEffectManager(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setStageSize":{"signature":"void Camera::setStageSize(Camera this, Size size)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Size size","documentation":"`Stage`'s size"}]},"Camera::getStageSize":{"signature":"Size Camera::getStageSize(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setFocusEntity":{"signature":"void Camera::setFocusEntity(Camera this, Entity focusEntity)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Entity focusEntity","documentation":"`Entity` to follow"}]},"Camera::getFocusEntity":{"signature":"Entity Camera::getFocusEntity(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::unsetFocusEntity":{"signature":"void Camera::unsetFocusEntity(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setFocusEntityPositionDisplacement":{"signature":"void Camera::setFocusEntityPositionDisplacement(Camera this, Vector3D focusEntityPositionDisplacement)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Vector3D focusEntityPositionDisplacement","documentation":"Displacement vector"}]},"Camera::getFocusEntityPositionDisplacement":{"signature":"Vector3D Camera::getFocusEntityPositionDisplacement(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setDisplacement":{"signature":"void Camera::setDisplacement(Camera this, Vector3D)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Vector3D","documentation":"Displacement vector"}]},"Camera::geDisplacement":{"signature":"Vector3D Camera::geDisplacement(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setOptical":{"signature":"void Camera::setOptical(Camera this, Optical optical)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Optical optical","documentation":"configuration struct with the values used for projections"}]},"Camera::getOptical":{"signature":"Optical Camera::getOptical(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setPosition":{"signature":"void Camera::setPosition(Camera this, Vector3D position, bool cap)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Vector3D position","documentation":"3D vector"},{"label":"bool cap","documentation":"Cap the camera's position within the stage's size if true"}]},"Camera::translate":{"signature":"void Camera::translate(Camera this, Vector3D displacement, int32 cap)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Vector3D displacement","documentation":"Displacement vector"},{"label":"int32 cap","documentation":"Cap the camera's position within the stage's size if true"}]},"Camera::getPosition":{"signature":"Vector3D Camera::getPosition(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::setRotation":{"signature":"void Camera::setRotation(Camera this, Rotation rotation)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to assign to the camera"}]},"Camera::rotate":{"signature":"void Camera::rotate(Camera this, Rotation rotation)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"Rotation rotation","documentation":"`Rotation` delta"}]},"Camera::getRotation":{"signature":"Rotation Camera::getRotation(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::getCameraFrustum":{"signature":"CameraFrustum Camera::getCameraFrustum(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::getLastDisplacement":{"signature":"Vector3D Camera::getLastDisplacement(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::getTransformationFlags":{"signature":"uint8 Camera::getTransformationFlags(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::focus":{"signature":"void Camera::focus(Camera this)","parameters":[{"label":"Camera this","documentation":"Camera Instance"}]},"Camera::startEffect":{"signature":"void Camera::startEffect(Camera this, int32 effect,...)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"int32 effect","documentation":"Code of the effect to start"}]},"Camera::stopEffect":{"signature":"void Camera::stopEffect(Camera this, int32 effect)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"int32 effect","documentation":"Code of the effect to stop"}]},"Camera::print":{"signature":"void Camera::print(Camera this, int32 x, int32 y, bool inPixels)","parameters":[{"label":"Camera this","documentation":"Camera Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"bool inPixels"}]},"CameraEffectManager::constructor":{"signature":"void CameraEffectManager::constructor(CameraEffectManager this)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"}]},"CameraEffectManager::handleMessage":{"signature":"bool CameraEffectManager::handleMessage(CameraEffectManager this, Telegram telegram)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"CameraEffectManager::reset":{"signature":"void CameraEffectManager::reset(CameraEffectManager this)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"}]},"CameraEffectManager::setFadeIncrement":{"signature":"void CameraEffectManager::setFadeIncrement(CameraEffectManager this, uint8 fadeEffectIncrement)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"},{"label":"uint8 fadeEffectIncrement","documentation":"Fade increment"}]},"CameraEffectManager::getDefaultBrightness":{"signature":"Brightness CameraEffectManager::getDefaultBrightness(CameraEffectManager this)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"}]},"CameraEffectManager::startEffect":{"signature":"void CameraEffectManager::startEffect(CameraEffectManager this, int32 effect, va_list args)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"},{"label":"int32 effect","documentation":"Code of the effect to start"},{"label":"va_list args","documentation":"Variable arguments list depending on the effect to start"}]},"CameraEffectManager::stopEffect":{"signature":"void CameraEffectManager::stopEffect(CameraEffectManager this, int32 effect)","parameters":[{"label":"CameraEffectManager this","documentation":"CameraEffectManager Instance"},{"label":"int32 effect","documentation":"Code of the effect to stop"}]},"CameraMovementManager::constructor":{"signature":"void CameraMovementManager::constructor(CameraMovementManager this)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"}]},"CameraMovementManager::reset":{"signature":"void CameraMovementManager::reset(CameraMovementManager this)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"}]},"CameraMovementManager::setFocusEntity":{"signature":"void CameraMovementManager::setFocusEntity(CameraMovementManager this, Entity focusEntity)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"},{"label":"Entity focusEntity","documentation":"`Entity` to follow"}]},"CameraMovementManager::getFocusEntity":{"signature":"Entity CameraMovementManager::getFocusEntity(CameraMovementManager this)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"}]},"CameraMovementManager::setFocusEntityPositionDisplacement":{"signature":"void CameraMovementManager::setFocusEntityPositionDisplacement(CameraMovementManager this, const Vector3D *focusEntityPositionDisplacement)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"},{"label":"const Vector3D *focusEntityPositionDisplacement","documentation":"Displacement vector"}]},"CameraMovementManager::getFocusEntityPositionDisplacement":{"signature":"const Vector3D * CameraMovementManager::getFocusEntityPositionDisplacement(CameraMovementManager this)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"}]},"CameraMovementManager::getLastCameraDisplacement":{"signature":"Vector3D CameraMovementManager::getLastCameraDisplacement(CameraMovementManager this)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"}]},"CameraMovementManager::focus":{"signature":"Vector3D CameraMovementManager::focus(CameraMovementManager this, Camera camera)","parameters":[{"label":"CameraMovementManager this","documentation":"CameraMovementManager Instance"},{"label":"Camera camera","documentation":"`Camera` to focus"}]},"CharSet::constructor":{"signature":"void CharSet::constructor(CharSet this, CharSetSpec *charSetSpec, uint16 offset)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"CharSetSpec *charSetSpec","documentation":"Spec to use in the construction of the char set"},{"label":"uint16 offset","documentation":"Offset in CHAR space where the block allocated for this char set starts"}]},"CharSet::increaseUsageCount":{"signature":"void CharSet::increaseUsageCount(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::decreaseUsageCount":{"signature":"bool CharSet::decreaseUsageCount(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::getUsageCount":{"signature":"uint8 CharSet::getUsageCount(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::isShared":{"signature":"bool CharSet::isShared(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::isOptimized":{"signature":"bool CharSet::isOptimized(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::setOffset":{"signature":"void CharSet::setOffset(CharSet this, uint16 offset)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"uint16 offset","documentation":"Offset within CHAR space"}]},"CharSet::getOffset":{"signature":"uint16 CharSet::getOffset(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::getSpec":{"signature":"CharSetSpec * CharSet::getSpec(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::getNumberOfChars":{"signature":"uint16 CharSet::getNumberOfChars(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSet::addChar":{"signature":"void CharSet::addChar(CharSet this, uint32 charToAddTo, const uint32 *newChar)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"uint32 charToAddTo","documentation":"Index of the CHAR to add to"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"CharSet::putChar":{"signature":"void CharSet::putChar(CharSet this, uint32 charToReplace, const uint32 *newChar)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"uint32 charToReplace","documentation":"Index of the CHAR to replace"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"CharSet::putPixel":{"signature":"void CharSet::putPixel(CharSet this, const uint32 charToReplace, const Pixel *charSetPixel, BYTE newPixelColor)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"const uint32 charToReplace","documentation":"Index of the CHAR to replace"},{"label":"const Pixel *charSetPixel","documentation":"Coordinate in CHAR space of the CHAR to replace"},{"label":"BYTE newPixelColor","documentation":"Color data for the pixel"}]},"CharSet::setFrame":{"signature":"void CharSet::setFrame(CharSet this, uint16 frame)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"},{"label":"uint16 frame","documentation":"The frame to write to CHAR memory"}]},"CharSet::write":{"signature":"void CharSet::write(CharSet this)","parameters":[{"label":"CharSet this","documentation":"CharSet Instance"}]},"CharSetManager::reset":{"signature":"void CharSetManager::reset(CharSetManager this)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"}]},"CharSetManager::loadCharSets":{"signature":"void CharSetManager::loadCharSets(CharSetManager this, const CharSetSpec **charSetSpecs)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"},{"label":"const CharSetSpec **charSetSpecs","documentation":"Array of char set specs in function of which to load char sets"}]},"CharSetManager::getCharSet":{"signature":"CharSet CharSetManager::getCharSet(CharSetManager this, CharSetSpec *charSetSpec)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"},{"label":"CharSetSpec *charSetSpec","documentation":"Spec to use to initilize the desired char set"}]},"CharSetManager::releaseCharSet":{"signature":"bool CharSetManager::releaseCharSet(CharSetManager this, CharSet charSet)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"},{"label":"CharSet charSet","documentation":"Char set to release"}]},"CharSetManager::writeCharSets":{"signature":"void CharSetManager::writeCharSets(CharSetManager this)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"}]},"CharSetManager::defragment":{"signature":"void CharSetManager::defragment(CharSetManager this, bool deferred)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"},{"label":"bool deferred"}]},"CharSetManager::getTotalUsedChars":{"signature":"int32 CharSetManager::getTotalUsedChars(CharSetManager this)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"}]},"CharSetManager::getTotalFreeChars":{"signature":"int32 CharSetManager::getTotalFreeChars(CharSetManager this)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"}]},"CharSetManager::getTotalCharSets":{"signature":"int32 CharSetManager::getTotalCharSets(CharSetManager this)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"}]},"CharSetManager::print":{"signature":"void CharSetManager::print(CharSetManager this, int32 x, int32 y)","parameters":[{"label":"CharSetManager this","documentation":"CharSetManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Clock::printTime":{"signature":"static void Clock::printTime(Clock this, uint32 milliseconds, int32 x, int32 y, const char *font, uint32 precision)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"uint32 milliseconds","documentation":"Total time to print"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"const char *font","documentation":"Pointer to font's name to use"},{"label":"uint32 precision","documentation":"Precision of the second decimals"}]},"Clock::printDeciseconds":{"signature":"static void Clock::printDeciseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"uint32 milliSeconds"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"const char *font","documentation":"Pointer to font's name to use"}]},"Clock::printCentiseconds":{"signature":"static void Clock::printCentiseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"uint32 milliSeconds"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"const char *font","documentation":"Pointer to font's name to use"}]},"Clock::printMilliseconds":{"signature":"static void Clock::printMilliseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"uint32 milliSeconds"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"const char *font","documentation":"Pointer to font's name to use"}]},"Clock::constructor":{"signature":"void Clock::constructor(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::destructor":{"signature":"void Clock::destructor(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::start":{"signature":"void Clock::start(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::stop":{"signature":"void Clock::stop(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::pause":{"signature":"void Clock::pause(Clock this, bool pause)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"bool pause","documentation":"Flag to set the paused state of the clock"}]},"Clock::reset":{"signature":"void Clock::reset(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::update":{"signature":"void Clock::update(Clock this, uint32 elapsedMilliseconds)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"uint32 elapsedMilliseconds","documentation":"Milliseconds that have passed since the previous call to the update method"}]},"Clock::isPaused":{"signature":"bool Clock::isPaused(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::getMilliseconds":{"signature":"uint32 Clock::getMilliseconds(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::getMinutes":{"signature":"uint32 Clock::getMinutes(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::getSeconds":{"signature":"uint32 Clock::getSeconds(Clock this)","parameters":[{"label":"Clock this","documentation":"Clock Instance"}]},"Clock::print":{"signature":"void Clock::print(Clock this, int32 col, int32 row, const char *font)","parameters":[{"label":"Clock this","documentation":"Clock Instance"},{"label":"int32 col"},{"label":"int32 row"},{"label":"const char *font","documentation":"Pointer to font's name to use"}]},"ClockManager::reset":{"signature":"void ClockManager::reset(ClockManager this)","parameters":[{"label":"ClockManager this","documentation":"ClockManager Instance"}]},"ClockManager::register":{"signature":"void ClockManager::register(ClockManager this, Clock clock)","parameters":[{"label":"ClockManager this","documentation":"ClockManager Instance"},{"label":"Clock clock","documentation":"`Clock` to register"}]},"ClockManager::unregister":{"signature":"void ClockManager::unregister(ClockManager this, Clock clock)","parameters":[{"label":"ClockManager this","documentation":"ClockManager Instance"},{"label":"Clock clock","documentation":"`Clock` to unregister"}]},"ClockManager::update":{"signature":"void ClockManager::update(ClockManager this, uint32 elapsedMilliseconds)","parameters":[{"label":"ClockManager this","documentation":"ClockManager Instance"},{"label":"uint32 elapsedMilliseconds","documentation":"Milliseconds that passed since the previous call to this method"}]},"Collider::constructor":{"signature":"void Collider::constructor(Collider this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"SpatialObject owner"},{"label":"const ColliderSpec *colliderSpec"}]},"Collider::handleMessage":{"signature":"bool Collider::handleMessage(Collider this, Telegram telegram)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"Telegram telegram","documentation":"`Telegram` to process"}]},"Collider::enable":{"signature":"void Collider::enable(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::disable":{"signature":"void Collider::disable(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::setLayers":{"signature":"void Collider::setLayers(Collider this, uint32 layers)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"uint32 layers","documentation":"Layers in which the collider must live"}]},"Collider::getLayers":{"signature":"uint32 Collider::getLayers(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::setLayersToIgnore":{"signature":"void Collider::setLayersToIgnore(Collider this, uint32 layersToIgnore)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"uint32 layersToIgnore"}]},"Collider::getLayersToIgnore":{"signature":"uint32 Collider::getLayersToIgnore(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::checkCollisions":{"signature":"void Collider::checkCollisions(Collider this, bool checkCollisions)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"bool checkCollisions","documentation":"It true, this collider checks collision against others"}]},"Collider::registerCollisions":{"signature":"void Collider::registerCollisions(Collider this, bool registerCollisions)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"bool registerCollisions","documentation":"If true, colliding colliders are registered"}]},"Collider::collides":{"signature":"CollisionResult Collider::collides(Collider this, Collider collider)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"Collider collider","documentation":"`Collider` to check collision against to"}]},"Collider::resolveCollision":{"signature":"void Collider::resolveCollision(Collider this, const CollisionInformation *collisionInformation)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"Collider::canMoveTowards":{"signature":"bool Collider::canMoveTowards(Collider this, Vector3D displacement)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"Vector3D displacement","documentation":"Vector towards which to check if it is possible to move the owner"}]},"Collider::discardCollisions":{"signature":"void Collider::discardCollisions(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::getCollidingFrictionCoefficient":{"signature":"fixed_t Collider::getCollidingFrictionCoefficient(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::show":{"signature":"void Collider::show(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::hide":{"signature":"void Collider::hide(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::resize":{"signature":"void Collider::resize(Collider this, fixed_t sizeDelta)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"fixed_t sizeDelta","documentation":"Delta to add to the collider's size"}]},"Collider::getNormal":{"signature":"Vector3D Collider::getNormal(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::configureWireframe":{"signature":"virtual void Collider::configureWireframe(Collider this)","parameters":[{"label":"Collider this","documentation":"Collider Instance"}]},"Collider::print":{"signature":"void Collider::print(Collider this, int32 x, int32 y)","parameters":[{"label":"Collider this","documentation":"Collider Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"CollisionManager::constructor":{"signature":"void CollisionManager::constructor(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::reset":{"signature":"void CollisionManager::reset(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::purgeDestroyedColliders":{"signature":"void CollisionManager::purgeDestroyedColliders(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::update":{"signature":"uint32 CollisionManager::update(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::createCollider":{"signature":"Collider CollisionManager::createCollider(CollisionManager this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"},{"label":"SpatialObject owner","documentation":"`Object` to which the collider will attach to"},{"label":"const ColliderSpec *colliderSpec","documentation":"Spec to use to create the collider"}]},"CollisionManager::destroyCollider":{"signature":"void CollisionManager::destroyCollider(CollisionManager this, Collider collider)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"},{"label":"Collider collider","documentation":"`Collider` to destroy"}]},"CollisionManager::setCheckCollidersOutOfCameraRange":{"signature":"void CollisionManager::setCheckCollidersOutOfCameraRange(CollisionManager this, bool value)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"},{"label":"bool value","documentation":"If false, colliders out of camera's range are culled of from collision testing"}]},"CollisionManager::showColliders":{"signature":"void CollisionManager::showColliders(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::hideColliders":{"signature":"void CollisionManager::hideColliders(CollisionManager this)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"}]},"CollisionManager::print":{"signature":"void CollisionManager::print(CollisionManager this, int32 x, int32 y)","parameters":[{"label":"CollisionManager this","documentation":"CollisionManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"CollisionTester::testOverlaping":{"signature":"static void CollisionTester::testOverlaping(CollisionTester this, Collider requesterCollider, Collider otherCollider, CollisionInformation *collisionInformation, fixed_t sizeDelta)","parameters":[{"label":"CollisionTester this","documentation":"CollisionTester Instance"},{"label":"Collider requesterCollider","documentation":"`Collider` asking for the test"},{"label":"Collider otherCollider","documentation":"`Collider` against which to test the overlaping"},{"label":"CollisionInformation *collisionInformation"},{"label":"fixed_t sizeDelta","documentation":"Delta to add to the collider's size"}]},"CommunicationManager::interruptHandler":{"signature":"static void CommunicationManager::interruptHandler(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::reset":{"signature":"void CommunicationManager::reset(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::enableCommunications":{"signature":"void CommunicationManager::enableCommunications(CommunicationManager this, EventListener eventLister, ListenerObject scope)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"EventListener eventLister"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"CommunicationManager::disableCommunications":{"signature":"void CommunicationManager::disableCommunications(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::cancelCommunications":{"signature":"bool CommunicationManager::cancelCommunications(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::startSyncCycle":{"signature":"void CommunicationManager::startSyncCycle(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::isConnected":{"signature":"bool CommunicationManager::isConnected(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::isMaster":{"signature":"bool CommunicationManager::isMaster(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::broadcastData":{"signature":"bool CommunicationManager::broadcastData(CommunicationManager this, BYTE *data, int32 numberOfBytes)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"BYTE *data","documentation":"Data to broadcast"},{"label":"int32 numberOfBytes","documentation":"Number of bytes to broadcast"}]},"CommunicationManager::broadcastDataAsync":{"signature":"void CommunicationManager::broadcastDataAsync(CommunicationManager this, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"BYTE *data","documentation":"Data to broadcast"},{"label":"int32 numberOfBytes","documentation":"Number of bytes to broadcast"},{"label":"EventListener eventLister"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"CommunicationManager::sendAndReceiveData":{"signature":"bool CommunicationManager::sendAndReceiveData(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"WORD message","documentation":"Control message for the receiving partner"},{"label":"BYTE *data","documentation":"Data to broadcast"},{"label":"int32 numberOfBytes","documentation":"Number of bytes to broadcast"}]},"CommunicationManager::sendAndReceiveDataAsync":{"signature":"bool CommunicationManager::sendAndReceiveDataAsync(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"WORD message","documentation":"Control message for the receiving partner"},{"label":"BYTE *data","documentation":"Data to broadcast"},{"label":"int32 numberOfBytes","documentation":"Number of bytes to broadcast"},{"label":"EventListener eventLister"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"CommunicationManager::getSentMessage":{"signature":"WORD CommunicationManager::getSentMessage(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::getReceivedMessage":{"signature":"WORD CommunicationManager::getReceivedMessage(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::getSentData":{"signature":"const BYTE * CommunicationManager::getSentData(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::getReceivedData":{"signature":"const BYTE * CommunicationManager::getReceivedData(CommunicationManager this)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"}]},"CommunicationManager::print":{"signature":"void CommunicationManager::print(CommunicationManager this, int32 x, int32 y)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"CommunicationManager::handleMessage":{"signature":"bool CommunicationManager::handleMessage(CommunicationManager this, Telegram telegram)","parameters":[{"label":"CommunicationManager this","documentation":"CommunicationManager Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"Component::constructor":{"signature":"void Component::constructor(Component this, SpatialObject owner, const ComponentSpec *componentSpec)","parameters":[{"label":"Component this","documentation":"Component Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the component attaches to"},{"label":"const ComponentSpec *componentSpec","documentation":"Pointer to the spec that defines how to initialize the component"}]},"Component::destructor":{"signature":"void Component::destructor(Component this)","parameters":[{"label":"Component this","documentation":"Component Instance"}]},"Component::getSpec":{"signature":"ComponentSpec * Component::getSpec(Component this)","parameters":[{"label":"Component this","documentation":"Component Instance"}]},"Component::getOwner":{"signature":"SpatialObject Component::getOwner(Component this)","parameters":[{"label":"Component this","documentation":"Component Instance"}]},"Container::constructor":{"signature":"void Container::constructor(Container this, const char *const name)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const char *const name","documentation":"Name to assign to the new instance"}]},"Container::setPosition":{"signature":"void Container::setPosition(Container this, const Vector3D *position)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Vector3D *position","documentation":"3D vector defining the object's new position"}]},"Container::setRotation":{"signature":"void Container::setRotation(Container this, const Rotation *rotation)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation`"}]},"Container::setScale":{"signature":"void Container::setScale(Container this, const Scale *scale)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Scale *scale","documentation":"`Scale`"}]},"Container::deleteMyself":{"signature":"void Container::deleteMyself(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::setName":{"signature":"void Container::setName(Container this, const char *const name)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const char *const name","documentation":"Name to assign to the instance"}]},"Container::getName":{"signature":"const char * Container::getName(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::streamOut":{"signature":"void Container::streamOut(Container this, bool streamOut)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"bool streamOut","documentation":"If false, this container won't be streamed out when outside of the camera's reach"}]},"Container::getParent":{"signature":"Container Container::getParent(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::addChild":{"signature":"void Container::addChild(Container this, Container child)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"Container child","documentation":"`Container` to be added as a child"}]},"Container::removeChild":{"signature":"void Container::removeChild(Container this, Container child, bool deleteChild)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"Container child","documentation":"`Container` to be remove as a child"},{"label":"bool deleteChild","documentation":"If true, the child will be deleted in the next game cycle"}]},"Container::purgeChildren":{"signature":"void Container::purgeChildren(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::getChildren":{"signature":"bool Container::getChildren(Container this, ClassPointer classPointer, VirtualList children)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"ClassPointer classPointer","documentation":"Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`"},{"label":"VirtualList children","documentation":"Linked list to be filled with the children that meed the search criteria (it is externally allocated and must be externally deleted)"}]},"Container::getChildByName":{"signature":"Container Container::getChildByName(Container this, const char *childName, bool recursive)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const char *childName","documentation":"Name to look for"},{"label":"bool recursive","documentation":"If true, the seach extends to grand children, grand grand children, etc."}]},"Container::getChildAtPosition":{"signature":"Container Container::getChildAtPosition(Container this, int16 position)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"int16 position","documentation":"Position in the linked list of children"}]},"Container::getChildrenCount":{"signature":"int32 Container::getChildrenCount(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::updateChildren":{"signature":"void Container::updateChildren(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::invalidateTransformation":{"signature":"void Container::invalidateTransformation(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::setInheritEnvironment":{"signature":"void Container::setInheritEnvironment(Container this, uint8 inheritEnvironment)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"uint8 inheritEnvironment","documentation":"`Transformation` inheritance flags"}]},"Container::transformChildren":{"signature":"void Container::transformChildren(Container this, uint8 invalidateTransformationFlag)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"uint8 invalidateTransformationFlag","documentation":"Flag that determines which transfomation's components must be recomputed"}]},"Container::propagateMessage":{"signature":"bool Container::propagateMessage(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"bool(*propagatedMessageHandler)(void *","documentation":"Method that handles the message"}]},"Container::onPropagatedMessage":{"signature":"bool Container::onPropagatedMessage(Container this, va_list args)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"va_list args","documentation":"Variable list of propagated arguments"}]},"Container::propagateString":{"signature":"bool Container::propagateString(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"bool(*propagatedMessageHandler)(void *","documentation":"Method that handles the string"}]},"Container::onPropagatedString":{"signature":"bool Container::onPropagatedString(Container this, va_list args)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"va_list args","documentation":"Variable list of propagated arguments"}]},"Container::translate":{"signature":"void Container::translate(Container this, const Vector3D *translation)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Vector3D *translation","documentation":"Displacement to be added to the container's position"}]},"Container::rotate":{"signature":"void Container::rotate(Container this, const Rotation *rotation)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation` to be added to the container's rotation"}]},"Container::scale":{"signature":"void Container::scale(Container this, const Scale *scale)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Scale *scale","documentation":"`Scale` to be applied to the container's scale"}]},"Container::getLocalPosition":{"signature":"const Vector3D * Container::getLocalPosition(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::getLocalRotation":{"signature":"const Rotation * Container::getLocalRotation(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::getLocalScale":{"signature":"const Scale * Container::getLocalScale(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::setLocalPosition":{"signature":"void Container::setLocalPosition(Container this, const Vector3D *position)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Vector3D *position","documentation":"New local position"}]},"Container::setLocalRotation":{"signature":"void Container::setLocalRotation(Container this, const Rotation *rotation)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Rotation *rotation","documentation":"New local rotation"}]},"Container::setLocalScale":{"signature":"void Container::setLocalScale(Container this, const Scale *scale)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Scale *scale","documentation":"New local scale"}]},"Container::changeEnvironment":{"signature":"void Container::changeEnvironment(Container this, Transformation *environmentTransform)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"Transformation *environmentTransform","documentation":"New reference environment for the local transformation"}]},"Container::addComponents":{"signature":"void Container::addComponents(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::removeComponents":{"signature":"void Container::removeComponents(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::ready":{"signature":"virtual void Container::ready(Container this, bool recursive)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"bool recursive","documentation":"If true, the ready call is propagated to its children, grand children, etc."}]},"Container::show":{"signature":"void Container::show(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::hide":{"signature":"void Container::hide(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::transform":{"signature":"virtual void Container::transform(Container this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const Transformation *environmentTransform","documentation":"Reference environment for the local transformation"},{"label":"uint8 invalidateTransformationFlag","documentation":"Flag that determines which transfomation's components must be recomputed"}]},"Container::update":{"signature":"virtual void Container::update(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::suspend":{"signature":"void Container::suspend(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::resume":{"signature":"void Container::resume(Container this)","parameters":[{"label":"Container this","documentation":"Container Instance"}]},"Container::setTransparency":{"signature":"void Container::setTransparency(Container this, uint8 transparency)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"uint8 transparency","documentation":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},"Container::handlePropagatedMessage":{"signature":"bool Container::handlePropagatedMessage(Container this, int32 message)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"int32 message","documentation":"Propagated integer message"}]},"Container::handlePropagatedString":{"signature":"bool Container::handlePropagatedString(Container this, const char *string)","parameters":[{"label":"Container this","documentation":"Container Instance"},{"label":"const char *string","documentation":"Propagated string"}]},"Debug::update":{"signature":"void Debug::update(Debug this)","parameters":[{"label":"Debug this","documentation":"Debug Instance"}]},"Debug::show":{"signature":"void Debug::show(Debug this)","parameters":[{"label":"Debug this","documentation":"Debug Instance"}]},"Debug::hide":{"signature":"void Debug::hide(Debug this)","parameters":[{"label":"Debug this","documentation":"Debug Instance"}]},"Debug::processUserInput":{"signature":"void Debug::processUserInput(Debug this, uint16 pressedKey)","parameters":[{"label":"Debug this","documentation":"Debug Instance"},{"label":"uint16 pressedKey","documentation":"User pressed key"}]},"DebugState::isKeyCombination":{"signature":"bool DebugState::isKeyCombination(DebugState this, const UserInput *userInput)","parameters":[{"label":"DebugState this","documentation":"DebugState Instance"},{"label":"const UserInput *userInput"}]},"DirectDraw::drawPoint":{"signature":"static bool DirectDraw::drawPoint(DirectDraw this, PixelVector point, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector point","documentation":"Screen coordinate where to draw the point"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawLine":{"signature":"static bool DirectDraw::drawLine(DirectDraw this, PixelVector fromPoint, PixelVector toPoint, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector fromPoint","documentation":"`Line`'s starting point"},{"label":"PixelVector toPoint","documentation":"`Line`'s ending point"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawCircle":{"signature":"static bool DirectDraw::drawCircle(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector center","documentation":"Circle's center"},{"label":"int16 radius","documentation":"Circle's radius"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawX":{"signature":"static bool DirectDraw::drawX(DirectDraw this, PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector center","documentation":"X's center"},{"label":"int16 length","documentation":"X's arms length"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawCross":{"signature":"static bool DirectDraw::drawCross(DirectDraw this, PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector center","documentation":"Cross' center"},{"label":"int16 length","documentation":"Cross' arms length"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawSolidCircle":{"signature":"static bool DirectDraw::drawSolidCircle(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector center","documentation":"Circle's center"},{"label":"int16 radius","documentation":"Circle's radius"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::drawSolidRhumbus":{"signature":"static bool DirectDraw::drawSolidRhumbus(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"PixelVector center","documentation":"Rhombus' center"},{"label":"int16 radius","documentation":"Rhombus' radius"},{"label":"int32 color","documentation":"Color of the point to draw (only non black)"},{"label":"uint8 bufferIndex","documentation":"Buffer set index for interlaced drawing"},{"label":"bool interlaced","documentation":"If true, the drawing is interlaced"}]},"DirectDraw::reset":{"signature":"void DirectDraw::reset(DirectDraw this)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"}]},"DirectDraw::preparteToDraw":{"signature":"void DirectDraw::preparteToDraw(DirectDraw this)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"}]},"DirectDraw::setFrustum":{"signature":"void DirectDraw::setFrustum(DirectDraw this, CameraFrustum frustum)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"CameraFrustum frustum","documentation":"3D boundary when drawing is allowed"}]},"DirectDraw::getFrustum":{"signature":"CameraFrustum DirectDraw::getFrustum(DirectDraw this)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"}]},"DirectDraw::print":{"signature":"void DirectDraw::print(DirectDraw this, int16 x, int16 y)","parameters":[{"label":"DirectDraw this","documentation":"DirectDraw Instance"},{"label":"int16 x","documentation":"Screen x coordinate where to print"},{"label":"int16 y","documentation":"Screen y coordinate where to print"}]},"Entity::createEntity":{"signature":"static Entity Entity::createEntity(Entity this, const PositionedEntity *const positionedEntity, int16 internalId)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *const positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"}]},"Entity::createEntityDeferred":{"signature":"static Entity Entity::createEntityDeferred(Entity this, const PositionedEntity *const positionedEntity, int16 internalId)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *const positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"}]},"Entity::getBoundingBoxFromSpec":{"signature":"static PixelRightBox Entity::getBoundingBoxFromSpec(Entity this, const PositionedEntity *positionedEntity, const PixelVector *environmentPosition)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *positionedEntity","documentation":"Struct that defines which entity spec to use to configure the an entity"},{"label":"const PixelVector *environmentPosition","documentation":"Vector used as the origin with respect to which computed the bounding box's position"}]},"Entity::constructor":{"signature":"void Entity::constructor(Entity this, EntitySpec *entitySpec, int16 internalId, const char *const name)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"EntitySpec *entitySpec","documentation":"Specification that determines how to configure the entity"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"},{"label":"const char *const name","documentation":"Name to assign to the new instance"}]},"Entity::getRadius":{"signature":"fixed_t Entity::getRadius(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getBounciness":{"signature":"fixed_t Entity::getBounciness(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getFrictionCoefficient":{"signature":"fixed_t Entity::getFrictionCoefficient(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::isSubjectToGravity":{"signature":"bool Entity::isSubjectToGravity(Entity this, Vector3D gravity)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"Vector3D gravity"}]},"Entity::getInGameType":{"signature":"uint32 Entity::getInGameType(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::addComponents":{"signature":"void Entity::addComponents(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::removeComponents":{"signature":"void Entity::removeComponents(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::show":{"signature":"void Entity::show(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::hide":{"signature":"void Entity::hide(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::suspend":{"signature":"void Entity::suspend(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::resume":{"signature":"void Entity::resume(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::setTransparency":{"signature":"void Entity::setTransparency(Entity this, uint8 transparency)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"uint8 transparency","documentation":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},"Entity::handlePropagatedMessage":{"signature":"bool Entity::handlePropagatedMessage(Entity this, int32 message)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"int32 message","documentation":"Propagated integer message"}]},"Entity::getSpec":{"signature":"EntitySpec * Entity::getSpec(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getInternalId":{"signature":"int16 Entity::getInternalId(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getEntityFactory":{"signature":"EntityFactory Entity::getEntityFactory(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::setNormalizedDirection":{"signature":"void Entity::setNormalizedDirection(Entity this, NormalizedDirection normalizedDirection)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"NormalizedDirection normalizedDirection","documentation":"New facing direction with is components normalized"}]},"Entity::getNormalizedDirection":{"signature":"NormalizedDirection Entity::getNormalizedDirection(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::spawnChildEntity":{"signature":"Entity Entity::spawnChildEntity(Entity this, const PositionedEntity *const positionedEntity)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *const positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new child"}]},"Entity::addChildEntities":{"signature":"void Entity::addChildEntities(Entity this, const PositionedEntity *childrenSpecs)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *childrenSpecs","documentation":"Array of entity specs to use to initialize the new children"}]},"Entity::addChildEntitiesDeferred":{"signature":"void Entity::addChildEntitiesDeferred(Entity this, const PositionedEntity *childrenSpecs)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"const PositionedEntity *childrenSpecs","documentation":"Array of entity specs to use to initialize the new children"}]},"Entity::getChildById":{"signature":"Entity Entity::getChildById(Entity this, int16 id)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"int16 id","documentation":"Internal ID to look for"}]},"Entity::addBehavior":{"signature":"Behavior Entity::addBehavior(Entity this, BehaviorSpec *behaviorSpec)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"BehaviorSpec *behaviorSpec","documentation":"Specification to be used to configure the new behavior"}]},"Entity::addBehaviors":{"signature":"void Entity::addBehaviors(Entity this, BehaviorSpec **behaviorSpecs, bool destroyOldBehaviors)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"BehaviorSpec **behaviorSpecs","documentation":"Array of specification to be used to configure the new behaviors"},{"label":"bool destroyOldBehaviors","documentation":"If true, all previously attached behaviors will be removed"}]},"Entity::removeBehaviors":{"signature":"void Entity::removeBehaviors(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getBehaviors":{"signature":"bool Entity::getBehaviors(Entity this, ClassPointer classPointer, VirtualList behaviors)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"ClassPointer classPointer","documentation":"Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`"},{"label":"VirtualList behaviors","documentation":"Linked list to be filled with the behaviors that meed the search criteria (it is externally allocated and must be externally deleted)"}]},"Entity::addSprite":{"signature":"Sprite Entity::addSprite(Entity this, SpriteSpec *spriteSpec, SpriteManager spriteManager)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"SpriteSpec *spriteSpec","documentation":"Specification to be used to configure the new sprite"},{"label":"SpriteManager spriteManager","documentation":"A reference to the `SpriteManager` used to speed up multiple calls to this method"}]},"Entity::addSprites":{"signature":"void Entity::addSprites(Entity this, SpriteSpec **spriteSpecs, bool destroyOldSprites)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"SpriteSpec **spriteSpecs","documentation":"Array of specification to be used to configure the new sprites"},{"label":"bool destroyOldSprites","documentation":"If true, all previously attached sprites will be removed"}]},"Entity::removeSprite":{"signature":"void Entity::removeSprite(Entity this, Sprite sprite)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"Sprite sprite","documentation":"`Sprite` to be removed"}]},"Entity::removeSprites":{"signature":"void Entity::removeSprites(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getSprites":{"signature":"VirtualList Entity::getSprites(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::addWireframe":{"signature":"Wireframe Entity::addWireframe(Entity this, WireframeSpec *wireframeSpec, WireframeManager wireframeManager)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"WireframeSpec *wireframeSpec","documentation":"Specification to be used to configure the new sprite"},{"label":"WireframeManager wireframeManager","documentation":"A reference to the `WireframeManager` used to speed up multiple calls to this method"}]},"Entity::addWireframes":{"signature":"void Entity::addWireframes(Entity this, WireframeSpec **wireframeSpecs, bool destroyOldWireframes)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"WireframeSpec **wireframeSpecs","documentation":"Array of specification to be used to configure the new wireframes"},{"label":"bool destroyOldWireframes","documentation":"If true, all previously attached wireframes will be removed"}]},"Entity::removeWireframe":{"signature":"void Entity::removeWireframe(Entity this, Wireframe wireframe)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"Wireframe wireframe","documentation":"`Wireframe` to be removed"}]},"Entity::removeWireframes":{"signature":"void Entity::removeWireframes(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getWireframes":{"signature":"VirtualList Entity::getWireframes(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::addCollider":{"signature":"Collider Entity::addCollider(Entity this, ColliderSpec *colliderSpec, CollisionManager collisionManager)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"ColliderSpec *colliderSpec","documentation":"Specification to be used to configure the new sprite"},{"label":"CollisionManager collisionManager","documentation":"A reference to the `CollisionManager` used to speed up multiple calls to this method"}]},"Entity::addColliders":{"signature":"void Entity::addColliders(Entity this, ColliderSpec *colliderSpecs, bool destroyOldColliders)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"ColliderSpec *colliderSpecs","documentation":"Array of specification to be used to configure the new colliders"},{"label":"bool destroyOldColliders","documentation":"If true, all previously attached colliders will be removed"}]},"Entity::removeCollider":{"signature":"void Entity::removeCollider(Entity this, Collider collider)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"Collider collider","documentation":"`Collider` to be removed"}]},"Entity::removeColliders":{"signature":"void Entity::removeColliders(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getColliders":{"signature":"VirtualList Entity::getColliders(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::enableCollisions":{"signature":"void Entity::enableCollisions(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::disableCollisions":{"signature":"void Entity::disableCollisions(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::checkCollisions":{"signature":"void Entity::checkCollisions(Entity this, bool activate)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"bool activate","documentation":"If true, this entity's colliders check collision against other entities'"}]},"Entity::registerCollisions":{"signature":"void Entity::registerCollisions(Entity this, bool activate)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"bool activate","documentation":"If false, this entity's colliders won't keep track of collisions, hence they won't notify of it of persisting (`undefined`) collisions or when end ("}]},"Entity::setCollidersLayers":{"signature":"void Entity::setCollidersLayers(Entity this, uint32 layers)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"uint32 layers","documentation":"Flags that determine the layers for the entity's colliders"}]},"Entity::getCollidersLayers":{"signature":"uint32 Entity::getCollidersLayers(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::setCollidersLayersToIgnore":{"signature":"void Entity::setCollidersLayersToIgnore(Entity this, uint32 layersToIgnore)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"uint32 layersToIgnore","documentation":"Flags that determine the layers with colliders to ignore when detecting collisions"}]},"Entity::getCollidersLayersToIgnore":{"signature":"uint32 Entity::getCollidersLayersToIgnore(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::hasColliders":{"signature":"bool Entity::hasColliders(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::showColliders":{"signature":"void Entity::showColliders(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::hideColliders":{"signature":"void Entity::hideColliders(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::calculateSize":{"signature":"void Entity::calculateSize(Entity this, bool force)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"bool force","documentation":"If true, the size is computed even if has already been computed"}]},"Entity::getWidth":{"signature":"fixed_t Entity::getWidth(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getHeight":{"signature":"fixed_t Entity::getHeight(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::getDepth":{"signature":"fixed_t Entity::getDepth(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"Entity::isInCameraRange":{"signature":"bool Entity::isInCameraRange(Entity this, int16 padding, bool recursive)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"int16 padding","documentation":"Padding to be added to camera's frustum"},{"label":"bool recursive","documentation":"If true, the check is performed on the children, grand children, etc."}]},"Entity::setSpec":{"signature":"void Entity::setSpec(Entity this, void *entitySpec)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"void *entitySpec"}]},"Entity::setExtraInfo":{"signature":"void Entity::setExtraInfo(Entity this, void *extraInfo)","parameters":[{"label":"Entity this","documentation":"Entity Instance"},{"label":"void *extraInfo","documentation":"Pointer to the extra information that the entity might need"}]},"Entity::alwaysStreamIn":{"signature":"bool Entity::alwaysStreamIn(Entity this)","parameters":[{"label":"Entity this","documentation":"Entity Instance"}]},"EntityFactory::constructor":{"signature":"void EntityFactory::constructor(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"EntityFactory::spawnEntity":{"signature":"void EntityFactory::spawnEntity(EntityFactory this, const PositionedEntity *positionedEntity, Container parent, EventListener callback, int16 internalId)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"},{"label":"const PositionedEntity *positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it"},{"label":"Container parent","documentation":"The parent of the new entity instance"},{"label":"EventListener callback","documentation":"Callback to inform the parent when the new entity is ready"},{"label":"int16 internalId","documentation":"ID to keep track internally of the new instance"}]},"EntityFactory::createNextEntity":{"signature":"bool EntityFactory::createNextEntity(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"EntityFactory::hasEntitiesPending":{"signature":"bool EntityFactory::hasEntitiesPending(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"EntityFactory::print":{"signature":"void EntityFactory::print(EntityFactory this, int32 x, int32 y)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"EntityFactory::instantiateEntities":{"signature":"uint32 EntityFactory::instantiateEntities(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"EntityFactory::transformEntities":{"signature":"uint32 EntityFactory::transformEntities(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"EntityFactory::addChildEntities":{"signature":"uint32 EntityFactory::addChildEntities(EntityFactory this)","parameters":[{"label":"EntityFactory this","documentation":"EntityFactory Instance"}]},"Error::triggerException":{"signature":"static void Error::triggerException(Error this, char *message, char *detail)","parameters":[{"label":"Error this","documentation":"Error Instance"},{"label":"char *message","documentation":"Pointer to a brief description of the exception"},{"label":"char *detail","documentation":"Pointer to a detailed description of the exception"}]},"Error::zeroDivisionException":{"signature":"static void Error::zeroDivisionException(Error this)","parameters":[{"label":"Error this","documentation":"Error Instance"}]},"Error::invalidOpcodeException":{"signature":"static void Error::invalidOpcodeException(Error this)","parameters":[{"label":"Error this","documentation":"Error Instance"}]},"Error::floatingPointException":{"signature":"static void Error::floatingPointException(Error this)","parameters":[{"label":"Error this","documentation":"Error Instance"}]},"FrameBlendBgmapSprite::constructor":{"signature":"void FrameBlendBgmapSprite::constructor(FrameBlendBgmapSprite this, SpatialObject owner, const FrameBlendBgmapSpriteSpec *frameBlendBgmapSpriteSpec)","parameters":[{"label":"FrameBlendBgmapSprite this","documentation":"FrameBlendBgmapSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const FrameBlendBgmapSpriteSpec *frameBlendBgmapSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"FrameBlendBgmapSprite::doRender":{"signature":"int16 FrameBlendBgmapSprite::doRender(FrameBlendBgmapSprite this, int16 index)","parameters":[{"label":"FrameBlendBgmapSprite this","documentation":"FrameBlendBgmapSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"FrameRate::reset":{"signature":"void FrameRate::reset(FrameRate this)","parameters":[{"label":"FrameRate this","documentation":"FrameRate Instance"}]},"FrameRate::setTarget":{"signature":"void FrameRate::setTarget(FrameRate this, uint8 targetFPS)","parameters":[{"label":"FrameRate this","documentation":"FrameRate Instance"},{"label":"uint8 targetFPS","documentation":"Target frames per second"}]},"FrameRate::update":{"signature":"void FrameRate::update(FrameRate this)","parameters":[{"label":"FrameRate this","documentation":"FrameRate Instance"}]},"FrameRate::gameFrameStarted":{"signature":"void FrameRate::gameFrameStarted(FrameRate this, bool gameCycleEnded)","parameters":[{"label":"FrameRate this","documentation":"FrameRate Instance"},{"label":"bool gameCycleEnded","documentation":"Flag that indicates if the previous game frame was completed before the current second has elapsed"}]},"FrameRate::print":{"signature":"void FrameRate::print(FrameRate this, int32 x, int32 y)","parameters":[{"label":"FrameRate this","documentation":"FrameRate Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"GameState::constructor":{"signature":"void GameState::constructor(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::handleMessage":{"signature":"bool GameState::handleMessage(GameState this, Telegram telegram)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"GameState::enter":{"signature":"void GameState::enter(GameState this, void *owner)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is entering in this state"}]},"GameState::execute":{"signature":"void GameState::execute(GameState this, void *owner)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"GameState::exit":{"signature":"void GameState::exit(GameState this, void *owner)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is exiting this state"}]},"GameState::suspend":{"signature":"void GameState::suspend(GameState this, void *owner)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"GameState::resume":{"signature":"void GameState::resume(GameState this, void *owner)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"GameState::processMessage":{"signature":"bool GameState::processMessage(GameState this, void *owner, Telegram telegram)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"},{"label":"Telegram telegram","documentation":"`Telegram` to process"}]},"GameState::configureStage":{"signature":"void GameState::configureStage(GameState this, StageSpec *stageSpec, VirtualList positionedEntitiesToIgnore)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"StageSpec *stageSpec","documentation":"Specification that determines how to configure the stage"},{"label":"VirtualList positionedEntitiesToIgnore","documentation":"List of positioned entity structs to register for streaming"}]},"GameState::getUIContainer":{"signature":"UIContainer GameState::getUIContainer(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getStage":{"signature":"Stage GameState::getStage(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getPhysicalWorld":{"signature":"PhysicalWorld GameState::getPhysicalWorld(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getCollisionManager":{"signature":"CollisionManager GameState::getCollisionManager(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getLogicsClock":{"signature":"Clock GameState::getLogicsClock(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getMessagingClock":{"signature":"Clock GameState::getMessagingClock(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getAnimationsClock":{"signature":"Clock GameState::getAnimationsClock(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::getPhysicsClock":{"signature":"Clock GameState::getPhysicsClock(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::startClocks":{"signature":"void GameState::startClocks(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::pauseClocks":{"signature":"void GameState::pauseClocks(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::unpauseClocks":{"signature":"void GameState::unpauseClocks(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::stopClocks":{"signature":"void GameState::stopClocks(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::startLogics":{"signature":"void GameState::startLogics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::pauseLogics":{"signature":"void GameState::pauseLogics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::unpauseLogics":{"signature":"void GameState::unpauseLogics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::startMessaging":{"signature":"void GameState::startMessaging(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::pauseMessaging":{"signature":"void GameState::pauseMessaging(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::unpauseMessaging":{"signature":"void GameState::unpauseMessaging(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::startAnimations":{"signature":"void GameState::startAnimations(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::pauseAnimations":{"signature":"void GameState::pauseAnimations(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::unpauseAnimations":{"signature":"void GameState::unpauseAnimations(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::startPhysics":{"signature":"void GameState::startPhysics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::pausePhysics":{"signature":"void GameState::pausePhysics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::unpausePhysics":{"signature":"void GameState::unpausePhysics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::transform":{"signature":"void GameState::transform(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::transformUI":{"signature":"void GameState::transformUI(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::simulatePhysics":{"signature":"void GameState::simulatePhysics(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::processCollisions":{"signature":"void GameState::processCollisions(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::propagateMessage":{"signature":"bool GameState::propagateMessage(GameState this, int32 message)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"int32 message"}]},"GameState::propagateString":{"signature":"bool GameState::propagateString(GameState this, const char *string)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"const char *string"}]},"GameState::getEntityByName":{"signature":"Entity GameState::getEntityByName(GameState this, const char *entityName)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"const char *entityName","documentation":"Name to look for"}]},"GameState::showEntityWithName":{"signature":"void GameState::showEntityWithName(GameState this, const char *entityName)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"const char *entityName","documentation":"Name to look for"}]},"GameState::hideEntityWithName":{"signature":"void GameState::hideEntityWithName(GameState this, const char *entityName)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"const char *entityName","documentation":"Name to look for"}]},"GameState::changeFramerate":{"signature":"void GameState::changeFramerate(GameState this, int16 targetFPS, int32 duration)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"int16 targetFPS","documentation":"New target frame rate"},{"label":"int32 duration","documentation":"Amount of time to keep the change on the frame rate before setting back the default target (0 or negative to make it permanent as long as the state is active)"}]},"GameState::streamAll":{"signature":"void GameState::streamAll(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::stream":{"signature":"virtual bool GameState::stream(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"GameState::processUserInput":{"signature":"void GameState::processUserInput(GameState this, const UserInput *userInput)","parameters":[{"label":"GameState this","documentation":"GameState Instance"},{"label":"const UserInput *userInput","documentation":"Struct with the current user input information"}]},"GameState::isVersusMode":{"signature":"bool GameState::isVersusMode(GameState this)","parameters":[{"label":"GameState this","documentation":"GameState Instance"}]},"HardwareManager::initialize":{"signature":"static void HardwareManager::initialize(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::halt":{"signature":"static void HardwareManager::halt(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::setInterruptLevel":{"signature":"static void HardwareManager::setInterruptLevel(HardwareManager this, uint8 level)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"},{"label":"uint8 level","documentation":"Interrupt level"}]},"HardwareManager::enableInterrupts":{"signature":"static void HardwareManager::enableInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::disableInterrupts":{"signature":"static void HardwareManager::disableInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::resumeInterrupts":{"signature":"static void HardwareManager::resumeInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::suspendInterrupts":{"signature":"static void HardwareManager::suspendInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::enableMultiplexedInterrupts":{"signature":"static void HardwareManager::enableMultiplexedInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::disableMultiplexedInterrupts":{"signature":"static void HardwareManager::disableMultiplexedInterrupts(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::getStackPointer":{"signature":"static int32 HardwareManager::getStackPointer(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::getLinkPointer":{"signature":"static int32 HardwareManager::getLinkPointer(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::getPSW":{"signature":"static int32 HardwareManager::getPSW(HardwareManager this)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"}]},"HardwareManager::printStackStatus":{"signature":"static void HardwareManager::printStackStatus(HardwareManager this, int32 x, int32 y, bool resumed)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"bool resumed","documentation":"If true, print only minimum information"}]},"HardwareManager::print":{"signature":"static void HardwareManager::print(HardwareManager this, int32 x, int32 y)","parameters":[{"label":"HardwareManager this","documentation":"HardwareManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"InverseBox::constructor":{"signature":"void InverseBox::constructor(InverseBox this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"InverseBox this","documentation":"InverseBox Instance"},{"label":"SpatialObject owner"},{"label":"const ColliderSpec *colliderSpec"}]},"KeypadManager::interruptHandler":{"signature":"static void KeypadManager::interruptHandler(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::reset":{"signature":"void KeypadManager::reset(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::enable":{"signature":"void KeypadManager::enable(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::disable":{"signature":"void KeypadManager::disable(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::isEnabled":{"signature":"int32 KeypadManager::isEnabled(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::readUserInput":{"signature":"UserInput KeypadManager::readUserInput(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::enableDummyKey":{"signature":"void KeypadManager::enableDummyKey(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::disableDummyKey":{"signature":"void KeypadManager::disableDummyKey(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::registerInput":{"signature":"void KeypadManager::registerInput(KeypadManager this, uint16 inputToRegister)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"},{"label":"uint16 inputToRegister","documentation":"Flags to select which inputs to register and which to ignore"}]},"KeypadManager::getAccumulatedUserInput":{"signature":"long KeypadManager::getAccumulatedUserInput(KeypadManager this)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"}]},"KeypadManager::print":{"signature":"void KeypadManager::print(KeypadManager this, int32 x, int32 y)","parameters":[{"label":"KeypadManager this","documentation":"KeypadManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Line::constructor":{"signature":"void Line::constructor(Line this, SpatialObject owner, const LineSpec *lineSpec)","parameters":[{"label":"Line this","documentation":"Line Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the wireframe attaches to"},{"label":"const LineSpec *lineSpec"}]},"Line::render":{"signature":"void Line::render(Line this, Vector3D relativePosition)","parameters":[{"label":"Line this","documentation":"Line Instance"},{"label":"Vector3D relativePosition","documentation":"Position relative to the camera's"}]},"Line::draw":{"signature":"bool Line::draw(Line this)","parameters":[{"label":"Line this","documentation":"Line Instance"}]},"LineField::constructor":{"signature":"void LineField::constructor(LineField this, SpatialObject owner, const ColliderSpec *colliderSpec)","parameters":[{"label":"LineField this","documentation":"LineField Instance"},{"label":"SpatialObject owner"},{"label":"const ColliderSpec *colliderSpec"}]},"LineField::getNormal":{"signature":"Vector3D LineField::getNormal(LineField this)","parameters":[{"label":"LineField this","documentation":"LineField Instance"}]},"LineField::configureWireframe":{"signature":"void LineField::configureWireframe(LineField this)","parameters":[{"label":"LineField this","documentation":"LineField Instance"}]},"LineField::print":{"signature":"void LineField::print(LineField this, int32 x, int32 y)","parameters":[{"label":"LineField this","documentation":"LineField Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"LineField::displace":{"signature":"void LineField::displace(LineField this, fixed_t displacement)","parameters":[{"label":"LineField this","documentation":"LineField Instance"},{"label":"fixed_t displacement","documentation":"Displacement vector"}]},"LineField::getCenter":{"signature":"Vector3D LineField::getCenter(LineField this)","parameters":[{"label":"LineField this","documentation":"LineField Instance"}]},"LineField::getVertexes":{"signature":"void LineField::getVertexes(LineField this, Vector3D vertexes[2])","parameters":[{"label":"LineField this","documentation":"LineField Instance"},{"label":"Vector3D vertexes[2]"}]},"LineField::setNormalLength":{"signature":"void LineField::setNormalLength(LineField this, fixed_t normalLength)","parameters":[{"label":"LineField this","documentation":"LineField Instance"},{"label":"fixed_t normalLength","documentation":"Length of the line field's normal"}]},"ListenerObject::constructor":{"signature":"void ListenerObject::constructor(ListenerObject this)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"}]},"ListenerObject::destructor":{"signature":"void ListenerObject::destructor(ListenerObject this)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"}]},"ListenerObject::addEventListener":{"signature":"void ListenerObject::addEventListener(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"ListenerObject listener","documentation":"`ListenerObject` that listen for the event"},{"label":"EventListener callback"},{"label":"uint16 eventCode","documentation":"`Event`'s code to listen for"}]},"ListenerObject::removeEventListener":{"signature":"void ListenerObject::removeEventListener(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"ListenerObject listener","documentation":"`ListenerObject` to remove from the list of listeners"},{"label":"EventListener callback"},{"label":"uint16 eventCode","documentation":"`Event`'s code to stop listen for"}]},"ListenerObject::removeEventListeners":{"signature":"void ListenerObject::removeEventListeners(ListenerObject this, EventListener callback, uint16 eventCode)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"EventListener callback"},{"label":"uint16 eventCode","documentation":"`Event`'s code to stop listen for"}]},"ListenerObject::removeEventListenerScopes":{"signature":"void ListenerObject::removeEventListenerScopes(ListenerObject this, ListenerObject listener, uint16 eventCode)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"ListenerObject listener","documentation":"`ListenerObject` to remove from the list of listeners"},{"label":"uint16 eventCode","documentation":"`Event`'s code to stop listen for"}]},"ListenerObject::removeAllEventListeners":{"signature":"void ListenerObject::removeAllEventListeners(ListenerObject this)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"}]},"ListenerObject::hasActiveEventListeners":{"signature":"bool ListenerObject::hasActiveEventListeners(ListenerObject this)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"}]},"ListenerObject::fireEvent":{"signature":"void ListenerObject::fireEvent(ListenerObject this, uint16 eventCode)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"uint16 eventCode","documentation":"Code of the event to fire"}]},"ListenerObject::sendMessageTo":{"signature":"void ListenerObject::sendMessageTo(ListenerObject this, ListenerObject receiver, uint32 message, uint32 delay, uint32 randomDelay)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"ListenerObject receiver","documentation":"`ListenerObject` that is the target of the message"},{"label":"uint32 message","documentation":"The message's code"},{"label":"uint32 delay","documentation":"Milliseconds to wait before sending the message"},{"label":"uint32 randomDelay","documentation":"Range of a random delay in milliseconds to wait before sending the message"}]},"ListenerObject::sendMessageToSelf":{"signature":"void ListenerObject::sendMessageToSelf(ListenerObject this, uint32 message, uint32 delay, uint32 randomDelay)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"uint32 message","documentation":"The message's code"},{"label":"uint32 delay","documentation":"Milliseconds to wait before sending the message"},{"label":"uint32 randomDelay","documentation":"Range of a random delay in milliseconds to wait before sending the message"}]},"ListenerObject::discardAllMessages":{"signature":"void ListenerObject::discardAllMessages(ListenerObject this)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"}]},"ListenerObject::discardMessages":{"signature":"void ListenerObject::discardMessages(ListenerObject this, uint32 message)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"uint32 message","documentation":"The message's code to discard"}]},"ListenerObject::handleMessage":{"signature":"bool ListenerObject::handleMessage(ListenerObject this, Telegram telegram)","parameters":[{"label":"ListenerObject this","documentation":"ListenerObject Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"MBgmapAnimatedSprite::constructor":{"signature":"void MBgmapAnimatedSprite::constructor(MBgmapAnimatedSprite this, SpatialObject owner, const MBgmapAnimatedSpriteSpec *mBgmapAnimatedSpriteSpec)","parameters":[{"label":"MBgmapAnimatedSprite this","documentation":"MBgmapAnimatedSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const MBgmapAnimatedSpriteSpec *mBgmapAnimatedSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"MBgmapAnimatedSprite::updateAnimation":{"signature":"void MBgmapAnimatedSprite::updateAnimation(MBgmapAnimatedSprite this)","parameters":[{"label":"MBgmapAnimatedSprite this","documentation":"MBgmapAnimatedSprite Instance"}]},"MBgmapAnimatedSprite::setMultiframe":{"signature":"void MBgmapAnimatedSprite::setMultiframe(MBgmapAnimatedSprite this, uint16 frame)","parameters":[{"label":"MBgmapAnimatedSprite this","documentation":"MBgmapAnimatedSprite Instance"},{"label":"uint16 frame","documentation":"Current animation frame"}]},"MBgmapSprite::constructor":{"signature":"void MBgmapSprite::constructor(MBgmapSprite this, SpatialObject owner, const MBgmapSpriteSpec *mBgmapSpriteSpec)","parameters":[{"label":"MBgmapSprite this","documentation":"MBgmapSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const MBgmapSpriteSpec *mBgmapSpriteSpec"}]},"MBgmapSprite::doRender":{"signature":"int16 MBgmapSprite::doRender(MBgmapSprite this, int16 index)","parameters":[{"label":"MBgmapSprite this","documentation":"MBgmapSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"Math::abs":{"signature":"static int32 Math::abs(Math this, int32 number)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 number","documentation":"Input number to compute the absolute value of"}]},"Math::floor":{"signature":"static float Math::floor(Math this, float number)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"float number","documentation":"Input number to round down"}]},"Math::min":{"signature":"static int32 Math::min(Math this, int32 a, int32 b)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 a","documentation":"First number"},{"label":"int32 b","documentation":"Second number"}]},"Math::max":{"signature":"static int32 Math::max(Math this, int32 a, int32 b)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 a","documentation":"First number"},{"label":"int32 b","documentation":"Second number"}]},"Math::squareRoot":{"signature":"static float Math::squareRoot(Math this, float radicand)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"float radicand","documentation":"Number to compute the square root of"}]},"Math::squareRootFixed":{"signature":"static fixed_t Math::squareRootFixed(Math this, fixed_ext_t radicand)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"fixed_ext_t radicand","documentation":"Number to compute the square root of"}]},"Math::randomSeed":{"signature":"static uint32 Math::randomSeed(Math this)","parameters":[{"label":"Math this","documentation":"Math Instance"}]},"Math::random":{"signature":"static int32 Math::random(Math this, uint32 seed, int32 range)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"uint32 seed","documentation":"Random seed"},{"label":"int32 range","documentation":"Range for the generated pseudo random number"}]},"Math::haveEqualSign":{"signature":"static int32 Math::haveEqualSign(Math this, int32 a, int32 b)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 a","documentation":"First number"},{"label":"int32 b","documentation":"Second number"}]},"Math::getDigitsCount":{"signature":"static int32 Math::getDigitsCount(Math this, int32 number)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 number","documentation":"Number to compute the digits of"}]},"Math::resetRandomSeed":{"signature":"static void Math::resetRandomSeed(Math this)","parameters":[{"label":"Math this","documentation":"Math Instance"}]},"Math::intInfinity":{"signature":"static int32 Math::intInfinity(Math this)","parameters":[{"label":"Math this","documentation":"Math Instance"}]},"Math::fixedInfinity":{"signature":"static fixed_t Math::fixedInfinity(Math this)","parameters":[{"label":"Math this","documentation":"Math Instance"}]},"Math::fixed_extInfinity":{"signature":"static fixed_ext_t Math::fixed_extInfinity(Math this)","parameters":[{"label":"Math this","documentation":"Math Instance"}]},"Math::aSin":{"signature":"static int32 Math::aSin(Math this, fix7_9 sin)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"fix7_9 sin","documentation":"sin value"}]},"Math::getAngle":{"signature":"static int32 Math::getAngle(Math this, fix7_9 x, fix7_9 y)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"fix7_9 x","documentation":"X coordinate"},{"label":"fix7_9 y","documentation":"Y coordinate"}]},"Math::power":{"signature":"static int32 Math::power(Math this, int32 base, int32 power)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 base","documentation":"Base"},{"label":"int32 power","documentation":"Power"}]},"Math::powerFast":{"signature":"static int32 Math::powerFast(Math this, int32 base, int32 power)","parameters":[{"label":"Math this","documentation":"Math Instance"},{"label":"int32 base","documentation":"Base"},{"label":"int32 power","documentation":"Power"}]},"Mem::copyBYTE":{"signature":"static void Mem::copyBYTE(Mem this, BYTE *destination, const BYTE *source, uint32 numberOfBYTES)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"BYTE *destination","documentation":"Starting destination address"},{"label":"const BYTE *source","documentation":"Starting source address"},{"label":"uint32 numberOfBYTES","documentation":"Total number of BYTEs to copy"}]},"Mem::copyHWORD":{"signature":"static void Mem::copyHWORD(Mem this, HWORD *destination, const HWORD *source, uint32 numberOfHWORDS)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"HWORD *destination","documentation":"Starting destination address"},{"label":"const HWORD *source","documentation":"Starting source address"},{"label":"uint32 numberOfHWORDS","documentation":"Total number of HWORDs to copy"}]},"Mem::copyWORD":{"signature":"static void Mem::copyWORD(Mem this, WORD *destination, const WORD *source, uint32 numberOfWORDS)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"WORD *destination","documentation":"Starting destination address"},{"label":"const WORD *source","documentation":"Starting source address"},{"label":"uint32 numberOfWORDS","documentation":"Total number of WORDs to copy"}]},"Mem::combineBYTEs":{"signature":"static void Mem::combineBYTEs(Mem this, BYTE *destination, const BYTE *source1, const BYTE *source2, uint32 numberOfBYTES)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"BYTE *destination","documentation":"Starting destination address"},{"label":"const BYTE *source1","documentation":"Starting first source address"},{"label":"const BYTE *source2","documentation":"Starting second source address"},{"label":"uint32 numberOfBYTES","documentation":"Total number of BYTEs to combine"}]},"Mem::combineHWORDs":{"signature":"static void Mem::combineHWORDs(Mem this, HWORD *destination, const HWORD *source1, const HWORD *source2, uint32 numberOfWORDS)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"HWORD *destination","documentation":"Starting destination address"},{"label":"const HWORD *source1","documentation":"Starting first source address"},{"label":"const HWORD *source2","documentation":"Starting second source address"},{"label":"uint32 numberOfWORDS"}]},"Mem::combineWORDs":{"signature":"static void Mem::combineWORDs(Mem this, WORD *destination, const WORD *source1, const WORD *source2, uint32 numberOfWORDS)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"WORD *destination","documentation":"Starting destination address"},{"label":"const WORD *source1","documentation":"Starting first source address"},{"label":"const WORD *source2","documentation":"Starting second source address"},{"label":"uint32 numberOfWORDS","documentation":"Total number of WORDs to combine"}]},"Mem::addOffsetToBYTE":{"signature":"static void Mem::addOffsetToBYTE(Mem this, BYTE *destination, const BYTE *source, uint32 numberOfBYTES, uint32 offset)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"BYTE *destination","documentation":"Starting destination address"},{"label":"const BYTE *source","documentation":"Starting source address"},{"label":"uint32 numberOfBYTES","documentation":"Total number of BYTEs to combine"},{"label":"uint32 offset","documentation":"Value to add to the data in the source address"}]},"Mem::addOffsetToHWORD":{"signature":"static void Mem::addOffsetToHWORD(Mem this, HWORD *destination, const HWORD *source, uint32 numberOfHWORDS, uint32 offset)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"HWORD *destination","documentation":"Starting destination address"},{"label":"const HWORD *source","documentation":"Starting source address"},{"label":"uint32 numberOfHWORDS","documentation":"Total number of HWORDs to combine"},{"label":"uint32 offset","documentation":"Value to add to the data in the source address"}]},"Mem::addOffsetToWORD":{"signature":"static void Mem::addOffsetToWORD(Mem this, WORD *destination, const WORD *source, uint32 numberOfWORDS, uint32 offset)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"WORD *destination","documentation":"Starting destination address"},{"label":"const WORD *source","documentation":"Starting source address"},{"label":"uint32 numberOfWORDS","documentation":"Total number of WORDs to combine"},{"label":"uint32 offset","documentation":"Value to add to the data in the source address"}]},"Mem::clear":{"signature":"static void Mem::clear(Mem this, BYTE *destination, uint32 numberOfBYTES)","parameters":[{"label":"Mem this","documentation":"Mem Instance"},{"label":"BYTE *destination","documentation":"Starting address"},{"label":"uint32 numberOfBYTES","documentation":"Total number of zeros to write"}]},"MemoryPool::allocate":{"signature":"static BYTE * MemoryPool::allocate(MemoryPool this, int32 numBytes)","parameters":[{"label":"MemoryPool this","documentation":"MemoryPool Instance"},{"label":"int32 numBytes","documentation":"Total number of bytes to allocate"}]},"MemoryPool::free":{"signature":"static void MemoryPool::free(MemoryPool this, BYTE *object)","parameters":[{"label":"MemoryPool this","documentation":"MemoryPool Instance"},{"label":"BYTE *object","documentation":"Pointer to the memory block to free"}]},"MemoryPool::printResumedUsage":{"signature":"void MemoryPool::printResumedUsage(MemoryPool this, int32 x, int32 y)","parameters":[{"label":"MemoryPool this","documentation":"MemoryPool Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"MemoryPool::printDetailedUsage":{"signature":"void MemoryPool::printDetailedUsage(MemoryPool this, int32 x, int32 y)","parameters":[{"label":"MemoryPool this","documentation":"MemoryPool Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Mesh::constructor":{"signature":"void Mesh::constructor(Mesh this, SpatialObject owner, const MeshSpec *meshSpec)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the wireframe attaches to"},{"label":"const MeshSpec *meshSpec"}]},"Mesh::getPixelRightBox":{"signature":"PixelRightBox Mesh::getPixelRightBox(Mesh this)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"}]},"Mesh::getVertices":{"signature":"VirtualList Mesh::getVertices(Mesh this)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"}]},"Mesh::render":{"signature":"void Mesh::render(Mesh this, Vector3D relativePosition)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"},{"label":"Vector3D relativePosition","documentation":"Position relative to the camera's"}]},"Mesh::draw":{"signature":"bool Mesh::draw(Mesh this)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"}]},"Mesh::addSegments":{"signature":"void Mesh::addSegments(Mesh this, PixelVector(*segments)[2], Vector3D displacement)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"},{"label":"PixelVector(*segments)[2]","documentation":"Array of segments holding their spatial data @displacement: Displacement to add to the segments' vertices"},{"label":"Vector3D displacement"}]},"Mesh::addSegment":{"signature":"void Mesh::addSegment(Mesh this, Vector3D startVector, Vector3D endVector)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"},{"label":"Vector3D startVector","documentation":"New segment's starting point"},{"label":"Vector3D endVector","documentation":"New segment's end point"}]},"Mesh::drawInterlaced":{"signature":"bool Mesh::drawInterlaced(Mesh this)","parameters":[{"label":"Mesh this","documentation":"Mesh Instance"}]},"MessageDispatcher::dispatchMessage":{"signature":"static bool MessageDispatcher::dispatchMessage(MessageDispatcher this, uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"uint32 delay","documentation":"Milliseconds to wait before dispatching the message"},{"label":"ListenerObject sender","documentation":"`Object` that sends the message"},{"label":"ListenerObject receiver","documentation":"`Object` that receives the message"},{"label":"int32 message","documentation":"Message's code"},{"label":"void *extraInfo","documentation":"Pointer to any extra data that must accompany the message"}]},"MessageDispatcher::dispatchDelayedMessage":{"signature":"void MessageDispatcher::dispatchDelayedMessage(MessageDispatcher this, Clock clock, uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"Clock clock"},{"label":"uint32 delay","documentation":"Milliseconds to wait before dispatching the message"},{"label":"ListenerObject sender","documentation":"`Object` that sends the message"},{"label":"ListenerObject receiver","documentation":"`Object` that receives the message"},{"label":"int32 message","documentation":"Message's code"},{"label":"void *extraInfo","documentation":"Pointer to any extra data that must accompany the message"}]},"MessageDispatcher::dispatchDelayedMessages":{"signature":"bool MessageDispatcher::dispatchDelayedMessages(MessageDispatcher this)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"}]},"MessageDispatcher::processDiscardedMessages":{"signature":"void MessageDispatcher::processDiscardedMessages(MessageDispatcher this)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"}]},"MessageDispatcher::discardDelayedMessagesWithClock":{"signature":"bool MessageDispatcher::discardDelayedMessagesWithClock(MessageDispatcher this, Clock clock)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"Clock clock","documentation":"`Clock` to search in delayed messages to discard"}]},"MessageDispatcher::discardDelayedMessagesFromSender":{"signature":"bool MessageDispatcher::discardDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender, int32 message)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject sender","documentation":"`Object` that originally sent the message"},{"label":"int32 message","documentation":"Message's code"}]},"MessageDispatcher::discardDelayedMessagesForReceiver":{"signature":"bool MessageDispatcher::discardDelayedMessagesForReceiver(MessageDispatcher this, ListenerObject receiver, int32 message)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject receiver","documentation":"`Object` that was the target of the message"},{"label":"int32 message","documentation":"Message's code"}]},"MessageDispatcher::discardAllDelayedMessagesFromSender":{"signature":"bool MessageDispatcher::discardAllDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject sender","documentation":"`Object` that was the target of the message"}]},"MessageDispatcher::discardAllDelayedMessagesForReceiver":{"signature":"bool MessageDispatcher::discardAllDelayedMessagesForReceiver(MessageDispatcher this, ListenerObject receiver)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject receiver","documentation":"`Object` that was the target of the message"}]},"MessageDispatcher::discardAllDelayedMessages":{"signature":"bool MessageDispatcher::discardAllDelayedMessages(MessageDispatcher this, ListenerObject listenerObject)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject listenerObject","documentation":"`Object` that the messages were originally sent to or sent by"}]},"MessageDispatcher::print":{"signature":"void MessageDispatcher::print(MessageDispatcher this, int32 x, int32 y)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"MessageDispatcher::printAllDelayedMessagesFromSender":{"signature":"void MessageDispatcher::printAllDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender, int16 x, int16 y)","parameters":[{"label":"MessageDispatcher this","documentation":"MessageDispatcher Instance"},{"label":"ListenerObject sender","documentation":"`Object` that originally sent the message"},{"label":"int16 x","documentation":"Screen x coordinate where to print"},{"label":"int16 y","documentation":"Screen y coordinate where to print"}]},"Object::getCast":{"signature":"static Object Object::getCast(Object this, void *object, ClassPointer targetClassGetClassMethod, ClassPointer baseClassGetClassMethod)","parameters":[{"label":"Object this","documentation":"Object Instance"},{"label":"void *object","documentation":"`Object` to cast"},{"label":"ClassPointer targetClassGetClassMethod","documentation":"pointer to the target class' identifier method"},{"label":"ClassPointer baseClassGetClassMethod","documentation":"pointer to the object's base class' identifier method"}]},"Object::constructor":{"signature":"void Object::constructor(Object this)","parameters":[{"label":"Object this","documentation":"Object Instance"}]},"Object::getVTable":{"signature":"const void * Object::getVTable(Object this)","parameters":[{"label":"Object this","documentation":"Object Instance"}]},"Object::evolveTo":{"signature":"bool Object::evolveTo(Object this, const void *targetClass)","parameters":[{"label":"Object this","documentation":"Object Instance"},{"label":"const void *targetClass","documentation":"pointer to the target class' virtual table"}]},"ObjectAnimatedSprite::constructor":{"signature":"void ObjectAnimatedSprite::constructor(ObjectAnimatedSprite this, SpatialObject owner, const ObjectAnimatedSpriteSpec *objectAnimatedSpriteSpec)","parameters":[{"label":"ObjectAnimatedSprite this","documentation":"ObjectAnimatedSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const ObjectAnimatedSpriteSpec *objectAnimatedSpriteSpec"}]},"ObjectAnimatedSprite::updateAnimation":{"signature":"void ObjectAnimatedSprite::updateAnimation(ObjectAnimatedSprite this)","parameters":[{"label":"ObjectAnimatedSprite this","documentation":"ObjectAnimatedSprite Instance"}]},"ObjectSprite::constructor":{"signature":"void ObjectSprite::constructor(ObjectSprite this, SpatialObject owner, const ObjectSpriteSpec *objectSpriteSpec)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const ObjectSpriteSpec *objectSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"ObjectSprite::registerWithManager":{"signature":"void ObjectSprite::registerWithManager(ObjectSprite this)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"}]},"ObjectSprite::unregisterWithManager":{"signature":"void ObjectSprite::unregisterWithManager(ObjectSprite this)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"}]},"ObjectSprite::doRender":{"signature":"int16 ObjectSprite::doRender(ObjectSprite this, int16 index)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"ObjectSprite::setRotation":{"signature":"void ObjectSprite::setRotation(ObjectSprite this, const Rotation *rotation)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation` to apply to the sprite"}]},"ObjectSprite::getTotalPixels":{"signature":"int32 ObjectSprite::getTotalPixels(ObjectSprite this)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"}]},"ObjectSprite::resetTotalObjects":{"signature":"void ObjectSprite::resetTotalObjects(ObjectSprite this)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"}]},"ObjectSprite::getTotalObjects":{"signature":"int16 ObjectSprite::getTotalObjects(ObjectSprite this)","parameters":[{"label":"ObjectSprite this","documentation":"ObjectSprite Instance"}]},"ObjectSpriteContainer::reset":{"signature":"static void ObjectSpriteContainer::reset(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::prepareForRendering":{"signature":"static void ObjectSpriteContainer::prepareForRendering(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::finishRendering":{"signature":"static void ObjectSpriteContainer::finishRendering(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::writeDRAM":{"signature":"static void ObjectSpriteContainer::writeDRAM(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::constructor":{"signature":"void ObjectSpriteContainer::constructor(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::registerWithManager":{"signature":"void ObjectSpriteContainer::registerWithManager(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::unregisterWithManager":{"signature":"void ObjectSpriteContainer::unregisterWithManager(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::doRender":{"signature":"int16 ObjectSpriteContainer::doRender(ObjectSpriteContainer this, int16 index)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"ObjectSpriteContainer::getTotalPixels":{"signature":"int32 ObjectSpriteContainer::getTotalPixels(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::invalidateRendering":{"signature":"void ObjectSpriteContainer::invalidateRendering(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::forceShow":{"signature":"void ObjectSpriteContainer::forceShow(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::forceHide":{"signature":"void ObjectSpriteContainer::forceHide(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectSpriteContainer::print":{"signature":"void ObjectSpriteContainer::print(ObjectSpriteContainer this, int32 x, int32 y)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"ObjectSpriteContainer::registerSprite":{"signature":"bool ObjectSpriteContainer::registerSprite(ObjectSpriteContainer this, ObjectSprite objectSprite)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"ObjectSprite objectSprite","documentation":"`Sprite` to be managed"}]},"ObjectSpriteContainer::unregisterSprite":{"signature":"void ObjectSpriteContainer::unregisterSprite(ObjectSpriteContainer this, ObjectSprite objectSprite)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"ObjectSprite objectSprite","documentation":"`Sprite` to no longer manage"}]},"ObjectSpriteContainer::sortProgressively":{"signature":"bool ObjectSpriteContainer::sortProgressively(ObjectSpriteContainer this, bool complete)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"bool complete","documentation":"Flag to indicate if the sorting must be complete or deferred"}]},"ObjectSpriteContainer::renderSprites":{"signature":"void ObjectSpriteContainer::renderSprites(ObjectSpriteContainer this, bool evenFrame, bool updateAnimations)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"bool evenFrame","documentation":"Flag to control transparency effects"},{"label":"bool updateAnimations","documentation":"Flag to allow or prevent animations to be updated"}]},"ObjectSpriteContainer::showSprites":{"signature":"void ObjectSpriteContainer::showSprites(ObjectSpriteContainer this, ObjectSprite spareSprite)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"ObjectSprite spareSprite","documentation":"`Sprite` to not show"}]},"ObjectSpriteContainer::hideSprites":{"signature":"void ObjectSpriteContainer::hideSprites(ObjectSpriteContainer this, ObjectSprite spareSprite)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"},{"label":"ObjectSprite spareSprite","documentation":"`Sprite` to not hide"}]},"ObjectSpriteContainer::getTotalUsedObjects":{"signature":"int32 ObjectSpriteContainer::getTotalUsedObjects(ObjectSpriteContainer this)","parameters":[{"label":"ObjectSpriteContainer this","documentation":"ObjectSpriteContainer Instance"}]},"ObjectTexture::constructor":{"signature":"void ObjectTexture::constructor(ObjectTexture this, ObjectTextureSpec *objectTextureSpec, uint16 id)","parameters":[{"label":"ObjectTexture this","documentation":"ObjectTexture Instance"},{"label":"ObjectTextureSpec *objectTextureSpec","documentation":"Specification that determines how to configure the texture"},{"label":"uint16 id","documentation":"`Texture`'s identificator"}]},"ObjectTextureManager::reset":{"signature":"void ObjectTextureManager::reset(ObjectTextureManager this)","parameters":[{"label":"ObjectTextureManager this","documentation":"ObjectTextureManager Instance"}]},"ObjectTextureManager::getTexture":{"signature":"ObjectTexture ObjectTextureManager::getTexture(ObjectTextureManager this, ObjectTextureSpec *objectTextureSpec)","parameters":[{"label":"ObjectTextureManager this","documentation":"ObjectTextureManager Instance"},{"label":"ObjectTextureSpec *objectTextureSpec","documentation":"Spec to use to initilize the desired texture"}]},"ObjectTextureManager::releaseTexture":{"signature":"void ObjectTextureManager::releaseTexture(ObjectTextureManager this, ObjectTexture objectTexture)","parameters":[{"label":"ObjectTextureManager this","documentation":"ObjectTextureManager Instance"},{"label":"ObjectTexture objectTexture","documentation":"`Texture` to release"}]},"Optical::getFromPixelOptical":{"signature":"static Optical Optical::getFromPixelOptical(Optical this, PixelOptical pixelOptical, CameraFrustum cameraFrustum)","parameters":[{"label":"Optical this","documentation":"Optical Instance"},{"label":"PixelOptical pixelOptical","documentation":"Struct that holds optical parameters in pixel units"},{"label":"CameraFrustum cameraFrustum","documentation":"`Camera`'s frustum configuration parameters"}]},"Optical::applyCameraFrustum":{"signature":"static Optical Optical::applyCameraFrustum(Optical this, Optical optical, CameraFrustum cameraFrustum)","parameters":[{"label":"Optical this","documentation":"Optical Instance"},{"label":"Optical optical","documentation":"Struct that holds optical parameters in meters"},{"label":"CameraFrustum cameraFrustum","documentation":"`Camera`'s frustum configuration parameters"}]},"Optics::calculateParallax":{"signature":"static int16 Optics::calculateParallax(Optics this, fixed_t z)","parameters":[{"label":"Optics this","documentation":"Optics Instance"},{"label":"fixed_t z","documentation":"3D coordinate"}]},"OptionsSelector::constructor":{"signature":"void OptionsSelector::constructor(OptionsSelector this, uint16 cols, uint16 rows, char *font, char *leftMark, char *rightMark)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"uint16 cols","documentation":"Number of columns per page"},{"label":"uint16 rows","documentation":"Number of rows per page"},{"label":"char *font"},{"label":"char *leftMark","documentation":"Left selection mark character"},{"label":"char *rightMark","documentation":"Right selection mark character"}]},"OptionsSelector::setColumnWidth":{"signature":"void OptionsSelector::setColumnWidth(OptionsSelector this, uint8 width)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"uint8 width","documentation":"Columns' with"}]},"OptionsSelector::setMarkCharacters":{"signature":"void OptionsSelector::setMarkCharacters(OptionsSelector this, char *leftMark, char *rightMark)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"char *leftMark","documentation":"Left selection mark character"},{"label":"char *rightMark","documentation":"Right selection mark character"}]},"OptionsSelector::setOptions":{"signature":"void OptionsSelector::setOptions(OptionsSelector this, VirtualList options)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"VirtualList options","documentation":"List of options to set"}]},"OptionsSelector::setSelectedOption":{"signature":"bool OptionsSelector::setSelectedOption(OptionsSelector this, int32 optionIndex)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"int32 optionIndex","documentation":"Index of the option to select"}]},"OptionsSelector::selectNext":{"signature":"void OptionsSelector::selectNext(OptionsSelector this)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"}]},"OptionsSelector::selectPrevious":{"signature":"void OptionsSelector::selectPrevious(OptionsSelector this)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"}]},"OptionsSelector::getSelectedOption":{"signature":"int32 OptionsSelector::getSelectedOption(OptionsSelector this)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"}]},"OptionsSelector::getNumberOfOptions":{"signature":"int32 OptionsSelector::getNumberOfOptions(OptionsSelector this)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"}]},"OptionsSelector::print":{"signature":"void OptionsSelector::print(OptionsSelector this, uint8 x, uint8 y, uint32 alignment, uint8 spacing)","parameters":[{"label":"OptionsSelector this","documentation":"OptionsSelector Instance"},{"label":"uint8 x","documentation":"Screen x coordinate where to print"},{"label":"uint8 y","documentation":"Screen y coordinate where to print"},{"label":"uint32 alignment","documentation":"Text alignment"},{"label":"uint8 spacing","documentation":"Text spacing"}]},"ParamTableManager::reset":{"signature":"void ParamTableManager::reset(ParamTableManager this)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"}]},"ParamTableManager::setup":{"signature":"void ParamTableManager::setup(ParamTableManager this, int32 availableBgmapSegmentsForParamTable)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"},{"label":"int32 availableBgmapSegmentsForParamTable","documentation":"Number of available BGMAP segments for the param tables"}]},"ParamTableManager::allocate":{"signature":"uint32 ParamTableManager::allocate(ParamTableManager this, BgmapSprite bgmapSprite)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"},{"label":"BgmapSprite bgmapSprite","documentation":"`Sprite` for which a param table will be allocated"}]},"ParamTableManager::free":{"signature":"void ParamTableManager::free(ParamTableManager this, BgmapSprite bgmapSprite)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"},{"label":"BgmapSprite bgmapSprite","documentation":"`Sprite` whose param table has to be freed"}]},"ParamTableManager::defragment":{"signature":"void ParamTableManager::defragment(ParamTableManager this, bool deferred)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"},{"label":"bool deferred","documentation":"Flag to defragment param table memory over time"}]},"ParamTableManager::getParamTableBase":{"signature":"uint32 ParamTableManager::getParamTableBase(ParamTableManager this)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"}]},"ParamTableManager::print":{"signature":"void ParamTableManager::print(ParamTableManager this, int32 x, int32 y)","parameters":[{"label":"ParamTableManager this","documentation":"ParamTableManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Particle::constructor":{"signature":"void Particle::constructor(Particle this, const ParticleSpec *particleSpec)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"const ParticleSpec *particleSpec","documentation":"Specification that determines how to configure the particle"}]},"Particle::isSubjectToGravity":{"signature":"bool Particle::isSubjectToGravity(Particle this, Vector3D gravity)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"Vector3D gravity","documentation":"Gravity vector"}]},"Particle::setup":{"signature":"void Particle::setup(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, int16 lifeSpan, const Vector3D *position, const Vector3D *force, uint32 movementType, const AnimationFunction **animationFunctions, const char *animationName)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"const SpriteSpec *spriteSpec","documentation":"Specification for a sprite to add to the particle"},{"label":"const WireframeSpec *wireframeSpec","documentation":"Specification for a wireframe to add to the particle"},{"label":"int16 lifeSpan","documentation":"Time that the particle must live"},{"label":"const Vector3D *position","documentation":"Starting position"},{"label":"const Vector3D *force","documentation":"Force to apply"},{"label":"uint32 movementType","documentation":"Movement type on each axis"},{"label":"const AnimationFunction **animationFunctions","documentation":"Array of animations"},{"label":"const char *animationName","documentation":"Animation to play"}]},"Particle::resume":{"signature":"void Particle::resume(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, const AnimationFunction **animationFunctions, const char *animationName)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"const SpriteSpec *spriteSpec","documentation":"Specification for a sprite to add to the particle"},{"label":"const WireframeSpec *wireframeSpec","documentation":"Specification for a wireframe to add to the particle"},{"label":"const AnimationFunction **animationFunctions","documentation":"Array of animations"},{"label":"const char *animationName","documentation":"Animation to play"}]},"Particle::suspend":{"signature":"void Particle::suspend(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::expire":{"signature":"void Particle::expire(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::show":{"signature":"void Particle::show(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::hide":{"signature":"void Particle::hide(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::setTransparency":{"signature":"void Particle::setTransparency(Particle this, uint8 transparency)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"uint8 transparency"}]},"Particle::isVisible":{"signature":"bool Particle::isVisible(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::reset":{"signature":"void Particle::reset(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"Particle::update":{"signature":"bool Particle::update(Particle this, uint32 elapsedTime, void(*behavior)(Particle particle))","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"uint32 elapsedTime","documentation":"Elapsed time since the last call"},{"label":"void(*behavior)(Particle particle)","documentation":"Function pointer to control particle's behavior"}]},"Particle::applyForce":{"signature":"void Particle::applyForce(Particle this, const Vector3D *force, uint32 movementType)","parameters":[{"label":"Particle this","documentation":"Particle Instance"},{"label":"const Vector3D *force","documentation":"Force to be applied"},{"label":"uint32 movementType","documentation":"Movement type on each axis"}]},"Particle::configureMass":{"signature":"void Particle::configureMass(Particle this)","parameters":[{"label":"Particle this","documentation":"Particle Instance"}]},"ParticleSystem::constructor":{"signature":"void ParticleSystem::constructor(ParticleSystem this, const ParticleSystemSpec *particleSystemSpec, int16 internalId, const char *const name)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"const ParticleSystemSpec *particleSystemSpec","documentation":"Specification that determines how to configure the particle system"},{"label":"int16 internalId","documentation":"ID to internally identify this instance"},{"label":"const char *const name","documentation":"Instance's name"}]},"ParticleSystem::show":{"signature":"void ParticleSystem::show(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::hide":{"signature":"void ParticleSystem::hide(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::update":{"signature":"void ParticleSystem::update(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::suspend":{"signature":"void ParticleSystem::suspend(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::resume":{"signature":"void ParticleSystem::resume(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::setTransparency":{"signature":"void ParticleSystem::setTransparency(ParticleSystem this, uint8 transparency)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"uint8 transparency","documentation":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},"ParticleSystem::setSpec":{"signature":"void ParticleSystem::setSpec(ParticleSystem this, void *particleSystemSpec)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"void *particleSystemSpec","documentation":"Specification that determines how to configure the particle system"}]},"ParticleSystem::start":{"signature":"void ParticleSystem::start(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::pause":{"signature":"void ParticleSystem::pause(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::unpause":{"signature":"void ParticleSystem::unpause(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::isPaused":{"signature":"bool ParticleSystem::isPaused(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::deleteAllParticles":{"signature":"void ParticleSystem::deleteAllParticles(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::setLoop":{"signature":"void ParticleSystem::setLoop(ParticleSystem this, bool loop)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"bool loop","documentation":"If false, the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles"}]},"ParticleSystem::getLoop":{"signature":"bool ParticleSystem::getLoop(ParticleSystem this)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"}]},"ParticleSystem::setSelfDestroyWhenDone":{"signature":"void ParticleSystem::setSelfDestroyWhenDone(ParticleSystem this, bool selfDestroyWhenDone)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"bool selfDestroyWhenDone","documentation":"If true, the particle system auto destroys when the total number of spawned particles equals the maximum number of alive particles."}]},"ParticleSystem::setElapsedTime":{"signature":"void ParticleSystem::setElapsedTime(ParticleSystem this, uint32 elapsedTime)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"uint32 elapsedTime","documentation":"Elapsed time between calls to the update method"}]},"ParticleSystem::print":{"signature":"void ParticleSystem::print(ParticleSystem this, int16 x, int16 y)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"int16 x","documentation":"Screen x coordinate where to print"},{"label":"int16 y","documentation":"Screen y coordinate where to print"}]},"ParticleSystem::particleSpawned":{"signature":"void ParticleSystem::particleSpawned(ParticleSystem this, Particle particle)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"Particle particle","documentation":"The newly spawned particle"}]},"ParticleSystem::particleRecycled":{"signature":"void ParticleSystem::particleRecycled(ParticleSystem this, Particle particle)","parameters":[{"label":"ParticleSystem this","documentation":"ParticleSystem Instance"},{"label":"Particle particle","documentation":"The recycled particle"}]},"PhysicalParticle::constructor":{"signature":"void PhysicalParticle::constructor(PhysicalParticle this, const PhysicalParticleSpec *physicalParticleSpec)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"},{"label":"const PhysicalParticleSpec *physicalParticleSpec","documentation":"Specification that determines how to configure the particle"}]},"PhysicalParticle::getVelocity":{"signature":"const Vector3D * PhysicalParticle::getVelocity(PhysicalParticle this)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"}]},"PhysicalParticle::setPosition":{"signature":"void PhysicalParticle::setPosition(PhysicalParticle this, const Vector3D *position)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"},{"label":"const Vector3D *position","documentation":"3D vector defining the particle's new position"}]},"PhysicalParticle::isSubjectToGravity":{"signature":"bool PhysicalParticle::isSubjectToGravity(PhysicalParticle this, Vector3D gravity)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"},{"label":"Vector3D gravity"}]},"PhysicalParticle::reset":{"signature":"void PhysicalParticle::reset(PhysicalParticle this)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"}]},"PhysicalParticle::update":{"signature":"bool PhysicalParticle::update(PhysicalParticle this, uint32 elapsedTime, void(*behavior)(Particle particle))","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"},{"label":"uint32 elapsedTime","documentation":"Elapsed time since the last call"},{"label":"void(*behavior)(Particle particle)","documentation":"Function pointer to control particle's behavior"}]},"PhysicalParticle::configureMass":{"signature":"void PhysicalParticle::configureMass(PhysicalParticle this)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"}]},"PhysicalParticle::applyForce":{"signature":"void PhysicalParticle::applyForce(PhysicalParticle this, const Vector3D *force, uint32 movementType)","parameters":[{"label":"PhysicalParticle this","documentation":"PhysicalParticle Instance"},{"label":"const Vector3D *force","documentation":"Force to be applied"},{"label":"uint32 movementType","documentation":"Movement type on each axis"}]},"PhysicalWorld::getElapsedTimeStep":{"signature":"static fixed_t PhysicalWorld::getElapsedTimeStep(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::constructor":{"signature":"void PhysicalWorld::constructor(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::reset":{"signature":"void PhysicalWorld::reset(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::update":{"signature":"void PhysicalWorld::update(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::createBody":{"signature":"Body PhysicalWorld::createBody(PhysicalWorld this, SpatialObject owner, const PhysicalProperties *physicalProperties, uint16 axisSubjectToGravity)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"SpatialObject owner","documentation":"`Object` to which the body will attach to"},{"label":"const PhysicalProperties *physicalProperties","documentation":"Spec to use to create the body"},{"label":"uint16 axisSubjectToGravity","documentation":"Flag of axis on which the body is subject to gravity"}]},"PhysicalWorld::destroyBody":{"signature":"void PhysicalWorld::destroyBody(PhysicalWorld this, Body body)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"Body body"}]},"PhysicalWorld::setTimeScale":{"signature":"void PhysicalWorld::setTimeScale(PhysicalWorld this, fixed_t timeScale)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"fixed_t timeScale","documentation":"Time scale for time step on each call to update"}]},"PhysicalWorld::getTimeScale":{"signature":"uint32 PhysicalWorld::getTimeScale(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::setGravity":{"signature":"void PhysicalWorld::setGravity(PhysicalWorld this, Vector3D gravity)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"Vector3D gravity","documentation":"Gravity to set in the current physical world"}]},"PhysicalWorld::getGravity":{"signature":"Vector3D PhysicalWorld::getGravity(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::setFrictionCoefficient":{"signature":"void PhysicalWorld::setFrictionCoefficient(PhysicalWorld this, fixed_t frictionCoefficient)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"fixed_t frictionCoefficient","documentation":"Friction coefficient to set in the current physical world"}]},"PhysicalWorld::getFrictionCoefficient":{"signature":"fixed_t PhysicalWorld::getFrictionCoefficient(PhysicalWorld this)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"}]},"PhysicalWorld::print":{"signature":"void PhysicalWorld::print(PhysicalWorld this, int32 x, int32 y)","parameters":[{"label":"PhysicalWorld this","documentation":"PhysicalWorld Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"PixelSize::getFromSize":{"signature":"static PixelSize PixelSize::getFromSize(PixelSize this, Size size)","parameters":[{"label":"PixelSize this","documentation":"PixelSize Instance"},{"label":"Size size","documentation":"`Size` struct to convert"}]},"PixelVector::zero":{"signature":"static PixelVector PixelVector::zero(PixelVector this)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"}]},"PixelVector::get":{"signature":"static PixelVector PixelVector::get(PixelVector this, PixelVector from, PixelVector to)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector from","documentation":"Start vector"},{"label":"PixelVector to","documentation":"End vector"}]},"PixelVector::sum":{"signature":"static PixelVector PixelVector::sum(PixelVector this, PixelVector a, PixelVector b)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector a","documentation":"First vector"},{"label":"PixelVector b","documentation":"Second vector"}]},"PixelVector::sub":{"signature":"static PixelVector PixelVector::sub(PixelVector this, PixelVector a, PixelVector b)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector a","documentation":"End vector"},{"label":"PixelVector b","documentation":"Start vector"}]},"PixelVector::intermediate":{"signature":"static PixelVector PixelVector::intermediate(PixelVector this, PixelVector a, PixelVector b)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector a","documentation":"First vector"},{"label":"PixelVector b","documentation":"Second vector"}]},"PixelVector::getFromScreenPixelVector":{"signature":"static PixelVector PixelVector::getFromScreenPixelVector(PixelVector this, ScreenPixelVector screenPixelVector, int16 parallax)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"ScreenPixelVector screenPixelVector","documentation":"Vector to transform"},{"label":"int16 parallax","documentation":"Parallax component for the resulting vector"}]},"PixelVector::getFromVector2D":{"signature":"static PixelVector PixelVector::getFromVector2D(PixelVector this, Vector2D vector2D, int16 parallax)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"Vector2D vector2D","documentation":"2D vector to transform"},{"label":"int16 parallax","documentation":"Parallax component for the resulting vector"}]},"PixelVector::getFromVector3D":{"signature":"static PixelVector PixelVector::getFromVector3D(PixelVector this, Vector3D vector3D, int16 parallax)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"Vector3D vector3D","documentation":"3D vector to transform"},{"label":"int16 parallax","documentation":"Parallax component for the resulting vector"}]},"PixelVector::getRelativeToCamera":{"signature":"static PixelVector PixelVector::getRelativeToCamera(PixelVector this, PixelVector vector)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector vector","documentation":"Vector to compute the relative vector of"}]},"PixelVector::projectVector3D":{"signature":"static PixelVector PixelVector::projectVector3D(PixelVector this, Vector3D vector3D, int16 parallax)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"Vector3D vector3D"},{"label":"int16 parallax","documentation":"Parallax component for the resulting vector"}]},"PixelVector::transformVector3D":{"signature":"static PixelVector PixelVector::transformVector3D(PixelVector this, Vector3D vector)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"Vector3D vector","documentation":"3D vector to transform"}]},"PixelVector::length":{"signature":"static fixed_t PixelVector::length(PixelVector this, PixelVector vector)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector vector","documentation":"Vector to compute the length of"}]},"PixelVector::squareLength":{"signature":"static uint32 PixelVector::squareLength(PixelVector this, PixelVector vector)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector vector","documentation":"Vector to compute the square length of"}]},"PixelVector::isVisible":{"signature":"static bool PixelVector::isVisible(PixelVector this, PixelVector vector, PixelRightBox pixelRightBox, int16 padding)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector vector","documentation":"Vector to test"},{"label":"PixelRightBox pixelRightBox","documentation":"Bounding box"},{"label":"int16 padding","documentation":"Padding to be added to the bounding box"}]},"PixelVector::isVector3DVisible":{"signature":"static bool PixelVector::isVector3DVisible(PixelVector this, Vector3D vector, PixelRightBox pixelRightBox, int16 padding)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"Vector3D vector","documentation":"3D vector to test"},{"label":"PixelRightBox pixelRightBox","documentation":"Bounding box"},{"label":"int16 padding","documentation":"Padding to be added to the bounding box"}]},"PixelVector::print":{"signature":"static void PixelVector::print(PixelVector this, PixelVector vector, int32 x, int32 y)","parameters":[{"label":"PixelVector this","documentation":"PixelVector Instance"},{"label":"PixelVector vector","documentation":"Vector to print"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Printing::setDebugMode":{"signature":"void Printing::setDebugMode(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::reset":{"signature":"void Printing::reset(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::show":{"signature":"void Printing::show(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::hide":{"signature":"void Printing::hide(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::loadFonts":{"signature":"void Printing::loadFonts(Printing this, FontSpec **fontSpecs)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"FontSpec **fontSpecs","documentation":"Array of font specs whose charset should pre preloaded"}]},"Printing::releaseFonts":{"signature":"void Printing::releaseFonts(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::clear":{"signature":"void Printing::clear(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::clearRow":{"signature":"void Printing::clearRow(Printing this, uint16 row)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint16 row","documentation":"Row to clean (0-27)"}]},"Printing::text":{"signature":"void Printing::text(Printing this, const char *string, int32 x, int32 y, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"const char *string","documentation":"String to print"},{"label":"int32 x","documentation":"Column to start printing at"},{"label":"int32 y","documentation":"Row to start printing at"},{"label":"const char *font","documentation":"Name of font to use for printing"}]},"Printing::int32":{"signature":"void Printing::int32(Printing this, int32 value, uint8 x, uint8 y, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int32 value","documentation":"Integer to print"},{"label":"uint8 x","documentation":"Column to start printing at"},{"label":"uint8 y","documentation":"Row to start printing at"},{"label":"const char *font","documentation":"Name of font to use for printing"}]},"Printing::hex":{"signature":"void Printing::hex(Printing this, WORD value, uint8 x, uint8 y, uint8 length, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"WORD value","documentation":"Hex value to print"},{"label":"uint8 x","documentation":"Column to start printing at"},{"label":"uint8 y","documentation":"Row to start printing at"},{"label":"uint8 length","documentation":"Digits to print"},{"label":"const char *font","documentation":"Name of font to use for printing"}]},"Printing::float":{"signature":"void Printing::float(Printing this, float value, uint8 x, uint8 y, int32 precision, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"float value","documentation":"Float value to print"},{"label":"uint8 x","documentation":"Column to start printing at"},{"label":"uint8 y","documentation":"Row to start printing at"},{"label":"int32 precision","documentation":"How many decimals to print"},{"label":"const char *font","documentation":"Name of font to use for printing"}]},"Printing::setFontPage":{"signature":"void Printing::setFontPage(Printing this, const char *font, uint16 page)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"const char *font","documentation":"Name of font to use for printing"},{"label":"uint16 page","documentation":"ROM's displacement multiplier"}]},"Printing::setOrientation":{"signature":"void Printing::setOrientation(Printing this, uint8 value)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint8 value","documentation":"PrintingOrientation"}]},"Printing::setDirection":{"signature":"void Printing::setDirection(Printing this, uint8 value)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint8 value","documentation":"PrintingDirection"}]},"Printing::setPrintingBgmapSegment":{"signature":"void Printing::setPrintingBgmapSegment(Printing this, int8 printingBgmapSegment)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int8 printingBgmapSegment","documentation":"Index of the bgmap segment to print to"}]},"Printing::addSprite":{"signature":"void Printing::addSprite(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::setActiveSprite":{"signature":"bool Printing::setActiveSprite(Printing this, uint16 printingSpriteIndex)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint16 printingSpriteIndex","documentation":"Index of the sprite to activate"}]},"Printing::printSprite":{"signature":"void Printing::printSprite(Printing this, int16 x, int16 y)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int16 x","documentation":"Screen x coordinate where to print"},{"label":"int16 y","documentation":"Screen y coordinate where to print"}]},"Printing::setCoordinates":{"signature":"void Printing::setCoordinates(Printing this, int16 x, int16 y, int16 z, int8 parallax)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int16 x","documentation":"WORLD x coordinate"},{"label":"int16 y","documentation":"WORLD y coordinate"},{"label":"int16 z","documentation":"WORLD parallax value"},{"label":"int8 parallax","documentation":"WORLD parallax value"}]},"Printing::setWorldCoordinates":{"signature":"void Printing::setWorldCoordinates(Printing this, int16 x, int16 y, int16 z, int8 parallax)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int16 x","documentation":"WORLD x coordinate"},{"label":"int16 y","documentation":"WORLD y coordinate"},{"label":"int16 z","documentation":"WORLD parallax value"},{"label":"int8 parallax","documentation":"WORLD parallax value"}]},"Printing::setBgmapCoordinates":{"signature":"void Printing::setBgmapCoordinates(Printing this, int16 mx, int16 my, int8 mp)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"int16 mx","documentation":"BGMAP x coordinate"},{"label":"int16 my","documentation":"BGMAP y coordinate"},{"label":"int8 mp","documentation":"BGMAP parallax value"}]},"Printing::setWorldSize":{"signature":"void Printing::setWorldSize(Printing this, uint16 w, uint16 h)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint16 w","documentation":"WORLD's width"},{"label":"uint16 h","documentation":"WORLD's height"}]},"Printing::setTransparency":{"signature":"void Printing::setTransparency(Printing this, uint8 transparency)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint8 transparency","documentation":"Transparent value (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},"Printing::setPalette":{"signature":"void Printing::setPalette(Printing this, uint8 palette)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"uint8 palette","documentation":"Palette for the printing area"}]},"Printing::resetCoordinates":{"signature":"void Printing::resetCoordinates(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::getWorldCoordinatesX":{"signature":"int16 Printing::getWorldCoordinatesX(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::getWorldCoordinatesY":{"signature":"int16 Printing::getWorldCoordinatesY(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::getWorldCoordinatesP":{"signature":"int16 Printing::getWorldCoordinatesP(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::getSpriteIndex":{"signature":"PixelVector Printing::getSpriteIndex(Printing this)","parameters":[{"label":"Printing this","documentation":"Printing Instance"}]},"Printing::getFontByName":{"signature":"FontData * Printing::getFontByName(Printing this, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"const char *font","documentation":"Name of font to get spec for"}]},"Printing::getTextSize":{"signature":"FontSize Printing::getTextSize(Printing this, const char *string, const char *font)","parameters":[{"label":"Printing this","documentation":"Printing Instance"},{"label":"const char *string","documentation":"String to compute size for"},{"label":"const char *font","documentation":"Name of font to use for size computation"}]},"PrintingSprite::constructor":{"signature":"void PrintingSprite::constructor(PrintingSprite this, SpatialObject owner, const PrintingSpriteSpec *printingSpriteSpec)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"SpatialObject owner"},{"label":"const PrintingSpriteSpec *printingSpriteSpec"}]},"PrintingSprite::doRender":{"signature":"int16 PrintingSprite::doRender(PrintingSprite this, int16 index)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"PrintingSprite::reset":{"signature":"void PrintingSprite::reset(PrintingSprite this)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"}]},"PrintingSprite::setPrintingBgmapSegment":{"signature":"void PrintingSprite::setPrintingBgmapSegment(PrintingSprite this, int8 printingBgmapSegment)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"int8 printingBgmapSegment","documentation":"BGMAP segment to use for printing"}]},"PrintingSprite::setGValues":{"signature":"void PrintingSprite::setGValues(PrintingSprite this, int16 gx, int16 gy, int16 gp)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"int16 gx","documentation":"GX coordinate of the WORLD used to display the text"},{"label":"int16 gy","documentation":"GY coordinate of the WORLD used to display the text"},{"label":"int16 gp","documentation":"GP coordinate of the WORLD used to display the text"}]},"PrintingSprite::setMValues":{"signature":"void PrintingSprite::setMValues(PrintingSprite this, int16 mx, int16 my, int16 mp)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"int16 mx","documentation":"MX coordinate of BGMAP area to be used to display the text"},{"label":"int16 my","documentation":"MY coordinate of BGMAP area to be used to display the text"},{"label":"int16 mp","documentation":"MP coordinate of BGMAP area to be used to display the text"}]},"PrintingSprite::setSize":{"signature":"void PrintingSprite::setSize(PrintingSprite this, uint16 width, uint16 height)","parameters":[{"label":"PrintingSprite this","documentation":"PrintingSprite Instance"},{"label":"uint16 width","documentation":"Width of the WORLD to by used to display the text"},{"label":"uint16 height","documentation":"Height of the WORLD to by used to display the text"}]},"Profiler::initialize":{"signature":"void Profiler::initialize(Profiler this)","parameters":[{"label":"Profiler this","documentation":"Profiler Instance"}]},"Profiler::reset":{"signature":"void Profiler::reset(Profiler this)","parameters":[{"label":"Profiler this","documentation":"Profiler Instance"}]},"Profiler::start":{"signature":"void Profiler::start(Profiler this)","parameters":[{"label":"Profiler this","documentation":"Profiler Instance"}]},"Profiler::end":{"signature":"void Profiler::end(Profiler this)","parameters":[{"label":"Profiler this","documentation":"Profiler Instance"}]},"Profiler::lap":{"signature":"void Profiler::lap(Profiler this, uint32 lapType, const char *processName)","parameters":[{"label":"Profiler this","documentation":"Profiler Instance"},{"label":"uint32 lapType","documentation":"Type of lap to record"},{"label":"const char *processName","documentation":"Name of the process during the lap"}]},"Rotation::zero":{"signature":"static Rotation Rotation::zero(Rotation this)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"}]},"Rotation::invert":{"signature":"static Rotation Rotation::invert(Rotation this, Rotation rotation)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to invert"}]},"Rotation::clamp":{"signature":"static Rotation Rotation::clamp(Rotation this, fixed_ext_t x, fixed_ext_t y, fixed_ext_t z)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"fixed_ext_t x","documentation":"`Rotation`'s x component to clamp"},{"label":"fixed_ext_t y","documentation":"`Rotation`'s y component to clamp"},{"label":"fixed_ext_t z","documentation":"`Rotation`'s z component to clamp"}]},"Rotation::getShortestDifferce":{"signature":"static fixed_t Rotation::getShortestDifferce(Rotation this, fixed_t angleFrom, fixed_t angleTo)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"fixed_t angleFrom","documentation":"Starting angle"},{"label":"fixed_t angleTo","documentation":"End angle"}]},"Rotation::sum":{"signature":"static Rotation Rotation::sum(Rotation this, Rotation a, Rotation b)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation a","documentation":"First rotation"},{"label":"Rotation b","documentation":"Second rotation"}]},"Rotation::sub":{"signature":"static Rotation Rotation::sub(Rotation this, Rotation a, Rotation b)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation a","documentation":"Minuend rotation"},{"label":"Rotation b","documentation":"Subtrahend rotation"}]},"Rotation::intermediate":{"signature":"static Rotation Rotation::intermediate(Rotation this, Rotation a, Rotation b)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation a","documentation":"First rotation"},{"label":"Rotation b","documentation":"Second rotation"}]},"Rotation::scalarProduct":{"signature":"static Rotation Rotation::scalarProduct(Rotation this, Rotation rotation, int16 scalar)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to scale"},{"label":"int16 scalar","documentation":"Scalar to multiply"}]},"Rotation::scalarDivision":{"signature":"static Rotation Rotation::scalarDivision(Rotation this, Rotation rotation, int16 scalar)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to scale"},{"label":"int16 scalar","documentation":"Scalar divisor"}]},"Rotation::getRelativeToCamera":{"signature":"static Rotation Rotation::getRelativeToCamera(Rotation this, Rotation rotation)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to compute the relative rotation of"}]},"Rotation::getFromPixelRotation":{"signature":"static Rotation Rotation::getFromPixelRotation(Rotation this, PixelRotation pixelRotation)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"PixelRotation pixelRotation","documentation":"`Rotation` to transform"}]},"Rotation::getFromScreenPixelRotation":{"signature":"static Rotation Rotation::getFromScreenPixelRotation(Rotation this, ScreenPixelRotation pixelRotation)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"ScreenPixelRotation pixelRotation","documentation":"`Rotation` to transform"}]},"Rotation::areEqual":{"signature":"static bool Rotation::areEqual(Rotation this, Rotation a, Rotation b)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation a","documentation":"First rotation"},{"label":"Rotation b","documentation":"Second rotation"}]},"Rotation::print":{"signature":"static void Rotation::print(Rotation this, Rotation rotation, int32 x, int32 y)","parameters":[{"label":"Rotation this","documentation":"Rotation Instance"},{"label":"Rotation rotation","documentation":"`Rotation` to print"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"RumbleManager::startEffect":{"signature":"static void RumbleManager::startEffect(RumbleManager this, const RumbleEffectSpec *rumbleEffectSpec)","parameters":[{"label":"RumbleManager this","documentation":"RumbleManager Instance"},{"label":"const RumbleEffectSpec *rumbleEffectSpec","documentation":"Specification of the rumble effect to play"}]},"RumbleManager::stopEffect":{"signature":"static void RumbleManager::stopEffect(RumbleManager this, const RumbleEffectSpec *rumbleEffectSpec)","parameters":[{"label":"RumbleManager this","documentation":"RumbleManager Instance"},{"label":"const RumbleEffectSpec *rumbleEffectSpec","documentation":"Specification of the rumble effect to stop; if NULL, any playing effect is stoped"}]},"RumbleManager::reset":{"signature":"void RumbleManager::reset(RumbleManager this)","parameters":[{"label":"RumbleManager this","documentation":"RumbleManager Instance"}]},"RumbleManager::setAsync":{"signature":"void RumbleManager::setAsync(RumbleManager this, bool async)","parameters":[{"label":"RumbleManager this","documentation":"RumbleManager Instance"},{"label":"bool async","documentation":"If true, rumble commands are broadcasted asynchronously"}]},"RumbleManager::setOverridePreviousEffect":{"signature":"void RumbleManager::setOverridePreviousEffect(RumbleManager this, bool overridePreviousEffect)","parameters":[{"label":"RumbleManager this","documentation":"RumbleManager Instance"},{"label":"bool overridePreviousEffect","documentation":"If true, new effects are broadcasted regardless of if there is a queued effect pending broadcasting"}]},"SRAMManager::reset":{"signature":"void SRAMManager::reset(SRAMManager this)","parameters":[{"label":"SRAMManager this","documentation":"SRAMManager Instance"}]},"SRAMManager::clear":{"signature":"void SRAMManager::clear(SRAMManager this, int32 startOffset, int32 endOffset)","parameters":[{"label":"SRAMManager this","documentation":"SRAMManager Instance"},{"label":"int32 startOffset","documentation":"Start offset of range to clear"},{"label":"int32 endOffset","documentation":"End address of range to clear"}]},"SRAMManager::save":{"signature":"void SRAMManager::save(SRAMManager this, const BYTE *const source, int32 memberOffset, int32 dataSize)","parameters":[{"label":"SRAMManager this","documentation":"SRAMManager Instance"},{"label":"const BYTE *const source","documentation":"WRAM address from were data will be copied"},{"label":"int32 memberOffset","documentation":"WRAM address offset"},{"label":"int32 dataSize","documentation":"Number of BYTES to read"}]},"SRAMManager::read":{"signature":"void SRAMManager::read(SRAMManager this, BYTE *destination, int32 memberOffset, int32 dataSize)","parameters":[{"label":"SRAMManager this","documentation":"SRAMManager Instance"},{"label":"BYTE *destination","documentation":"WRAM address were data will be loaded"},{"label":"int32 memberOffset","documentation":"WRAM address offset"},{"label":"int32 dataSize","documentation":"Number of BYTES to read"}]},"Scale::zero":{"signature":"static Scale Scale::zero(Scale this)","parameters":[{"label":"Scale this","documentation":"Scale Instance"}]},"Scale::unit":{"signature":"static Scale Scale::unit(Scale this)","parameters":[{"label":"Scale this","documentation":"Scale Instance"}]},"Scale::sum":{"signature":"static Scale Scale::sum(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"First scale"},{"label":"Scale b","documentation":"Second scale"}]},"Scale::sub":{"signature":"static Scale Scale::sub(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"Minuend scale"},{"label":"Scale b","documentation":"Substraend scale"}]},"Scale::intermediate":{"signature":"static Scale Scale::intermediate(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"First scale"},{"label":"Scale b","documentation":"Second scale"}]},"Scale::product":{"signature":"static Scale Scale::product(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"First scale"},{"label":"Scale b","documentation":"Second scale"}]},"Scale::division":{"signature":"static Scale Scale::division(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"Dividend scale"},{"label":"Scale b","documentation":"Divisor scale"}]},"Scale::scalarProduct":{"signature":"static Scale Scale::scalarProduct(Scale this, Scale scale, int16 scalar)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale scale","documentation":"`Scale` to scale"},{"label":"int16 scalar","documentation":"Scalar to multiply"}]},"Scale::scalarDivision":{"signature":"static Scale Scale::scalarDivision(Scale this, Scale scale, int16 scalar)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale scale","documentation":"`Scale` to scale"},{"label":"int16 scalar","documentation":"Scalar divisor"}]},"Scale::getFromScreenPixelScale":{"signature":"static Scale Scale::getFromScreenPixelScale(Scale this, ScreenPixelScale screenPixelScale)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"ScreenPixelScale screenPixelScale","documentation":"`Scale` to transform"}]},"Scale::areEqual":{"signature":"static bool Scale::areEqual(Scale this, Scale a, Scale b)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale a","documentation":"First scale"},{"label":"Scale b","documentation":"Second scale"}]},"Scale::print":{"signature":"static void Scale::print(Scale this, Scale scale, int32 x, int32 y)","parameters":[{"label":"Scale this","documentation":"Scale Instance"},{"label":"Scale scale"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Size::getFromPixelSize":{"signature":"static Size Size::getFromPixelSize(Size this, PixelSize pixelSize)","parameters":[{"label":"Size this","documentation":"Size Instance"},{"label":"PixelSize pixelSize"}]},"SolidParticle::constructor":{"signature":"void SolidParticle::constructor(SolidParticle this, const SolidParticleSpec *solidParticleSpec)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"},{"label":"const SolidParticleSpec *solidParticleSpec","documentation":"Specification that determines how to configure the particle"}]},"SolidParticle::handleMessage":{"signature":"bool SolidParticle::handleMessage(SolidParticle this, Telegram telegram)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"SolidParticle::getRadius":{"signature":"fixed_t SolidParticle::getRadius(SolidParticle this)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"}]},"SolidParticle::isSubjectToGravity":{"signature":"bool SolidParticle::isSubjectToGravity(SolidParticle this, Vector3D gravity)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"},{"label":"Vector3D gravity"}]},"SolidParticle::getInGameType":{"signature":"uint32 SolidParticle::getInGameType(SolidParticle this)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"}]},"SolidParticle::collisionStarts":{"signature":"bool SolidParticle::collisionStarts(SolidParticle this, const CollisionInformation *collisionInformation)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"SolidParticle::collisionEnds":{"signature":"void SolidParticle::collisionEnds(SolidParticle this, const CollisionInformation *collisionInformation)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"SolidParticle::reset":{"signature":"void SolidParticle::reset(SolidParticle this)","parameters":[{"label":"SolidParticle this","documentation":"SolidParticle Instance"}]},"Sound::setMirror":{"signature":"static void Sound::setMirror(Sound this, Mirror mirror)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"Mirror mirror","documentation":"Struct with a flag for each axis to mirror"}]},"Sound::constructor":{"signature":"void Sound::constructor(Sound this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"const SoundSpec *soundSpec","documentation":"Specification that determines how to configure the sound"},{"label":"EventListener soundReleaseListener","documentation":"Callback for when the sound is released"},{"label":"ListenerObject scope","documentation":"`Object` that listens for the releasing event"}]},"Sound::play":{"signature":"void Sound::play(Sound this, const Vector3D *position, uint32 playbackType)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"const Vector3D *position","documentation":"Pointer to the spatial position of the sound"},{"label":"uint32 playbackType","documentation":"Specifies how the playback should start"}]},"Sound::stop":{"signature":"void Sound::stop(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::pause":{"signature":"void Sound::pause(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::unpause":{"signature":"void Sound::unpause(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::suspend":{"signature":"void Sound::suspend(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::resume":{"signature":"void Sound::resume(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::mute":{"signature":"void Sound::mute(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::unmute":{"signature":"void Sound::unmute(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::rewind":{"signature":"void Sound::rewind(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::release":{"signature":"void Sound::release(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::lock":{"signature":"void Sound::lock(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::unlock":{"signature":"void Sound::unlock(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::autoReleaseOnFinish":{"signature":"void Sound::autoReleaseOnFinish(Sound this, bool autoReleaseOnFinish)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"bool autoReleaseOnFinish","documentation":"If true, the sound is released when playaback is complete"}]},"Sound::setSpeed":{"signature":"void Sound::setSpeed(Sound this, fix7_9_ext speed)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"fix7_9_ext speed","documentation":"Target playback speed"}]},"Sound::getSpeed":{"signature":"fix7_9_ext Sound::getSpeed(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::setVolumenScalePower":{"signature":"void Sound::setVolumenScalePower(Sound this, uint8 volumenScalePower)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"uint8 volumenScalePower","documentation":"Factor by which the final volume is reduced"}]},"Sound::setFrequencyDelta":{"signature":"void Sound::setFrequencyDelta(Sound this, uint16 frequencyDelta)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"uint16 frequencyDelta","documentation":"Delta to be added to the frequency"}]},"Sound::getFrequencyDelta":{"signature":"uint16 Sound::getFrequencyDelta(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::isPlaying":{"signature":"bool Sound::isPlaying(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::isPaused":{"signature":"bool Sound::isPaused(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::isFadingIn":{"signature":"bool Sound::isFadingIn(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::isFadingOut":{"signature":"bool Sound::isFadingOut(Sound this)","parameters":[{"label":"Sound this","documentation":"Sound Instance"}]},"Sound::update":{"signature":"void Sound::update(Sound this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"uint32 elapsedMicroseconds","documentation":"Elapsed time since the last call"},{"label":"uint32 targetPCMUpdates","documentation":"Ideal Elapsed time since the last call"}]},"Sound::print":{"signature":"void Sound::print(Sound this, int32 x, int32 y)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Sound::printPlaybackTime":{"signature":"void Sound::printPlaybackTime(Sound this, int32 x, int32 y)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Sound::printPlaybackProgress":{"signature":"void Sound::printPlaybackProgress(Sound this, int32 x, int32 y)","parameters":[{"label":"Sound this","documentation":"Sound Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"SoundManager::playSounds":{"signature":"static void SoundManager::playSounds(SoundManager this, uint32 elapsedMicroseconds)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"uint32 elapsedMicroseconds","documentation":"Elapsed time between call"}]},"SoundManager::reset":{"signature":"void SoundManager::reset(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::update":{"signature":"void SoundManager::update(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::setPCMTargetPlaybackRefreshRate":{"signature":"void SoundManager::setPCMTargetPlaybackRefreshRate(SoundManager this, uint16 pcmTargetPlaybackRefreshRate)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"uint16 pcmTargetPlaybackRefreshRate","documentation":"Target refresh rate for PCM playback"}]},"SoundManager::isPlayingSound":{"signature":"bool SoundManager::isPlayingSound(SoundManager this, const SoundSpec *soundSpec)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"const SoundSpec *soundSpec","documentation":"`Sound` spec to check for"}]},"SoundManager::playSound":{"signature":"bool SoundManager::playSound(SoundManager this, const SoundSpec *soundSpec, const Vector3D *position, uint32 playbackType, EventListener soundReleaseListener, ListenerObject scope)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"const SoundSpec *soundSpec","documentation":"Spec that defines the sound to play"},{"label":"const Vector3D *position","documentation":"Position for spatilly position sound"},{"label":"uint32 playbackType","documentation":"How to play the sound"},{"label":"EventListener soundReleaseListener","documentation":"Callback method for when the sound is released"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"SoundManager::getSound":{"signature":"Sound SoundManager::getSound(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"const SoundSpec *soundSpec","documentation":"Spec that defines the sound to play"},{"label":"EventListener soundReleaseListener","documentation":"Callback method for when the sound is released"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"SoundManager::findSound":{"signature":"Sound SoundManager::findSound(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"const SoundSpec *soundSpec","documentation":"Spec that defines the sound to play"},{"label":"EventListener soundReleaseListener","documentation":"Callback method for when the sound is released"},{"label":"ListenerObject scope","documentation":"`Object` on which to perform the callback"}]},"SoundManager::muteAllSounds":{"signature":"void SoundManager::muteAllSounds(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::unmuteAllSounds":{"signature":"void SoundManager::unmuteAllSounds(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::rewindAllSounds":{"signature":"void SoundManager::rewindAllSounds(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::stopAllSounds":{"signature":"void SoundManager::stopAllSounds(SoundManager this, bool release, SoundSpec **excludedSounds)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"bool release"},{"label":"SoundSpec **excludedSounds","documentation":"Array of sound specs to not stop"}]},"SoundManager::lock":{"signature":"void SoundManager::lock(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::unlock":{"signature":"void SoundManager::unlock(SoundManager this)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"}]},"SoundManager::print":{"signature":"void SoundManager::print(SoundManager this, int32 x, int32 y)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"int32 x"},{"label":"int32 y"}]},"SoundManager::printPlaybackTime":{"signature":"void SoundManager::printPlaybackTime(SoundManager this, int32 x, int32 y)","parameters":[{"label":"SoundManager this","documentation":"SoundManager Instance"},{"label":"int32 x"},{"label":"int32 y"}]},"SoundTest::update":{"signature":"void SoundTest::update(SoundTest this)","parameters":[{"label":"SoundTest this","documentation":"SoundTest Instance"}]},"SoundTest::show":{"signature":"void SoundTest::show(SoundTest this)","parameters":[{"label":"SoundTest this","documentation":"SoundTest Instance"}]},"SoundTest::hide":{"signature":"void SoundTest::hide(SoundTest this)","parameters":[{"label":"SoundTest this","documentation":"SoundTest Instance"}]},"SoundTest::processUserInput":{"signature":"void SoundTest::processUserInput(SoundTest this, uint16 pressedKey)","parameters":[{"label":"SoundTest this","documentation":"SoundTest Instance"},{"label":"uint16 pressedKey","documentation":"User pressed key"}]},"SoundTestState::enter":{"signature":"void SoundTestState::enter(SoundTestState this, void *owner)","parameters":[{"label":"SoundTestState this","documentation":"SoundTestState Instance"},{"label":"void *owner","documentation":"`Object` that is entering in this state"}]},"SoundTestState::isKeyCombination":{"signature":"bool SoundTestState::isKeyCombination(SoundTestState this, const UserInput *userInput)","parameters":[{"label":"SoundTestState this","documentation":"SoundTestState Instance"},{"label":"const UserInput *userInput"}]},"SoundTrack::setPCMTargetPlaybackRefreshRate":{"signature":"static void SoundTrack::setPCMTargetPlaybackRefreshRate(SoundTrack this, uint16 pcmTargetPlaybackRefreshRate)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"},{"label":"uint16 pcmTargetPlaybackRefreshRate","documentation":"Target refresh rate for PCM playback"}]},"SoundTrack::constructor":{"signature":"void SoundTrack::constructor(SoundTrack this, const SoundTrackSpec *soundTrackSpec)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"},{"label":"const SoundTrackSpec *soundTrackSpec","documentation":"Specification that determines how to configure the sound track"}]},"SoundTrack::start":{"signature":"void SoundTrack::start(SoundTrack this, bool wasPaused)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"},{"label":"bool wasPaused","documentation":"If true, the playback is resuming"}]},"SoundTrack::stop":{"signature":"void SoundTrack::stop(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::pause":{"signature":"void SoundTrack::pause(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::unpause":{"signature":"void SoundTrack::unpause(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::suspend":{"signature":"void SoundTrack::suspend(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::resume":{"signature":"void SoundTrack::resume(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::rewind":{"signature":"void SoundTrack::rewind(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::update":{"signature":"bool SoundTrack::update(SoundTrack this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates, fix7_9_ext tickStep, fix7_9_ext targetTimerResolutionFactor, fixed_t leftVolumeFactor, fixed_t rightVolumeFactor, int8 volumeReduction, uint8 volumenScalePower)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"},{"label":"uint32 elapsedMicroseconds","documentation":"Elapsed time since the last call"},{"label":"uint32 targetPCMUpdates","documentation":"Ideal Elapsed time since the last call"},{"label":"fix7_9_ext tickStep","documentation":"Tick step per timer interrupt"},{"label":"fix7_9_ext targetTimerResolutionFactor","documentation":"Factor to apply to the tick step"},{"label":"fixed_t leftVolumeFactor","documentation":"Factor to apply to the left speaker's volume"},{"label":"fixed_t rightVolumeFactor","documentation":"Factor to apply to the right speaker's volume"},{"label":"int8 volumeReduction","documentation":"Volume reduction used for fade effects"},{"label":"uint8 volumenScalePower","documentation":"2's power to divide to the final volume value"}]},"SoundTrack::getTicks":{"signature":"uint32 SoundTrack::getTicks(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::getElapsedTicksPercentaje":{"signature":"float SoundTrack::getElapsedTicksPercentaje(SoundTrack this)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"}]},"SoundTrack::getTotalPlaybackMilliseconds":{"signature":"uint32 SoundTrack::getTotalPlaybackMilliseconds(SoundTrack this, uint16 targetTimerResolutionUS)","parameters":[{"label":"SoundTrack this","documentation":"SoundTrack Instance"},{"label":"uint16 targetTimerResolutionUS","documentation":"Target timer resolution in US"}]},"SpatialObject::constructor":{"signature":"void SpatialObject::constructor(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getTransformation":{"signature":"const Transformation * SpatialObject::getTransformation(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getPosition":{"signature":"const Vector3D * SpatialObject::getPosition(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getRotation":{"signature":"const Rotation * SpatialObject::getRotation(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getScale":{"signature":"const Scale * SpatialObject::getScale(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getRadius":{"signature":"fixed_t SpatialObject::getRadius(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getVelocity":{"signature":"const Vector3D * SpatialObject::getVelocity(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getSpeed":{"signature":"fixed_t SpatialObject::getSpeed(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getBounciness":{"signature":"fixed_t SpatialObject::getBounciness(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::getFrictionCoefficient":{"signature":"fixed_t SpatialObject::getFrictionCoefficient(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::setPosition":{"signature":"void SpatialObject::setPosition(SpatialObject this, const Vector3D *position)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const Vector3D *position","documentation":"3D vector defining the object's new position"}]},"SpatialObject::setRotation":{"signature":"void SpatialObject::setRotation(SpatialObject this, const Rotation *rotation)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation`"}]},"SpatialObject::setScale":{"signature":"void SpatialObject::setScale(SpatialObject this, const Scale *scale)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const Scale *scale","documentation":"`Scale`"}]},"SpatialObject::setDirection":{"signature":"void SpatialObject::setDirection(SpatialObject this, const Vector3D *direction)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const Vector3D *direction","documentation":"Pointer to a direction vector"}]},"SpatialObject::getDirection":{"signature":"const Vector3D * SpatialObject::getDirection(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::isSubjectToGravity":{"signature":"bool SpatialObject::isSubjectToGravity(SpatialObject this, Vector3D gravity)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"Vector3D gravity"}]},"SpatialObject::getInGameType":{"signature":"uint32 SpatialObject::getInGameType(SpatialObject this)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"}]},"SpatialObject::collisionStarts":{"signature":"bool SpatialObject::collisionStarts(SpatialObject this, const CollisionInformation *collisionInformation)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"SpatialObject::collisionPersists":{"signature":"void SpatialObject::collisionPersists(SpatialObject this, const CollisionInformation *collisionInformation)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"SpatialObject::collisionEnds":{"signature":"void SpatialObject::collisionEnds(SpatialObject this, const CollisionInformation *collisionInformation)","parameters":[{"label":"SpatialObject this","documentation":"SpatialObject Instance"},{"label":"const CollisionInformation *collisionInformation","documentation":"Information struct about the collision to resolve"}]},"Sphere::constructor":{"signature":"void Sphere::constructor(Sphere this, SpatialObject owner, const SphereSpec *sphereSpec)","parameters":[{"label":"Sphere this","documentation":"Sphere Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the wireframe attaches to"},{"label":"const SphereSpec *sphereSpec"}]},"Sphere::render":{"signature":"void Sphere::render(Sphere this, Vector3D relativePosition)","parameters":[{"label":"Sphere this","documentation":"Sphere Instance"},{"label":"Vector3D relativePosition","documentation":"Position relative to the camera's"}]},"Sphere::draw":{"signature":"bool Sphere::draw(Sphere this)","parameters":[{"label":"Sphere this","documentation":"Sphere Instance"}]},"Sphere::setRadius":{"signature":"void Sphere::setRadius(Sphere this, fixed_t radius)","parameters":[{"label":"Sphere this","documentation":"Sphere Instance"},{"label":"fixed_t radius","documentation":"`Sphere`'s radius"}]},"Sphere::getRadius":{"signature":"fixed_t Sphere::getRadius(Sphere this)","parameters":[{"label":"Sphere this","documentation":"Sphere Instance"}]},"Sprite::constructor":{"signature":"void Sprite::constructor(Sprite this, SpatialObject owner, const SpriteSpec *spriteSpec)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const SpriteSpec *spriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"Sprite::render":{"signature":"int16 Sprite::render(Sprite this, int16 index, bool updateAnimation)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"},{"label":"bool updateAnimation"}]},"Sprite::getTexture":{"signature":"Texture Sprite::getTexture(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getIndex":{"signature":"int16 Sprite::getIndex(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getHead":{"signature":"uint16 Sprite::getHead(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getHalfWidth":{"signature":"int32 Sprite::getHalfWidth(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getHalfHeight":{"signature":"int32 Sprite::getHalfHeight(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveHead":{"signature":"uint32 Sprite::getEffectiveHead(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveWidth":{"signature":"uint16 Sprite::getEffectiveWidth(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveHeight":{"signature":"uint16 Sprite::getEffectiveHeight(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveX":{"signature":"int16 Sprite::getEffectiveX(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveY":{"signature":"int16 Sprite::getEffectiveY(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveP":{"signature":"int16 Sprite::getEffectiveP(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveMX":{"signature":"int16 Sprite::getEffectiveMX(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveMY":{"signature":"int16 Sprite::getEffectiveMY(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getEffectiveMP":{"signature":"int16 Sprite::getEffectiveMP(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isVisible":{"signature":"bool Sprite::isVisible(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isHidden":{"signature":"bool Sprite::isHidden(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isBgmap":{"signature":"bool Sprite::isBgmap(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isObject":{"signature":"bool Sprite::isObject(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isAffine":{"signature":"bool Sprite::isAffine(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isHBias":{"signature":"bool Sprite::isHBias(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::createAnimationController":{"signature":"void Sprite::createAnimationController(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getAnimationController":{"signature":"AnimationController Sprite::getAnimationController(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::play":{"signature":"bool Sprite::play(Sprite this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const AnimationFunction *animationFunctions[]","documentation":"Array of animation functions to look for the animation function to replay"},{"label":"const char *animationName","documentation":"Name of the animation to play"},{"label":"ListenerObject scope","documentation":"`Object` that will be notified of playback events"}]},"Sprite::replay":{"signature":"bool Sprite::replay(Sprite this, const AnimationFunction *animationFunctions[])","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const AnimationFunction *animationFunctions[]","documentation":"Array of animation functions to look for the animation function to replay"}]},"Sprite::pause":{"signature":"void Sprite::pause(Sprite this, bool pause)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"bool pause","documentation":"Flag that signals if the animation must be paused or unpaused"}]},"Sprite::stop":{"signature":"void Sprite::stop(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isPlaying":{"signature":"bool Sprite::isPlaying(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::isPlayingAnimation":{"signature":"bool Sprite::isPlayingAnimation(Sprite this, char *animationName)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"char *animationName","documentation":"Name of the animation to check"}]},"Sprite::nextFrame":{"signature":"void Sprite::nextFrame(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::previousFrame":{"signature":"void Sprite::previousFrame(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setActualFrame":{"signature":"void Sprite::setActualFrame(Sprite this, int16 actualFrame)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"int16 actualFrame","documentation":"The frame of the playing animation to skip to"}]},"Sprite::getActualFrame":{"signature":"int16 Sprite::getActualFrame(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setFrameDuration":{"signature":"void Sprite::setFrameDuration(Sprite this, uint8 frameDuration)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"uint8 frameDuration","documentation":"Duration in game cycles for each frame of animation"}]},"Sprite::getFrameDuration":{"signature":"uint8 Sprite::getFrameDuration(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setFrameDurationDecrement":{"signature":"void Sprite::setFrameDurationDecrement(Sprite this, uint8 frameDurationDecrement)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"uint8 frameDurationDecrement"}]},"Sprite::getPlayingAnimationName":{"signature":"const char * Sprite::getPlayingAnimationName(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setPosition":{"signature":"void Sprite::setPosition(Sprite this, const PixelVector *position)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const PixelVector *position","documentation":"Position cache to save"}]},"Sprite::getPosition":{"signature":"const PixelVector * Sprite::getPosition(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setDisplacement":{"signature":"void Sprite::setDisplacement(Sprite this, const PixelVector *displacement)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const PixelVector *displacement","documentation":"Displacement added to the sprite's position"}]},"Sprite::getDisplacement":{"signature":"const PixelVector * Sprite::getDisplacement(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::getDisplacedPosition":{"signature":"PixelVector Sprite::getDisplacedPosition(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::addChar":{"signature":"void Sprite::addChar(Sprite this, const Point *texturePoint, const uint32 *newChar)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const Point *texturePoint","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"Sprite::putChar":{"signature":"void Sprite::putChar(Sprite this, const Point *texturePoint, const uint32 *newChar)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const Point *texturePoint","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"Sprite::putPixel":{"signature":"void Sprite::putPixel(Sprite this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const Point *texturePixel","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const Pixel *charSetPixel"},{"label":"BYTE newPixelColor"}]},"Sprite::registerWithManager":{"signature":"virtual void Sprite::registerWithManager(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::unregisterWithManager":{"signature":"virtual void Sprite::unregisterWithManager(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::hasSpecialEffects":{"signature":"bool Sprite::hasSpecialEffects(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::doRender":{"signature":"virtual int16 Sprite::doRender(Sprite this, int16 index)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"Sprite::invalidateRendering":{"signature":"void Sprite::invalidateRendering(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::updateAnimation":{"signature":"void Sprite::updateAnimation(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::processEffects":{"signature":"void Sprite::processEffects(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setMultiframe":{"signature":"void Sprite::setMultiframe(Sprite this, uint16 frame)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"uint16 frame","documentation":"Current animation frame"}]},"Sprite::forceShow":{"signature":"void Sprite::forceShow(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::forceHide":{"signature":"void Sprite::forceHide(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::setRotation":{"signature":"void Sprite::setRotation(Sprite this, const Rotation *rotation)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const Rotation *rotation","documentation":"`Rotation` cache to save"}]},"Sprite::setScale":{"signature":"void Sprite::setScale(Sprite this, const PixelScale *scale)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"const PixelScale *scale","documentation":"`Scale` cache to save"}]},"Sprite::getTotalPixels":{"signature":"virtual int32 Sprite::getTotalPixels(Sprite this)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"}]},"Sprite::print":{"signature":"void Sprite::print(Sprite this, int32 x, int32 y)","parameters":[{"label":"Sprite this","documentation":"Sprite Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"SpriteManager::reset":{"signature":"void SpriteManager::reset(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::setAnimationsClock":{"signature":"void SpriteManager::setAnimationsClock(SpriteManager this, Clock clock)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Clock clock"}]},"SpriteManager::createSprite":{"signature":"Sprite SpriteManager::createSprite(SpriteManager this, SpatialObject owner, const SpriteSpec *spriteSpec)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"SpatialObject owner","documentation":"`Object` to which the sprite will attach to"},{"label":"const SpriteSpec *spriteSpec","documentation":"Spec to use to create the sprite"}]},"SpriteManager::destroySprite":{"signature":"void SpriteManager::destroySprite(SpriteManager this, Sprite sprite)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Sprite sprite","documentation":"`Sprite` to destroy"}]},"SpriteManager::registerSprite":{"signature":"bool SpriteManager::registerSprite(SpriteManager this, Sprite sprite)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Sprite sprite","documentation":"`Sprite` to be managed"}]},"SpriteManager::unregisterSprite":{"signature":"void SpriteManager::unregisterSprite(SpriteManager this, Sprite sprite)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Sprite sprite","documentation":"`Sprite` to no longer manage"}]},"SpriteManager::setupObjectSpriteContainers":{"signature":"void SpriteManager::setupObjectSpriteContainers(SpriteManager this, int16 size[4], int16 z[4])","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int16 size[4]","documentation":"Array with the number of OBJECTS for each container"},{"label":"int16 z[4]","documentation":"Array of Z coordinates for each container"}]},"SpriteManager::setMaximumParamTableRowsToComputePerCall":{"signature":"void SpriteManager::setMaximumParamTableRowsToComputePerCall(SpriteManager this, int32 maximumParamTableRowsToComputePerCall)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int32 maximumParamTableRowsToComputePerCall","documentation":"Number of param table rows to write during each rendering cycle"}]},"SpriteManager::getMaximumParamTableRowsToComputePerCall":{"signature":"int32 SpriteManager::getMaximumParamTableRowsToComputePerCall(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::setTexturesMaximumRowsToWrite":{"signature":"void SpriteManager::setTexturesMaximumRowsToWrite(SpriteManager this, uint8 texturesMaximumRowsToWrite)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"uint8 texturesMaximumRowsToWrite","documentation":"Number of texture rows to write during each rendering cycle"}]},"SpriteManager::getTexturesMaximumRowsToWrite":{"signature":"int8 SpriteManager::getTexturesMaximumRowsToWrite(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::deferTextureUpdating":{"signature":"void SpriteManager::deferTextureUpdating(SpriteManager this, bool deferTextureUpdating)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"bool deferTextureUpdating","documentation":"If true, textures are written overtime; otherwise they are written in a single pass"}]},"SpriteManager::deferParamTableEffects":{"signature":"void SpriteManager::deferParamTableEffects(SpriteManager this, bool deferAffineTransformations)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"bool deferAffineTransformations","documentation":"If true, param tables are written overtime; otherwise they are written in a single pass"}]},"SpriteManager::sortSprites":{"signature":"void SpriteManager::sortSprites(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::prepareAll":{"signature":"void SpriteManager::prepareAll(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::render":{"signature":"void SpriteManager::render(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::forceRendering":{"signature":"void SpriteManager::forceRendering(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::renderAndDraw":{"signature":"void SpriteManager::renderAndDraw(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::writeDRAM":{"signature":"void SpriteManager::writeDRAM(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::writeTextures":{"signature":"void SpriteManager::writeTextures(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::showSprites":{"signature":"void SpriteManager::showSprites(SpriteManager this, Sprite spareSprite, bool showPrinting)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Sprite spareSprite","documentation":"`Sprite` to not show"},{"label":"bool showPrinting","documentation":"Flag to allow/prohibit the display of the printing sprite"}]},"SpriteManager::hideSprites":{"signature":"void SpriteManager::hideSprites(SpriteManager this, Sprite spareSprite, bool hidePrinting)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"Sprite spareSprite","documentation":"`Sprite` to not hide"},{"label":"bool hidePrinting"}]},"SpriteManager::computeTotalPixelsDrawn":{"signature":"void SpriteManager::computeTotalPixelsDrawn(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::getFreeLayer":{"signature":"int8 SpriteManager::getFreeLayer(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::getNumberOfSprites":{"signature":"int32 SpriteManager::getNumberOfSprites(SpriteManager this)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"}]},"SpriteManager::getSpriteAtIndex":{"signature":"Sprite SpriteManager::getSpriteAtIndex(SpriteManager this, int16 index)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int16 index","documentation":"Index of the node in the list of sprites"}]},"SpriteManager::getObjectSpriteContainer":{"signature":"ObjectSpriteContainer SpriteManager::getObjectSpriteContainer(SpriteManager this, fixed_t z)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"fixed_t z","documentation":"Z coordinate"}]},"SpriteManager::getObjectSpriteContainerBySPT":{"signature":"ObjectSpriteContainer SpriteManager::getObjectSpriteContainerBySPT(SpriteManager this, int32 spt)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int32 spt","documentation":"OBJECT space SPT"}]},"SpriteManager::print":{"signature":"void SpriteManager::print(SpriteManager this, int32 x, int32 y, bool resumed)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"},{"label":"bool resumed","documentation":"If true it only prints the most important statistics"}]},"SpriteManager::printObjectSpriteContainersStatus":{"signature":"void SpriteManager::printObjectSpriteContainersStatus(SpriteManager this, int32 x, int32 y)","parameters":[{"label":"SpriteManager this","documentation":"SpriteManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Stage::constructor":{"signature":"void Stage::constructor(Stage this, StageSpec *stageSpec)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"StageSpec *stageSpec","documentation":"Specification that determines how to configure the stage"}]},"Stage::suspend":{"signature":"void Stage::suspend(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::resume":{"signature":"void Stage::resume(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::getSpec":{"signature":"StageSpec * Stage::getSpec(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::configureTimer":{"signature":"void Stage::configureTimer(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::configurePalettes":{"signature":"void Stage::configurePalettes(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::getPaletteConfig":{"signature":"PaletteConfig Stage::getPaletteConfig(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::registerEntities":{"signature":"void Stage::registerEntities(Stage this, VirtualList positionedEntitiesToIgnore)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"VirtualList positionedEntitiesToIgnore"}]},"Stage::getStageEntityDescriptions":{"signature":"VirtualList Stage::getStageEntityDescriptions(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::addEntityLoadingListener":{"signature":"void Stage::addEntityLoadingListener(Stage this, ListenerObject scope, EventListener callback)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"ListenerObject scope","documentation":"`Object` that will be notified of event"},{"label":"EventListener callback","documentation":"Callback to inform the parent when the new entity is loaded"}]},"Stage::spawnChildEntity":{"signature":"Entity Stage::spawnChildEntity(Stage this, const PositionedEntity *const positionedEntity, bool permanent)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"const PositionedEntity *const positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new child"},{"label":"bool permanent","documentation":"If true, the entity is not subject to the streaming"}]},"Stage::destroyChildEntity":{"signature":"void Stage::destroyChildEntity(Stage this, Entity child)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"Entity child","documentation":"`Entity` to destroy"}]},"Stage::streamAll":{"signature":"void Stage::streamAll(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::getSounds":{"signature":"VirtualList Stage::getSounds(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::fadeSounds":{"signature":"void Stage::fadeSounds(Stage this, uint32 playbackType)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"uint32 playbackType","documentation":"Specifies how the playback should start"}]},"Stage::print":{"signature":"void Stage::print(Stage this, int32 x, int32 y)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Stage::stream":{"signature":"bool Stage::stream(Stage this)","parameters":[{"label":"Stage this","documentation":"Stage Instance"}]},"Stage::configure":{"signature":"void Stage::configure(Stage this, VirtualList positionedEntitiesToIgnore)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"VirtualList positionedEntitiesToIgnore","documentation":"List of positioned entity structs to register for streaming"}]},"Stage::unloadOutOfRangeEntities":{"signature":"bool Stage::unloadOutOfRangeEntities(Stage this, int32 defer)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"int32 defer"}]},"Stage::loadInRangeEntities":{"signature":"bool Stage::loadInRangeEntities(Stage this, int32 defer)","parameters":[{"label":"Stage this","documentation":"Stage Instance"},{"label":"int32 defer"}]},"StageEditor::update":{"signature":"void StageEditor::update(StageEditor this)","parameters":[{"label":"StageEditor this","documentation":"StageEditor Instance"}]},"StageEditor::show":{"signature":"void StageEditor::show(StageEditor this)","parameters":[{"label":"StageEditor this","documentation":"StageEditor Instance"}]},"StageEditor::hide":{"signature":"void StageEditor::hide(StageEditor this)","parameters":[{"label":"StageEditor this","documentation":"StageEditor Instance"}]},"StageEditor::processUserInput":{"signature":"void StageEditor::processUserInput(StageEditor this, uint16 pressedKey)","parameters":[{"label":"StageEditor this","documentation":"StageEditor Instance"},{"label":"uint16 pressedKey","documentation":"User pressed key"}]},"StageEditorState::isKeyCombination":{"signature":"bool StageEditorState::isKeyCombination(StageEditorState this, const UserInput *userInput)","parameters":[{"label":"StageEditorState this","documentation":"StageEditorState Instance"},{"label":"const UserInput *userInput"}]},"State::constructor":{"signature":"void State::constructor(State this)","parameters":[{"label":"State this","documentation":"State Instance"}]},"State::destructor":{"signature":"void State::destructor(State this)","parameters":[{"label":"State this","documentation":"State Instance"}]},"State::enter":{"signature":"void State::enter(State this, void *owner)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is entering in this state"}]},"State::execute":{"signature":"void State::execute(State this, void *owner)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"State::exit":{"signature":"void State::exit(State this, void *owner)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is exiting this state"}]},"State::suspend":{"signature":"void State::suspend(State this, void *owner)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"State::resume":{"signature":"void State::resume(State this, void *owner)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"State::processMessage":{"signature":"bool State::processMessage(State this, void *owner, Telegram telegram)","parameters":[{"label":"State this","documentation":"State Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"},{"label":"Telegram telegram","documentation":"`Telegram` to process"}]},"StateMachine::constructor":{"signature":"void StateMachine::constructor(StateMachine this, void *owner)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"void *owner"}]},"StateMachine::handleMessage":{"signature":"bool StateMachine::handleMessage(StateMachine this, Telegram telegram)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"Telegram telegram","documentation":"`Telegram` to process"}]},"StateMachine::transitionTo":{"signature":"bool StateMachine::transitionTo(StateMachine this, State state, int16 command)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"State state","documentation":"`State` to transition to"},{"label":"int16 command","documentation":"Enum that specifies the type of transition defined in StateOperations"}]},"StateMachine::swapState":{"signature":"void StateMachine::swapState(StateMachine this, State newState)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"State newState","documentation":"`State` to put at the top of the stack"}]},"StateMachine::pushState":{"signature":"void StateMachine::pushState(StateMachine this, State newState)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"State newState","documentation":"`State` to push at the top of the stack"}]},"StateMachine::popState":{"signature":"void StateMachine::popState(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::popAllStates":{"signature":"void StateMachine::popAllStates(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::update":{"signature":"State StateMachine::update(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::isInState":{"signature":"bool StateMachine::isInState(StateMachine this, State state)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"State state","documentation":"`State` to compare against the state at the top of the stack"}]},"StateMachine::hasStateInTheStack":{"signature":"bool StateMachine::hasStateInTheStack(StateMachine this, State state)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"},{"label":"State state","documentation":"`State` to check"}]},"StateMachine::getStateStack":{"signature":"VirtualList StateMachine::getStateStack(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::getCurrentState":{"signature":"State StateMachine::getCurrentState(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::getNextState":{"signature":"State StateMachine::getNextState(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::getPreviousState":{"signature":"State StateMachine::getPreviousState(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"StateMachine::getStackSize":{"signature":"int32 StateMachine::getStackSize(StateMachine this)","parameters":[{"label":"StateMachine this","documentation":"StateMachine Instance"}]},"Stopwatch::constructor":{"signature":"void Stopwatch::constructor(Stopwatch this)","parameters":[{"label":"Stopwatch this","documentation":"Stopwatch Instance"}]},"Stopwatch::destructor":{"signature":"void Stopwatch::destructor(Stopwatch this)","parameters":[{"label":"Stopwatch this","documentation":"Stopwatch Instance"}]},"Stopwatch::reset":{"signature":"void Stopwatch::reset(Stopwatch this)","parameters":[{"label":"Stopwatch this","documentation":"Stopwatch Instance"}]},"Stopwatch::update":{"signature":"void Stopwatch::update(Stopwatch this)","parameters":[{"label":"Stopwatch this","documentation":"Stopwatch Instance"}]},"Stopwatch::lap":{"signature":"float Stopwatch::lap(Stopwatch this)","parameters":[{"label":"Stopwatch this","documentation":"Stopwatch Instance"}]},"StopwatchManager::reset":{"signature":"void StopwatchManager::reset(StopwatchManager this)","parameters":[{"label":"StopwatchManager this","documentation":"StopwatchManager Instance"}]},"StopwatchManager::register":{"signature":"void StopwatchManager::register(StopwatchManager this, Stopwatch clock)","parameters":[{"label":"StopwatchManager this","documentation":"StopwatchManager Instance"},{"label":"Stopwatch clock","documentation":"`Stopwatch` to register"}]},"StopwatchManager::unregister":{"signature":"void StopwatchManager::unregister(StopwatchManager this, Stopwatch clock)","parameters":[{"label":"StopwatchManager this","documentation":"StopwatchManager Instance"},{"label":"Stopwatch clock","documentation":"`Stopwatch` to unregister"}]},"StopwatchManager::update":{"signature":"void StopwatchManager::update(StopwatchManager this)","parameters":[{"label":"StopwatchManager this","documentation":"StopwatchManager Instance"}]},"Telegram::constructor":{"signature":"void Telegram::constructor(Telegram this, void *sender, void *receiver, int32 message, void *extraInfo)","parameters":[{"label":"Telegram this","documentation":"Telegram Instance"},{"label":"void *sender","documentation":"The object that sends the message"},{"label":"void *receiver","documentation":"The object that sends the message"},{"label":"int32 message","documentation":"The message's code"},{"label":"void *extraInfo","documentation":"Additional information that may accompany the message"}]},"Telegram::getSender":{"signature":"void * Telegram::getSender(Telegram this)","parameters":[{"label":"Telegram this","documentation":"Telegram Instance"}]},"Telegram::getReceiver":{"signature":"void * Telegram::getReceiver(Telegram this)","parameters":[{"label":"Telegram this","documentation":"Telegram Instance"}]},"Telegram::getMessage":{"signature":"int32 Telegram::getMessage(Telegram this)","parameters":[{"label":"Telegram this","documentation":"Telegram Instance"}]},"Telegram::getExtraInfo":{"signature":"void * Telegram::getExtraInfo(Telegram this)","parameters":[{"label":"Telegram this","documentation":"Telegram Instance"}]},"TextObjectSprite::constructor":{"signature":"void TextObjectSprite::constructor(TextObjectSprite this, SpatialObject owner, const TextObjectSpriteSpec *textObjectSpriteSpec)","parameters":[{"label":"TextObjectSprite this","documentation":"TextObjectSprite Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the sprite attaches to"},{"label":"const TextObjectSpriteSpec *textObjectSpriteSpec","documentation":"Specification that determines how to configure the sprite"}]},"TextObjectSprite::doRender":{"signature":"int16 TextObjectSprite::doRender(TextObjectSprite this, int16 index)","parameters":[{"label":"TextObjectSprite this","documentation":"TextObjectSprite Instance"},{"label":"int16 index","documentation":"Determines the region of DRAM that this sprite is allowed to configure"}]},"Texture::reset":{"signature":"static void Texture::reset(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::updateTextures":{"signature":"static void Texture::updateTextures(Texture this, int16 maximumTextureRowsToWrite, bool defer)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"int16 maximumTextureRowsToWrite","documentation":"Number of texture rows to write during this call"},{"label":"bool defer","documentation":"If true, the texture data is written overtime; otherwise all is written in a single pass"}]},"Texture::getTotalCols":{"signature":"static uint32 Texture::getTotalCols(Texture this, TextureSpec *textureSpec)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"TextureSpec *textureSpec","documentation":"Spec of which to compute the horizontal size"}]},"Texture::getTotalRows":{"signature":"static uint32 Texture::getTotalRows(Texture this, TextureSpec *textureSpec)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"TextureSpec *textureSpec","documentation":"Spec of which to compute the vertical size"}]},"Texture::constructor":{"signature":"void Texture::constructor(Texture this, TextureSpec *textureSpec, uint16 id)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"TextureSpec *textureSpec","documentation":"Specification that determines how to configure the texture"},{"label":"uint16 id","documentation":"`Texture`'s identificator"}]},"Texture::getId":{"signature":"uint16 Texture::getId(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::setSpec":{"signature":"void Texture::setSpec(Texture this, TextureSpec *textureSpec)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"TextureSpec *textureSpec","documentation":"Specification that determines how to configure the texture"}]},"Texture::getSpec":{"signature":"TextureSpec * Texture::getSpec(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::getCharSet":{"signature":"CharSet Texture::getCharSet(Texture this, uint32 loadIfNeeded)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"uint32 loadIfNeeded","documentation":"If true and the char set is not loaded, loads it"}]},"Texture::increaseUsageCount":{"signature":"void Texture::increaseUsageCount(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::decreaseUsageCount":{"signature":"bool Texture::decreaseUsageCount(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::getUsageCount":{"signature":"uint8 Texture::getUsageCount(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::setPalette":{"signature":"void Texture::setPalette(Texture this, uint8 palette)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"uint8 palette","documentation":"Palette index to use by the graphical data"}]},"Texture::getPalette":{"signature":"uint8 Texture::getPalette(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::getNumberOfFrames":{"signature":"uint32 Texture::getNumberOfFrames(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::setFrame":{"signature":"void Texture::setFrame(Texture this, uint16 frame)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"uint16 frame","documentation":"The frame that species the block inside the map array to write to DRAM"}]},"Texture::getFrame":{"signature":"uint16 Texture::getFrame(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::getCols":{"signature":"uint32 Texture::getCols(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::getRows":{"signature":"uint32 Texture::getRows(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::isWritten":{"signature":"bool Texture::isWritten(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::isShared":{"signature":"bool Texture::isShared(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::isSingleFrame":{"signature":"bool Texture::isSingleFrame(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::isMultiframe":{"signature":"bool Texture::isMultiframe(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::addChar":{"signature":"void Texture::addChar(Texture this, const Point *texturePoint, const uint32 *newChar)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"const Point *texturePoint","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"Texture::putChar":{"signature":"void Texture::putChar(Texture this, const Point *texturePoint, const uint32 *newChar)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"const Point *texturePoint","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const uint32 *newChar","documentation":"Color data array for the CHAR"}]},"Texture::putPixel":{"signature":"void Texture::putPixel(Texture this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"const Point *texturePixel","documentation":"Coordinate in texture's space of the CHAR to replace"},{"label":"const Pixel *charSetPixel"},{"label":"BYTE newPixelColor"}]},"Texture::prepare":{"signature":"void Texture::prepare(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"Texture::write":{"signature":"bool Texture::write(Texture this, int16 maximumTextureRowsToWrite)","parameters":[{"label":"Texture this","documentation":"Texture Instance"},{"label":"int16 maximumTextureRowsToWrite","documentation":"Number of texture rows to write during this call"}]},"Texture::rewrite":{"signature":"void Texture::rewrite(Texture this)","parameters":[{"label":"Texture this","documentation":"Texture Instance"}]},"TimerManager::interruptHandler":{"signature":"static void TimerManager::interruptHandler(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::reset":{"signature":"void TimerManager::reset(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::resetTimerCounter":{"signature":"void TimerManager::resetTimerCounter(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::configure":{"signature":"void TimerManager::configure(TimerManager this, uint16 timerResolution, uint16 targetTimePerInterrupt, uint16 targetTimePerInterrupttUnits)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint16 timerResolution","documentation":"Timer's resolution (__TIMER_100US or __TIMER_20US)"},{"label":"uint16 targetTimePerInterrupt","documentation":"Target elapsed time between timer interrupts"},{"label":"uint16 targetTimePerInterrupttUnits","documentation":"Timer interrupt's target time units"}]},"TimerManager::applySettings":{"signature":"void TimerManager::applySettings(TimerManager this, bool enable)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"bool enable","documentation":"If true, the hardware timer is enabled"}]},"TimerManager::enable":{"signature":"void TimerManager::enable(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::disable":{"signature":"void TimerManager::disable(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::setResolution":{"signature":"void TimerManager::setResolution(TimerManager this, uint16 resolution)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint16 resolution","documentation":"__TIMER_20US or __TIMER_100US"}]},"TimerManager::getResolution":{"signature":"uint16 TimerManager::getResolution(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getResolutionInUS":{"signature":"uint16 TimerManager::getResolutionInUS(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::setTargetTimePerInterrupt":{"signature":"void TimerManager::setTargetTimePerInterrupt(TimerManager this, uint16 targetTimePerInterrupt)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint16 targetTimePerInterrupt","documentation":"Target time between interrupt calls"}]},"TimerManager::getTargetTimePerInterrupt":{"signature":"uint16 TimerManager::getTargetTimePerInterrupt(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getTargetTimePerInterruptInMS":{"signature":"float TimerManager::getTargetTimePerInterruptInMS(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getTargetTimePerInterruptInUS":{"signature":"uint32 TimerManager::getTargetTimePerInterruptInUS(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::setTargetTimePerInterruptUnits":{"signature":"void TimerManager::setTargetTimePerInterruptUnits(TimerManager this, uint16 targetTimePerInterrupttUnits)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint16 targetTimePerInterrupttUnits","documentation":"Target time units between interrupt calls"}]},"TimerManager::getTargetTimePerInterruptUnits":{"signature":"uint16 TimerManager::getTargetTimePerInterruptUnits(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getTimerCounter":{"signature":"uint16 TimerManager::getTimerCounter(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getCurrentTimerCounter":{"signature":"uint16 TimerManager::getCurrentTimerCounter(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getMinimumTimePerInterruptStep":{"signature":"uint16 TimerManager::getMinimumTimePerInterruptStep(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getElapsedMilliseconds":{"signature":"uint32 TimerManager::getElapsedMilliseconds(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::getTotalElapsedMilliseconds":{"signature":"uint32 TimerManager::getTotalElapsedMilliseconds(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::wait":{"signature":"void TimerManager::wait(TimerManager this, uint32 milliseconds)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint32 milliseconds","documentation":"Time to halt the program"}]},"TimerManager::repeatMethodCall":{"signature":"void TimerManager::repeatMethodCall(TimerManager this, uint32 callTimes, uint32 duration, ListenerObject object, void(*method)(ListenerObject, uint32))","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint32 callTimes","documentation":"Number of calls to produce during the total duration"},{"label":"uint32 duration","documentation":"Time that must take the callTimes"},{"label":"ListenerObject object","documentation":"Called method's scope"},{"label":"void(*method)(ListenerObject","documentation":"Method to call"}]},"TimerManager::frameStarted":{"signature":"void TimerManager::frameStarted(TimerManager this, uint32 elapsedMicroseconds)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"uint32 elapsedMicroseconds","documentation":"Elapsed microseconds between calls"}]},"TimerManager::nextSecondStarted":{"signature":"void TimerManager::nextSecondStarted(TimerManager this)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"}]},"TimerManager::print":{"signature":"void TimerManager::print(TimerManager this, int32 x, int32 y)","parameters":[{"label":"TimerManager this","documentation":"TimerManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]},"Tool::constructor":{"signature":"void Tool::constructor(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"Tool::setStage":{"signature":"void Tool::setStage(Tool this, Stage stage)","parameters":[{"label":"Tool this","documentation":"Tool Instance"},{"label":"Stage stage","documentation":"`Stage` to work with"}]},"Tool::processUserInput":{"signature":"virtual void Tool::processUserInput(Tool this, uint16 pressedKey)","parameters":[{"label":"Tool this","documentation":"Tool Instance"},{"label":"uint16 pressedKey","documentation":"User pressed key"}]},"Tool::dimmGame":{"signature":"void Tool::dimmGame(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"Tool::lightUpGame":{"signature":"void Tool::lightUpGame(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"Tool::update":{"signature":"virtual void Tool::update(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"Tool::show":{"signature":"virtual void Tool::show(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"Tool::hide":{"signature":"virtual void Tool::hide(Tool this)","parameters":[{"label":"Tool this","documentation":"Tool Instance"}]},"ToolState::constructor":{"signature":"void ToolState::constructor(ToolState this)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"}]},"ToolState::enter":{"signature":"void ToolState::enter(ToolState this, void *owner)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"},{"label":"void *owner","documentation":"`Object` that is entering in this state"}]},"ToolState::execute":{"signature":"void ToolState::execute(ToolState this, void *owner)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"},{"label":"void *owner","documentation":"`Object` that is in this state"}]},"ToolState::exit":{"signature":"void ToolState::exit(ToolState this, void *owner)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"},{"label":"void *owner","documentation":"`Object` that is exiting this state"}]},"ToolState::processUserInput":{"signature":"void ToolState::processUserInput(ToolState this, const UserInput *userInput)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"},{"label":"const UserInput *userInput","documentation":"Struct with the current user input information"}]},"ToolState::stream":{"signature":"bool ToolState::stream(ToolState this)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"}]},"ToolState::isKeyCombination":{"signature":"virtual bool ToolState::isKeyCombination(ToolState this, const UserInput *userInput)","parameters":[{"label":"ToolState this","documentation":"ToolState Instance"},{"label":"const UserInput *userInput"}]},"UIContainer::constructor":{"signature":"void UIContainer::constructor(UIContainer this, PositionedEntity *childrenPositionedEntities)","parameters":[{"label":"UIContainer this","documentation":"UIContainer Instance"},{"label":"PositionedEntity *childrenPositionedEntities","documentation":"Array of specs that define how to configure the container's children"}]},"UIContainer::transform":{"signature":"void UIContainer::transform(UIContainer this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","parameters":[{"label":"UIContainer this","documentation":"UIContainer Instance"},{"label":"const Transformation *environmentTransform","documentation":"Reference environment for the local transformation"},{"label":"uint8 invalidateTransformationFlag","documentation":"Flag that determines which transfomation's components must be recomputed"}]},"UIContainer::spawnChildEntity":{"signature":"Entity UIContainer::spawnChildEntity(UIContainer this, const PositionedEntity *const positionedEntity)","parameters":[{"label":"UIContainer this","documentation":"UIContainer Instance"},{"label":"const PositionedEntity *const positionedEntity","documentation":"Struct that defines which entity spec to use to configure the new child"}]},"Utilities::itoa":{"signature":"static char * Utilities::itoa(Utilities this, uint32 number, uint32 base, int32 digits)","parameters":[{"label":"Utilities this","documentation":"Utilities Instance"},{"label":"uint32 number","documentation":"Number to convert"},{"label":"uint32 base","documentation":"Number's numeric base"},{"label":"int32 digits","documentation":"Number's digits count"}]},"Utilities::toUppercase":{"signature":"static const char * Utilities::toUppercase(Utilities this, const char *string)","parameters":[{"label":"Utilities this","documentation":"Utilities Instance"},{"label":"const char *string","documentation":"String to convert"}]},"Utilities::toLowercase":{"signature":"static const char * Utilities::toLowercase(Utilities this, const char *string)","parameters":[{"label":"Utilities this","documentation":"Utilities Instance"},{"label":"const char *string","documentation":"String to convert"}]},"Utilities::reverse":{"signature":"static uint32 Utilities::reverse(Utilities this, uint32 x, int32 bits)","parameters":[{"label":"Utilities this","documentation":"Utilities Instance"},{"label":"uint32 x"},{"label":"int32 bits"}]},"VIPManager::interruptHandler":{"signature":"static void VIPManager::interruptHandler(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::reset":{"signature":"void VIPManager::reset(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::enableCustomInterrupts":{"signature":"void VIPManager::enableCustomInterrupts(VIPManager this, uint16 customInterrupts)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"uint16 customInterrupts","documentation":"Interrupts to enable"}]},"VIPManager::enableMultiplexedInterrupts":{"signature":"void VIPManager::enableMultiplexedInterrupts(VIPManager this, uint32 enabledMultiplexedInterrupts)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"uint32 enabledMultiplexedInterrupts","documentation":"Multiplexed interrupts to allow"}]},"VIPManager::startDrawing":{"signature":"void VIPManager::startDrawing(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::resumeDrawing":{"signature":"void VIPManager::resumeDrawing(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::suspendDrawing":{"signature":"void VIPManager::suspendDrawing(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::stopDrawing":{"signature":"void VIPManager::stopDrawing(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::startDisplaying":{"signature":"void VIPManager::startDisplaying(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::stopDisplaying":{"signature":"void VIPManager::stopDisplaying(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::setFrameCycle":{"signature":"void VIPManager::setFrameCycle(VIPManager this, uint8 frameCycle)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"uint8 frameCycle","documentation":"FRMCYC value"}]},"VIPManager::configurePalettes":{"signature":"void VIPManager::configurePalettes(VIPManager this, PaletteConfig *paletteConfig)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"PaletteConfig *paletteConfig","documentation":"Palettes configuration"}]},"VIPManager::setupColumnTable":{"signature":"void VIPManager::setupColumnTable(VIPManager this, ColumnTableSpec *columnTableSpec)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"ColumnTableSpec *columnTableSpec","documentation":"Specification for the configuration of the column table"}]},"VIPManager::setupBrightness":{"signature":"void VIPManager::setupBrightness(VIPManager this, Brightness *brightness)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"Brightness *brightness","documentation":"`Brightness` configuration"}]},"VIPManager::setupBrightnessRepeat":{"signature":"void VIPManager::setupBrightnessRepeat(VIPManager this, BrightnessRepeatSpec *brightnessRepeat)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"BrightnessRepeatSpec *brightnessRepeat","documentation":"`Brightness` configuration"}]},"VIPManager::setBackgroundColor":{"signature":"void VIPManager::setBackgroundColor(VIPManager this, uint8 color)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"uint8 color","documentation":"Color to apply to the background"}]},"VIPManager::upBrightness":{"signature":"void VIPManager::upBrightness(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::lowerBrightness":{"signature":"void VIPManager::lowerBrightness(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::pushFrontPostProcessingEffect":{"signature":"void VIPManager::pushFrontPostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VIPManager::pushBackPostProcessingEffect":{"signature":"void VIPManager::pushBackPostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VIPManager::removePostProcessingEffect":{"signature":"void VIPManager::removePostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VIPManager::removePostProcessingEffects":{"signature":"void VIPManager::removePostProcessingEffects(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::getCurrentInterrupt":{"signature":"uint16 VIPManager::getCurrentInterrupt(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VIPManager::getGameFrameDuration":{"signature":"uint16 VIPManager::getGameFrameDuration(VIPManager this)","parameters":[{"label":"VIPManager this","documentation":"VIPManager Instance"}]},"VSUManager::playSounds":{"signature":"static void VSUManager::playSounds(VSUManager this, uint32 elapsedMicroseconds)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"uint32 elapsedMicroseconds","documentation":"Elapsed time between call"}]},"VSUManager::applySoundSourceConfiguration":{"signature":"void VSUManager::applySoundSourceConfiguration(VSUManager this, const VSUSoundSourceConfiguration *vsuSoundSourceConfiguration)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"const VSUSoundSourceConfiguration *vsuSoundSourceConfiguration","documentation":"VSU sound source configuration"}]},"VSUManager::applyPCMSampleToSoundSource":{"signature":"void VSUManager::applyPCMSampleToSoundSource(VSUManager this, int8 sample)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"int8 sample","documentation":"PCM sample data"}]},"VSUManager::reset":{"signature":"void VSUManager::reset(VSUManager this)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"}]},"VSUManager::setMode":{"signature":"void VSUManager::setMode(VSUManager this, uint32 playbackMode)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"uint32 playbackMode","documentation":"kPlaybackNative or kPlaybackPCM"}]},"VSUManager::update":{"signature":"void VSUManager::update(VSUManager this)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"}]},"VSUManager::stopAllSounds":{"signature":"void VSUManager::stopAllSounds(VSUManager this)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"}]},"VSUManager::enableQueue":{"signature":"void VSUManager::enableQueue(VSUManager this)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"}]},"VSUManager::disableQueue":{"signature":"void VSUManager::disableQueue(VSUManager this)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"}]},"VSUManager::print":{"signature":"void VSUManager::print(VSUManager this, int32 x, int32 y)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"int32 x"},{"label":"int32 y"}]},"VSUManager::printWaveFormStatus":{"signature":"void VSUManager::printWaveFormStatus(VSUManager this, int32 x, int32 y)","parameters":[{"label":"VSUManager this","documentation":"VSUManager Instance"},{"label":"int32 x"},{"label":"int32 y"}]},"VUEngine::handleMessage":{"signature":"bool VUEngine::handleMessage(VUEngine this, Telegram telegram)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"Telegram telegram","documentation":"Received telegram to process"}]},"VUEngine::reset":{"signature":"void VUEngine::reset(VUEngine this, bool resetSounds)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"bool resetSounds","documentation":"If false, any playing sounds will keep playing"}]},"VUEngine::resetClock":{"signature":"void VUEngine::resetClock(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::start":{"signature":"void VUEngine::start(VUEngine this, GameState state)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState state","documentation":"Game state the engine must enter when starting"}]},"VUEngine::pause":{"signature":"void VUEngine::pause(VUEngine this, GameState pauseState)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState pauseState","documentation":"Pause game state"}]},"VUEngine::unpause":{"signature":"void VUEngine::unpause(VUEngine this, GameState pauseState)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState pauseState","documentation":"Pause game state"}]},"VUEngine::setState":{"signature":"void VUEngine::setState(VUEngine this, GameState gameState)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState gameState"}]},"VUEngine::addState":{"signature":"void VUEngine::addState(VUEngine this, GameState state)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState state","documentation":"Game state to push"}]},"VUEngine::changeState":{"signature":"void VUEngine::changeState(VUEngine this, GameState state)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"GameState state","documentation":"Game state to swap to"}]},"VUEngine::isInToolState":{"signature":"bool VUEngine::isInToolState(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::isInToolStateTransition":{"signature":"bool VUEngine::isInToolStateTransition(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getCurrentState":{"signature":"GameState VUEngine::getCurrentState(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getPreviousState":{"signature":"GameState VUEngine::getPreviousState(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getUIContainer":{"signature":"UIContainer VUEngine::getUIContainer(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getStage":{"signature":"Stage VUEngine::getStage(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getPhysicalWorld":{"signature":"PhysicalWorld VUEngine::getPhysicalWorld(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getCollisionManager":{"signature":"CollisionManager VUEngine::getCollisionManager(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getStateMachine":{"signature":"StateMachine VUEngine::getStateMachine(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getClock":{"signature":"Clock VUEngine::getClock(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getLogicsClock":{"signature":"Clock VUEngine::getLogicsClock(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getMessagingClock":{"signature":"Clock VUEngine::getMessagingClock(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getPhysicsClock":{"signature":"Clock VUEngine::getPhysicsClock(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getProcessName":{"signature":"char * VUEngine::getProcessName(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::getGameFrameDuration":{"signature":"uint16 VUEngine::getGameFrameDuration(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::setGameFrameRate":{"signature":"void VUEngine::setGameFrameRate(VUEngine this, uint16 gameFrameRate)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"uint16 gameFrameRate","documentation":"New frame rate target"}]},"VUEngine::enableKeypad":{"signature":"void VUEngine::enableKeypad(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::disableKeypad":{"signature":"void VUEngine::disableKeypad(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::setSaveDataManager":{"signature":"void VUEngine::setSaveDataManager(VUEngine this, ListenerObject saveDataManager)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"ListenerObject saveDataManager"}]},"VUEngine::getSaveDataManager":{"signature":"ListenerObject VUEngine::getSaveDataManager(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::pushFrontPostProcessingEffect":{"signature":"void VUEngine::pushFrontPostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VUEngine::pushBackPostProcessingEffect":{"signature":"void VUEngine::pushBackPostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VUEngine::removePostProcessingEffect":{"signature":"void VUEngine::removePostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"PostProcessingEffect postProcessingEffect","documentation":"Post-processing effect function"},{"label":"SpatialObject spatialObject","documentation":"Post-processing effect function's scope"}]},"VUEngine::frameStarted":{"signature":"void VUEngine::frameStarted(VUEngine this, uint16 gameFrameDuration)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"uint16 gameFrameDuration","documentation":"Time in milliseconds that each game frame lasts."}]},"VUEngine::gameFrameStarted":{"signature":"void VUEngine::gameFrameStarted(VUEngine this, uint16 gameFrameDuration)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"uint16 gameFrameDuration","documentation":"Time in milliseconds that each game frame lasts."}]},"VUEngine::isPaused":{"signature":"bool VUEngine::isPaused(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::wait":{"signature":"void VUEngine::wait(VUEngine this, uint32 milliSeconds)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"},{"label":"uint32 milliSeconds"}]},"VUEngine::prepareGraphics":{"signature":"void VUEngine::prepareGraphics(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VUEngine::startProfiling":{"signature":"void VUEngine::startProfiling(VUEngine this)","parameters":[{"label":"VUEngine this","documentation":"VUEngine Instance"}]},"VirtualCircularList::constructor":{"signature":"void VirtualCircularList::constructor(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::front":{"signature":"void * VirtualCircularList::front(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::back":{"signature":"void * VirtualCircularList::back(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::begin":{"signature":"VirtualNode VirtualCircularList::begin(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::end":{"signature":"VirtualNode VirtualCircularList::end(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::find":{"signature":"VirtualNode VirtualCircularList::find(VirtualCircularList this, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to look for"}]},"VirtualCircularList::getDataIndex":{"signature":"int32 VirtualCircularList::getDataIndex(VirtualCircularList this, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to look for"}]},"VirtualCircularList::getNode":{"signature":"VirtualNode VirtualCircularList::getNode(VirtualCircularList this, int32 index)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"int32 index","documentation":"Index within the list"}]},"VirtualCircularList::getNodeIndex":{"signature":"int32 VirtualCircularList::getNodeIndex(VirtualCircularList this, VirtualNode node)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"VirtualNode node","documentation":"Node to look for"}]},"VirtualCircularList::getDataAtIndex":{"signature":"void * VirtualCircularList::getDataAtIndex(VirtualCircularList this, int32 index)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"int32 index","documentation":"Index within the list"}]},"VirtualCircularList::getCount":{"signature":"int32 VirtualCircularList::getCount(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::pushFront":{"signature":"VirtualNode VirtualCircularList::pushFront(VirtualCircularList this, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualCircularList::pushBack":{"signature":"VirtualNode VirtualCircularList::pushBack(VirtualCircularList this, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualCircularList::insertAfter":{"signature":"VirtualNode VirtualCircularList::insertAfter(VirtualCircularList this, VirtualNode node, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"VirtualNode node","documentation":"Reference node"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualCircularList::insertBefore":{"signature":"VirtualNode VirtualCircularList::insertBefore(VirtualCircularList this, VirtualNode node, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"VirtualNode node","documentation":"Reference node"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualCircularList::popFront":{"signature":"void * VirtualCircularList::popFront(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::popBack":{"signature":"void * VirtualCircularList::popBack(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::removeNode":{"signature":"bool VirtualCircularList::removeNode(VirtualCircularList this, VirtualNode node)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"VirtualNode node","documentation":"Node to remove"}]},"VirtualCircularList::removeData":{"signature":"bool VirtualCircularList::removeData(VirtualCircularList this, const void *const data)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to remove from the list"}]},"VirtualCircularList::reverse":{"signature":"void VirtualCircularList::reverse(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::copy":{"signature":"void VirtualCircularList::copy(VirtualCircularList this, VirtualCircularList sourceList)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"},{"label":"VirtualCircularList sourceList","documentation":"List with the elements to copy"}]},"VirtualCircularList::clear":{"signature":"void VirtualCircularList::clear(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualCircularList::deleteData":{"signature":"void VirtualCircularList::deleteData(VirtualCircularList this)","parameters":[{"label":"VirtualCircularList this","documentation":"VirtualCircularList Instance"}]},"VirtualList::constructor":{"signature":"void VirtualList::constructor(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::destructor":{"signature":"void VirtualList::destructor(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::front":{"signature":"void * VirtualList::front(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::back":{"signature":"void * VirtualList::back(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::begin":{"signature":"VirtualNode VirtualList::begin(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::end":{"signature":"VirtualNode VirtualList::end(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::find":{"signature":"VirtualNode VirtualList::find(VirtualList this, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to look for"}]},"VirtualList::getDataIndex":{"signature":"int32 VirtualList::getDataIndex(VirtualList this, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to look for"}]},"VirtualList::getNode":{"signature":"VirtualNode VirtualList::getNode(VirtualList this, int32 index)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"int32 index","documentation":"Index within the list"}]},"VirtualList::getNodeIndex":{"signature":"int32 VirtualList::getNodeIndex(VirtualList this, VirtualNode node)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"VirtualNode node","documentation":"Node to look for"}]},"VirtualList::getDataAtIndex":{"signature":"void * VirtualList::getDataAtIndex(VirtualList this, int32 index)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"int32 index","documentation":"Index within the list"}]},"VirtualList::getCount":{"signature":"int32 VirtualList::getCount(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::pushFront":{"signature":"VirtualNode VirtualList::pushFront(VirtualList this, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualList::pushBack":{"signature":"VirtualNode VirtualList::pushBack(VirtualList this, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualList::insertAfter":{"signature":"VirtualNode VirtualList::insertAfter(VirtualList this, VirtualNode node, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"VirtualNode node","documentation":"Reference node"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualList::insertBefore":{"signature":"VirtualNode VirtualList::insertBefore(VirtualList this, VirtualNode node, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"VirtualNode node","documentation":"Reference node"},{"label":"const void *const data","documentation":"Pointer to the data to insert into the list"}]},"VirtualList::popFront":{"signature":"void * VirtualList::popFront(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::popBack":{"signature":"void * VirtualList::popBack(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::removeNode":{"signature":"bool VirtualList::removeNode(VirtualList this, VirtualNode node)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"VirtualNode node","documentation":"Node to remove"}]},"VirtualList::removeData":{"signature":"bool VirtualList::removeData(VirtualList this, const void *const data)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"const void *const data","documentation":"Pointer to the data to remove from the list"}]},"VirtualList::reverse":{"signature":"void VirtualList::reverse(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::copy":{"signature":"void VirtualList::copy(VirtualList this, VirtualList sourceList)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"},{"label":"VirtualList sourceList","documentation":"List with the elements to copy"}]},"VirtualList::clear":{"signature":"void VirtualList::clear(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualList::deleteData":{"signature":"void VirtualList::deleteData(VirtualList this)","parameters":[{"label":"VirtualList this","documentation":"VirtualList Instance"}]},"VirtualNode::constructor":{"signature":"void VirtualNode::constructor(VirtualNode this, const void *const data)","parameters":[{"label":"VirtualNode this","documentation":"VirtualNode Instance"},{"label":"const void *const data","documentation":"Pointer to the data hold by this node"}]},"VirtualNode::getData":{"signature":"void * VirtualNode::getData(VirtualNode this)","parameters":[{"label":"VirtualNode this","documentation":"VirtualNode Instance"}]},"VirtualNode::getNext":{"signature":"VirtualNode VirtualNode::getNext(VirtualNode this)","parameters":[{"label":"VirtualNode this","documentation":"VirtualNode Instance"}]},"VirtualNode::getPrevious":{"signature":"VirtualNode VirtualNode::getPrevious(VirtualNode this)","parameters":[{"label":"VirtualNode this","documentation":"VirtualNode Instance"}]},"VirtualNode::swapData":{"signature":"void VirtualNode::swapData(VirtualNode this, VirtualNode node)","parameters":[{"label":"VirtualNode this","documentation":"VirtualNode Instance"},{"label":"VirtualNode node","documentation":"Node to swap data with"}]},"VisualComponent::constructor":{"signature":"void VisualComponent::constructor(VisualComponent this, SpatialObject owner, const VisualComponentSpec *visualComponentSpec)","parameters":[{"label":"VisualComponent this","documentation":"VisualComponent Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` that this component attaches to"},{"label":"const VisualComponentSpec *visualComponentSpec","documentation":"Pointer to the spec that defines how to initialize the visual component"}]},"VisualComponent::show":{"signature":"void VisualComponent::show(VisualComponent this)","parameters":[{"label":"VisualComponent this","documentation":"VisualComponent Instance"}]},"VisualComponent::hide":{"signature":"void VisualComponent::hide(VisualComponent this)","parameters":[{"label":"VisualComponent this","documentation":"VisualComponent Instance"}]},"VisualComponent::getTransparent":{"signature":"uint8 VisualComponent::getTransparent(VisualComponent this)","parameters":[{"label":"VisualComponent this","documentation":"VisualComponent Instance"}]},"VisualComponent::setTransparency":{"signature":"void VisualComponent::setTransparency(VisualComponent this, uint8 transparency)","parameters":[{"label":"VisualComponent this","documentation":"VisualComponent Instance"},{"label":"uint8 transparency","documentation":"Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)"}]},"Wireframe::constructor":{"signature":"void Wireframe::constructor(Wireframe this, SpatialObject owner, const WireframeSpec *wireframeSpec)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"},{"label":"SpatialObject owner","documentation":"`SpatialObject` to which the wireframe attaches to"},{"label":"const WireframeSpec *wireframeSpec","documentation":"Specification that determines how to configure the wireframe"}]},"Wireframe::setDisplacement":{"signature":"void Wireframe::setDisplacement(Wireframe this, Vector3D displacement)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"},{"label":"Vector3D displacement","documentation":"Displacement relative to the owner's spatial position"}]},"Wireframe::isVisible":{"signature":"bool Wireframe::isVisible(Wireframe this)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"}]},"Wireframe::prepareForRender":{"signature":"bool Wireframe::prepareForRender(Wireframe this, Vector3D *relativePosition)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"},{"label":"Vector3D *relativePosition"}]},"Wireframe::getPixelRightBox":{"signature":"PixelRightBox Wireframe::getPixelRightBox(Wireframe this)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"}]},"Wireframe::getVertices":{"signature":"VirtualList Wireframe::getVertices(Wireframe this)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"}]},"Wireframe::render":{"signature":"void Wireframe::render(Wireframe this, Vector3D relativePosition)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"},{"label":"Vector3D relativePosition","documentation":"Position relative to the camera's"}]},"Wireframe::draw":{"signature":"virtual bool Wireframe::draw(Wireframe this)","parameters":[{"label":"Wireframe this","documentation":"Wireframe Instance"}]},"WireframeManager::reset":{"signature":"void WireframeManager::reset(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::enable":{"signature":"void WireframeManager::enable(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::disable":{"signature":"void WireframeManager::disable(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::createWireframe":{"signature":"Wireframe WireframeManager::createWireframe(WireframeManager this, const WireframeSpec *wireframeSpec, SpatialObject owner)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"},{"label":"const WireframeSpec *wireframeSpec","documentation":"Spec to use to create the wireframe"},{"label":"SpatialObject owner","documentation":"`Object` to which the wireframe will attach to"}]},"WireframeManager::destroyWireframe":{"signature":"void WireframeManager::destroyWireframe(WireframeManager this, Wireframe wireframe)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"},{"label":"Wireframe wireframe","documentation":"`Wireframe` to destroy"}]},"WireframeManager::registerWireframe":{"signature":"bool WireframeManager::registerWireframe(WireframeManager this, Wireframe wireframe)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"},{"label":"Wireframe wireframe","documentation":"`Wireframe` to be managed"}]},"WireframeManager::unregisterWireframe":{"signature":"bool WireframeManager::unregisterWireframe(WireframeManager this, Wireframe wireframe)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"},{"label":"Wireframe wireframe","documentation":"`Wireframe` to no longer manage"}]},"WireframeManager::render":{"signature":"void WireframeManager::render(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::draw":{"signature":"void WireframeManager::draw(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::showWireframes":{"signature":"void WireframeManager::showWireframes(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::hideWireframes":{"signature":"void WireframeManager::hideWireframes(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::hasWireframes":{"signature":"bool WireframeManager::hasWireframes(WireframeManager this)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"}]},"WireframeManager::print":{"signature":"void WireframeManager::print(WireframeManager this, int32 x, int32 y)","parameters":[{"label":"WireframeManager this","documentation":"WireframeManager Instance"},{"label":"int32 x","documentation":"Screen x coordinate where to print"},{"label":"int32 y","documentation":"Screen y coordinate where to print"}]}}