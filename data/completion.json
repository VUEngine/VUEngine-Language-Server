[{"label":"Actor","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Actor","documentation":{"kind":"markdown","value":"Class `Actor`\n\nInherits from `AnimatedEntity`\n\nImplements an animated entity that can have complex behavior and physical simulations."}},{"label":"Actor::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::handleMessage(Actor this, Telegram telegram)","documentation":{"kind":"markdown","value":"Process a `Telegram`.\n\n_@param_ `this`: Actor instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n"}},{"label":"Actor::getVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Actor::getVelocity(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the object's velocity vector.\n\n_@param_ `this`: Actor instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n"}},{"label":"Actor::getSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Actor::getSpeed(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the object's current speed (velocity vector's magnitude).\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` `Object`'s current speed (velocity vector's magnitude)\n\n"}},{"label":"Actor::getBounciness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Actor::getBounciness(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the object's bounciness factor.\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n"}},{"label":"Actor::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::setPosition(Actor this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the container's position.\n\n_@param_ `this`: Actor instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n"}},{"label":"Actor::setDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::setDirection(Actor this, const Vector3D *direction)","documentation":{"kind":"markdown","value":"Set the direction towards which the object must move.\n\n_@param_ `this`: Actor instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n"}},{"label":"Actor::getDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Actor::getDirection(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the direction towards which the object is moving.\n\n_@param_ `this`: Actor instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n"}},{"label":"Actor::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::isSubjectToGravity(Actor this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the object is subject to provided gravity vector.\n\n_@param_ `this`: Actor instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n"}},{"label":"Actor::collisionStarts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::collisionStarts(Actor this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process a newly detected collision by one of the component colliders.\n\n_@param_ `this`: Actor instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n_@return_ `bool` True if the collider must keep track of the collision to detect if it persists and when it ends; false otherwise\n\n"}},{"label":"Actor::collisionEnds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::collisionEnds(Actor this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process when a previously detected collision by one of the component colliders stops.\n\n_@param_ `this`: Actor instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"Actor::setLocalPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::setLocalPosition(Actor this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the local position.\n\n_@param_ `this`: Actor instance\n\n_@param_ `position`: New local position\n\n"}},{"label":"Actor::changeEnvironment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::changeEnvironment(Actor this, Transformation *environmentTransform)","documentation":{"kind":"markdown","value":"Update the local transformation in function of the provided environment transform.\n\n_@param_ `this`: Actor instance\n\n_@param_ `environmentTransform`: New reference environment for the local transformation\n\n"}},{"label":"Actor::removeComponents","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::removeComponents(Actor this)","documentation":{"kind":"markdown","value":"Destroy the components that attach to this container.\n\n_@param_ `this`: Actor instance\n\n"}},{"label":"Actor::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::update(Actor this)","documentation":{"kind":"markdown","value":"Update this instance's logic.\n\n_@param_ `this`: Actor instance\n\n"}},{"label":"Actor::createStateMachine","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::createStateMachine(Actor this, State state)","documentation":{"kind":"markdown","value":"Create the state machine and inintialize it with the provided state.\n\n_@param_ `this`: Actor instance\n\n_@param_ `state`: `State` that the state machine must enter\n\n"}},{"label":"Actor::getBody","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Body Actor::getBody(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the actor's physical body.\n\n_@param_ `this`: Actor instance\n\n_@return_ `Body` `Actor`'s physical body\n\n"}},{"label":"Actor::isMoving","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::isMoving(Actor this)","documentation":{"kind":"markdown","value":"Check if the actor is moving.\n\n_@param_ `this`: Actor instance\n\n_@return_ `bool` True if the actor's body is moving; false otherwise\n\n"}},{"label":"Actor::stopAllMovement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::stopAllMovement(Actor this)","documentation":{"kind":"markdown","value":"Stop all actor's movement.\n\n_@param_ `this`: Actor instance\n\n"}},{"label":"Actor::stopMovement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Actor::stopMovement(Actor this, uint16 axis)","documentation":{"kind":"markdown","value":"Stop the actor's movement in the specified axis.\n\n_@param_ `this`: Actor instance\n\n_@param_ `axis`: Axis on which to stop the movement of the actor's body\n\n"}},{"label":"Actor::getMaximumSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Actor::getMaximumSpeed(Actor this)","documentation":{"kind":"markdown","value":"Retrieve the actor's maximum speed.\n\n_@param_ `this`: Actor instance\n\n_@return_ `fixed_t` Maximum speed at which the actor's body is allowed to move\n\n"}},{"label":"Actor::setVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::setVelocity(Actor this, const Vector3D *velocity, bool checkIfCanMove)","documentation":{"kind":"markdown","value":"Set the actor's velocity vector.\n\n_@param_ `this`: Actor instance\n\n_@param_ `velocity`\n\n_@param_ `checkIfCanMove`: If true, the actor checks that none of its colliders will enter a collision if it were to move in the direction of the provided velocity\n\n_@return_ `bool` True if the actor started to move in the direction specified by the provided velocity vector\n\n"}},{"label":"Actor::applyForce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::applyForce(Actor this, const Vector3D *force, bool checkIfCanMove)","documentation":{"kind":"markdown","value":"Apply a force to the actor's body.\n\n_@param_ `this`: Actor instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `checkIfCanMove`: If true, the actor checks that none of its colliders will\n\n_@return_ `bool` True if the force was succesfully applied to the actor's body\n\n"}},{"label":"Actor::canMoveTowards","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::canMoveTowards(Actor this, Vector3D direction)","documentation":{"kind":"markdown","value":"Check if the actor will enter a collision if it were to move in the provided direction\n\n_@param_ `this`: Actor instance\n\n_@param_ `direction`: Direction vector to check\n\n"}},{"label":"Actor::isBouncy","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::isBouncy(Actor this)","documentation":{"kind":"markdown","value":"Check if the actor bounces when it collides with another object.\n\n_@param_ `this`: Actor instance\n\n_@return_ `bool` True if the actor bounces when it collides with another object\n\n"}},{"label":"Actor::isSensibleToCollidingObjectBouncinessOnCollision","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::isSensibleToCollidingObjectBouncinessOnCollision(Actor this, SpatialObject collidingObject)","documentation":{"kind":"markdown","value":"Check if when the actor bounces it has to take into account the colliding object's bounciness.\n\n_@param_ `this`: Actor instance\n\n_@param_ `collidingObject`\n\n_@return_ `bool` True if the actor has to take into account the colliding object's bounciness when bouncing\n\n"}},{"label":"Actor::isSensibleToCollidingObjectFrictionOnCollision","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Actor::isSensibleToCollidingObjectFrictionOnCollision(Actor this, SpatialObject collidingObject)","documentation":{"kind":"markdown","value":"Check if when the actor bounces it has to take into account the colliding object's friction coefficient.\n\n_@param_ `this`: Actor instance\n\n_@param_ `collidingObject`\n\n_@return_ `bool` True if the actor has to take into account the colliding object's friction coefficient when bouncing\n\n"}},{"label":"Affine","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Affine","documentation":{"kind":"markdown","value":"Class `Affine`\n\nInherits from `Object`\n\nImplements various affine transformations."}},{"label":"Affine::transform","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int16 Affine::transform(Affine this, uint32 param, int16 paramTableRow, fixed_t targetHalfWidth, fixed_t targetHalfHeight, fix13_3 mx, fix13_3 my, fixed_t halfWidth, fixed_t halfHeight, const PixelScale *scale, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Translate, scale and rotate the affine matrix specified by param.\n\n_@param_ `this`: Affine instance\n\n_@param_ `param`: Displacement within param tables space\n\n_@param_ `paramTableRow`: Displacement within the specified param table\n\n_@param_ `targetHalfWidth`: Image's target half width\n\n_@param_ `targetHalfHeight`: Image's target half height\n\n_@param_ `mx`: Image's x coordinate\n\n_@param_ `my`: Image's y coordinate\n\n_@param_ `halfWidth`: Image's half width\n\n_@param_ `halfHeight`: Image's half height\n\n_@param_ `scale`: Target scale\n\n_@param_ `rotation`: Target rotation\n\n"}},{"label":"AnimatedEntity","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimatedEntity","documentation":{"kind":"markdown","value":"Class `AnimatedEntity`\n\nInherits from `Entity`\n\nImplements an entity that proxies animation related methods to its sprites."}},{"label":"AnimatedEntity::ready","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::ready(AnimatedEntity this, bool recursive)","documentation":{"kind":"markdown","value":"Make the animated entity ready to start operating once it has been completely intialized.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `recursive`: If true, the ready call is propagated to its children, grand children, etc.\n\n"}},{"label":"AnimatedEntity::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::resume(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Prepare to resume this instance's logic.\n\n_@param_ `this`: AnimatedEntity instance\n\n"}},{"label":"AnimatedEntity::handlePropagatedString","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimatedEntity::handlePropagatedString(AnimatedEntity this, const char *string)","documentation":{"kind":"markdown","value":"Default string handler for propagateString\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `string`: Propagated string\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n"}},{"label":"AnimatedEntity::playAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimatedEntity::playAnimation(AnimatedEntity this, const char *animationName)","documentation":{"kind":"markdown","value":"Play the animation with the provided name.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `animationName`: Name of the animation to play\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n"}},{"label":"AnimatedEntity::pauseAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::pauseAnimation(AnimatedEntity this, bool pause)","documentation":{"kind":"markdown","value":"Pause or unpause the currently playing animation if any.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n"}},{"label":"AnimatedEntity::stopAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::stopAnimation(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Stop any playing animation if any.\n\n_@param_ `this`: AnimatedEntity instance\n\n"}},{"label":"AnimatedEntity::isPlaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimatedEntity::isPlaying(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Check if an animation is playing.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"AnimatedEntity::isPlayingAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimatedEntity::isPlayingAnimation(AnimatedEntity this, char *animationName)","documentation":{"kind":"markdown","value":"Check if the animation whose name is provided is playing.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"AnimatedEntity::getPlayingAnimationName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const char * AnimatedEntity::getPlayingAnimationName(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Retrieve the animation function's name currently playing if any\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n"}},{"label":"AnimatedEntity::setActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::setActualFrame(AnimatedEntity this, int16 frame)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the provided frame.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@param_ `frame`\n\n"}},{"label":"AnimatedEntity::nextFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::nextFrame(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the next frame.\n\n_@param_ `this`: AnimatedEntity instance\n\n"}},{"label":"AnimatedEntity::previousFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimatedEntity::previousFrame(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Rewind the currently playing animation to the previous frame.\n\n_@param_ `this`: AnimatedEntity instance\n\n"}},{"label":"AnimatedEntity::getActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 AnimatedEntity::getActualFrame(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Retrieve the actual frame of the playing animation if any.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n"}},{"label":"AnimatedEntity::getNumberOfFrames","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 AnimatedEntity::getNumberOfFrames(AnimatedEntity this)","documentation":{"kind":"markdown","value":"Retrieve the number of frames in the currently playing animation if any.\n\n_@param_ `this`: AnimatedEntity instance\n\n_@return_ `int32` The numer of frames if an animation is playing; o otherwise\n\n"}},{"label":"AnimationController","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimationController","documentation":{"kind":"markdown","value":"Class `AnimationController`\n\nInherits from `ListenerObject`\n\nControls animations."}},{"label":"AnimationController::play","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::play(AnimationController this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","documentation":{"kind":"markdown","value":"Play the animation with the provided name from the provided array of animation functions.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunctions`\n\n_@param_ `animationName`: Name of the animation to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n"}},{"label":"AnimationController::playAnimationFunction","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::playAnimationFunction(AnimationController this, const AnimationFunction *animationFunction, ListenerObject scope)","documentation":{"kind":"markdown","value":"Play the animation defined by the the provided animation function.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunction`: Animation function to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n"}},{"label":"AnimationController::replay","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::replay(AnimationController this, const AnimationFunction *animationFunctions[])","documentation":{"kind":"markdown","value":"Replay the last playing animation, if any, from the provided array of animation functions.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@return_ `bool` True if the animation started playing again; false otherwise\n\n"}},{"label":"AnimationController::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::pause(AnimationController this, bool pause)","documentation":{"kind":"markdown","value":"Pause or unpause the currently playing animation if any.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n"}},{"label":"AnimationController::stop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::stop(AnimationController this)","documentation":{"kind":"markdown","value":"Stop any playing animation if any.\n\n_@param_ `this`: AnimationController instance\n\n"}},{"label":"AnimationController::updateAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::updateAnimation(AnimationController this)","documentation":{"kind":"markdown","value":"Update the current playing animation if any.\n\n_@param_ `this`: AnimationController instance\n\n"}},{"label":"AnimationController::isPlaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::isPlaying(AnimationController this)","documentation":{"kind":"markdown","value":"Check if an animation is playing.\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"AnimationController::isPlayingFunction","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::isPlayingFunction(AnimationController this, const char *animationName)","documentation":{"kind":"markdown","value":"Check if the animation whose name is provided is playing.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"AnimationController::nextFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::nextFrame(AnimationController this)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the next frame.\n\n_@param_ `this`: AnimationController instance\n\n"}},{"label":"AnimationController::previousFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::previousFrame(AnimationController this)","documentation":{"kind":"markdown","value":"Rewind the currently playing animation to the previous frame.\n\n_@param_ `this`: AnimationController instance\n\n"}},{"label":"AnimationController::setActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationController::setActualFrame(AnimationController this, int16 actualFrame)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the provided frame.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `actualFrame`: The frame of the playing animation to skip to\n\n_@return_ `bool` True if the actual frame was changed; false otherwise\n\n"}},{"label":"AnimationController::getActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 AnimationController::getActualFrame(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the actual frame of the playing animation if any.\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n"}},{"label":"AnimationController::getActualFrameIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 AnimationController::getActualFrameIndex(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the actual frame index of the playing animation if any.\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int16` Actual frame index of the playing animation if any\n\n"}},{"label":"AnimationController::setFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::setFrameDuration(AnimationController this, uint8 frameDuration)","documentation":{"kind":"markdown","value":"Set the duration in game cycles for each frame of animation.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `frameDuration`: Duration in game cycles for each frame of animation\n\n"}},{"label":"AnimationController::getFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 AnimationController::getFrameDuration(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the duration in game cycles for each frame of animation.\n\n_@param_ `this`: AnimationController instance\n\n"}},{"label":"AnimationController::setFrameDurationDecrement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::setFrameDurationDecrement(AnimationController this, uint8 frameCycleDecrement)","documentation":{"kind":"markdown","value":"Set the decrement to frameDuration in each game cycle for each frame of animation.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `frameCycleDecrement`: Decrement to frameDuration in each game cycle for each frame of animation\n\n"}},{"label":"AnimationController::getFrameDurationDecrement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 AnimationController::getFrameDurationDecrement(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the decrement to frameDuration in each game cycle for each frame of animation.\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `uint8` Decrement to frameDuration in each game cycle for each frame of animation\n\n"}},{"label":"AnimationController::setAnimationCoordinator","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationController::setAnimationCoordinator(AnimationController this, AnimationCoordinator animationCoordinator)","documentation":{"kind":"markdown","value":"Set the animation coordinator for this animation controller.\n\n_@param_ `this`: AnimationController instance\n\n_@param_ `animationCoordinator`: Animation coordinator for this animation controller\n\n"}},{"label":"AnimationController::getAnimationCoordinator","labelDetails":{"description":"core"},"kind":2,"detail":"(method) AnimationCoordinator AnimationController::getAnimationCoordinator(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the animation coordinator for this animation controller.\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `AnimationCoordinator` Animation coordinator for this animation controller\n\n"}},{"label":"AnimationController::getPlayingAnimationFunction","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const AnimationFunction * AnimationController::getPlayingAnimationFunction(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the animation function currently playing if any\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `const` Animation function currently playing if any\n\n"}},{"label":"AnimationController::getPlayingAnimationName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const char * AnimationController::getPlayingAnimationName(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the animation function's name currently playing if any\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n"}},{"label":"AnimationController::getNumberOfFrames","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 AnimationController::getNumberOfFrames(AnimationController this)","documentation":{"kind":"markdown","value":"Retrieve the number of frames in the currently playing if any\n\n_@param_ `this`: AnimationController instance\n\n_@return_ `int32` Number of frames in the currently playing if any\n\n"}},{"label":"AnimationCoordinator","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimationCoordinator","documentation":{"kind":"markdown","value":"Class `AnimationCoordinator`\n\nInherits from `ListenerObject`\n\nCoordinates animation controllers whose sprites share the same `CharSet`."}},{"label":"AnimationCoordinator::playAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationCoordinator::playAnimation(AnimationCoordinator this, AnimationController animationController, const AnimationFunction **animationFunctions, const char *animationName)","documentation":{"kind":"markdown","value":"Play an animation on the specified animation controller.\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Animation controller on which to play the animation\n\n_@param_ `animationFunctions`: Array of animation functions in which to look for the animation to play\n\n_@param_ `animationName`: Name of the animation to play\n\n_@return_ `bool` True if the animation was found and started to play; false otherwise\n\n"}},{"label":"AnimationCoordinator::addAnimationController","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationCoordinator::addAnimationController(AnimationCoordinator this, AnimationController animationController)","documentation":{"kind":"markdown","value":"Add an animation controller to coordinate.\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Animation controller to coordinate\n\n"}},{"label":"AnimationCoordinator::removeAnimationController","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationCoordinator::removeAnimationController(AnimationCoordinator this, AnimationController animationController)","documentation":{"kind":"markdown","value":"Remove a coordinated animation controller.\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@param_ `animationController`: Coordinated animation controller to remove\n\n"}},{"label":"AnimationCoordinator::getCharSetSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const CharSetSpec * AnimationCoordinator::getCharSetSpec(AnimationCoordinator this)","documentation":{"kind":"markdown","value":"Retrieve the spec shared by the animation controllers to coordinate.\n\n_@param_ `this`: AnimationCoordinator instance\n\n_@return_ `const` Pointer to spec shared by the animation controllers to coordinate\n\n"}},{"label":"AnimationCoordinatorFactory","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimationCoordinatorFactory","documentation":{"kind":"markdown","value":"Class `AnimationCoordinator`\n\nInherits from `ListenerObject`\n\nCreates instances of animation coordinators."}},{"label":"AnimationCoordinatorFactory::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static AnimationCoordinatorFactory AnimationCoordinatorFactory::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `AnimationCoordinatorFactory` singleton\n\n"}},{"label":"AnimationCoordinatorFactory::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationCoordinatorFactory::reset(AnimationCoordinatorFactory this)","documentation":{"kind":"markdown","value":"Reset the animation coordinator factory's state.\n\n_@param_ `this`: AnimationCoordinatorFactory instance\n\n"}},{"label":"AnimationCoordinatorFactory::getCoordinator","labelDetails":{"description":"core"},"kind":2,"detail":"(method) AnimationCoordinator AnimationCoordinatorFactory::getCoordinator(AnimationCoordinatorFactory this, AnimationController animationController, ListenerObject scope, const CharSetSpec *charSetSpec)","documentation":{"kind":"markdown","value":"Get an animation coordinator.\n\n_@param_ `this`: AnimationCoordinatorFactory instance\n\n_@param_ `animationController`: Animation controller to potentially coordinate\n\n_@param_ `scope`: `Object` that might need to listen for playback related events\n\n_@param_ `charSetSpec`\n\n_@return_ `AnimationCoordinator` `ClockManager` singleton\n\n"}},{"label":"AnimationInspector","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimationInspector","documentation":{"kind":"markdown","value":"Class `AnimationInspector`\n\nInherits from `Tool`\n\nImplements a tool that manipulates animations."}},{"label":"AnimationInspector::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static AnimationInspector AnimationInspector::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `AnimationInspector` singleton\n\n"}},{"label":"AnimationInspector::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationInspector::update(AnimationInspector this)","documentation":{"kind":"markdown","value":"Update the tool's state.\n\n_@param_ `this`: AnimationInspector instance\n\n"}},{"label":"AnimationInspector::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationInspector::show(AnimationInspector this)","documentation":{"kind":"markdown","value":"Show the tool.\n\n_@param_ `this`: AnimationInspector instance\n\n"}},{"label":"AnimationInspector::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationInspector::hide(AnimationInspector this)","documentation":{"kind":"markdown","value":"Hide the tool.\n\n_@param_ `this`: AnimationInspector instance\n\n"}},{"label":"AnimationInspector::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void AnimationInspector::processUserInput(AnimationInspector this, uint16 pressedKey)","documentation":{"kind":"markdown","value":"Process the provided user pressed key.\n\n_@param_ `this`: AnimationInspector instance\n\n_@param_ `pressedKey`: User pressed key\n\n"}},{"label":"AnimationInspectorState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) AnimationInspectorState","documentation":{"kind":"markdown","value":"Class `AnimationInspectorState`\n\nInherits from `ToolState`\n\nImplements a tool state to inspect animations."}},{"label":"AnimationInspectorState::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static AnimationInspectorState AnimationInspectorState::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `AnimationInspectorState` singleton\n\n"}},{"label":"AnimationInspectorState::isKeyCombination","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool AnimationInspectorState::isKeyCombination(AnimationInspectorState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Check if the provided user input unlocks the tool managed by this state.\n\n_@param_ `this`: AnimationInspectorState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n"}},{"label":"Asterisk","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Asterisk","documentation":{"kind":"markdown","value":"Class `Asterisk`\n\nInherits from `Wireframe`\n\nDraws an asterisk."}},{"label":"Asterisk::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Asterisk::render(Asterisk this, Vector3D relativePosition)","documentation":{"kind":"markdown","value":"Prepare the wireframe for drawing.\n\n_@param_ `this`: Asterisk instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n"}},{"label":"Asterisk::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Asterisk::draw(Asterisk this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers.\n\n_@param_ `this`: Asterisk instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"Ball","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Ball","documentation":{"kind":"markdown","value":"Class `Ball`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a ball."}},{"label":"Ball::project","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Ball::project(Ball this, Vector3D center, fixed_t radius, Vector3D vector, fixed_t *min, fixed_t *max)","documentation":{"kind":"markdown","value":"Project the diameter of a circle defined by its centers and radius onto the provided vector.\n\n_@param_ `this`: Ball instance\n\n_@param_ `center`: Center of the circle whose diameter is projected\n\n_@param_ `radius`: Radius of the circle whose diameter is projected\n\n_@param_ `vector`: Vector onto which to project the circle's diameter\n\n_@param_ `min`\n\n_@param_ `max`\n\n"}},{"label":"Ball::resize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Ball::resize(Ball this, fixed_t sizeDelta)","documentation":{"kind":"markdown","value":"Resize the colliders add the provided increment.\n\n_@param_ `this`: Ball instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n"}},{"label":"Ball::configureWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Ball::configureWireframe(Ball this)","documentation":{"kind":"markdown","value":"Configure the wireframe used to show the collider.\n\n_@param_ `this`: Ball instance\n\n"}},{"label":"Ball::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Ball::print(Ball this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print collider's state.\n\n_@param_ `this`: Ball instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Behavior","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Behavior","documentation":{"kind":"markdown","value":"Class `Behavior`\n\nInherits from `Component`\n\nImplements a container whose children are always fixed to the camera"}},{"label":"Behavior::create","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Behavior Behavior::create(Behavior this, SpatialObject owner, const BehaviorSpec *behaviorSpec)","documentation":{"kind":"markdown","value":"Class' constructor\n\n_@param_ `this`: Behavior instance\n\n_@param_ `owner`: `SpatialObject` to which the behavior attaches to\n\n_@param_ `behaviorSpec`: Specification that determines how to configure the behavior\n\n"}},{"label":"Behavior::enable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Behavior::enable(Behavior this)","documentation":{"kind":"markdown","value":"Enable the behavior's operations.\n\n_@param_ `this`: Behavior instance\n\n"}},{"label":"Behavior::disable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Behavior::disable(Behavior this)","documentation":{"kind":"markdown","value":"Disable the behavior's operations.\n\n_@param_ `this`: Behavior instance\n\n"}},{"label":"Behavior::isEnabled","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Behavior::isEnabled(Behavior this)","documentation":{"kind":"markdown","value":"Check if the behavior's operations are enabled.\n\n_@param_ `this`: Behavior instance\n\n_@return_ `bool` True if the behavior's operations are enabled; false otherwise\n\n"}},{"label":"BgmapAnimatedSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) BgmapAnimatedSprite","documentation":{"kind":"markdown","value":"Class `BgmapAnimatedSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose texture is allocated in BGMAP space."}},{"label":"BgmapAnimatedSprite::updateAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapAnimatedSprite::updateAnimation(BgmapAnimatedSprite this)","documentation":{"kind":"markdown","value":"Update the animation.\n\n_@param_ `this`: BgmapAnimatedSprite instance\n\n"}},{"label":"BgmapSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) BgmapSprite","documentation":{"kind":"markdown","value":"Class `BgmapSprite`\n\nInherits from `Sprite`\n\nDisplays a texture that is allocated in BGMAP space."}},{"label":"BgmapSprite::registerWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::registerWithManager(BgmapSprite this)","documentation":{"kind":"markdown","value":"Register this sprite with the appropriate sprites manager.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::unregisterWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::unregisterWithManager(BgmapSprite this)","documentation":{"kind":"markdown","value":"Unegister this sprite with the appropriate sprites manager.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::hasSpecialEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool BgmapSprite::hasSpecialEffects(BgmapSprite this)","documentation":{"kind":"markdown","value":"Check if the sprite has affine or hbias effects.\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `bool` True if the sprite's mode of display is (__WORLD_AFFINE or __WORLD_HBIAS)\n\n"}},{"label":"BgmapSprite::processEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::processEffects(BgmapSprite this)","documentation":{"kind":"markdown","value":"Process affine and hbias effects.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapSprite::doRender(BgmapSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"BgmapSprite::setMultiframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::setMultiframe(BgmapSprite this, uint16 frame)","documentation":{"kind":"markdown","value":"Set the current multiframe\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `frame`: Current animation frame\n\n"}},{"label":"BgmapSprite::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::setRotation(BgmapSprite this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the sprite's rotation.\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `rotation`: `Rotation` to apply to the sprite\n\n"}},{"label":"BgmapSprite::setScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::setScale(BgmapSprite this, const PixelScale *scale)","documentation":{"kind":"markdown","value":"Set the sprite's scale.\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `scale`: `Scale` to apply to the sprite\n\n"}},{"label":"BgmapSprite::getTotalPixels","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 BgmapSprite::getTotalPixels(BgmapSprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's total number of pixels actually displayed.\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `int32` `Sprite`'s total number of pixels actually displayed\n\n"}},{"label":"BgmapSprite::configureTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::configureTexture(BgmapSprite this)","documentation":{"kind":"markdown","value":"Configure the sprite's texture.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::setMode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::setMode(BgmapSprite this, uint16 display, uint16 mode)","documentation":{"kind":"markdown","value":"Configure the displays on which to show the sprite and how it will be displayed\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `display`: Displays on which to show the sprite (__WORLD_ON, __WORLD_LON or __WORLD_RON)\n\n_@param_ `mode`: The mode to use to display the sprite (__WORLD_BGMAP | __WORLD_AFFINE | __WORLD_HBIAS)\n\n"}},{"label":"BgmapSprite::setParam","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::setParam(BgmapSprite this, uint32 param)","documentation":{"kind":"markdown","value":"Set the offset within param table space that determines the area where this sprite is allowed to write.\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `param`: Offset within param table space\n\n"}},{"label":"BgmapSprite::getParam","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 BgmapSprite::getParam(BgmapSprite this)","documentation":{"kind":"markdown","value":"Retrieve the offset within param table space that determines the area where this sprite is allowed to write\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `uint32` Offset within param table space\n\n"}},{"label":"BgmapSprite::getParamTableRow","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapSprite::getParamTableRow(BgmapSprite this)","documentation":{"kind":"markdown","value":"Retrieve the offset that keeps track of where to continue writing in param table\n\n_@param_ `this`: BgmapSprite instance\n\n_@return_ `int16` Offset within param table space\n\n"}},{"label":"BgmapSprite::invalidateParamTable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::invalidateParamTable(BgmapSprite this)","documentation":{"kind":"markdown","value":"Force the rewrite of the sprite's param table during the next rendering cycle.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::onTextureRewritten","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool BgmapSprite::onTextureRewritten(BgmapSprite this, ListenerObject eventFirer)","documentation":{"kind":"markdown","value":"Callback for when the sprite's texture is rewriten.\n\n_@param_ `this`: BgmapSprite instance\n\n_@param_ `eventFirer`: The rewrite texture\n\n_@return_ `bool` True if the listener must be kept; false to remove after the current call\n\n"}},{"label":"BgmapSprite::applyAffineTransformations","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::applyAffineTransformations(BgmapSprite this)","documentation":{"kind":"markdown","value":"Start rewriting the sprite's param table for affine transformations.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapSprite::applyHbiasEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapSprite::applyHbiasEffects(BgmapSprite this)","documentation":{"kind":"markdown","value":"Start rewriting the sprite's param table for hbias effects.\n\n_@param_ `this`: BgmapSprite instance\n\n"}},{"label":"BgmapTexture","labelDetails":{"description":"core"},"kind":7,"detail":"(class) BgmapTexture","documentation":{"kind":"markdown","value":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nA texture allocated in BGMAP memory."}},{"label":"BgmapTexture::write","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool BgmapTexture::write(BgmapTexture this, int16 maximumTextureRowsToWrite)","documentation":{"kind":"markdown","value":"Write graphical data to the allocated BGMAP space.\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `maximumTextureRowsToWrite`: Number of texture rows to write during this call\n\n_@return_ `bool` True if the texture was written; false if it fails\n\n"}},{"label":"BgmapTexture::rewrite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTexture::rewrite(BgmapTexture this)","documentation":{"kind":"markdown","value":"Rewrite graphical data to the allocated BGMAP space.\n\n_@param_ `this`: BgmapTexture instance\n\n"}},{"label":"BgmapTexture::setSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTexture::setSegment(BgmapTexture this, int8 segment)","documentation":{"kind":"markdown","value":"Set the BGMAP segment where the graphical data is allocated.\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `segment`: BGMAP segment where the graphical data is allocated\n\n"}},{"label":"BgmapTexture::getSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 BgmapTexture::getSegment(BgmapTexture this)","documentation":{"kind":"markdown","value":"Retriev the BGMAP segment where the graphical data is allocated.\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int8` BGMAP segment where the graphical data is allocated\n\n"}},{"label":"BgmapTexture::setOffsets","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTexture::setOffsets(BgmapTexture this, int16 xOffset, int16 yOffset)","documentation":{"kind":"markdown","value":"Set the coordinates in tiles of the graphical data inside BGMAP memory BGMAP segment where the graphical data is allocated.\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `xOffset`: X coordinate in tiles of the graphical data inside BGMAP memory\n\n_@param_ `yOffset`: Y coordinate in tiles of the graphical data inside BGMAP memory\n\n"}},{"label":"BgmapTexture::getXOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapTexture::getXOffset(BgmapTexture this)","documentation":{"kind":"markdown","value":"Retrieve the X coordinate in tiles of the graphical data inside BGMAP memory.\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int16` X coordinate in tiles of the graphical data inside BGMAP memory\n\n"}},{"label":"BgmapTexture::getYOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapTexture::getYOffset(BgmapTexture this)","documentation":{"kind":"markdown","value":"Retrieve the Y coordinate in tiles of the graphical data inside BGMAP memory.\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int16` Y coordinate in tiles of the graphical data inside BGMAP memory\n\n"}},{"label":"BgmapTexture::setHorizontalFlip","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTexture::setHorizontalFlip(BgmapTexture this, bool value)","documentation":{"kind":"markdown","value":"Set the horizontal flip flag.\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `value`: If true, the texture is flipped horizontally\n\n"}},{"label":"BgmapTexture::setVerticalFlip","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTexture::setVerticalFlip(BgmapTexture this, bool value)","documentation":{"kind":"markdown","value":"Set the vertical flip flag.\n\n_@param_ `this`: BgmapTexture instance\n\n_@param_ `value`: If true, the texture is flipped vertically\n\n"}},{"label":"BgmapTexture::getRemainingRowsToBeWritten","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 BgmapTexture::getRemainingRowsToBeWritten(BgmapTexture this)","documentation":{"kind":"markdown","value":"Retrieve the number of remaining rows to be written to graphical memory.\n\n_@param_ `this`: BgmapTexture instance\n\n_@return_ `int8` Number of remaining rows to be written to graphical memory\n\n"}},{"label":"BgmapTextureManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) BgmapTextureManager","documentation":{"kind":"markdown","value":"Class `BgmapTextureManager`\n\nInherits from `Texture`\n\nAllocates BGMAP space for textures."}},{"label":"BgmapTextureManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static BgmapTextureManager BgmapTextureManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `BgmapTextureManager` singleton\n\n"}},{"label":"BgmapTextureManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::reset(BgmapTextureManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: BgmapTextureManager instance\n\n"}},{"label":"BgmapTextureManager::clearBgmapSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::clearBgmapSegment(BgmapTextureManager this, int32 segment)","documentation":{"kind":"markdown","value":"Clear the data in the BGMAP spaced defined by the provided segment.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `segment`: Index of the BGMAP segment to clear\n\n"}},{"label":"BgmapTextureManager::calculateAvailableBgmapSegments","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::calculateAvailableBgmapSegments(BgmapTextureManager this)","documentation":{"kind":"markdown","value":"Compute the number of available BGMAP segments for texture allocation.\n\n_@param_ `this`: BgmapTextureManager instance\n\n"}},{"label":"BgmapTextureManager::getAvailableBgmapSegmentsForTextures","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 BgmapTextureManager::getAvailableBgmapSegmentsForTextures(BgmapTextureManager this)","documentation":{"kind":"markdown","value":"Retrieve the number of available BGMAP segments to allocate textures.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@return_ `int8` Number of available BGMAP segments to allocate textures\n\n"}},{"label":"BgmapTextureManager::getPrintingBgmapSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 BgmapTextureManager::getPrintingBgmapSegment(BgmapTextureManager this)","documentation":{"kind":"markdown","value":"Retrieve the number of the BGMAP segment available for printing.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@return_ `int8` Number of the BGMAP segment available for printing\n\n"}},{"label":"BgmapTextureManager::loadTextures","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::loadTextures(BgmapTextureManager this, const TextureSpec **textureSpecs)","documentation":{"kind":"markdown","value":"Load textures in function of the provided array of specs.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `textureSpecs`: Array of texture specs in function of which to load textures\n\n"}},{"label":"BgmapTextureManager::getTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) BgmapTexture BgmapTextureManager::getTexture(BgmapTextureManager this, BgmapTextureSpec *bgmapTextureSpec, int16 minimumSegment, bool mustLiveAtEvenSegment, uint32 scValue)","documentation":{"kind":"markdown","value":"Retrieve a texture initialized with the provided spec.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `bgmapTextureSpec`: Spec to use to initilize the desired texture\n\n_@param_ `minimumSegment`: Minimum BGMAP segment where to allocate the texture\n\n_@param_ `mustLiveAtEvenSegment`: Required BGMAP segment where to allocate the texture\n\n_@param_ `scValue`: SC configuration value for multi segment textures\n\n_@return_ `BgmapTexture` `Texture` initialized with the provided spec\n\n"}},{"label":"BgmapTextureManager::releaseTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::releaseTexture(BgmapTextureManager this, BgmapTexture bgmapTexture)","documentation":{"kind":"markdown","value":"Release a texture.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `bgmapTexture`: `Texture` to release\n\n"}},{"label":"BgmapTextureManager::getXOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapTextureManager::getXOffset(BgmapTextureManager this, int32 id)","documentation":{"kind":"markdown","value":"Retrieve the X coordinate in BGMAP space for the texture ID provided.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `id`: `Texture`'s id\n\n_@return_ `int16` X coordinate in BGMAP space for the texture ID provided\n\n"}},{"label":"BgmapTextureManager::getYOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 BgmapTextureManager::getYOffset(BgmapTextureManager this, int32 id)","documentation":{"kind":"markdown","value":"Retrieve the Y coordinate in BGMAP space for the texture ID provided.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `id`: `Texture`'s id\n\n_@return_ `int16` Y coordinate in BGMAP space for the texture ID provided\n\n"}},{"label":"BgmapTextureManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void BgmapTextureManager::print(BgmapTextureManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's status.\n\n_@param_ `this`: BgmapTextureManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Body","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Body","documentation":{"kind":"markdown","value":"Class `Body`\n\nInherits from `ListenerObject`\n\nImplements newtonian physics."}},{"label":"Body::computeInstantaneousSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t Body::computeInstantaneousSpeed(Body this, fixed_t forceMagnitude, fixed_t gravity, fixed_t mass, fixed_t friction, fixed_t maximumSpeed)","documentation":{"kind":"markdown","value":"Compute the instantaneous speed caused by the provided physical properties.\n\n_@param_ `this`: Body instance\n\n_@param_ `forceMagnitude`: Magnitude of the applied force\n\n_@param_ `gravity`: Gravity acceleration vector that affects the resulting speed\n\n_@param_ `mass`: The mass that will aquire the computed speed\n\n_@param_ `friction`: Friction affecting the mass that will aquire the computed speed\n\n_@param_ `maximumSpeed`: Maximum value that the computated speed can reach\n\n_@return_ `static` The instantaneous speed caused by the provided physical properties\n\n"}},{"label":"Body::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::reset(Body this)","documentation":{"kind":"markdown","value":"Clear the body's state.\n\n_@param_ `this`: Body instance\n\n"}},{"label":"Body::clearNormal","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::clearNormal(Body this, ListenerObject referent)","documentation":{"kind":"markdown","value":"Remove any normal vector affecting the body belonging to the provided referent.\n\n_@param_ `this`: Body instance\n\n_@param_ `referent`: Normal vector affecting the body's owner\n\n"}},{"label":"Body::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::update(Body this, uint16 cycle, fix7_9_ext elapsedTime)","documentation":{"kind":"markdown","value":"Update the physics simulation on the body.\n\n_@param_ `this`: Body instance\n\n_@param_ `cycle`: Cycle number during the current second\n\n_@param_ `elapsedTime`: Elapsed time since the last call to this method\n\n"}},{"label":"Body::applyForce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 Body::applyForce(Body this, const Vector3D *force)","documentation":{"kind":"markdown","value":"Apply a force to the body.\n\n_@param_ `this`: Body instance\n\n_@param_ `force`: Force to be applied\n\n"}},{"label":"Body::bounce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::bounce(Body this, ListenerObject bounceReferent, Vector3D bouncingPlaneNormal, fixed_t frictionCoefficient, fixed_t bounciness)","documentation":{"kind":"markdown","value":"Make the body to bounce on the profixed plane according to the provided friction and bounciness.\n\n_@param_ `this`: Body instance\n\n_@param_ `bounceReferent`: Referent of the normal to the plane on which the body has to bounce\n\n_@param_ `bouncingPlaneNormal`: Normal of the plane on which the body has to bounce\n\n_@param_ `frictionCoefficient`: Friction coefficient of the bounce referent\n\n_@param_ `bounciness`: Bounciness coefficient of the bounce referent\n\n"}},{"label":"Body::stopMovement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Body::stopMovement(Body this, uint16 axis)","documentation":{"kind":"markdown","value":"Stop the body's movement on the speficied axis.\n\n_@param_ `this`: Body instance\n\n_@param_ `axis`: Flag indicating the axises on which the movement has to stop\n\n_@return_ `uint16` Flag indicatiing the actual axises on which the body's movement stopped\n\n"}},{"label":"Body::setVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setVelocity(Body this, const Vector3D *velocity)","documentation":{"kind":"markdown","value":"Set a constant velocity at which the body must move.\n\n_@param_ `this`: Body instance\n\n_@param_ `velocity`: Pointer to a velocity vector\n\n"}},{"label":"Body::getVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Body::getVelocity(Body this)","documentation":{"kind":"markdown","value":"Retrieve the current velocity at which the body move.\n\n_@param_ `this`: Body instance\n\n_@return_ `const` Pointer to the body's velocity vector\n\n"}},{"label":"Body::setDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setDirection(Body this, const Vector3D *direction)","documentation":{"kind":"markdown","value":"Set the direction towards which the body must move.\n\n_@param_ `this`: Body instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n"}},{"label":"Body::getDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Body::getDirection(Body this)","documentation":{"kind":"markdown","value":"Retrieve the direction towards which the body is moving.\n\n_@param_ `this`: Body instance\n\n"}},{"label":"Body::setAxisSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setAxisSubjectToGravity(Body this, uint16 axisSubjectToGravity)","documentation":{"kind":"markdown","value":"Set the axises on which the body is subject to gravity.\n\n_@param_ `this`: Body instance\n\n_@param_ `axisSubjectToGravity`: Flag containing the axises on which the body is subject to gravity\n\n"}},{"label":"Body::getAxisSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Body::getAxisSubjectToGravity(Body this)","documentation":{"kind":"markdown","value":"Retrieve the axises on which the body is subject to gravity.\n\n_@param_ `this`: Body instance\n\n_@return_ `uint16` Flag containing the axises on which the body is subject to gravity\n\n"}},{"label":"Body::setBounciness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setBounciness(Body this, fixed_t bounciness)","documentation":{"kind":"markdown","value":"Set the body's bounciness factor.\n\n_@param_ `this`: Body instance\n\n_@param_ `bounciness`: Value to set as the body's bounciness factor (between 0 and 1)\n\n"}},{"label":"Body::getBounciness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Body::getBounciness(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's bounciness factor.\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s bounciness factor\n\n"}},{"label":"Body::setFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setFrictionCoefficient(Body this, fixed_t frictionCoefficient)","documentation":{"kind":"markdown","value":"Set the body's friction coefficient.\n\n_@param_ `this`: Body instance\n\n_@param_ `frictionCoefficient`: Value to set as the body's friction coefficient (between 0 and __MAXIMUM_FRICTION_COEFFICIENT)\n\n"}},{"label":"Body::getFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Body::getFrictionCoefficient(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's friction coefficient.\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s friction coefficient\n\n"}},{"label":"Body::setMass","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setMass(Body this, fixed_t mass)","documentation":{"kind":"markdown","value":"Set the body's mass.\n\n_@param_ `this`: Body instance\n\n_@param_ `mass`\n\n"}},{"label":"Body::getMass","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Body::getMass(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's mass.\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s mass\n\n"}},{"label":"Body::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setPosition(Body this, const Vector3D *position, SpatialObject caller)","documentation":{"kind":"markdown","value":"Set the body's position.\n\n_@param_ `this`: Body instance\n\n_@param_ `position`: 3D vector defining the body's new position\n\n_@param_ `caller`: Must be the body's owner; otherwise the call to this method doesn't have any effect\n\n"}},{"label":"Body::getPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Body::getPosition(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's position.\n\n_@param_ `this`: Body instance\n\n_@return_ `const` Pointer to the body's 3D vector defining its position\n\n"}},{"label":"Body::setMaximumVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setMaximumVelocity(Body this, Vector3D maximumVelocity)","documentation":{"kind":"markdown","value":"Set the body's maximum velocity.\n\n_@param_ `this`: Body instance\n\n_@param_ `maximumVelocity`: 3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)\n\n"}},{"label":"Body::getMaximumVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Body::getMaximumVelocity(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's maximum velocity.\n\n_@param_ `this`: Body instance\n\n_@return_ `Vector3D` 3D vector defining the body's maximum speed on each axis (only applicable when the body's movement is independent on each axis)\n\n"}},{"label":"Body::setMaximumSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setMaximumSpeed(Body this, fixed_t maximumSpeed)","documentation":{"kind":"markdown","value":"Set the body's maximum speed.\n\n_@param_ `this`: Body instance\n\n_@param_ `maximumSpeed`: Maximum magnitude of the body's velocity\n\n"}},{"label":"Body::getMaximumSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Body::getMaximumSpeed(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's maximum speed.\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` Maximum magnitude of the body's velocity\n\n"}},{"label":"Body::sendMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::sendMessages(Body this, bool value)","documentation":{"kind":"markdown","value":"Set the flag that enables or prevents the sending of messages to the body's owner about its state changes.\n\n_@param_ `this`: Body instance\n\n_@param_ `value`: If true, the body sends messages to its owner when its movement state changes\n\n"}},{"label":"Body::setSkipCycles","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setSkipCycles(Body this, int8 skipCycles)","documentation":{"kind":"markdown","value":"Set the number of cycles to wait before updating the physics simulations on the body.\n\n_@param_ `this`: Body instance\n\n_@param_ `skipCycles`: Number of cycles to skip physical simulations to slow down physics\n\n"}},{"label":"Body::setSurroundingFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::setSurroundingFrictionCoefficient(Body this, fixed_t surroundingFrictionCoefficient)","documentation":{"kind":"markdown","value":"Set the body's friction coefficient of the its surroundings.\n\n_@param_ `this`: Body instance\n\n_@param_ `surroundingFrictionCoefficient`: `Body`'s friction coefficient of the its surroundings\n\n"}},{"label":"Body::getSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Body::getSpeed(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's current speed (velocity vector's magnitude).\n\n_@param_ `this`: Body instance\n\n_@return_ `fixed_t` `Body`'s current speed (velocity vector's magnitude)\n\n"}},{"label":"Body::getMovementOnAllAxis","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Body::getMovementOnAllAxis(Body this)","documentation":{"kind":"markdown","value":"Retrieve the body's current movement state\n\n_@param_ `this`: Body instance\n\n_@return_ `uint16` Flag containing the body's current movement state on each axis\n\n"}},{"label":"Body::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Body::print(Body this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the body's properties.\n\n_@param_ `this`: Body instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Box","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Box","documentation":{"kind":"markdown","value":"Class `Box`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a box."}},{"label":"Box::project","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Box::project(Box this, Vector3D vertexes[8], Vector3D vector, fixed_t *min, fixed_t *max)","documentation":{"kind":"markdown","value":"Project the vertexes onto the provided vector.\n\n_@param_ `this`: Box instance\n\n_@param_ `vertexes`: Array of vectors to project\n\n_@param_ `vector`: Vector onto which make the projections\n\n_@param_ `min`\n\n_@param_ `max`\n\n"}},{"label":"Box::resize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Box::resize(Box this, fixed_t sizeDelta)","documentation":{"kind":"markdown","value":"Resize the colliders add the provided increment.\n\n_@param_ `this`: Box instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n"}},{"label":"Box::configureWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Box::configureWireframe(Box this)","documentation":{"kind":"markdown","value":"Configure the wireframe used to show the collider.\n\n_@param_ `this`: Box instance\n\n"}},{"label":"Box::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Box::print(Box this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print collider's state.\n\n_@param_ `this`: Box instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Box::getVertexes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Box::getVertexes(Box this, Vector3D vertexes[8])","documentation":{"kind":"markdown","value":"Retrieve the vertexes that define the box.\n\n_@param_ `this`: Box instance\n\n_@param_ `vertexes`\n\n"}},{"label":"Box::projectOntoItself","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Box::projectOntoItself(Box this)","documentation":{"kind":"markdown","value":"Project the box's vertexes onto its normals.\n\n_@param_ `this`: Box instance\n\n"}},{"label":"Camera","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Camera","documentation":{"kind":"markdown","value":"Class `Camera`\n\nInherits from `ListenerObject`\n\nRepresents the player's view point."}},{"label":"Camera::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Camera Camera::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `Camera` singleton\n\n"}},{"label":"Camera::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::reset(Camera this)","documentation":{"kind":"markdown","value":"Reset the camera's state.\n\n_@param_ `this`: Camera instance\n\n"}},{"label":"Camera::setup","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setup(Camera this, PixelOptical pixelOptical, CameraFrustum cameraFrustum)","documentation":{"kind":"markdown","value":"Setup the camera's optical and frustum configuration that determine the results from 3D to 2D projection.\n\n_@param_ `this`: Camera instance\n\n_@param_ `pixelOptical`: Configuration struct for the projection functions\n\n_@param_ `cameraFrustum`: Player's point of view configuration\n\n"}},{"label":"Camera::setCameraMovementManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setCameraMovementManager(Camera this, CameraMovementManager cameraMovementManager)","documentation":{"kind":"markdown","value":"Set the manager of the camera's properties.\n\n_@param_ `this`: Camera instance\n\n_@param_ `cameraMovementManager`: Movement manager\n\n"}},{"label":"Camera::getCameraMovementManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CameraMovementManager Camera::getCameraMovementManager(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's current movement manager\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraMovementManager` `Camera`'s current movement manager\n\n"}},{"label":"Camera::setCameraEffectManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setCameraEffectManager(Camera this, CameraEffectManager cameraEffectManager)","documentation":{"kind":"markdown","value":"Set the manager of the camera's special effects.\n\n_@param_ `this`: Camera instance\n\n_@param_ `cameraEffectManager`: Special effects manager\n\n"}},{"label":"Camera::getCameraEffectManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CameraEffectManager Camera::getCameraEffectManager(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's current special effects manager\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraEffectManager` `Camera`'s current special effects manager\n\n"}},{"label":"Camera::setStageSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setStageSize(Camera this, Size size)","documentation":{"kind":"markdown","value":"Save the stage's size.\n\n_@param_ `this`: Camera instance\n\n_@param_ `size`: `Stage`'s size\n\n"}},{"label":"Camera::getStageSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Size Camera::getStageSize(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the stage's cached size.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Size` `Stage`'s size\n\n"}},{"label":"Camera::setFocusEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setFocusEntity(Camera this, Entity focusEntity)","documentation":{"kind":"markdown","value":"Register the entity that the camera must follow.\n\n_@param_ `this`: Camera instance\n\n_@param_ `focusEntity`: `Entity` to follow\n\n"}},{"label":"Camera::getFocusEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity Camera::getFocusEntity(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the entity that the camera is following.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Entity` focusEntity: `Entity` being followed\n\n"}},{"label":"Camera::unsetFocusEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::unsetFocusEntity(Camera this)","documentation":{"kind":"markdown","value":"Stop following any entity.\n\n_@param_ `this`: Camera instance\n\n"}},{"label":"Camera::setFocusEntityPositionDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setFocusEntityPositionDisplacement(Camera this, Vector3D focusEntityPositionDisplacement)","documentation":{"kind":"markdown","value":"Register a displacement to be added to the camera's position relative to the focus entity's position.\n\n_@param_ `this`: Camera instance\n\n_@param_ `focusEntityPositionDisplacement`: Displacement vector\n\n"}},{"label":"Camera::getFocusEntityPositionDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Camera::getFocusEntityPositionDisplacement(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the displacement that is added to the camera's position relative to the focus entity's position.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` Displacement vector\n\n"}},{"label":"Camera::setDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setDisplacement(Camera this, Vector3D)","documentation":{"kind":"markdown","value":"Set a constant displacement to be added to the camera's position.\n\n_@param_ `this`: Camera instance\n\n_@param_ `displacement`: Displacement vector\n\n"}},{"label":"Camera::geDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Camera::geDisplacement(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the constant displacement that is added to the camera's position.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` Displacement vector\n\n"}},{"label":"Camera::setOptical","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setOptical(Camera this, Optical optical)","documentation":{"kind":"markdown","value":"Set the optical configuration values used for projections.\n\n_@param_ `this`: Camera instance\n\n_@param_ `optical`: configuration struct with the values used for projections\n\n"}},{"label":"Camera::getOptical","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Optical Camera::getOptical(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the optical configuration values used for projections.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Optical` `Optical` struct with the configuration values used for projections\n\n"}},{"label":"Camera::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setPosition(Camera this, Vector3D position, bool cap)","documentation":{"kind":"markdown","value":"Set the camera's position.\n\n_@param_ `this`: Camera instance\n\n_@param_ `position`: 3D vector\n\n_@param_ `cap`: Cap the camera's position within the stage's size if true\n\n"}},{"label":"Camera::translate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::translate(Camera this, Vector3D displacement, int32 cap)","documentation":{"kind":"markdown","value":"Add a displacement the camera's current position.\n\n_@param_ `this`: Camera instance\n\n_@param_ `displacement`: Displacement vector\n\n_@param_ `cap`: Cap the camera's position within the stage's size if true\n\n"}},{"label":"Camera::getPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Camera::getPosition(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's position.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` `Camera`'s position\n\n"}},{"label":"Camera::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::setRotation(Camera this, Rotation rotation)","documentation":{"kind":"markdown","value":"Set the camera's rotation.\n\n_@param_ `this`: Camera instance\n\n_@param_ `rotation`: `Rotation` to assign to the camera\n\n"}},{"label":"Camera::rotate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::rotate(Camera this, Rotation rotation)","documentation":{"kind":"markdown","value":"Add a rotation the camera's current rotation.\n\n_@param_ `this`: Camera instance\n\n_@param_ `rotation`: `Rotation` delta\n\n"}},{"label":"Camera::getRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Rotation Camera::getRotation(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's rotation.\n\n_@param_ `this`: Camera instance\n\n_@return_ `Rotation` `Camera`'s rotation\n\n"}},{"label":"Camera::getCameraFrustum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CameraFrustum Camera::getCameraFrustum(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's frustum configuration.\n\n_@param_ `this`: Camera instance\n\n_@return_ `CameraFrustum` `Camera`'s frustum configuration\n\n"}},{"label":"Camera::getLastDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Camera::getLastDisplacement(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the camera's change of position in the last game cycle\n\n_@param_ `this`: Camera instance\n\n_@return_ `Vector3D` `Camera`'s change of position in the last game cycle\n\n"}},{"label":"Camera::getTransformationFlags","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 Camera::getTransformationFlags(Camera this)","documentation":{"kind":"markdown","value":"Retrieve the transformation flags that keep track of changes in the camera's position and rotation during the current game cycle.\n\n_@param_ `this`: Camera instance\n\n_@return_ `uint8` `Transformation` flags\n\n"}},{"label":"Camera::focus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::focus(Camera this)","documentation":{"kind":"markdown","value":"Focus the camera on the focus entity if any.\n\n_@param_ `this`: Camera instance\n\n"}},{"label":"Camera::startEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::startEffect(Camera this, int32 effect,...)","documentation":{"kind":"markdown","value":"Start a camera effect.\n\n_@param_ `this`: Camera instance\n\n_@param_ `effect`: Code of the effect to start\n\n"}},{"label":"Camera::stopEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::stopEffect(Camera this, int32 effect)","documentation":{"kind":"markdown","value":"Stop a camera effect.\n\n_@param_ `this`: Camera instance\n\n_@param_ `effect`: Code of the effect to stop\n\n"}},{"label":"Camera::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Camera::print(Camera this, int32 x, int32 y, bool inPixels)","documentation":{"kind":"markdown","value":"Print the camera's status.\n\n_@param_ `this`: Camera instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `inPixels`\n\n"}},{"label":"CameraEffectManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CameraEffectManager","documentation":{"kind":"markdown","value":"Class `CameraEffectManager`\n\nInherits from `ListenerObject`\n\nManages camera's special effects, brightness transitions, etc."}},{"label":"CameraEffectManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static CameraEffectManager CameraEffectManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `CameraEffectManager` singleton\n\n"}},{"label":"CameraEffectManager::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CameraEffectManager::handleMessage(CameraEffectManager this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"CameraEffectManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraEffectManager::reset(CameraEffectManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: CameraEffectManager instance\n\n"}},{"label":"CameraEffectManager::setFadeIncrement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraEffectManager::setFadeIncrement(CameraEffectManager this, uint8 fadeEffectIncrement)","documentation":{"kind":"markdown","value":"Set the fade increment to apply on the next effect.\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `fadeEffectIncrement`: Fade increment\n\n"}},{"label":"CameraEffectManager::getDefaultBrightness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Brightness CameraEffectManager::getDefaultBrightness(CameraEffectManager this)","documentation":{"kind":"markdown","value":"Retrieve the default brighness values for the current stage\n\n_@param_ `this`: CameraEffectManager instance\n\n_@return_ `Brightness` Struct with the brightness levels\n\n"}},{"label":"CameraEffectManager::startEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraEffectManager::startEffect(CameraEffectManager this, int32 effect, va_list args)","documentation":{"kind":"markdown","value":"Start a camera effect.\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `effect`: Code of the effect to start\n\n_@param_ `args`: Variable arguments list depending on the effect to start\n\n"}},{"label":"CameraEffectManager::stopEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraEffectManager::stopEffect(CameraEffectManager this, int32 effect)","documentation":{"kind":"markdown","value":"Stop a camera effect.\n\n_@param_ `this`: CameraEffectManager instance\n\n_@param_ `effect`: Code of the effect to stop\n\n"}},{"label":"CameraMovementManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CameraMovementManager","documentation":{"kind":"markdown","value":"Class `CameraMovementManager`\n\nInherits from `ListenerObject`\n\nManages camera's movement effects, like shaking, etc."}},{"label":"CameraMovementManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static CameraMovementManager CameraMovementManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `CameraMovementManager` singleton\n\n"}},{"label":"CameraMovementManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraMovementManager::reset(CameraMovementManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: CameraMovementManager instance\n\n"}},{"label":"CameraMovementManager::setFocusEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraMovementManager::setFocusEntity(CameraMovementManager this, Entity focusEntity)","documentation":{"kind":"markdown","value":"Register the entity that the camera must follow.\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `focusEntity`: `Entity` to follow\n\n"}},{"label":"CameraMovementManager::getFocusEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity CameraMovementManager::getFocusEntity(CameraMovementManager this)","documentation":{"kind":"markdown","value":"Retrieve the entity that the camera is following.\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `Entity` focusEntity: `Entity` being followed\n\n"}},{"label":"CameraMovementManager::setFocusEntityPositionDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CameraMovementManager::setFocusEntityPositionDisplacement(CameraMovementManager this, const Vector3D *focusEntityPositionDisplacement)","documentation":{"kind":"markdown","value":"Register a displacement to be added to the camera's position relative to the focus entity's position.\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `focusEntityPositionDisplacement`: Displacement vector\n\n"}},{"label":"CameraMovementManager::getFocusEntityPositionDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * CameraMovementManager::getFocusEntityPositionDisplacement(CameraMovementManager this)","documentation":{"kind":"markdown","value":"Retrieve the displacement that is added to the camera's position relative to the focus entity's position.\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `const` Displacement vector\n\n"}},{"label":"CameraMovementManager::getLastCameraDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D CameraMovementManager::getLastCameraDisplacement(CameraMovementManager this)","documentation":{"kind":"markdown","value":"Retrieve the camera's change of position in the last game cycle\n\n_@param_ `this`: CameraMovementManager instance\n\n_@return_ `Vector3D` `Camera`'s change of position in the last game cycle\n\n"}},{"label":"CameraMovementManager::focus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D CameraMovementManager::focus(CameraMovementManager this, Camera camera)","documentation":{"kind":"markdown","value":"Focus the camera on the focus entity if any.\n\n_@param_ `this`: CameraMovementManager instance\n\n_@param_ `camera`: `Camera` to focus\n\n"}},{"label":"CharSet","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CharSet","documentation":{"kind":"markdown","value":"Class `CharSet`\n\nInherits from `ListenerObject`\n\nManages the color data of tile array and writes it to VRAM."}},{"label":"CharSet::increaseUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::increaseUsageCount(CharSet this)","documentation":{"kind":"markdown","value":"Increase the usage count.\n\n_@param_ `this`: CharSet instance\n\n"}},{"label":"CharSet::decreaseUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CharSet::decreaseUsageCount(CharSet this)","documentation":{"kind":"markdown","value":"Decrease the usage count.\n\n_@param_ `this`: CharSet instance\n\n"}},{"label":"CharSet::getUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 CharSet::getUsageCount(CharSet this)","documentation":{"kind":"markdown","value":"Retrieve the usage count.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint8` Usage count\n\n"}},{"label":"CharSet::isShared","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CharSet::isShared(CharSet this)","documentation":{"kind":"markdown","value":"Check if the char set is shared.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `bool` True if the char set is share; false otherwise\n\n"}},{"label":"CharSet::isOptimized","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CharSet::isOptimized(CharSet this)","documentation":{"kind":"markdown","value":"Check if the char set is optimized.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `bool` True if the char set is optimized; false otherwise\n\n"}},{"label":"CharSet::setOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::setOffset(CharSet this, uint16 offset)","documentation":{"kind":"markdown","value":"Set the offset within CHAR space.\n\n_@param_ `this`: CharSet instance\n\n_@param_ `offset`: Offset within CHAR space\n\n"}},{"label":"CharSet::getOffset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 CharSet::getOffset(CharSet this)","documentation":{"kind":"markdown","value":"Retrieve the offset within CHAR space.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint16` Offset within CHAR space\n\n"}},{"label":"CharSet::getSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CharSetSpec * CharSet::getSpec(CharSet this)","documentation":{"kind":"markdown","value":"Retrieve the spec used in the construction of the char set.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `CharSetSpec` Spec used in the construction of the char set\n\n"}},{"label":"CharSet::getNumberOfChars","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 CharSet::getNumberOfChars(CharSet this)","documentation":{"kind":"markdown","value":"Retrieve the number of CHARs used by the char set.\n\n_@param_ `this`: CharSet instance\n\n_@return_ `uint16` Number of CHARs used by the char set\n\n"}},{"label":"CharSet::addChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::addChar(CharSet this, uint32 charToAddTo, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Add the color provided color data to a CHAR.\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToAddTo`: Index of the CHAR to add to\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"CharSet::putChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::putChar(CharSet this, uint32 charToReplace, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Replace the color provided color data to a CHAR.\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToReplace`: Index of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"CharSet::putPixel","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::putPixel(CharSet this, const uint32 charToReplace, const Pixel *charSetPixel, BYTE newPixelColor)","documentation":{"kind":"markdown","value":"Replace a pixel in a CHAR.\n\n_@param_ `this`: CharSet instance\n\n_@param_ `charToReplace`: Index of the CHAR to replace\n\n_@param_ `charSetPixel`: Coordinate in CHAR space of the CHAR to replace\n\n_@param_ `newPixelColor`: Color data for the pixel\n\n"}},{"label":"CharSet::setFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::setFrame(CharSet this, uint16 frame)","documentation":{"kind":"markdown","value":"Set the current frame (frame * number of CHARs + number of CHARs) to write to CHAR memory.\n\n_@param_ `this`: CharSet instance\n\n_@param_ `frame`: The frame to write to CHAR memory\n\n"}},{"label":"CharSet::write","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSet::write(CharSet this)","documentation":{"kind":"markdown","value":"Write the tile graphical data to VRAM.\n\n_@param_ `this`: CharSet instance\n\n"}},{"label":"CharSetManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CharSetManager","documentation":{"kind":"markdown","value":"Class `CharSetManager`\n\nInherits from `Object`\n\nManages char sets and CHAR memory allocation."}},{"label":"CharSetManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static CharSetManager CharSetManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `CharSetManager` singleton\n\n"}},{"label":"CharSetManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSetManager::reset(CharSetManager this)","documentation":{"kind":"markdown","value":"Empties internal virtual list of registered fonts.\n\n_@param_ `this`: CharSetManager instance\n\n"}},{"label":"CharSetManager::loadCharSets","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSetManager::loadCharSets(CharSetManager this, const CharSetSpec **charSetSpecs)","documentation":{"kind":"markdown","value":"Load char sets in function of the provided array of specs.\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSetSpecs`: Array of char set specs in function of which to load char sets\n\n"}},{"label":"CharSetManager::getCharSet","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CharSet CharSetManager::getCharSet(CharSetManager this, CharSetSpec *charSetSpec)","documentation":{"kind":"markdown","value":"Retrieve a char set initialized with the provided spec.\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSetSpec`: Spec to use to initilize the desired char set\n\n_@return_ `CharSet` Char set initialized with the provided spec\n\n"}},{"label":"CharSetManager::releaseCharSet","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CharSetManager::releaseCharSet(CharSetManager this, CharSet charSet)","documentation":{"kind":"markdown","value":"Release a char set.\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `charSet`: Char set to release\n\n_@return_ `bool` True if the char set is successfully deleted; false otherwise\n\n"}},{"label":"CharSetManager::writeCharSets","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSetManager::writeCharSets(CharSetManager this)","documentation":{"kind":"markdown","value":"Write graphical data to VRAM.\n\n_@param_ `this`: CharSetManager instance\n\n"}},{"label":"CharSetManager::defragment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSetManager::defragment(CharSetManager this, bool deferred)","documentation":{"kind":"markdown","value":"Defragment CHAR space.\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `deferred`\n\n"}},{"label":"CharSetManager::getTotalUsedChars","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 CharSetManager::getTotalUsedChars(CharSetManager this)","documentation":{"kind":"markdown","value":"Return the total number of used CHARs in CHAR space.\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of used CHARs in CHAR space\n\n"}},{"label":"CharSetManager::getTotalFreeChars","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 CharSetManager::getTotalFreeChars(CharSetManager this)","documentation":{"kind":"markdown","value":"Return the total number of free CHARs in CHAR space.\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of free CHARs in CHAR space\n\n"}},{"label":"CharSetManager::getTotalCharSets","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 CharSetManager::getTotalCharSets(CharSetManager this)","documentation":{"kind":"markdown","value":"Return the total number of char sets.\n\n_@param_ `this`: CharSetManager instance\n\n_@return_ `int32` Total number of char sets\n\n"}},{"label":"CharSetManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CharSetManager::print(CharSetManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's status.\n\n_@param_ `this`: CharSetManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Clock","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Clock","documentation":{"kind":"markdown","value":"Class `Clock`\n\nInherits from `ListenerObject`\n\nImplements simple clock that can keep track of time and print itself."}},{"label":"Clock::printTime","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Clock::printTime(Clock this, uint32 milliseconds, int32 x, int32 y, const char *font, uint32 precision)","documentation":{"kind":"markdown","value":"Print time in MM::SS:XX format\n\n_@param_ `this`: Clock instance\n\n_@param_ `milliseconds`: Total time to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n_@param_ `precision`: Precision of the second decimals\n\n"}},{"label":"Clock::printDeciseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Clock::printDeciseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","documentation":{"kind":"markdown","value":"Print the total deciseconds in the elapsed time provided.\n\n_@param_ `this`: Clock instance\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n"}},{"label":"Clock::printCentiseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Clock::printCentiseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","documentation":{"kind":"markdown","value":"Print the total centiseconds in the elapsed time provided.\n\n_@param_ `this`: Clock instance\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n"}},{"label":"Clock::printMilliseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Clock::printMilliseconds(Clock this, uint32 milliSeconds, int32 x, int32 y, const char *font)","documentation":{"kind":"markdown","value":"Print the total milliseconds in the elapsed time provided.\n\n_@param_ `this`: Clock instance\n\n_@param_ `milliSeconds`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `font`: Pointer to font's name to use\n\n"}},{"label":"Clock::start","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::start(Clock this)","documentation":{"kind":"markdown","value":"Start the clock.\n\n_@param_ `this`: Clock instance\n\n"}},{"label":"Clock::stop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::stop(Clock this)","documentation":{"kind":"markdown","value":"Stop the clock.\n\n_@param_ `this`: Clock instance\n\n"}},{"label":"Clock::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::pause(Clock this, bool pause)","documentation":{"kind":"markdown","value":"Pause/unpause the clock\n\n_@param_ `this`: Clock instance\n\n_@param_ `pause`: Flag to set the paused state of the clock\n\n"}},{"label":"Clock::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::reset(Clock this)","documentation":{"kind":"markdown","value":"Reset the clock's elapsed time.\n\n_@param_ `this`: Clock instance\n\n"}},{"label":"Clock::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::update(Clock this, uint32 elapsedMilliseconds)","documentation":{"kind":"markdown","value":"Update the clock's elapsed time\n\n_@param_ `this`: Clock instance\n\n_@param_ `elapsedMilliseconds`: Milliseconds that have passed since the previous call to the update method\n\n"}},{"label":"Clock::isPaused","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Clock::isPaused(Clock this)","documentation":{"kind":"markdown","value":"Retrieve the clock's paused state\n\n_@param_ `this`: Clock instance\n\n_@return_ `bool` True if the clock is paused\n\n"}},{"label":"Clock::getMilliseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Clock::getMilliseconds(Clock this)","documentation":{"kind":"markdown","value":"Retrieve the elapsed milliseconds.\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed milliseconds\n\n"}},{"label":"Clock::getMinutes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Clock::getMinutes(Clock this)","documentation":{"kind":"markdown","value":"Retrieve the elapsed minutes.\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed minutes\n\n"}},{"label":"Clock::getSeconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Clock::getSeconds(Clock this)","documentation":{"kind":"markdown","value":"Retrieve the elapsed seconds.\n\n_@param_ `this`: Clock instance\n\n_@return_ `uint32` Elapsed seconds\n\n"}},{"label":"Clock::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Clock::print(Clock this, int32 col, int32 row, const char *font)","documentation":{"kind":"markdown","value":"Print the clock's time in MM::SS:XX format\n\n_@param_ `this`: Clock instance\n\n_@param_ `col`\n\n_@param_ `row`\n\n_@param_ `font`: Pointer to font's name to use\n\n"}},{"label":"ClockManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ClockManager","documentation":{"kind":"markdown","value":"Class `ClockManager`\n\nInherits from `Object`\n\nManages the instances of `Clock`."}},{"label":"ClockManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static ClockManager ClockManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `ClockManager` singleton\n\n"}},{"label":"ClockManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ClockManager::reset(ClockManager this)","documentation":{"kind":"markdown","value":"Reset all the registered clocks.\n\n_@param_ `this`: ClockManager instance\n\n"}},{"label":"ClockManager::register","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ClockManager::register(ClockManager this, Clock clock)","documentation":{"kind":"markdown","value":"Register a new clock\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `clock`: `Clock` to register\n\n"}},{"label":"ClockManager::unregister","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ClockManager::unregister(ClockManager this, Clock clock)","documentation":{"kind":"markdown","value":"Unregister clock.\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `clock`: `Clock` to unregister\n\n"}},{"label":"ClockManager::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ClockManager::update(ClockManager this, uint32 elapsedMilliseconds)","documentation":{"kind":"markdown","value":"Update the clocks.\n\n_@param_ `this`: ClockManager instance\n\n_@param_ `elapsedMilliseconds`: Milliseconds that passed since the previous call to this method\n\n"}},{"label":"Collider","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Collider","documentation":{"kind":"markdown","value":"Class `Collider`\n\nInherits from `Component`\n\nChecks collisions against other colliders."}},{"label":"Collider::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Collider::handleMessage(Collider this, Telegram telegram)","documentation":{"kind":"markdown","value":"Process a `Telegram`.\n\n_@param_ `this`: Collider instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n"}},{"label":"Collider::enable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::enable(Collider this)","documentation":{"kind":"markdown","value":"Enable the collider for collision checks.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::disable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::disable(Collider this)","documentation":{"kind":"markdown","value":"Disable the collider for collision checks.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::setLayers","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::setLayers(Collider this, uint32 layers)","documentation":{"kind":"markdown","value":"Set the layers in which this collider lives.\n\n_@param_ `this`: Collider instance\n\n_@param_ `layers`: Layers in which the collider must live\n\n"}},{"label":"Collider::getLayers","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Collider::getLayers(Collider this)","documentation":{"kind":"markdown","value":"Retrieve the layers in which this collider lives.\n\n_@param_ `this`: Collider instance\n\n_@return_ `uint32` Layers in which the collider must live\n\n"}},{"label":"Collider::setLayersToIgnore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::setLayersToIgnore(Collider this, uint32 layersToIgnore)","documentation":{"kind":"markdown","value":"Set the layers in which live colliders to ignore when testing collisions.\n\n_@param_ `this`: Collider instance\n\n_@param_ `layersToIgnore`\n\n"}},{"label":"Collider::getLayersToIgnore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Collider::getLayersToIgnore(Collider this)","documentation":{"kind":"markdown","value":"Retrieve the layers in which live colliders to ignore when testing collisions.\n\n_@param_ `this`: Collider instance\n\n_@return_ `uint32` Layers to ignore when checking collisions\n\n"}},{"label":"Collider::checkCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::checkCollisions(Collider this, bool checkCollisions)","documentation":{"kind":"markdown","value":"Make this collider to test collision against other colliders.\n\n_@param_ `this`: Collider instance\n\n_@param_ `checkCollisions`: It true, this collider checks collision against others\n\n"}},{"label":"Collider::registerCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::registerCollisions(Collider this, bool registerCollisions)","documentation":{"kind":"markdown","value":"Keep track of colliding colliders to detect when collisions exit.\n\n_@param_ `this`: Collider instance\n\n_@param_ `registerCollisions`: If true, colliding colliders are registered\n\n"}},{"label":"Collider::collides","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CollisionResult Collider::collides(Collider this, Collider collider)","documentation":{"kind":"markdown","value":"Check if there is there is a collision with the provided collider.\n\n_@param_ `this`: Collider instance\n\n_@param_ `collider`: `Collider` to check collision against to\n\n"}},{"label":"Collider::resolveCollision","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::resolveCollision(Collider this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Resolve a collision by moving the owner to a position where the collision ceases.\n\n_@param_ `this`: Collider instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"Collider::canMoveTowards","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Collider::canMoveTowards(Collider this, Vector3D displacement)","documentation":{"kind":"markdown","value":"Check if there is some collider blocking in the provided direction.\n\n_@param_ `this`: Collider instance\n\n_@param_ `displacement`: Vector towards which to check if it is possible to move the owner\n\n_@return_ `bool` True if there is no collision when moving the collider and increasing its size\n\n"}},{"label":"Collider::discardCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::discardCollisions(Collider this)","documentation":{"kind":"markdown","value":"Discard any registered collision.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::getCollidingFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Collider::getCollidingFrictionCoefficient(Collider this)","documentation":{"kind":"markdown","value":"Get the total friction of colliding colliders.\n\n_@param_ `this`: Collider instance\n\n_@return_ `fixed_t` The sum of friction coefficients of the colliders colliding's owners\n\n"}},{"label":"Collider::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::show(Collider this)","documentation":{"kind":"markdown","value":"Show the collider.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::hide(Collider this)","documentation":{"kind":"markdown","value":"Hide the collider.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::resize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::resize(Collider this, fixed_t sizeDelta)","documentation":{"kind":"markdown","value":"Resize the colliders add the provided increment.\n\n_@param_ `this`: Collider instance\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n"}},{"label":"Collider::getNormal","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D Collider::getNormal(Collider this)","documentation":{"kind":"markdown","value":"Retrieve the normal to the collider.\n\n_@param_ `this`: Collider instance\n\n_@return_ `Vector3D` Normal to the collider\n\n"}},{"label":"Collider::configureWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Collider::configureWireframe(Collider this)","documentation":{"kind":"markdown","value":"Configure the wireframe used to show the collider.\n\n_@param_ `this`: Collider instance\n\n"}},{"label":"Collider::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Collider::print(Collider this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print collider's state.\n\n_@param_ `this`: Collider instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"CollisionManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CollisionManager","documentation":{"kind":"markdown","value":"Class `CollisionManager`\n\nInherits from `Object`\n\nManages the colliders in the game states."}},{"label":"CollisionManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::reset(CollisionManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: CollisionManager instance\n\n"}},{"label":"CollisionManager::purgeDestroyedColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::purgeDestroyedColliders(CollisionManager this)","documentation":{"kind":"markdown","value":"Purge destroyed colliders.\n\n_@param_ `this`: CollisionManager instance\n\n"}},{"label":"CollisionManager::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 CollisionManager::update(CollisionManager this)","documentation":{"kind":"markdown","value":"Update colliders and test collisions.\n\n_@param_ `this`: CollisionManager instance\n\n"}},{"label":"CollisionManager::createCollider","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Collider CollisionManager::createCollider(CollisionManager this, SpatialObject owner, const ColliderSpec *colliderSpec)","documentation":{"kind":"markdown","value":"Create a collider with the provided spec.\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `owner`: `Object` to which the collider will attach to\n\n_@param_ `colliderSpec`: Spec to use to create the collider\n\n_@return_ `Collider` Created collider\n\n"}},{"label":"CollisionManager::destroyCollider","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::destroyCollider(CollisionManager this, Collider collider)","documentation":{"kind":"markdown","value":"Destroy the provided collider.\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `collider`: `Collider` to destroy\n\n"}},{"label":"CollisionManager::setCheckCollidersOutOfCameraRange","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::setCheckCollidersOutOfCameraRange(CollisionManager this, bool value)","documentation":{"kind":"markdown","value":"Set if the colliders out of camera's range are culled of from collision testing.\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `value`: If false, colliders out of camera's range are culled of from collision testing\n\n"}},{"label":"CollisionManager::showColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::showColliders(CollisionManager this)","documentation":{"kind":"markdown","value":"Make the colliders visible by the usage of wireframes.\n\n_@param_ `this`: CollisionManager instance\n\n"}},{"label":"CollisionManager::hideColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::hideColliders(CollisionManager this)","documentation":{"kind":"markdown","value":"Make the colliders invisible by hiding their wireframes.\n\n_@param_ `this`: CollisionManager instance\n\n"}},{"label":"CollisionManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CollisionManager::print(CollisionManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's statistics.\n\n_@param_ `this`: CollisionManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"CollisionTester","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CollisionTester","documentation":{"kind":"markdown","value":"Class `CollisionTester`\n\nInherits from `Object`\n\nImplements collisions tests between two colliders."}},{"label":"CollisionTester::testOverlaping","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void CollisionTester::testOverlaping(CollisionTester this, Collider requesterCollider, Collider otherCollider, CollisionInformation *collisionInformation, fixed_t sizeDelta)","documentation":{"kind":"markdown","value":"Check if the provided colliders are overlaping each other.\n\n_@param_ `this`: CollisionTester instance\n\n_@param_ `requesterCollider`: `Collider` asking for the test\n\n_@param_ `otherCollider`: `Collider` against which to test the overlaping\n\n_@param_ `collisionInformation`\n\n_@param_ `sizeDelta`: Delta to add to the collider's size\n\n"}},{"label":"CommunicationManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) CommunicationManager","documentation":{"kind":"markdown","value":"Class `CommunicationManager`\n\nInherits from `ListenerObject`\n\nManages communications on the EXT port."}},{"label":"CommunicationManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static CommunicationManager CommunicationManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `CommunicationManager` singleton\n\n"}},{"label":"CommunicationManager::interruptHandler","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void CommunicationManager::interruptHandler(CommunicationManager this)","documentation":{"kind":"markdown","value":"Interrupt handler for COM interrupts.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::reset(CommunicationManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::enableCommunications","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::enableCommunications(CommunicationManager this, EventListener eventLister, ListenerObject scope)","documentation":{"kind":"markdown","value":"Enable communications on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"CommunicationManager::disableCommunications","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::disableCommunications(CommunicationManager this)","documentation":{"kind":"markdown","value":"Disable communication on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::cancelCommunications","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::cancelCommunications(CommunicationManager this)","documentation":{"kind":"markdown","value":"Cancel all pending transmissions on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::startSyncCycle","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::startSyncCycle(CommunicationManager this)","documentation":{"kind":"markdown","value":"Start the sync procedure according to the official documentation once a connection has been stablished.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::isConnected","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::isConnected(CommunicationManager this)","documentation":{"kind":"markdown","value":"Check if there is something attached to the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n_@return_ `bool` True if there is something attached to the EXT port; false otherwise\n\n"}},{"label":"CommunicationManager::isMaster","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::isMaster(CommunicationManager this)","documentation":{"kind":"markdown","value":"Check if the system is the master during the next cycle of communications over the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n_@return_ `bool` True if the system is the master; false otherwise\n\n"}},{"label":"CommunicationManager::broadcastData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::broadcastData(CommunicationManager this, BYTE *data, int32 numberOfBytes)","documentation":{"kind":"markdown","value":"Send data synchronously over the EXT port if there is nothing detectable attached to it.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n"}},{"label":"CommunicationManager::broadcastDataAsync","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::broadcastDataAsync(CommunicationManager this, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","documentation":{"kind":"markdown","value":"Send data asynchronously over the EXT port if there is nothing detectable attached to it.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"CommunicationManager::sendAndReceiveData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::sendAndReceiveData(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes)","documentation":{"kind":"markdown","value":"Send and receive data synchronously over the EXT port if there is something detectable attached to it.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `message`: Control message for the receiving partner\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n"}},{"label":"CommunicationManager::sendAndReceiveDataAsync","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::sendAndReceiveDataAsync(CommunicationManager this, WORD message, BYTE *data, int32 numberOfBytes, EventListener eventLister, ListenerObject scope)","documentation":{"kind":"markdown","value":"Send and receive data asynchronously over the EXT port if there is something detectable attached to it.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `message`: Control message for the receiving partner\n\n_@param_ `data`: Data to broadcast\n\n_@param_ `numberOfBytes`: Number of bytes to broadcast\n\n_@param_ `eventLister`\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"CommunicationManager::getSentMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) WORD CommunicationManager::getSentMessage(CommunicationManager this)","documentation":{"kind":"markdown","value":"Retrieve the last sent message on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::getReceivedMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) WORD CommunicationManager::getReceivedMessage(CommunicationManager this)","documentation":{"kind":"markdown","value":"Retrieve the last received message on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::getSentData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const BYTE * CommunicationManager::getSentData(CommunicationManager this)","documentation":{"kind":"markdown","value":"Retrieve the last sent data on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::getReceivedData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const BYTE * CommunicationManager::getReceivedData(CommunicationManager this)","documentation":{"kind":"markdown","value":"Retrieve the last received data on the EXT port.\n\n_@param_ `this`: CommunicationManager instance\n\n"}},{"label":"CommunicationManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void CommunicationManager::print(CommunicationManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's status.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"CommunicationManager::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool CommunicationManager::handleMessage(CommunicationManager this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: CommunicationManager instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"Component","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Component","documentation":{"kind":"markdown","value":"Class `Component`\n\nInherits from `ListenerObject`\n\nServes as the base class for components of entities."}},{"label":"Component::getSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) ComponentSpec * Component::getSpec(Component this)","documentation":{"kind":"markdown","value":"Retrieve the spec pointer that defined how to initialized the component\n\n_@param_ `this`: Component instance\n\n_@return_ `ComponentSpec` `Component` spec pointer\n\n"}},{"label":"Component::getOwner","labelDetails":{"description":"core"},"kind":2,"detail":"(method) SpatialObject Component::getOwner(Component this)","documentation":{"kind":"markdown","value":"Retrieve the collider's owner\n\n_@param_ `this`: Component instance\n\n"}},{"label":"Container","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Container","documentation":{"kind":"markdown","value":"Class `Container`\n\nInherits from `SpatialObject`\n\nAdds parenting cababilities to spatial objects."}},{"label":"Container::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setPosition(Container this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the container's position.\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n"}},{"label":"Container::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setRotation(Container this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the container's rotation.\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: `Rotation`\n\n"}},{"label":"Container::setScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setScale(Container this, const Scale *scale)","documentation":{"kind":"markdown","value":"Set the container's scale.\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: `Scale`\n\n"}},{"label":"Container::deleteMyself","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::deleteMyself(Container this)","documentation":{"kind":"markdown","value":"Delete this container when appropriate. Containers must not be deleted nor created directly by the client code\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::setName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setName(Container this, const char *const name)","documentation":{"kind":"markdown","value":"Set the container's name.\n\n_@param_ `this`: Container instance\n\n_@param_ `name`: Name to assign to the instance\n\n"}},{"label":"Container::getName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const char * Container::getName(Container this)","documentation":{"kind":"markdown","value":"Retrive the container's name.\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the container's name\n\n"}},{"label":"Container::streamOut","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::streamOut(Container this, bool streamOut)","documentation":{"kind":"markdown","value":"Set the streaming effects on this container.\n\n_@param_ `this`: Container instance\n\n_@param_ `streamOut`: If false, this container won't be streamed out when outside of the camera's reach\n\n"}},{"label":"Container::getParent","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Container Container::getParent(Container this)","documentation":{"kind":"markdown","value":"Retrieve this container's parent container.\n\n_@param_ `this`: Container instance\n\n_@return_ `Container` Parent container\n\n"}},{"label":"Container::addChild","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::addChild(Container this, Container child)","documentation":{"kind":"markdown","value":"Add a container as a child.\n\n_@param_ `this`: Container instance\n\n_@param_ `child`: `Container` to be added as a child\n\n"}},{"label":"Container::removeChild","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::removeChild(Container this, Container child, bool deleteChild)","documentation":{"kind":"markdown","value":"Reomve a child container for this container's children list.\n\n_@param_ `this`: Container instance\n\n_@param_ `child`: `Container` to be remove as a child\n\n_@param_ `deleteChild`: If true, the child will be deleted in the next game cycle\n\n"}},{"label":"Container::purgeChildren","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::purgeChildren(Container this)","documentation":{"kind":"markdown","value":"Force the destruction of all children marked to be deleted.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::getChildren","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::getChildren(Container this, ClassPointer classPointer, VirtualList children)","documentation":{"kind":"markdown","value":"Retrieve the linked list of children that are instances of the provided class.\n\n_@param_ `this`: Container instance\n\n_@param_ `classPointer`: Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`\n\n_@param_ `children`: Linked list to be filled with the children that meed the search criteria (it is externally allocated and must be externally deleted)\n\n_@return_ `bool` True if one or more children met the search criteria; false otherwise\n\n"}},{"label":"Container::getChildByName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Container Container::getChildByName(Container this, const char *childName, bool recursive)","documentation":{"kind":"markdown","value":"Find a child with the provided name.\n\n_@param_ `this`: Container instance\n\n_@param_ `childName`: Name to look for\n\n_@param_ `recursive`: If true, the seach extends to grand children, grand grand children, etc.\n\n_@return_ `Container` The first child container whose name equals the provided one\n\n"}},{"label":"Container::getChildAtPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Container Container::getChildAtPosition(Container this, int16 position)","documentation":{"kind":"markdown","value":"Retrieve the child at the provided position in the linked list of children.\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: Position in the linked list of children\n\n_@return_ `Container` The child container at the provided position if any\n\n"}},{"label":"Container::getChildrenCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 Container::getChildrenCount(Container this)","documentation":{"kind":"markdown","value":"Retrieve the amount of children of this container.\n\n_@param_ `this`: Container instance\n\n_@return_ `int32` Amount of children of this container\n\n"}},{"label":"Container::updateChildren","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::updateChildren(Container this)","documentation":{"kind":"markdown","value":"Update the children of this container.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::invalidateTransformation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::invalidateTransformation(Container this)","documentation":{"kind":"markdown","value":"Invalidate the transformation to force it to be recomputed in the next game cycle.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::setInheritEnvironment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setInheritEnvironment(Container this, uint8 inheritEnvironment)","documentation":{"kind":"markdown","value":"Set the flags that determine which of the transformation's components must inherit those from this container's parent's\n\n_@param_ `this`: Container instance\n\n_@param_ `inheritEnvironment`: `Transformation` inheritance flags\n\n"}},{"label":"Container::transformChildren","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::transformChildren(Container this, uint8 invalidateTransformationFlag)","documentation":{"kind":"markdown","value":"Apply the transformations to this container's children.\n\n_@param_ `this`: Container instance\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n"}},{"label":"Container::propagateMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::propagateMessage(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","documentation":{"kind":"markdown","value":"Propagate an integer message through the whole parenting hierarchy (children, grand children, etc.).\n\n_@param_ `this`: Container instance\n\n_@param_ `propagatedMessageHandler`: Method that handles the message\n\n_@return_ `bool` The result that the provided message handler returns\n\n"}},{"label":"Container::onPropagatedMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::onPropagatedMessage(Container this, va_list args)","documentation":{"kind":"markdown","value":"Generic integer message propagator\n\n_@param_ `this`: Container instance\n\n_@param_ `args`: Variable list of propagated arguments\n\n"}},{"label":"Container::propagateString","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::propagateString(Container this, bool(*propagatedMessageHandler)(void *, va_list),...)","documentation":{"kind":"markdown","value":"Propagate a string through the whole parenting hierarchy (children, grand children, etc.).\n\n_@param_ `this`: Container instance\n\n_@param_ `propagatedMessageHandler`: Method that handles the string\n\n_@return_ `bool` The result that the provided string handler returns\n\n"}},{"label":"Container::onPropagatedString","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::onPropagatedString(Container this, va_list args)","documentation":{"kind":"markdown","value":"Generic string propagator\n\n_@param_ `this`: Container instance\n\n_@param_ `args`: Variable list of propagated arguments\n\n"}},{"label":"Container::translate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::translate(Container this, const Vector3D *translation)","documentation":{"kind":"markdown","value":"Displace the container.\n\n_@param_ `this`: Container instance\n\n_@param_ `translation`: Displacement to be added to the container's position\n\n"}},{"label":"Container::rotate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::rotate(Container this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Rotate the container.\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: `Rotation` to be added to the container's rotation\n\n"}},{"label":"Container::scale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::scale(Container this, const Scale *scale)","documentation":{"kind":"markdown","value":"`Scale` the container.\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: `Scale` to be applied to the container's scale\n\n"}},{"label":"Container::getLocalPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * Container::getLocalPosition(Container this)","documentation":{"kind":"markdown","value":"Retrieve the local position.\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's position\n\n"}},{"label":"Container::getLocalRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Rotation * Container::getLocalRotation(Container this)","documentation":{"kind":"markdown","value":"Retrieve the local rotation.\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's rotation\n\n"}},{"label":"Container::getLocalScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Scale * Container::getLocalScale(Container this)","documentation":{"kind":"markdown","value":"Retrieve the local scale.\n\n_@param_ `this`: Container instance\n\n_@return_ `const` Pointer to the local transformation's scale\n\n"}},{"label":"Container::setLocalPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setLocalPosition(Container this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the local position.\n\n_@param_ `this`: Container instance\n\n_@param_ `position`: New local position\n\n"}},{"label":"Container::setLocalRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setLocalRotation(Container this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the local rotation.\n\n_@param_ `this`: Container instance\n\n_@param_ `rotation`: New local rotation\n\n"}},{"label":"Container::setLocalScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setLocalScale(Container this, const Scale *scale)","documentation":{"kind":"markdown","value":"Set the local scale.\n\n_@param_ `this`: Container instance\n\n_@param_ `scale`: New local scale\n\n"}},{"label":"Container::changeEnvironment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::changeEnvironment(Container this, Transformation *environmentTransform)","documentation":{"kind":"markdown","value":"Update the local transformation in function of the provided environment transform.\n\n_@param_ `this`: Container instance\n\n_@param_ `environmentTransform`: New reference environment for the local transformation\n\n"}},{"label":"Container::addComponents","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::addComponents(Container this)","documentation":{"kind":"markdown","value":"Create the components that must attach to this container.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::removeComponents","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::removeComponents(Container this)","documentation":{"kind":"markdown","value":"Destroy the components that attach to this container.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::ready","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Container::ready(Container this, bool recursive)","documentation":{"kind":"markdown","value":"Make the container ready to start operating once it has been completely intialized.\n\n_@param_ `this`: Container instance\n\n_@param_ `recursive`: If true, the ready call is propagated to its children, grand children, etc.\n\n"}},{"label":"Container::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::show(Container this)","documentation":{"kind":"markdown","value":"Make this instance visible.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::hide(Container this)","documentation":{"kind":"markdown","value":"Make this instance invisible.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::transform","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Container::transform(Container this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","documentation":{"kind":"markdown","value":"Compute the container's global transformation.\n\n_@param_ `this`: Container instance\n\n_@param_ `environmentTransform`: Reference environment for the local transformation\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n"}},{"label":"Container::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Container::update(Container this)","documentation":{"kind":"markdown","value":"Update this instance's logic.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::suspend(Container this)","documentation":{"kind":"markdown","value":"Prepare to suspend this instance's logic.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::resume(Container this)","documentation":{"kind":"markdown","value":"Prepare to resume this instance's logic.\n\n_@param_ `this`: Container instance\n\n"}},{"label":"Container::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Container::setTransparency(Container this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set this instance's transparency effects.\n\n_@param_ `this`: Container instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n"}},{"label":"Container::handlePropagatedMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::handlePropagatedMessage(Container this, int32 message)","documentation":{"kind":"markdown","value":"Default interger message handler for propagateMessage\n\n_@param_ `this`: Container instance\n\n_@param_ `message`: Propagated integer message\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n"}},{"label":"Container::handlePropagatedString","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Container::handlePropagatedString(Container this, const char *string)","documentation":{"kind":"markdown","value":"Default string handler for propagateString\n\n_@param_ `this`: Container instance\n\n_@param_ `string`: Propagated string\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n"}},{"label":"Debug","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Debug","documentation":{"kind":"markdown","value":"Class `Debug`\n\nInherits from `Tool`\n\nImplements a tool that displays various debug information."}},{"label":"Debug::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Debug Debug::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `Debug` singleton\n\n"}},{"label":"Debug::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Debug::update(Debug this)","documentation":{"kind":"markdown","value":"Update the tool's state.\n\n_@param_ `this`: Debug instance\n\n"}},{"label":"Debug::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Debug::show(Debug this)","documentation":{"kind":"markdown","value":"Show the tool.\n\n_@param_ `this`: Debug instance\n\n"}},{"label":"Debug::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Debug::hide(Debug this)","documentation":{"kind":"markdown","value":"Hide the tool.\n\n_@param_ `this`: Debug instance\n\n"}},{"label":"Debug::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Debug::processUserInput(Debug this, uint16 pressedKey)","documentation":{"kind":"markdown","value":"Process the provided user pressed key.\n\n_@param_ `this`: Debug instance\n\n_@param_ `pressedKey`: User pressed key\n\n"}},{"label":"DebugState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) DebugState","documentation":{"kind":"markdown","value":"Class `DebugState`\n\nInherits from `ToolState`\n\nImplements a tool state to display various debug information."}},{"label":"DebugState::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static DebugState DebugState::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `DebugState` singleton\n\n"}},{"label":"DebugState::isKeyCombination","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool DebugState::isKeyCombination(DebugState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Check if the provided user input unlocks the tool managed by this state.\n\n_@param_ `this`: DebugState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n"}},{"label":"DirectDraw","labelDetails":{"description":"core"},"kind":7,"detail":"(class) DirectDraw","documentation":{"kind":"markdown","value":"Class `DirectDraw`\n\nInherits from `Object`\n\nImplements various draw rutines that manipulate the frame buffers."}},{"label":"DirectDraw::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static DirectDraw DirectDraw::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `DirectDraw` singleton\n\n"}},{"label":"DirectDraw::drawPoint","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawPoint(DirectDraw this, PixelVector point, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a single point.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `point`: Screen coordinate where to draw the point\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawLine","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawLine(DirectDraw this, PixelVector fromPoint, PixelVector toPoint, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a line.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `fromPoint`: `Line`'s starting point\n\n_@param_ `toPoint`: `Line`'s ending point\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawCircle","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawCircle(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a circle.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `center`: Circle's center\n\n_@param_ `radius`: Circle's radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawX","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawX(DirectDraw this, PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw an X.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `center`: X's center\n\n_@param_ `length`: X's arms length\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawCross","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawCross(DirectDraw this, PixelVector center, int16 length, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a cross.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `center`: Cross' center\n\n_@param_ `length`: Cross' arms length\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawSolidCircle","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawSolidCircle(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a solid circle.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `center`: Circle's center\n\n_@param_ `radius`: Circle's radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::drawSolidRhumbus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool DirectDraw::drawSolidRhumbus(DirectDraw this, PixelVector center, int16 radius, int32 color, uint8 bufferIndex, bool interlaced)","documentation":{"kind":"markdown","value":"Draw a solid rhombus.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `center`: Rhombus' center\n\n_@param_ `radius`: Rhombus' radius\n\n_@param_ `color`: Color of the point to draw (only non black)\n\n_@param_ `bufferIndex`: Buffer set index for interlaced drawing\n\n_@param_ `interlaced`: If true, the drawing is interlaced\n\n_@return_ `static` True if a pixel was written to the frame buffers\n\n"}},{"label":"DirectDraw::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void DirectDraw::reset(DirectDraw this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: DirectDraw instance\n\n"}},{"label":"DirectDraw::preparteToDraw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void DirectDraw::preparteToDraw(DirectDraw this)","documentation":{"kind":"markdown","value":"Prepare the manager to start drawing to the frame buffers.\n\n_@param_ `this`: DirectDraw instance\n\n"}},{"label":"DirectDraw::setFrustum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void DirectDraw::setFrustum(DirectDraw this, CameraFrustum frustum)","documentation":{"kind":"markdown","value":"Configure the frustum where drawing is allowed.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `frustum`: 3D boundary when drawing is allowed\n\n"}},{"label":"DirectDraw::getFrustum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CameraFrustum DirectDraw::getFrustum(DirectDraw this)","documentation":{"kind":"markdown","value":"Retrieve the frustum where drawing is allowed.\n\n_@param_ `this`: DirectDraw instance\n\n_@return_ `CameraFrustum` 3D boundary when drawing is allowed\n\n"}},{"label":"DirectDraw::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void DirectDraw::print(DirectDraw this, int16 x, int16 y)","documentation":{"kind":"markdown","value":"Print the manager's current status.\n\n_@param_ `this`: DirectDraw instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Entity","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Entity","documentation":{"kind":"markdown","value":"Class `Entity`\n\nInherits from `Container`\n\nImplements a container that can have sprites, wireframes and colliders attached to it."}},{"label":"Entity::createEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Entity Entity::createEntity(Entity this, const PositionedEntity *const positionedEntity, int16 internalId)","documentation":{"kind":"markdown","value":"Create a new entity instance and configure it with the provided arguments.\n\n_@param_ `this`: Entity instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@return_ `static` The new entity\n\n"}},{"label":"Entity::createEntityDeferred","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Entity Entity::createEntityDeferred(Entity this, const PositionedEntity *const positionedEntity, int16 internalId)","documentation":{"kind":"markdown","value":"Create a new entity instance and configure it over time with the provided arguments.\n\n_@param_ `this`: Entity instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n_@return_ `static` The new, still not configured entity\n\n"}},{"label":"Entity::getBoundingBoxFromSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelRightBox Entity::getBoundingBoxFromSpec(Entity this, const PositionedEntity *positionedEntity, const PixelVector *environmentPosition)","documentation":{"kind":"markdown","value":"Compute the spatially located bounding box of an entity created with the provided positioned entity struct.\n\n_@param_ `this`: Entity instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the an entity\n\n_@param_ `environmentPosition`: Vector used as the origin with respect to which computed the bounding box's position\n\n_@return_ `static` Spatially located bounding box of an entity that would be created with the provided positioned entity struct\n\n"}},{"label":"Entity::getRadius","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getRadius(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the object's radius.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` Radius\n\n"}},{"label":"Entity::getBounciness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getBounciness(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the object's bounciness factor.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n"}},{"label":"Entity::getFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getFrictionCoefficient(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the object's friction coefficient.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Object`'s friction coefficient\n\n"}},{"label":"Entity::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::isSubjectToGravity(Entity this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the object is subject to provided gravity vector.\n\n_@param_ `this`: Entity instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n"}},{"label":"Entity::getInGameType","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Entity::getInGameType(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the enum that determines the type of game object.\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n"}},{"label":"Entity::addComponents","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addComponents(Entity this)","documentation":{"kind":"markdown","value":"Add the components that must attach to this entity.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::removeComponents","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeComponents(Entity this)","documentation":{"kind":"markdown","value":"Remove the components that attach to this entity.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::show(Entity this)","documentation":{"kind":"markdown","value":"Make this instance visible.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::hide(Entity this)","documentation":{"kind":"markdown","value":"Make this instance invisible.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::suspend(Entity this)","documentation":{"kind":"markdown","value":"Prepare to suspend this instance's logic.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::resume(Entity this)","documentation":{"kind":"markdown","value":"Prepare to resume this instance's logic.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setTransparency(Entity this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set this instance's transparency effects.\n\n_@param_ `this`: Entity instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n"}},{"label":"Entity::handlePropagatedMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::handlePropagatedMessage(Entity this, int32 message)","documentation":{"kind":"markdown","value":"Default interger message handler for propagateMessage\n\n_@param_ `this`: Entity instance\n\n_@param_ `message`: Propagated integer message\n\n_@return_ `bool` True if the propagation must stop; false if the propagation must reach other containers\n\n"}},{"label":"Entity::getSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) EntitySpec * Entity::getSpec(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's spec.\n\n_@param_ `this`: Entity instance\n\n_@return_ `EntitySpec` Specification that determines how the entity was configured\n\n"}},{"label":"Entity::getInternalId","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Entity::getInternalId(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's internal id used by the engine to keep track of it.\n\n_@param_ `this`: Entity instance\n\n_@return_ `int16` `Entity`'s internal id\n\n"}},{"label":"Entity::getEntityFactory","labelDetails":{"description":"core"},"kind":2,"detail":"(method) EntityFactory Entity::getEntityFactory(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's entity factory\n\n_@param_ `this`: Entity instance\n\n_@return_ `EntityFactory` `Entity`'s entity facotyr\n\n"}},{"label":"Entity::setNormalizedDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setNormalizedDirection(Entity this, NormalizedDirection normalizedDirection)","documentation":{"kind":"markdown","value":"Set the normalized direction towards where the entity faces.\n\n_@param_ `this`: Entity instance\n\n_@param_ `normalizedDirection`: New facing direction with is components normalized\n\n"}},{"label":"Entity::getNormalizedDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) NormalizedDirection Entity::getNormalizedDirection(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the normalized direction towards where the entity faces.\n\n_@param_ `this`: Entity instance\n\n_@return_ `NormalizedDirection` `Entity`'s facing direction with is components normalized\n\n"}},{"label":"Entity::spawnChildEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity Entity::spawnChildEntity(Entity this, const PositionedEntity *const positionedEntity)","documentation":{"kind":"markdown","value":"Spawn a new child and configure it with the provided positioned entity struct.\n\n_@param_ `this`: Entity instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n"}},{"label":"Entity::addChildEntities","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addChildEntities(Entity this, const PositionedEntity *childrenSpecs)","documentation":{"kind":"markdown","value":"Spawn children and configure them with the provided entity specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `childrenSpecs`: Array of entity specs to use to initialize the new children\n\n"}},{"label":"Entity::addChildEntitiesDeferred","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addChildEntitiesDeferred(Entity this, const PositionedEntity *childrenSpecs)","documentation":{"kind":"markdown","value":"Spawn children and configure them over time with the provided entity specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `childrenSpecs`: Array of entity specs to use to initialize the new children\n\n"}},{"label":"Entity::getChildById","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity Entity::getChildById(Entity this, int16 id)","documentation":{"kind":"markdown","value":"Retrieve a child of this entity whose internal ID equals the provided one.\n\n_@param_ `this`: Entity instance\n\n_@param_ `id`: Internal ID to look for\n\n_@return_ `Entity` Child entity whose ID matches the provided one\n\n"}},{"label":"Entity::addBehavior","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Behavior Entity::addBehavior(Entity this, BehaviorSpec *behaviorSpec)","documentation":{"kind":"markdown","value":"Attach a new behavior to the entity and configure it with the provided spec.\n\n_@param_ `this`: Entity instance\n\n_@param_ `behaviorSpec`: Specification to be used to configure the new behavior\n\n"}},{"label":"Entity::addBehaviors","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addBehaviors(Entity this, BehaviorSpec **behaviorSpecs, bool destroyOldBehaviors)","documentation":{"kind":"markdown","value":"Attach a new behaviors to the entity and configure them with the provided specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `behaviorSpecs`: Array of specification to be used to configure the new behaviors\n\n_@param_ `destroyOldBehaviors`: If true, all previously attached behaviors will be removed\n\n"}},{"label":"Entity::removeBehaviors","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeBehaviors(Entity this)","documentation":{"kind":"markdown","value":"Remove all attached behaviors.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::getBehaviors","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::getBehaviors(Entity this, ClassPointer classPointer, VirtualList behaviors)","documentation":{"kind":"markdown","value":"Retrieve the linked list of behaviors that are instances of the provided class.\n\n_@param_ `this`: Entity instance\n\n_@param_ `classPointer`: Pointer to the class to use as search criteria. Usage: `typeofclass(ClassName)`\n\n_@param_ `behaviors`: Linked list to be filled with the behaviors that meed the search criteria (it is externally allocated and must be externally deleted)\n\n_@return_ `bool` True if one or more behaviors met the search criteria; false otherwise\n\n"}},{"label":"Entity::addSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Sprite Entity::addSprite(Entity this, SpriteSpec *spriteSpec, SpriteManager spriteManager)","documentation":{"kind":"markdown","value":"Attach a new sprite to the entity and configure it with the provided spec.\n\n_@param_ `this`: Entity instance\n\n_@param_ `spriteSpec`: Specification to be used to configure the new sprite\n\n_@param_ `spriteManager`: A reference to the `SpriteManager` used to speed up multiple calls to this method\n\n_@return_ `Sprite` The new sprite\n\n"}},{"label":"Entity::addSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addSprites(Entity this, SpriteSpec **spriteSpecs, bool destroyOldSprites)","documentation":{"kind":"markdown","value":"Attach a new sprites to the entity and configure them with the provided specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `spriteSpecs`: Array of specification to be used to configure the new sprites\n\n_@param_ `destroyOldSprites`: If true, all previously attached sprites will be removed\n\n"}},{"label":"Entity::removeSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeSprite(Entity this, Sprite sprite)","documentation":{"kind":"markdown","value":"Remove an attached sprite.\n\n_@param_ `this`: Entity instance\n\n_@param_ `sprite`: `Sprite` to be removed\n\n"}},{"label":"Entity::removeSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeSprites(Entity this)","documentation":{"kind":"markdown","value":"Remove all attached sprites.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::getSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Entity::getSprites(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the list of attached sprites.\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached sprites\n\n"}},{"label":"Entity::addWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Wireframe Entity::addWireframe(Entity this, WireframeSpec *wireframeSpec, WireframeManager wireframeManager)","documentation":{"kind":"markdown","value":"Attach a new wireframe to the entity and configure it with the provided spec.\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframeSpec`: Specification to be used to configure the new sprite\n\n_@param_ `wireframeManager`: A reference to the `WireframeManager` used to speed up multiple calls to this method\n\n_@return_ `Wireframe` The new wireframe\n\n"}},{"label":"Entity::addWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addWireframes(Entity this, WireframeSpec **wireframeSpecs, bool destroyOldWireframes)","documentation":{"kind":"markdown","value":"Attach a new wireframes to the entity and configure them with the provided specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframeSpecs`: Array of specification to be used to configure the new wireframes\n\n_@param_ `destroyOldWireframes`: If true, all previously attached wireframes will be removed\n\n"}},{"label":"Entity::removeWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeWireframe(Entity this, Wireframe wireframe)","documentation":{"kind":"markdown","value":"Remove an attached wireframe.\n\n_@param_ `this`: Entity instance\n\n_@param_ `wireframe`: `Wireframe` to be removed\n\n"}},{"label":"Entity::removeWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeWireframes(Entity this)","documentation":{"kind":"markdown","value":"Remove all attached wireframes.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::getWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Entity::getWireframes(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the list of attached wireframes.\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached wireframes\n\n"}},{"label":"Entity::addCollider","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Collider Entity::addCollider(Entity this, ColliderSpec *colliderSpec, CollisionManager collisionManager)","documentation":{"kind":"markdown","value":"Attach a new collider to the entity and configure it with the provided spec.\n\n_@param_ `this`: Entity instance\n\n_@param_ `colliderSpec`: Specification to be used to configure the new sprite\n\n_@param_ `collisionManager`: A reference to the `CollisionManager` used to speed up multiple calls to this method\n\n_@return_ `Collider` The new collider\n\n"}},{"label":"Entity::addColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::addColliders(Entity this, ColliderSpec *colliderSpecs, bool destroyOldColliders)","documentation":{"kind":"markdown","value":"Attach a new colliders to the entity and configure them with the provided specs.\n\n_@param_ `this`: Entity instance\n\n_@param_ `colliderSpecs`: Array of specification to be used to configure the new colliders\n\n_@param_ `destroyOldColliders`: If true, all previously attached colliders will be removed\n\n"}},{"label":"Entity::removeCollider","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeCollider(Entity this, Collider collider)","documentation":{"kind":"markdown","value":"Remove an attached collider.\n\n_@param_ `this`: Entity instance\n\n_@param_ `collider`: `Collider` to be removed\n\n"}},{"label":"Entity::removeColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::removeColliders(Entity this)","documentation":{"kind":"markdown","value":"Remove all attached colliders.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::getColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Entity::getColliders(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the list of attached colliders.\n\n_@param_ `this`: Entity instance\n\n_@return_ `VirtualList` Linked list of attached colliders\n\n"}},{"label":"Entity::enableCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::enableCollisions(Entity this)","documentation":{"kind":"markdown","value":"Enable collision detection on the entity's colliders.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::disableCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::disableCollisions(Entity this)","documentation":{"kind":"markdown","value":"Disable collision detection on the entity's colliders.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::checkCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::checkCollisions(Entity this, bool activate)","documentation":{"kind":"markdown","value":"Enable or disable collision detection against other entities' colliders.\n\n_@param_ `this`: Entity instance\n\n_@param_ `activate`: If true, this entity's colliders check collision against other entities'\n\n"}},{"label":"Entity::registerCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::registerCollisions(Entity this, bool activate)","documentation":{"kind":"markdown","value":"Enable or disable the register of detected collisions.\n\n_@param_ `this`: Entity instance\n\n_@param_ `activate`: If false, this entity's colliders won't keep track of collisions, hence they won't notify of it of persisting (`undefined`) collisions or when end (\n\n"}},{"label":"Entity::setCollidersLayers","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setCollidersLayers(Entity this, uint32 layers)","documentation":{"kind":"markdown","value":"Set the layers in which this entity's colliders must live.\n\n_@param_ `this`: Entity instance\n\n_@param_ `layers`: Flags that determine the layers for the entity's colliders\n\n"}},{"label":"Entity::getCollidersLayers","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Entity::getCollidersLayers(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the layers in which this entity's colliders live.\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` Flags that determine the layers where the entity's colliders live\n\n"}},{"label":"Entity::setCollidersLayersToIgnore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setCollidersLayersToIgnore(Entity this, uint32 layersToIgnore)","documentation":{"kind":"markdown","value":"Set the layers that the entity's colliders must ignore when detecting collision.\n\n_@param_ `this`: Entity instance\n\n_@param_ `layersToIgnore`: Flags that determine the layers with colliders to ignore when detecting collisions\n\n"}},{"label":"Entity::getCollidersLayersToIgnore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Entity::getCollidersLayersToIgnore(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the layers that the entity's colliders ignore when detecting collision.\n\n_@param_ `this`: Entity instance\n\n_@return_ `uint32` The layers that the entity's colliders ignore when detecting collision\n\n"}},{"label":"Entity::hasColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::hasColliders(Entity this)","documentation":{"kind":"markdown","value":"Check if the entity has attached colliders.\n\n_@param_ `this`: Entity instance\n\n_@return_ `bool` True if the entity hast at least on collider arrached; false otherwise\n\n"}},{"label":"Entity::showColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::showColliders(Entity this)","documentation":{"kind":"markdown","value":"Make the entity's colliders visible.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::hideColliders","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::hideColliders(Entity this)","documentation":{"kind":"markdown","value":"Make the entity's colliders invisible.\n\n_@param_ `this`: Entity instance\n\n"}},{"label":"Entity::calculateSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::calculateSize(Entity this, bool force)","documentation":{"kind":"markdown","value":"Configure the entity's size.\n\n_@param_ `this`: Entity instance\n\n_@param_ `force`: If true, the size is computed even if has already been computed\n\n"}},{"label":"Entity::getWidth","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getWidth(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's width.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s width\n\n"}},{"label":"Entity::getHeight","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getHeight(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's height.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s height\n\n"}},{"label":"Entity::getDepth","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Entity::getDepth(Entity this)","documentation":{"kind":"markdown","value":"Retrieve the entity's depth.\n\n_@param_ `this`: Entity instance\n\n_@return_ `fixed_t` `Entity`'s depth\n\n"}},{"label":"Entity::isInCameraRange","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::isInCameraRange(Entity this, int16 padding, bool recursive)","documentation":{"kind":"markdown","value":"Check if the entity is withing the camera's frustum.\n\n_@param_ `this`: Entity instance\n\n_@param_ `padding`: Padding to be added to camera's frustum\n\n_@param_ `recursive`: If true, the check is performed on the children, grand children, etc.\n\n_@return_ `bool` True if the entity is within the camera's frustum\n\n"}},{"label":"Entity::setSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setSpec(Entity this, void *entitySpec)","documentation":{"kind":"markdown","value":"Set the particle systems's spec.\n\n_@param_ `this`: Entity instance\n\n_@param_ `entitySpec`\n\n"}},{"label":"Entity::setExtraInfo","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Entity::setExtraInfo(Entity this, void *extraInfo)","documentation":{"kind":"markdown","value":"Set any extra info provided by the `PositionedEntity` struct used to instantiate this entity.\n\n_@param_ `this`: Entity instance\n\n_@param_ `extraInfo`: Pointer to the extra information that the entity might need\n\n"}},{"label":"Entity::alwaysStreamIn","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Entity::alwaysStreamIn(Entity this)","documentation":{"kind":"markdown","value":"Check if the entity must be streamed in after being streamed out or destroyed.\n\n_@param_ `this`: Entity instance\n\n_@return_ `bool` True if the streaming must spawn this entity back when deleted\n\n"}},{"label":"EntityFactory","labelDetails":{"description":"core"},"kind":7,"detail":"(class) EntityFactory","documentation":{"kind":"markdown","value":"Class `EntityFactory`\n\nInherits from `Object`\n\nImplements a factory that creates entities over time."}},{"label":"EntityFactory::spawnEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void EntityFactory::spawnEntity(EntityFactory this, const PositionedEntity *positionedEntity, Container parent, EventListener callback, int16 internalId)","documentation":{"kind":"markdown","value":"Create a new entity instance and configure it with the provided arguments.\n\n_@param_ `this`: EntityFactory instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new entity and the spatial information about where and how to positione it\n\n_@param_ `parent`: The parent of the new entity instance\n\n_@param_ `callback`: Callback to inform the parent when the new entity is ready\n\n_@param_ `internalId`: ID to keep track internally of the new instance\n\n"}},{"label":"EntityFactory::createNextEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool EntityFactory::createNextEntity(EntityFactory this)","documentation":{"kind":"markdown","value":"Create the next queued entity.\n\n_@param_ `this`: EntityFactory instance\n\n_@return_ `bool` False if there are no entities pending instantiation; true otherwise\n\n"}},{"label":"EntityFactory::hasEntitiesPending","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool EntityFactory::hasEntitiesPending(EntityFactory this)","documentation":{"kind":"markdown","value":"Check if there are entities pending instantiation.\n\n_@param_ `this`: EntityFactory instance\n\n_@return_ `bool` True if there are entities pending instantiation; false otherwise\n\n"}},{"label":"EntityFactory::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void EntityFactory::print(EntityFactory this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the factory's state.\n\n_@param_ `this`: EntityFactory instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Error","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Error","documentation":{"kind":"markdown","value":"Class `Error`\n\nInherits from `Object`\n\nCatches assertions and hardware exceptions."}},{"label":"Error::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Error Error::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `Error` singleton\n\n"}},{"label":"Error::triggerException","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Error::triggerException(Error this, char *message, char *detail)","documentation":{"kind":"markdown","value":"Locks the program in a screen with the details of what caused the exception.\n\n_@param_ `this`: Error instance\n\n_@param_ `message`: Pointer to a brief description of the exception\n\n_@param_ `detail`: Pointer to a detailed description of the exception\n\n"}},{"label":"Error::zeroDivisionException","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Error::zeroDivisionException(Error this)","documentation":{"kind":"markdown","value":"Handles hardware's zero division exception.\n\n_@param_ `this`: Error instance\n\n"}},{"label":"Error::invalidOpcodeException","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Error::invalidOpcodeException(Error this)","documentation":{"kind":"markdown","value":"Handles hardware's invalid opcode exception.\n\n_@param_ `this`: Error instance\n\n"}},{"label":"Error::floatingPointException","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Error::floatingPointException(Error this)","documentation":{"kind":"markdown","value":"Handles hardware's floating point exception.\n\n_@param_ `this`: Error instance\n\n"}},{"label":"FrameBlendBgmapSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) FrameBlendBgmapSprite","documentation":{"kind":"markdown","value":"Class `FrameBlendBgmapSprite`\n\nInherits from `BgmapSprite`\n\nBlends two frames of animation into a single one to achieve hi color images with a single sprite."}},{"label":"FrameBlendBgmapSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 FrameBlendBgmapSprite::doRender(FrameBlendBgmapSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: FrameBlendBgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"FrameRate","labelDetails":{"description":"core"},"kind":7,"detail":"(class) FrameRate","documentation":{"kind":"markdown","value":"Class `FrameRate`\n\nInherits from `ListenerObject`\n\nKeeps track of the program's frame rate."}},{"label":"FrameRate::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static FrameRate FrameRate::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `FrameRate` singleton\n\n"}},{"label":"FrameRate::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void FrameRate::reset(FrameRate this)","documentation":{"kind":"markdown","value":"Reset the state of the manager.\n\n_@param_ `this`: FrameRate instance\n\n"}},{"label":"FrameRate::setTarget","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void FrameRate::setTarget(FrameRate this, uint8 targetFPS)","documentation":{"kind":"markdown","value":"Set the target frames per second.\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `targetFPS`: Target frames per second\n\n"}},{"label":"FrameRate::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void FrameRate::update(FrameRate this)","documentation":{"kind":"markdown","value":"Update the elapsed frames during the current second.\n\n_@param_ `this`: FrameRate instance\n\n"}},{"label":"FrameRate::gameFrameStarted","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void FrameRate::gameFrameStarted(FrameRate this, bool gameCycleEnded)","documentation":{"kind":"markdown","value":"The next game frame cycle has started.\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `gameCycleEnded`: Flag that indicates if the previous game frame was completed before the current second has elapsed\n\n"}},{"label":"FrameRate::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void FrameRate::print(FrameRate this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the frames per second statistics.\n\n_@param_ `this`: FrameRate instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"GameState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) GameState","documentation":{"kind":"markdown","value":"Class `GameState`\n\nInherits from `State`\n\nImplements a state that the `VUEngine`'s state machine can transition into."}},{"label":"GameState::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool GameState::handleMessage(GameState this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: GameState instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"GameState::enter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::enter(GameState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to enter this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n"}},{"label":"GameState::execute","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::execute(GameState this, void *owner)","documentation":{"kind":"markdown","value":"Updates the object in this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"GameState::exit","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::exit(GameState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to exit this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n"}},{"label":"GameState::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::suspend(GameState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to become inactive in this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"GameState::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::resume(GameState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to become active in this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"GameState::processMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool GameState::processMessage(GameState this, void *owner, Telegram telegram)","documentation":{"kind":"markdown","value":"Process a `Telegram` sent to an object that is in this state.\n\n_@param_ `this`: GameState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n_@param_ `telegram`: `Telegram` to process\n\n"}},{"label":"GameState::configureStage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::configureStage(GameState this, StageSpec *stageSpec, VirtualList positionedEntitiesToIgnore)","documentation":{"kind":"markdown","value":"Configure the stage with the provided stage spec.\n\n_@param_ `this`: GameState instance\n\n_@param_ `stageSpec`: Specification that determines how to configure the stage\n\n_@param_ `positionedEntitiesToIgnore`: List of positioned entity structs to register for streaming\n\n"}},{"label":"GameState::getUIContainer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) UIContainer GameState::getUIContainer(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the UI container.\n\n_@param_ `this`: GameState instance\n\n_@return_ `UIContainer` UI `Container`\n\n"}},{"label":"GameState::getStage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Stage GameState::getStage(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the stage instance.\n\n_@param_ `this`: GameState instance\n\n_@return_ `Stage` Game state's stage\n\n"}},{"label":"GameState::getPhysicalWorld","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PhysicalWorld GameState::getPhysicalWorld(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the physical world.\n\n_@param_ `this`: GameState instance\n\n_@return_ `PhysicalWorld` Game state's physical world\n\n"}},{"label":"GameState::getCollisionManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CollisionManager GameState::getCollisionManager(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the collision manager.\n\n_@param_ `this`: GameState instance\n\n_@return_ `CollisionManager` Game state's collision manager\n\n"}},{"label":"GameState::getLogicsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock GameState::getLogicsClock(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the clock that serves to control the game's logic.\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's logics clock\n\n"}},{"label":"GameState::getMessagingClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock GameState::getMessagingClock(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the clock that is used for the timing of messaging.\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's messaging clock\n\n"}},{"label":"GameState::getAnimationsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock GameState::getAnimationsClock(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the clock that serves to control the animations.\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's animations clocks\n\n"}},{"label":"GameState::getPhysicsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock GameState::getPhysicsClock(GameState this)","documentation":{"kind":"markdown","value":"Retrieve the clock that serves to control the game's physics.\n\n_@param_ `this`: GameState instance\n\n_@return_ `Clock` Game state's physics clock\n\n"}},{"label":"GameState::startClocks","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::startClocks(GameState this)","documentation":{"kind":"markdown","value":"Start all the clocks.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::pauseClocks","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::pauseClocks(GameState this)","documentation":{"kind":"markdown","value":"Pause all the clocks.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::unpauseClocks","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::unpauseClocks(GameState this)","documentation":{"kind":"markdown","value":"Unpause all the clocks.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::stopClocks","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::stopClocks(GameState this)","documentation":{"kind":"markdown","value":"Stop all the clocks.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::startLogics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::startLogics(GameState this)","documentation":{"kind":"markdown","value":"Start the clock used for logics.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::pauseLogics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::pauseLogics(GameState this)","documentation":{"kind":"markdown","value":"Pause the clock used for logics.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::unpauseLogics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::unpauseLogics(GameState this)","documentation":{"kind":"markdown","value":"Unpause the clock used for logics.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::startMessaging","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::startMessaging(GameState this)","documentation":{"kind":"markdown","value":"Start the clock used for delayed messages.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::pauseMessaging","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::pauseMessaging(GameState this)","documentation":{"kind":"markdown","value":"Pause the clock used for delayed messages.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::unpauseMessaging","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::unpauseMessaging(GameState this)","documentation":{"kind":"markdown","value":"Unpause the clock used for delayed messages.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::startAnimations","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::startAnimations(GameState this)","documentation":{"kind":"markdown","value":"Start the clock used for animations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::pauseAnimations","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::pauseAnimations(GameState this)","documentation":{"kind":"markdown","value":"Pause the clock used for animations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::unpauseAnimations","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::unpauseAnimations(GameState this)","documentation":{"kind":"markdown","value":"Unpause the clock used for animations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::startPhysics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::startPhysics(GameState this)","documentation":{"kind":"markdown","value":"Start the clock used for physics simulations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::pausePhysics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::pausePhysics(GameState this)","documentation":{"kind":"markdown","value":"Pause the clock used for physics simulations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::unpausePhysics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::unpausePhysics(GameState this)","documentation":{"kind":"markdown","value":"Unpause the clock used for physics simulations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::transform","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::transform(GameState this)","documentation":{"kind":"markdown","value":"Update the stage's children' global transformations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::transformUI","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::transformUI(GameState this)","documentation":{"kind":"markdown","value":"Update the UI's children' global transformations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::simulatePhysics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::simulatePhysics(GameState this)","documentation":{"kind":"markdown","value":"Continue physics simulations.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::processCollisions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::processCollisions(GameState this)","documentation":{"kind":"markdown","value":"Test and process collisions./.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::propagateMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool GameState::propagateMessage(GameState this, int32 message)","documentation":{"kind":"markdown","value":"Propagate an integer message through the whole parenting hierarchy of the stage (children, grand children, etc.).\n\n_@param_ `this`: GameState instance\n\n_@param_ `message`\n\n_@return_ `bool` True if some entity processed the message\n\n"}},{"label":"GameState::propagateString","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool GameState::propagateString(GameState this, const char *string)","documentation":{"kind":"markdown","value":"Propagate a string through the whole parenting hierarchy of the stage (children, grand children, etc.).\n\n_@param_ `this`: GameState instance\n\n_@param_ `string`\n\n_@return_ `bool` True if some entity processed the string\n\n"}},{"label":"GameState::getEntityByName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity GameState::getEntityByName(GameState this, const char *entityName)","documentation":{"kind":"markdown","value":"Find a stage's child (grand child, etc.) by its name.\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n"}},{"label":"GameState::showEntityWithName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::showEntityWithName(GameState this, const char *entityName)","documentation":{"kind":"markdown","value":"Show a stage's child (grand child, etc.) with the provided name.\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n"}},{"label":"GameState::hideEntityWithName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::hideEntityWithName(GameState this, const char *entityName)","documentation":{"kind":"markdown","value":"Hide a stage's child (grand child, etc.) with the provided name.\n\n_@param_ `this`: GameState instance\n\n_@param_ `entityName`: Name to look for\n\n"}},{"label":"GameState::changeFramerate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::changeFramerate(GameState this, int16 targetFPS, int32 duration)","documentation":{"kind":"markdown","value":"Change the target frame rate.\n\n_@param_ `this`: GameState instance\n\n_@param_ `targetFPS`: New target frame rate\n\n_@param_ `duration`: Amount of time to keep the change on the frame rate before setting back the default target (0 or negative to make it permanent as long as the state is active)\n\n"}},{"label":"GameState::streamAll","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::streamAll(GameState this)","documentation":{"kind":"markdown","value":"Force to completely stream in and out entities and to initialize all.\n\n_@param_ `this`: GameState instance\n\n"}},{"label":"GameState::stream","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual bool GameState::stream(GameState this)","documentation":{"kind":"markdown","value":"Stream in or out the stage entities within or outside the camera's range.\n\n_@param_ `this`: GameState instance\n\n_@return_ `virtual` True if at least some entity was streamed in or out\n\n"}},{"label":"GameState::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void GameState::processUserInput(GameState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Process the provided user input.\n\n_@param_ `this`: GameState instance\n\n_@param_ `userInput`: Struct with the current user input information\n\n"}},{"label":"GameState::isVersusMode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool GameState::isVersusMode(GameState this)","documentation":{"kind":"markdown","value":"Check if the game state is in versus mode.\n\n_@param_ `this`: GameState instance\n\n_@return_ `bool` True if the state is in versus mode; false otherwise\n\n"}},{"label":"HardwareManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) HardwareManager","documentation":{"kind":"markdown","value":"Class `HardwareManager`\n\nInherits from `Object`\n\nCentralizes the management of the hardware."}},{"label":"HardwareManager::initialize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::initialize(HardwareManager this)","documentation":{"kind":"markdown","value":"Initialize hardware registries.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::halt","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::halt(HardwareManager this)","documentation":{"kind":"markdown","value":"Halt the CPU.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::setInterruptLevel","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::setInterruptLevel(HardwareManager this, uint8 level)","documentation":{"kind":"markdown","value":"Set the interrupt level.\n\n_@param_ `this`: HardwareManager instance\n\n_@param_ `level`: Interrupt level\n\n"}},{"label":"HardwareManager::enableInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::enableInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Enable interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::disableInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::disableInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Disable interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::resumeInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::resumeInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Resume interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::suspendInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::suspendInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Suspend interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::enableMultiplexedInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::enableMultiplexedInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Enable multiplexed interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::disableMultiplexedInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::disableMultiplexedInterrupts(HardwareManager this)","documentation":{"kind":"markdown","value":"Disable multiplexed interrupts.\n\n_@param_ `this`: HardwareManager instance\n\n"}},{"label":"HardwareManager::getStackPointer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 HardwareManager::getStackPointer(HardwareManager this)","documentation":{"kind":"markdown","value":"Retrieve the Stack Pointer's value.\n\n_@param_ `this`: HardwareManager instance\n\n_@return_ `static` Stack pointer\n\n"}},{"label":"HardwareManager::getLinkPointer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 HardwareManager::getLinkPointer(HardwareManager this)","documentation":{"kind":"markdown","value":"Retrieve the Link Pointer's value.\n\n_@param_ `this`: HardwareManager instance\n\n_@return_ `static` Link pointer\n\n"}},{"label":"HardwareManager::getPSW","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 HardwareManager::getPSW(HardwareManager this)","documentation":{"kind":"markdown","value":"Retrieve the PSW\n\n_@param_ `this`: HardwareManager instance\n\n_@return_ `static` PSW\n\n"}},{"label":"HardwareManager::printStackStatus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::printStackStatus(HardwareManager this, int32 x, int32 y, bool resumed)","documentation":{"kind":"markdown","value":"Print the status of the stack.\n\n_@param_ `this`: HardwareManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `resumed`: If true, print only minimum information\n\n"}},{"label":"HardwareManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void HardwareManager::print(HardwareManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the status of the hardware registries.\n\n_@param_ `this`: HardwareManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"InverseBox","labelDetails":{"description":"core"},"kind":7,"detail":"(class) InverseBox","documentation":{"kind":"markdown","value":"Class `InverseBox`\n\nInherits from `Collider`\n\nDefines a collider with the shape of a box that detects collision outside of it."}},{"label":"KeypadManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) KeypadManager","documentation":{"kind":"markdown","value":"Class `KeypadManager`\n\nInherits from `ListenerObject`\n\nManages keypad inputs."}},{"label":"KeypadManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static KeypadManager KeypadManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `CommunicationManager` singleton\n\n"}},{"label":"KeypadManager::interruptHandler","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void KeypadManager::interruptHandler(KeypadManager this)","documentation":{"kind":"markdown","value":"Interrupt handler for keypad's interrupts.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::reset(KeypadManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::enable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::enable(KeypadManager this)","documentation":{"kind":"markdown","value":"Enable user input.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::disable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::disable(KeypadManager this)","documentation":{"kind":"markdown","value":"Disable user input.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::isEnabled","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 KeypadManager::isEnabled(KeypadManager this)","documentation":{"kind":"markdown","value":"Check if user input is enabled.\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `int32` True if user input is enabled\n\n"}},{"label":"KeypadManager::readUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) UserInput KeypadManager::readUserInput(KeypadManager this)","documentation":{"kind":"markdown","value":"Retrieve the user input during the last game frame\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `UserInput` User input struct with the key presses of the last game frame\n\n"}},{"label":"KeypadManager::enableDummyKey","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::enableDummyKey(KeypadManager this)","documentation":{"kind":"markdown","value":"Enable the dummy key to force user input processing.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::disableDummyKey","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::disableDummyKey(KeypadManager this)","documentation":{"kind":"markdown","value":"Disable the dummy key to not enforce user input processing.\n\n_@param_ `this`: KeypadManager instance\n\n"}},{"label":"KeypadManager::registerInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::registerInput(KeypadManager this, uint16 inputToRegister)","documentation":{"kind":"markdown","value":"Register the user input according to the provided flags.\n\n_@param_ `this`: KeypadManager instance\n\n_@param_ `inputToRegister`: Flags to select which inputs to register and which to ignore\n\n"}},{"label":"KeypadManager::getAccumulatedUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) long KeypadManager::getAccumulatedUserInput(KeypadManager this)","documentation":{"kind":"markdown","value":"Retrieve the accumulated sum of user inputs since the start of the program.\n\n_@param_ `this`: KeypadManager instance\n\n_@return_ `long` The mathematical sum of all user's presses.\n\n"}},{"label":"KeypadManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void KeypadManager::print(KeypadManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the last reads of user input.\n\n_@param_ `this`: KeypadManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Line","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Line","documentation":{"kind":"markdown","value":"Class `Line`\n\nInherits from `Wireframe`\n\nDraws a line."}},{"label":"Line::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Line::render(Line this, Vector3D relativePosition)","documentation":{"kind":"markdown","value":"Prepare the wireframe for drawing.\n\n_@param_ `this`: Line instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n"}},{"label":"Line::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Line::draw(Line this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers.\n\n_@param_ `this`: Line instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"LineField","labelDetails":{"description":"core"},"kind":7,"detail":"(class) LineField","documentation":{"kind":"markdown","value":"Class `LineField`\n\nInherits from `Collider`\n\nDefines a line that is sensible to collision on one of its sides."}},{"label":"LineField::getNormal","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D LineField::getNormal(LineField this)","documentation":{"kind":"markdown","value":"Retrieve the normal to the collider.\n\n_@param_ `this`: LineField instance\n\n_@return_ `Vector3D` Normal to the collider\n\n"}},{"label":"LineField::configureWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void LineField::configureWireframe(LineField this)","documentation":{"kind":"markdown","value":"Configure the wireframe used to show the collider.\n\n_@param_ `this`: LineField instance\n\n"}},{"label":"LineField::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void LineField::print(LineField this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print collider's state.\n\n_@param_ `this`: LineField instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"LineField::displace","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void LineField::displace(LineField this, fixed_t displacement)","documentation":{"kind":"markdown","value":"Displace the line filed.\n\n_@param_ `this`: LineField instance\n\n_@param_ `displacement`: Displacement vector\n\n"}},{"label":"LineField::getCenter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D LineField::getCenter(LineField this)","documentation":{"kind":"markdown","value":"Retrieve the line field's center point.\n\n_@param_ `this`: LineField instance\n\n_@return_ `Vector3D` `Line` field's center point\n\n"}},{"label":"LineField::getVertexes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void LineField::getVertexes(LineField this, Vector3D vertexes[2])","documentation":{"kind":"markdown","value":"Retrieve the vertexes that define the line field.\n\n_@param_ `this`: LineField instance\n\n_@param_ `vertexes`\n\n"}},{"label":"LineField::setNormalLength","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void LineField::setNormalLength(LineField this, fixed_t normalLength)","documentation":{"kind":"markdown","value":"Set the length of the line field's normal.\n\n_@param_ `this`: LineField instance\n\n_@param_ `normalLength`: Length of the line field's normal\n\n"}},{"label":"ListenerObject","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ListenerObject","documentation":{"kind":"markdown","value":"Class `ListenerObject`\n\nInherits from `Object`\n\nInteracts by means of events and messages."}},{"label":"ListenerObject::addEventListener","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::addEventListener(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","documentation":{"kind":"markdown","value":"Register an object that will listen for events.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` that listen for the event\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to listen for\n\n"}},{"label":"ListenerObject::removeEventListener","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::removeEventListener(ListenerObject this, ListenerObject listener, EventListener callback, uint16 eventCode)","documentation":{"kind":"markdown","value":"Remove a specific listener object from the listening to a give code with the provided callback.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` to remove from the list of listeners\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n"}},{"label":"ListenerObject::removeEventListeners","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::removeEventListeners(ListenerObject this, EventListener callback, uint16 eventCode)","documentation":{"kind":"markdown","value":"Remove all listener objects for a specific callback and code from the listeners.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `callback`\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n"}},{"label":"ListenerObject::removeEventListenerScopes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::removeEventListenerScopes(ListenerObject this, ListenerObject listener, uint16 eventCode)","documentation":{"kind":"markdown","value":"Remove a specific listener object from the listeners.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `listener`: `ListenerObject` to remove from the list of listeners\n\n_@param_ `eventCode`: `Event`'s code to stop listen for\n\n"}},{"label":"ListenerObject::removeAllEventListeners","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::removeAllEventListeners(ListenerObject this)","documentation":{"kind":"markdown","value":"Remove all listener objects.\n\n_@param_ `this`: ListenerObject instance\n\n"}},{"label":"ListenerObject::hasActiveEventListeners","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ListenerObject::hasActiveEventListeners(ListenerObject this)","documentation":{"kind":"markdown","value":"Check if the object has active event listeners.\n\n_@param_ `this`: ListenerObject instance\n\n_@return_ `bool` True if the object's list of event listeners is not empty\n\n"}},{"label":"ListenerObject::fireEvent","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::fireEvent(ListenerObject this, uint16 eventCode)","documentation":{"kind":"markdown","value":"Fire an event with the provided code\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `eventCode`: Code of the event to fire\n\n"}},{"label":"ListenerObject::sendMessageTo","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::sendMessageTo(ListenerObject this, ListenerObject receiver, uint32 message, uint32 delay, uint32 randomDelay)","documentation":{"kind":"markdown","value":"Send a message to another object.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `receiver`: `ListenerObject` that is the target of the message\n\n_@param_ `message`: The message's code\n\n_@param_ `delay`: Milliseconds to wait before sending the message\n\n_@param_ `randomDelay`: Range of a random delay in milliseconds to wait before sending the message\n\n"}},{"label":"ListenerObject::sendMessageToSelf","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::sendMessageToSelf(ListenerObject this, uint32 message, uint32 delay, uint32 randomDelay)","documentation":{"kind":"markdown","value":"Send a message to itself.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `message`: The message's code\n\n_@param_ `delay`: Milliseconds to wait before sending the message\n\n_@param_ `randomDelay`: Range of a random delay in milliseconds to wait before sending the message\n\n"}},{"label":"ListenerObject::discardAllMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::discardAllMessages(ListenerObject this)","documentation":{"kind":"markdown","value":"Discard all messages, both to be sent and to be received.\n\n_@param_ `this`: ListenerObject instance\n\n"}},{"label":"ListenerObject::discardMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ListenerObject::discardMessages(ListenerObject this, uint32 message)","documentation":{"kind":"markdown","value":"Discard all messages with a specific code, both to be sent and to be received.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `message`: The message's code to discard\n\n"}},{"label":"ListenerObject::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ListenerObject::handleMessage(ListenerObject this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: ListenerObject instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"MBgmapAnimatedSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) MBgmapAnimatedSprite","documentation":{"kind":"markdown","value":"Class `FrameBlendBgmapSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose texture is allocated in BGMAP space."}},{"label":"MBgmapAnimatedSprite::updateAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MBgmapAnimatedSprite::updateAnimation(MBgmapAnimatedSprite this)","documentation":{"kind":"markdown","value":"Update the animation.\n\n_@param_ `this`: MBgmapAnimatedSprite instance\n\n"}},{"label":"MBgmapAnimatedSprite::setMultiframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MBgmapAnimatedSprite::setMultiframe(MBgmapAnimatedSprite this, uint16 frame)","documentation":{"kind":"markdown","value":"Set the current multiframe.\n\n_@param_ `this`: MBgmapAnimatedSprite instance\n\n_@param_ `frame`: Current animation frame\n\n"}},{"label":"MBgmapSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) MBgmapSprite","documentation":{"kind":"markdown","value":"Class `MBgmapSprite`\n\nInherits from `MBgmapSprite`\n\nCan display various textures across multiple BGMAP memory segments."}},{"label":"MBgmapSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 MBgmapSprite::doRender(MBgmapSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: MBgmapSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"Math","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Math","documentation":{"kind":"markdown","value":"Class `Math`\n\nInherits from `Object`\n\nImplements miscelaneous mathematical functions."}},{"label":"Math::abs","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::abs(Math this, int32 number)","documentation":{"kind":"markdown","value":"Compute the absolute value of number.\n\n_@param_ `this`: Math instance\n\n_@param_ `number`: Input number to compute the absolute value of\n\n_@return_ `static` Absolute value of the provided number\n\n"}},{"label":"Math::floor","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static float Math::floor(Math this, float number)","documentation":{"kind":"markdown","value":"Round down the provided number.\n\n_@param_ `this`: Math instance\n\n_@param_ `number`: Input number to round down\n\n_@return_ `static` Integral part of the provided number\n\n"}},{"label":"Math::min","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::min(Math this, int32 a, int32 b)","documentation":{"kind":"markdown","value":"Return the minimum number between two numbers.\n\n_@param_ `this`: Math instance\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` Minimum number between those provided\n\n"}},{"label":"Math::max","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::max(Math this, int32 a, int32 b)","documentation":{"kind":"markdown","value":"Return the maximum number between two numbers.\n\n_@param_ `this`: Math instance\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` Maximum number between those provided\n\n"}},{"label":"Math::squareRoot","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static float Math::squareRoot(Math this, float radicand)","documentation":{"kind":"markdown","value":"Compute the square root of the provided number (alrogithm takem from the DOOM's engine).\n\n_@param_ `this`: Math instance\n\n_@param_ `radicand`: Number to compute the square root of\n\n_@return_ `static` The square root of the provided number\n\n"}},{"label":"Math::squareRootFixed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t Math::squareRootFixed(Math this, fixed_ext_t radicand)","documentation":{"kind":"markdown","value":"Compute the square root of the provided number (alrogithm takem from the DOOM's engine).\n\n_@param_ `this`: Math instance\n\n_@param_ `radicand`: Number to compute the square root of\n\n_@return_ `static` The square root of the provided number\n\n"}},{"label":"Math::randomSeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static uint32 Math::randomSeed(Math this)","documentation":{"kind":"markdown","value":"Retrieve a random seed (algorithm taken from ).\n\n_@param_ `this`: Math instance\n\n_@return_ `static` Random seed\n\n"}},{"label":"Math::random","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::random(Math this, uint32 seed, int32 range)","documentation":{"kind":"markdown","value":"Compute a pseudo random number from the seed in the provided range.\n\n_@param_ `this`: Math instance\n\n_@param_ `seed`: Random seed\n\n_@param_ `range`: Range for the generated pseudo random number\n\n_@return_ `static` The square root of the provided number\n\n"}},{"label":"Math::haveEqualSign","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::haveEqualSign(Math this, int32 a, int32 b)","documentation":{"kind":"markdown","value":"Check if the provided numbers have equal sign.\n\n_@param_ `this`: Math instance\n\n_@param_ `a`: First number\n\n_@param_ `b`: Second number\n\n_@return_ `static` True if the provided numbers have equal sign; false otherwise\n\n"}},{"label":"Math::getDigitsCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::getDigitsCount(Math this, int32 number)","documentation":{"kind":"markdown","value":"Compute the number of digits that the provided number has.\n\n_@param_ `this`: Math instance\n\n_@param_ `number`: Number to compute the digits of\n\n_@return_ `static` Number of digits of the provided number\n\n"}},{"label":"Math::resetRandomSeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Math::resetRandomSeed(Math this)","documentation":{"kind":"markdown","value":"Reset the internal random seed.\n\n_@param_ `this`: Math instance\n\n"}},{"label":"Math::intInfinity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::intInfinity(Math this)","documentation":{"kind":"markdown","value":"Retrieve the maximum number for the int32 data type.\n\n_@param_ `this`: Math instance\n\n_@return_ `static` Maximum positive value for the int32 data type\n\n"}},{"label":"Math::fixedInfinity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t Math::fixedInfinity(Math this)","documentation":{"kind":"markdown","value":"Retrieve the maximum number for the fixed_t data type.\n\n_@param_ `this`: Math instance\n\n_@return_ `static` Maximum positive value for the fixed_t data type\n\n"}},{"label":"Math::fixed_extInfinity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_ext_t Math::fixed_extInfinity(Math this)","documentation":{"kind":"markdown","value":"Retrieve the maximum number for the fixed_ext_t data type.\n\n_@param_ `this`: Math instance\n\n_@return_ `static` Maximum positive value for the fixed_ext_t data type\n\n"}},{"label":"Math::aSin","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::aSin(Math this, fix7_9 sin)","documentation":{"kind":"markdown","value":"Compute the arc sin of the provided sin.\n\n_@param_ `this`: Math instance\n\n_@param_ `sin`: sin value\n\n_@return_ `static` Arcsin of the provided sin value\n\n"}},{"label":"Math::getAngle","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::getAngle(Math this, fix7_9 x, fix7_9 y)","documentation":{"kind":"markdown","value":"Compute the angle between (0, 0) and (x, y).\n\n_@param_ `this`: Math instance\n\n_@param_ `x`: X coordinate\n\n_@param_ `y`: Y coordinate\n\n_@return_ `static` Angle in degrees (0-512)\n\n"}},{"label":"Math::power","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::power(Math this, int32 base, int32 power)","documentation":{"kind":"markdown","value":"Compute the power for the provided base.\n\n_@param_ `this`: Math instance\n\n_@param_ `base`: Base\n\n_@param_ `power`: Power\n\n_@return_ `static` Base elevated to the provided power\n\n"}},{"label":"Math::powerFast","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int32 Math::powerFast(Math this, int32 base, int32 power)","documentation":{"kind":"markdown","value":"Compute the power for the provided base.\n\n_@param_ `this`: Math instance\n\n_@param_ `base`: Base\n\n_@param_ `power`: Power\n\n_@return_ `static` Base elevated to the provided power\n\n"}},{"label":"Mem","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Mem","documentation":{"kind":"markdown","value":"Class `Mem`\n\nInherits from `ListenerObject`\n\nPerforms some memory copy and related procedures."}},{"label":"Mem::copyBYTE","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::copyBYTE(Mem this, BYTE *destination, const BYTE *source, uint32 numberOfBYTES)","documentation":{"kind":"markdown","value":"Copy a block of BYTEs from the source memory address to the destination memory address\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to copy\n\n"}},{"label":"Mem::copyHWORD","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::copyHWORD(Mem this, HWORD *destination, const HWORD *source, uint32 numberOfHWORDS)","documentation":{"kind":"markdown","value":"Copy a block of HWORDs from the source memory address to the destination memory address\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfHWORDS`: Total number of HWORDs to copy\n\n"}},{"label":"Mem::copyWORD","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::copyWORD(Mem this, WORD *destination, const WORD *source, uint32 numberOfWORDS)","documentation":{"kind":"markdown","value":"Copy a block of WORDs from the source memory address to the destination memory address\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to copy\n\n"}},{"label":"Mem::combineBYTEs","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::combineBYTEs(Mem this, BYTE *destination, const BYTE *source1, const BYTE *source2, uint32 numberOfBYTES)","documentation":{"kind":"markdown","value":"Apply a bitwise OR operation to the specified number of BYTEs from the provided source addresses and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to combine\n\n"}},{"label":"Mem::combineHWORDs","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::combineHWORDs(Mem this, HWORD *destination, const HWORD *source1, const HWORD *source2, uint32 numberOfWORDS)","documentation":{"kind":"markdown","value":"Apply a bitwise OR operation to the specified number of HWORDs from the provided source addresses and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfWORDS`\n\n"}},{"label":"Mem::combineWORDs","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::combineWORDs(Mem this, WORD *destination, const WORD *source1, const WORD *source2, uint32 numberOfWORDS)","documentation":{"kind":"markdown","value":"Apply a bitwise OR operation to the specified number of WORDs from the provided source addresses and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source1`: Starting first source address\n\n_@param_ `source2`: Starting second source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to combine\n\n"}},{"label":"Mem::addOffsetToBYTE","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::addOffsetToBYTE(Mem this, BYTE *destination, const BYTE *source, uint32 numberOfBYTES, uint32 offset)","documentation":{"kind":"markdown","value":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfBYTES`: Total number of BYTEs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n"}},{"label":"Mem::addOffsetToHWORD","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::addOffsetToHWORD(Mem this, HWORD *destination, const HWORD *source, uint32 numberOfHWORDS, uint32 offset)","documentation":{"kind":"markdown","value":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfHWORDS`: Total number of HWORDs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n"}},{"label":"Mem::addOffsetToWORD","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::addOffsetToWORD(Mem this, WORD *destination, const WORD *source, uint32 numberOfWORDS, uint32 offset)","documentation":{"kind":"markdown","value":"Add the provided offset to the data from the provided memory source and place the results in the destination address onwards\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting destination address\n\n_@param_ `source`: Starting source address\n\n_@param_ `numberOfWORDS`: Total number of WORDs to combine\n\n_@param_ `offset`: Value to add to the data in the source address\n\n"}},{"label":"Mem::clear","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Mem::clear(Mem this, BYTE *destination, uint32 numberOfBYTES)","documentation":{"kind":"markdown","value":"Write a determined number of zeros from the specified memory address onwards. \nIt doesn't need to be inlined since it is not used in performance critical places and it produces graphical glitches when inlined.\n\n_@param_ `this`: Mem instance\n\n_@param_ `destination`: Starting address\n\n_@param_ `numberOfBYTES`: Total number of zeros to write\n\n"}},{"label":"MemoryPool","labelDetails":{"description":"core"},"kind":7,"detail":"(class) MemoryPool","documentation":{"kind":"markdown","value":"Class `MemoryPool`\n\nInherits from `Object`\n\nImplements a memory pool for dynamic object allocation."}},{"label":"MemoryPool::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static MemoryPool MemoryPool::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `MemoryPool` singleton\n\n"}},{"label":"MemoryPool::allocate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static BYTE * MemoryPool::allocate(MemoryPool this, int32 numBytes)","documentation":{"kind":"markdown","value":"Allocate a block big enough to hold the provided amount of bytes.\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `numBytes`: Total number of bytes to allocate\n\n_@return_ `static` A pointer to the allocated block\n\n"}},{"label":"MemoryPool::free","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void MemoryPool::free(MemoryPool this, BYTE *object)","documentation":{"kind":"markdown","value":"Free the memory block in which the provided object was allocated.\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `object`: Pointer to the memory block to free\n\n"}},{"label":"MemoryPool::printResumedUsage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MemoryPool::printResumedUsage(MemoryPool this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print a resume of the memory usage.\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"MemoryPool::printDetailedUsage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MemoryPool::printDetailedUsage(MemoryPool this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print all the details of the memory usage.\n\n_@param_ `this`: MemoryPool instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Mesh","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Mesh","documentation":{"kind":"markdown","value":"Class `Mesh`\n\nInherits from `Wireframe`\n\nDraws the segments that compose the mesh."}},{"label":"Mesh::getPixelRightBox","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PixelRightBox Mesh::getPixelRightBox(Mesh this)","documentation":{"kind":"markdown","value":"Retrieve the mesh's bounding box in pixel units.\n\n_@param_ `this`: Mesh instance\n\n_@return_ `PixelRightBox` Bounding box of the mesh\n\n"}},{"label":"Mesh::getVertices","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Mesh::getVertices(Mesh this)","documentation":{"kind":"markdown","value":"Retrieve the list of vertices that compose the mesh.\n\n_@param_ `this`: Mesh instance\n\n_@return_ `VirtualList` Linked list of vertices\n\n"}},{"label":"Mesh::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Mesh::render(Mesh this, Vector3D relativePosition)","documentation":{"kind":"markdown","value":"Prepare the wireframe for drawing.\n\n_@param_ `this`: Mesh instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n"}},{"label":"Mesh::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Mesh::draw(Mesh this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers.\n\n_@param_ `this`: Mesh instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"Mesh::addSegments","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Mesh::addSegments(Mesh this, PixelVector(*segments)[2], Vector3D displacement)","documentation":{"kind":"markdown","value":"Create new segments from the provided array.\n\n_@param_ `this`: Mesh instance\n\n_@param_ `segments`: Array of segments holding their spatial data @displacement: Displacement to add to the segments' vertices\n\n_@param_ `displacement`\n\n"}},{"label":"Mesh::addSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Mesh::addSegment(Mesh this, Vector3D startVector, Vector3D endVector)","documentation":{"kind":"markdown","value":"Create a new segment from provided vectors.\n\n_@param_ `this`: Mesh instance\n\n_@param_ `startVector`: New segment's starting point\n\n_@param_ `endVector`: New segment's end point\n\n"}},{"label":"Mesh::drawInterlaced","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Mesh::drawInterlaced(Mesh this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers in interlaced mode.\n\n_@param_ `this`: Mesh instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"MessageDispatcher","labelDetails":{"description":"core"},"kind":7,"detail":"(class) MessageDispatcher","documentation":{"kind":"markdown","value":"Class `MessageDispatcher`\n\nInherits from `Object`\n\nImplements a dispatcher central of message codes wrapped in a `Telegram`."}},{"label":"MessageDispatcher::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static MessageDispatcher MessageDispatcher::getInstance()","documentation":{"kind":"markdown","value":"\n\n"}},{"label":"MessageDispatcher::dispatchMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool MessageDispatcher::dispatchMessage(MessageDispatcher this, uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","documentation":{"kind":"markdown","value":"Dispatch a message\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `delay`: Milliseconds to wait before dispatching the message\n\n_@param_ `sender`: `Object` that sends the message\n\n_@param_ `receiver`: `Object` that receives the message\n\n_@param_ `message`: Message's code\n\n_@param_ `extraInfo`: Pointer to any extra data that must accompany the message\n\n_@return_ `static` Boolean indicating the status of the processing of the message if immediately dispatched\n\n"}},{"label":"MessageDispatcher::dispatchDelayedMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MessageDispatcher::dispatchDelayedMessage(MessageDispatcher this, Clock clock, uint32 delay, ListenerObject sender, ListenerObject receiver, int32 message, void *extraInfo)","documentation":{"kind":"markdown","value":"Dispatch delayed message\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `clock`\n\n_@param_ `delay`: Milliseconds to wait before dispatching the message\n\n_@param_ `sender`: `Object` that sends the message\n\n_@param_ `receiver`: `Object` that receives the message\n\n_@param_ `message`: Message's code\n\n_@param_ `extraInfo`: Pointer to any extra data that must accompany the message\n\n"}},{"label":"MessageDispatcher::dispatchDelayedMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::dispatchDelayedMessages(MessageDispatcher this)","documentation":{"kind":"markdown","value":"Dispatch the delayed messages whose delay has expired.\n\n_@param_ `this`: MessageDispatcher instance\n\n"}},{"label":"MessageDispatcher::processDiscardedMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MessageDispatcher::processDiscardedMessages(MessageDispatcher this)","documentation":{"kind":"markdown","value":"Force the destruction of discarded messages.\n\n_@param_ `this`: MessageDispatcher instance\n\n"}},{"label":"MessageDispatcher::discardDelayedMessagesWithClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardDelayedMessagesWithClock(MessageDispatcher this, Clock clock)","documentation":{"kind":"markdown","value":"Discarde delayed messages associated to the given clock.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `clock`: `Clock` to search in delayed messages to discard\n\n_@return_ `bool` True if any messages is discarded\n\n"}},{"label":"MessageDispatcher::discardDelayedMessagesFromSender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender, int32 message)","documentation":{"kind":"markdown","value":"Discard delayed messages sent by an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that originally sent the message\n\n_@param_ `message`: Message's code\n\n_@return_ `bool` True if any messages is discarded\n\n"}},{"label":"MessageDispatcher::discardDelayedMessagesForReceiver","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardDelayedMessagesForReceiver(MessageDispatcher this, ListenerObject receiver, int32 message)","documentation":{"kind":"markdown","value":"Discard delayed messages sent to an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `receiver`: `Object` that was the target of the message\n\n_@param_ `message`: Message's code\n\n_@return_ `bool` True if any messages is discarded\n\n"}},{"label":"MessageDispatcher::discardAllDelayedMessagesFromSender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardAllDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender)","documentation":{"kind":"markdown","value":"Discard all delayed messages sent by an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that was the target of the message\n\n_@return_ `bool` True if any messages is discarded\n\n"}},{"label":"MessageDispatcher::discardAllDelayedMessagesForReceiver","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardAllDelayedMessagesForReceiver(MessageDispatcher this, ListenerObject receiver)","documentation":{"kind":"markdown","value":"Discard all delayed messages sent to an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `receiver`: `Object` that was the target of the message\n\n_@return_ `bool` True if any messages is discarded\n\n"}},{"label":"MessageDispatcher::discardAllDelayedMessages","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool MessageDispatcher::discardAllDelayedMessages(MessageDispatcher this, ListenerObject listenerObject)","documentation":{"kind":"markdown","value":"Discard all delayed messages sent to an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `listenerObject`: `Object` that the messages were originally sent to or sent by\n\n"}},{"label":"MessageDispatcher::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MessageDispatcher::print(MessageDispatcher this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print all delayed messages sent by an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"MessageDispatcher::printAllDelayedMessagesFromSender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void MessageDispatcher::printAllDelayedMessagesFromSender(MessageDispatcher this, ListenerObject sender, int16 x, int16 y)","documentation":{"kind":"markdown","value":"Print all delayed messages sent by an object.\n\n_@param_ `this`: MessageDispatcher instance\n\n_@param_ `sender`: `Object` that originally sent the message\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Object","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Object","documentation":{"kind":"markdown","value":"Class `Object`\n\nInherits from `Object`\n\nServes as the base class for all other classes in the engine."}},{"label":"Object::getCast","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Object Object::getCast(Object this, void *object, ClassPointer targetClassGetClassMethod, ClassPointer baseClassGetClassMethod)","documentation":{"kind":"markdown","value":"Cast an object at runtime to a give class.\n\n_@param_ `this`: Object instance\n\n_@param_ `object`: `Object` to cast\n\n_@param_ `targetClassGetClassMethod`: pointer to the target class' identifier method\n\n_@param_ `baseClassGetClassMethod`: pointer to the object's base class' identifier method\n\n_@return_ `static` Pointer to the object if the cast succeeds, NULL otherwhise.\n\n"}},{"label":"Object::getVTable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const void * Object::getVTable(Object this)","documentation":{"kind":"markdown","value":"Retrieve the object's virtual table pointer\n\n_@param_ `this`: Object instance\n\n_@return_ `const` Pointer to the object's virtual table pointer\n\n"}},{"label":"Object::evolveTo","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Object::evolveTo(Object this, const void *targetClass)","documentation":{"kind":"markdown","value":"Converts the object into an instance of the target class if object's class is in the hierarchy of the target class.\n\n_@param_ `this`: Object instance\n\n_@param_ `targetClass`: pointer to the target class' virtual table\n\n_@return_ `bool` True if successful\n\n"}},{"label":"ObjectAnimatedSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ObjectAnimatedSprite","documentation":{"kind":"markdown","value":"Class `BgmapAnimatedSprite`\n\nInherits from `BgmapSprite`\n\nAnimates a sprite whose graphics are allocated in OBJECT space."}},{"label":"ObjectAnimatedSprite::updateAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectAnimatedSprite::updateAnimation(ObjectAnimatedSprite this)","documentation":{"kind":"markdown","value":"Update the animation.\n\n_@param_ `this`: ObjectAnimatedSprite instance\n\n"}},{"label":"ObjectSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ObjectSprite","documentation":{"kind":"markdown","value":"Class `ObjectSprite`\n\nInherits from `Sprite`\n\nDisplays a texture in OBJECT space."}},{"label":"ObjectSprite::registerWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSprite::registerWithManager(ObjectSprite this)","documentation":{"kind":"markdown","value":"Register this sprite with the appropriate sprites manager.\n\n_@param_ `this`: ObjectSprite instance\n\n"}},{"label":"ObjectSprite::unregisterWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSprite::unregisterWithManager(ObjectSprite this)","documentation":{"kind":"markdown","value":"Unegister this sprite with the appropriate sprites manager.\n\n_@param_ `this`: ObjectSprite instance\n\n"}},{"label":"ObjectSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 ObjectSprite::doRender(ObjectSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: ObjectSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"ObjectSprite::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSprite::setRotation(ObjectSprite this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the sprite's rotation.\n\n_@param_ `this`: ObjectSprite instance\n\n_@param_ `rotation`: `Rotation` to apply to the sprite\n\n"}},{"label":"ObjectSprite::getTotalPixels","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 ObjectSprite::getTotalPixels(ObjectSprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's total number of pixels actually displayed.\n\n_@param_ `this`: ObjectSprite instance\n\n_@return_ `int32` `Sprite`'s total number of pixels actually displayed\n\n"}},{"label":"ObjectSprite::resetTotalObjects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSprite::resetTotalObjects(ObjectSprite this)","documentation":{"kind":"markdown","value":"Force the computation of the number of OBJECTs that the sprite uses.\n\n_@param_ `this`: ObjectSprite instance\n\n"}},{"label":"ObjectSprite::getTotalObjects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 ObjectSprite::getTotalObjects(ObjectSprite this)","documentation":{"kind":"markdown","value":"Retrieve the number of OBJECTs that the sprite uses.\n\n_@param_ `this`: ObjectSprite instance\n\n_@return_ `int16` Number of OBJECTs that the sprite uses\n\n"}},{"label":"ObjectSpriteContainer","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ObjectSpriteContainer","documentation":{"kind":"markdown","value":"Class `ObjectSpriteContainer`\n\nInherits from `Sprite`\n\nManages ObjectSprites that are displayed in the same SPT."}},{"label":"ObjectSpriteContainer::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void ObjectSpriteContainer::reset(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Reset the state of the class's attributes.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::prepareForRendering","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void ObjectSpriteContainer::prepareForRendering(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Prepare the class' global state for rendering.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::finishRendering","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void ObjectSpriteContainer::finishRendering(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Finish rendering.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::writeDRAM","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void ObjectSpriteContainer::writeDRAM(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Write cached OBJECT settings to DRAM.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::registerWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::registerWithManager(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Register this sprite with the appropriate sprites manager.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::unregisterWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::unregisterWithManager(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Unegister this sprite with the appropriate sprites manager.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 ObjectSpriteContainer::doRender(ObjectSpriteContainer this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"ObjectSpriteContainer::getTotalPixels","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 ObjectSpriteContainer::getTotalPixels(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Retrieve the total number of pixels actually displayed by all the managed sprites.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@return_ `int32` Total number of pixels displayed by all the managed sprites\n\n"}},{"label":"ObjectSpriteContainer::invalidateRendering","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::invalidateRendering(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Invalidate the render flag.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::forceShow","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::forceShow(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Forcefully show the sprites.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::forceHide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::forceHide(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Forcefully hide the sprites.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n"}},{"label":"ObjectSpriteContainer::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::print(ObjectSpriteContainer this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the container's statistics.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"ObjectSpriteContainer::registerSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ObjectSpriteContainer::registerSprite(ObjectSpriteContainer this, ObjectSprite objectSprite)","documentation":{"kind":"markdown","value":"Register a sprite to be managed\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `objectSprite`: `Sprite` to be managed\n\n_@return_ `bool` True if the sprite was successfully registered; false otherwise\n\n"}},{"label":"ObjectSpriteContainer::unregisterSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::unregisterSprite(ObjectSpriteContainer this, ObjectSprite objectSprite)","documentation":{"kind":"markdown","value":"Unregister a sprite to be managed\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `objectSprite`: `Sprite` to no longer manage\n\n"}},{"label":"ObjectSpriteContainer::sortProgressively","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ObjectSpriteContainer::sortProgressively(ObjectSpriteContainer this, bool complete)","documentation":{"kind":"markdown","value":"Z sort over time the managed sprites.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `complete`: Flag to indicate if the sorting must be complete or deferred\n\n_@return_ `bool` True if some sprites was moved to another position in the list\n\n"}},{"label":"ObjectSpriteContainer::renderSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::renderSprites(ObjectSpriteContainer this, bool evenFrame, bool updateAnimations)","documentation":{"kind":"markdown","value":"Render the managed sprites\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `evenFrame`: Flag to control transparency effects\n\n_@param_ `updateAnimations`: Flag to allow or prevent animations to be updated\n\n"}},{"label":"ObjectSpriteContainer::showSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::showSprites(ObjectSpriteContainer this, ObjectSprite spareSprite)","documentation":{"kind":"markdown","value":"Show all sprites except the provided one.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `spareSprite`: `Sprite` to not show\n\n"}},{"label":"ObjectSpriteContainer::hideSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectSpriteContainer::hideSprites(ObjectSpriteContainer this, ObjectSprite spareSprite)","documentation":{"kind":"markdown","value":"Hide all sprites except the provided one.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@param_ `spareSprite`: `Sprite` to not hide\n\n"}},{"label":"ObjectSpriteContainer::getTotalUsedObjects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 ObjectSpriteContainer::getTotalUsedObjects(ObjectSpriteContainer this)","documentation":{"kind":"markdown","value":"Retrieve the total number of OBJECTs used by all the managed sprites.\n\n_@param_ `this`: ObjectSpriteContainer instance\n\n_@return_ `int32` Total number of OBJECTs used by all the managed sprites\n\n"}},{"label":"ObjectTexture","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ObjectTexture","documentation":{"kind":"markdown","value":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nA texture allocated in OBJECT memory."}},{"label":"ObjectTextureManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ObjectTextureManager","documentation":{"kind":"markdown","value":"Class `BgmapTextureManager`\n\nInherits from `Texture`\n\nManages textures for OBJECT space."}},{"label":"ObjectTextureManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static ObjectTextureManager ObjectTextureManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `ObjectTextureManager` singleton\n\n"}},{"label":"ObjectTextureManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectTextureManager::reset(ObjectTextureManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: ObjectTextureManager instance\n\n"}},{"label":"ObjectTextureManager::getTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) ObjectTexture ObjectTextureManager::getTexture(ObjectTextureManager this, ObjectTextureSpec *objectTextureSpec)","documentation":{"kind":"markdown","value":"Retrieve a texture initialized with the provided spec.\n\n_@param_ `this`: ObjectTextureManager instance\n\n_@param_ `objectTextureSpec`: Spec to use to initilize the desired texture\n\n_@return_ `ObjectTexture` `Texture` initialized with the provided spec\n\n"}},{"label":"ObjectTextureManager::releaseTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ObjectTextureManager::releaseTexture(ObjectTextureManager this, ObjectTexture objectTexture)","documentation":{"kind":"markdown","value":"Release a texture.\n\n_@param_ `this`: ObjectTextureManager instance\n\n_@param_ `objectTexture`: `Texture` to release\n\n"}},{"label":"Optical","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Optical","documentation":{"kind":"markdown","value":"Class `Optical`\n\nInherits from `Object`\n\nComputes the values that determine the results from 3D to 2D projection."}},{"label":"Optical::getFromPixelOptical","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Optical Optical::getFromPixelOptical(Optical this, PixelOptical pixelOptical, CameraFrustum cameraFrustum)","documentation":{"kind":"markdown","value":"Converts the provided optical parameters in pixel units to optical values in meters.\n\n_@param_ `this`: Optical instance\n\n_@param_ `pixelOptical`: Struct that holds optical parameters in pixel units\n\n_@param_ `cameraFrustum`: `Camera`'s frustum configuration parameters\n\n_@return_ `static` `Optical` configuration parameters in meters\n\n"}},{"label":"Optical::applyCameraFrustum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Optical Optical::applyCameraFrustum(Optical this, Optical optical, CameraFrustum cameraFrustum)","documentation":{"kind":"markdown","value":"Applies the provided camera frustum configuration to the provided optical configuration parameters.\n\n_@param_ `this`: Optical instance\n\n_@param_ `optical`: Struct that holds optical parameters in meters\n\n_@param_ `cameraFrustum`: `Camera`'s frustum configuration parameters\n\n_@return_ `static` `Optical` configuration parameters in meters\n\n"}},{"label":"Optics","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Optics","documentation":{"kind":"markdown","value":"Class `Optics`\n\nInherits from `Object`\n\nComputes parallax."}},{"label":"Optics::calculateParallax","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static int16 Optics::calculateParallax(Optics this, fixed_t z)","documentation":{"kind":"markdown","value":"Calculate parallax based on the z coordinate.\n\n_@param_ `this`: Optics instance\n\n_@param_ `z`: 3D coordinate\n\n_@return_ `static` Parallax value (in pixels)\n\n"}},{"label":"OptionsSelector","labelDetails":{"description":"core"},"kind":7,"detail":"(class) OptionsSelector","documentation":{"kind":"markdown","value":"Class `Sprite`\n\nInherits from `VisualComponent`\n\nImplements a simple interactive menu."}},{"label":"OptionsSelector::setColumnWidth","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::setColumnWidth(OptionsSelector this, uint8 width)","documentation":{"kind":"markdown","value":"Set the maximum with of each column.\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `width`: Columns' with\n\n"}},{"label":"OptionsSelector::setMarkCharacters","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::setMarkCharacters(OptionsSelector this, char *leftMark, char *rightMark)","documentation":{"kind":"markdown","value":"Set the markers characters.\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `leftMark`: Left selection mark character\n\n_@param_ `rightMark`: Right selection mark character\n\n"}},{"label":"OptionsSelector::setOptions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::setOptions(OptionsSelector this, VirtualList options)","documentation":{"kind":"markdown","value":"Set the available options.\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `options`: List of options to set\n\n"}},{"label":"OptionsSelector::setSelectedOption","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool OptionsSelector::setSelectedOption(OptionsSelector this, int32 optionIndex)","documentation":{"kind":"markdown","value":"Set the selection option.\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `optionIndex`: Index of the option to select\n\n"}},{"label":"OptionsSelector::selectNext","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::selectNext(OptionsSelector this)","documentation":{"kind":"markdown","value":"Select the next option.\n\n_@param_ `this`: OptionsSelector instance\n\n"}},{"label":"OptionsSelector::selectPrevious","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::selectPrevious(OptionsSelector this)","documentation":{"kind":"markdown","value":"Select the previous option.\n\n_@param_ `this`: OptionsSelector instance\n\n"}},{"label":"OptionsSelector::getSelectedOption","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 OptionsSelector::getSelectedOption(OptionsSelector this)","documentation":{"kind":"markdown","value":"Retrieve the selected option's index.\n\n_@param_ `this`: OptionsSelector instance\n\n_@return_ `int32` Index of the selected option\n\n"}},{"label":"OptionsSelector::getNumberOfOptions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 OptionsSelector::getNumberOfOptions(OptionsSelector this)","documentation":{"kind":"markdown","value":"Retrieve the total number of options.\n\n_@param_ `this`: OptionsSelector instance\n\n_@return_ `int32` The total number of options\n\n"}},{"label":"OptionsSelector::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void OptionsSelector::print(OptionsSelector this, uint8 x, uint8 y, uint32 alignment, uint8 spacing)","documentation":{"kind":"markdown","value":"Print the options.\n\n_@param_ `this`: OptionsSelector instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `alignment`: Text alignment\n\n_@param_ `spacing`: Text spacing\n\n"}},{"label":"ParamTableManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ParamTableManager","documentation":{"kind":"markdown","value":"Class `ParamTableManager`\n\nInherits from `Object`\n\nManages param table space allocating and releasing blocks in it."}},{"label":"ParamTableManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static ParamTableManager ParamTableManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `AnimationCoordinatorFactory` singleton\n\n"}},{"label":"ParamTableManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParamTableManager::reset(ParamTableManager this)","documentation":{"kind":"markdown","value":"Reset the animation coordinator factory's state.\n\n_@param_ `this`: ParamTableManager instance\n\n"}},{"label":"ParamTableManager::setup","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParamTableManager::setup(ParamTableManager this, int32 availableBgmapSegmentsForParamTable)","documentation":{"kind":"markdown","value":"Configure the param table space\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `availableBgmapSegmentsForParamTable`: Number of available BGMAP segments for the param tables\n\n"}},{"label":"ParamTableManager::allocate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 ParamTableManager::allocate(ParamTableManager this, BgmapSprite bgmapSprite)","documentation":{"kind":"markdown","value":"Allocate a param table for the provided sprite\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `bgmapSprite`: `Sprite` for which a param table will be allocated\n\n"}},{"label":"ParamTableManager::free","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParamTableManager::free(ParamTableManager this, BgmapSprite bgmapSprite)","documentation":{"kind":"markdown","value":"Free the param table allocated for the provided sprite.\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `bgmapSprite`: `Sprite` whose param table has to be freed\n\n"}},{"label":"ParamTableManager::defragment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParamTableManager::defragment(ParamTableManager this, bool deferred)","documentation":{"kind":"markdown","value":"Defragment param table space.\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `deferred`: Flag to defragment param table memory over time\n\n"}},{"label":"ParamTableManager::getParamTableBase","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 ParamTableManager::getParamTableBase(ParamTableManager this)","documentation":{"kind":"markdown","value":"Retrieve the param table displacement in bytes used to keep track of the start address of param table space.\n\n_@param_ `this`: ParamTableManager instance\n\n_@return_ `uint32` Displacement in bytes to keep track of the start address of param table space\n\n"}},{"label":"ParamTableManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParamTableManager::print(ParamTableManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the information about param table space usage.\n\n_@param_ `this`: ParamTableManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Particle","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Particle","documentation":{"kind":"markdown","value":"Class `Particle`\n\nInherits from `SpatialObject`\n\nImplements a particle that is spawned by particle systems."}},{"label":"Particle::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Particle::isSubjectToGravity(Particle this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the particle is subject to gravity.\n\n_@param_ `this`: Particle instance\n\n_@param_ `gravity`: Gravity vector\n\n_@return_ `bool` True if gravity can affect the particle; false otherwise\n\n"}},{"label":"Particle::setup","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::setup(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, int16 lifeSpan, const Vector3D *position, const Vector3D *force, uint32 movementType, const AnimationFunction **animationFunctions, const char *animationName)","documentation":{"kind":"markdown","value":"Configure the particle with the provided arguments.\n\n_@param_ `this`: Particle instance\n\n_@param_ `spriteSpec`: Specification for a sprite to add to the particle\n\n_@param_ `wireframeSpec`: Specification for a wireframe to add to the particle\n\n_@param_ `lifeSpan`: Time that the particle must live\n\n_@param_ `position`: Starting position\n\n_@param_ `force`: Force to apply\n\n_@param_ `movementType`: Movement type on each axis\n\n_@param_ `animationFunctions`: Array of animations\n\n_@param_ `animationName`: Animation to play\n\n"}},{"label":"Particle::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::resume(Particle this, const SpriteSpec *spriteSpec, const WireframeSpec *wireframeSpec, const AnimationFunction **animationFunctions, const char *animationName)","documentation":{"kind":"markdown","value":"Configure the particle with the provided arguments after unpausing the game.\n\n_@param_ `this`: Particle instance\n\n_@param_ `spriteSpec`: Specification for a sprite to add to the particle\n\n_@param_ `wireframeSpec`: Specification for a wireframe to add to the particle\n\n_@param_ `animationFunctions`: Array of animations\n\n_@param_ `animationName`: Animation to play\n\n"}},{"label":"Particle::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::suspend(Particle this)","documentation":{"kind":"markdown","value":"Prepares the particle to become inactive in this state.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"Particle::expire","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::expire(Particle this)","documentation":{"kind":"markdown","value":"Force the particle to expire.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"Particle::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::show(Particle this)","documentation":{"kind":"markdown","value":"Make the particle's visual components visible.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"Particle::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::hide(Particle this)","documentation":{"kind":"markdown","value":"Make the particle's visual components invisible.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"Particle::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::setTransparency(Particle this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set the transparency mode of the visual components.\n\n_@param_ `this`: Particle instance\n\n_@param_ `transparency`\n\n"}},{"label":"Particle::isVisible","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Particle::isVisible(Particle this)","documentation":{"kind":"markdown","value":"Check if the visual components are visible.\n\n_@param_ `this`: Particle instance\n\n_@return_ `bool` True if the the particle's sprite or wireframe are visible; false otherwise\n\n"}},{"label":"Particle::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::reset(Particle this)","documentation":{"kind":"markdown","value":"Reset the particle's state.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"Particle::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Particle::update(Particle this, uint32 elapsedTime, void(*behavior)(Particle particle))","documentation":{"kind":"markdown","value":"Update the particle's state.\n\n_@param_ `this`: Particle instance\n\n_@param_ `elapsedTime`: Elapsed time since the last call\n\n_@param_ `behavior`: Function pointer to control particle's behavior\n\n"}},{"label":"Particle::applyForce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::applyForce(Particle this, const Vector3D *force, uint32 movementType)","documentation":{"kind":"markdown","value":"Apply a force to the particle.\n\n_@param_ `this`: Particle instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `movementType`: Movement type on each axis\n\n"}},{"label":"Particle::configureMass","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Particle::configureMass(Particle this)","documentation":{"kind":"markdown","value":"Configure the particle's mass.\n\n_@param_ `this`: Particle instance\n\n"}},{"label":"ParticleSystem","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ParticleSystem","documentation":{"kind":"markdown","value":"Class `ParticleSystem`\n\nInherits from `Entity`\n\nImplements an entity that generates particles."}},{"label":"ParticleSystem::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::show(ParticleSystem this)","documentation":{"kind":"markdown","value":"Make this instance visible.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::hide(ParticleSystem this)","documentation":{"kind":"markdown","value":"Make this instance invisible.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::update(ParticleSystem this)","documentation":{"kind":"markdown","value":"Update this instance's logic.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::suspend(ParticleSystem this)","documentation":{"kind":"markdown","value":"Prepare to suspend this instance's logic.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::resume(ParticleSystem this)","documentation":{"kind":"markdown","value":"Prepare to resume this instance's logic.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::setTransparency(ParticleSystem this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set this instance's transparency effects.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n"}},{"label":"ParticleSystem::setSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::setSpec(ParticleSystem this, void *particleSystemSpec)","documentation":{"kind":"markdown","value":"Set the particle systems's spec.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particleSystemSpec`: Specification that determines how to configure the particle system\n\n"}},{"label":"ParticleSystem::start","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::start(ParticleSystem this)","documentation":{"kind":"markdown","value":"Start spawning particles.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::pause(ParticleSystem this)","documentation":{"kind":"markdown","value":"\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::unpause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::unpause(ParticleSystem this)","documentation":{"kind":"markdown","value":"Resume the spawning of particles.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::isPaused","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ParticleSystem::isPaused(ParticleSystem this)","documentation":{"kind":"markdown","value":"Check if the spawning of particles is paused.\n\n_@param_ `this`: ParticleSystem instance\n\n_@return_ `bool` True if the spawning of particles is paused; false otherwise\n\n"}},{"label":"ParticleSystem::deleteAllParticles","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::deleteAllParticles(ParticleSystem this)","documentation":{"kind":"markdown","value":"Delete all spawned particles.\n\n_@param_ `this`: ParticleSystem instance\n\n"}},{"label":"ParticleSystem::setLoop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::setLoop(ParticleSystem this, bool loop)","documentation":{"kind":"markdown","value":"Set the looping behavior of the particle system.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `loop`: If false, the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles\n\n"}},{"label":"ParticleSystem::getLoop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ParticleSystem::getLoop(ParticleSystem this)","documentation":{"kind":"markdown","value":"Check the looping behavior of the particle system.\n\n_@param_ `this`: ParticleSystem instance\n\n_@return_ `bool` False if the spawning or particles stops once the total number of spawned particles equals the maximum number of alive particles\n\n"}},{"label":"ParticleSystem::setSelfDestroyWhenDone","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::setSelfDestroyWhenDone(ParticleSystem this, bool selfDestroyWhenDone)","documentation":{"kind":"markdown","value":"Set the particle system to auto destroy or not when the total number of spawned particles equals the maximum number of alive particles.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `selfDestroyWhenDone`: If true, the particle system auto destroys when the total number of spawned particles equals the maximum number of alive particles.\n\n"}},{"label":"ParticleSystem::setElapsedTime","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::setElapsedTime(ParticleSystem this, uint32 elapsedTime)","documentation":{"kind":"markdown","value":"Set the elapsed time between calls to the update method.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `elapsedTime`: Elapsed time between calls to the update method\n\n"}},{"label":"ParticleSystem::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::print(ParticleSystem this, int16 x, int16 y)","documentation":{"kind":"markdown","value":"Print the particle system's status.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"ParticleSystem::particleSpawned","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::particleSpawned(ParticleSystem this, Particle particle)","documentation":{"kind":"markdown","value":"Informs itself when a particle is spawned.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particle`: The newly spawned particle\n\n"}},{"label":"ParticleSystem::particleRecycled","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ParticleSystem::particleRecycled(ParticleSystem this, Particle particle)","documentation":{"kind":"markdown","value":"Informs itself when a particle is recycled.\n\n_@param_ `this`: ParticleSystem instance\n\n_@param_ `particle`: The recycled particle\n\n"}},{"label":"PhysicalParticle","labelDetails":{"description":"core"},"kind":7,"detail":"(class) PhysicalParticle","documentation":{"kind":"markdown","value":"Class `PhysicalParticle`\n\nInherits from `Particle`\n\nImplements a particle that physically moves through a game stage."}},{"label":"PhysicalParticle::getVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * PhysicalParticle::getVelocity(PhysicalParticle this)","documentation":{"kind":"markdown","value":"Retrieve the particle's velocity vector.\n\n_@param_ `this`: PhysicalParticle instance\n\n_@return_ `const` Pointer to the direction towards which the particle is moving\n\n"}},{"label":"PhysicalParticle::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalParticle::setPosition(PhysicalParticle this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the particle's position.\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `position`: 3D vector defining the particle's new position\n\n"}},{"label":"PhysicalParticle::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool PhysicalParticle::isSubjectToGravity(PhysicalParticle this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the particle is subject to provided gravity vector.\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the particle; false otherwise\n\n"}},{"label":"PhysicalParticle::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalParticle::reset(PhysicalParticle this)","documentation":{"kind":"markdown","value":"Reset the particle's state.\n\n_@param_ `this`: PhysicalParticle instance\n\n"}},{"label":"PhysicalParticle::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool PhysicalParticle::update(PhysicalParticle this, uint32 elapsedTime, void(*behavior)(Particle particle))","documentation":{"kind":"markdown","value":"Update the particle's state.\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `elapsedTime`: Elapsed time since the last call\n\n_@param_ `behavior`: Function pointer to control particle's behavior\n\n"}},{"label":"PhysicalParticle::configureMass","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalParticle::configureMass(PhysicalParticle this)","documentation":{"kind":"markdown","value":"Configure the particle's mass.\n\n_@param_ `this`: PhysicalParticle instance\n\n"}},{"label":"PhysicalParticle::applyForce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalParticle::applyForce(PhysicalParticle this, const Vector3D *force, uint32 movementType)","documentation":{"kind":"markdown","value":"Apply a force to the particle.\n\n_@param_ `this`: PhysicalParticle instance\n\n_@param_ `force`: Force to be applied\n\n_@param_ `movementType`: Movement type on each axis\n\n"}},{"label":"PhysicalWorld","labelDetails":{"description":"core"},"kind":7,"detail":"(class) PhysicalWorld","documentation":{"kind":"markdown","value":"Class `PhysicalWorld`\n\nInherits from `Object`\n\nManages the physical bodies in the game states."}},{"label":"PhysicalWorld::getElapsedTimeStep","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t PhysicalWorld::getElapsedTimeStep(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Retrieve the time that passes between each physical simulation step.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `static` The time that passes between each physical simulation step\n\n"}},{"label":"PhysicalWorld::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::reset(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: PhysicalWorld instance\n\n"}},{"label":"PhysicalWorld::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::update(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Update the registered bodies by advancing the physics simulations.\n\n_@param_ `this`: PhysicalWorld instance\n\n"}},{"label":"PhysicalWorld::createBody","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Body PhysicalWorld::createBody(PhysicalWorld this, SpatialObject owner, const PhysicalProperties *physicalProperties, uint16 axisSubjectToGravity)","documentation":{"kind":"markdown","value":"Create a body with the provided spec.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `owner`: `Object` to which the body will attach to\n\n_@param_ `physicalProperties`: Spec to use to create the body\n\n_@param_ `axisSubjectToGravity`: Flag of axis on which the body is subject to gravity\n\n_@return_ `Body` Created body\n\n"}},{"label":"PhysicalWorld::destroyBody","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::destroyBody(PhysicalWorld this, Body body)","documentation":{"kind":"markdown","value":"Destroy the provided body.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `body`\n\n"}},{"label":"PhysicalWorld::setTimeScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::setTimeScale(PhysicalWorld this, fixed_t timeScale)","documentation":{"kind":"markdown","value":"Set the time scale for time step on each call to update.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `timeScale`: Time scale for time step on each call to update\n\n"}},{"label":"PhysicalWorld::getTimeScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 PhysicalWorld::getTimeScale(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Retrieve the time scale for time step on each call to update.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `uint32` Time scale for time step on each call to update\n\n"}},{"label":"PhysicalWorld::setGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::setGravity(PhysicalWorld this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Set the physical world's gravity.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `gravity`: Gravity to set in the current physical world\n\n"}},{"label":"PhysicalWorld::getGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Vector3D PhysicalWorld::getGravity(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Retrieve the physical world's gravity.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `Vector3D` Gravity in the current physical world\n\n"}},{"label":"PhysicalWorld::setFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::setFrictionCoefficient(PhysicalWorld this, fixed_t frictionCoefficient)","documentation":{"kind":"markdown","value":"Set the physical world's friction coefficient.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `frictionCoefficient`: Friction coefficient to set in the current physical world\n\n"}},{"label":"PhysicalWorld::getFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t PhysicalWorld::getFrictionCoefficient(PhysicalWorld this)","documentation":{"kind":"markdown","value":"Retrieve the physical world's friction coefficient.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@return_ `fixed_t` Friction coefficient to set in the current physical world\n\n"}},{"label":"PhysicalWorld::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PhysicalWorld::print(PhysicalWorld this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's statistics.\n\n_@param_ `this`: PhysicalWorld instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"PixelSize","labelDetails":{"description":"core"},"kind":7,"detail":"(class) PixelSize","documentation":{"kind":"markdown","value":"Class `PixelSize`\n\nInherits from `Object`\n\nImplements methods to operate on `PixelSize` structs."}},{"label":"PixelSize::getFromSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelSize PixelSize::getFromSize(PixelSize this, Size size)","documentation":{"kind":"markdown","value":"Convert a `undefined` struct to a\n\n_@param_ `this`: PixelSize instance\n\n_@param_ `size`: `Size` struct to convert\n\n_@return_ `static` `PixelSize` struct\n\n"}},{"label":"PixelVector","labelDetails":{"description":"core"},"kind":7,"detail":"(class) PixelVector","documentation":{"kind":"markdown","value":"Class `PixelVector`\n\nInherits from `Object`\n\nImplements methods to operate on `PixelVector` structs."}},{"label":"PixelVector::zero","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::zero(PixelVector this)","documentation":{"kind":"markdown","value":"Get a vector with all its members initialized to zero.\n\n_@param_ `this`: PixelVector instance\n\n_@return_ `static` `Pixel` vector with all its members initialized to zero\n\n"}},{"label":"PixelVector::get","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::get(PixelVector this, PixelVector from, PixelVector to)","documentation":{"kind":"markdown","value":"Get the difference vector between two provided vectors.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `from`: Start vector\n\n_@param_ `to`: End vector\n\n_@return_ `static` Difference vector between the provided vectors\n\n"}},{"label":"PixelVector::sum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::sum(PixelVector this, PixelVector a, PixelVector b)","documentation":{"kind":"markdown","value":"Compute the addition vector between other two provided vectors.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `a`: First vector\n\n_@param_ `b`: Second vector\n\n_@return_ `static` Addition vector between the provided vectors\n\n"}},{"label":"PixelVector::sub","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::sub(PixelVector this, PixelVector a, PixelVector b)","documentation":{"kind":"markdown","value":"Compute the difference vector between two provided vectors.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `a`: End vector\n\n_@param_ `b`: Start vector\n\n_@return_ `static` Difference vector between the provided vectors\n\n"}},{"label":"PixelVector::intermediate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::intermediate(PixelVector this, PixelVector a, PixelVector b)","documentation":{"kind":"markdown","value":"Compute the intermediate vector between two provided vectors.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `a`: First vector\n\n_@param_ `b`: Second vector\n\n_@return_ `static` Intermediate vector between the provided vectors\n\n"}},{"label":"PixelVector::getFromScreenPixelVector","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::getFromScreenPixelVector(PixelVector this, ScreenPixelVector screenPixelVector, int16 parallax)","documentation":{"kind":"markdown","value":"Transform the provided vector in screen coordinates into a normal pixel vector.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `screenPixelVector`: Vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n"}},{"label":"PixelVector::getFromVector2D","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::getFromVector2D(PixelVector this, Vector2D vector2D, int16 parallax)","documentation":{"kind":"markdown","value":"Transform the provided 2D vector in meter coordinates into a normal pixel vector.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector2D`: 2D vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n"}},{"label":"PixelVector::getFromVector3D","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::getFromVector3D(PixelVector this, Vector3D vector3D, int16 parallax)","documentation":{"kind":"markdown","value":"Transform the provided 2D vector in meter coordinates into a normal pixel vector.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector3D`: 3D vector to transform\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Vector in pixel units\n\n"}},{"label":"PixelVector::getRelativeToCamera","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::getRelativeToCamera(PixelVector this, PixelVector vector)","documentation":{"kind":"markdown","value":"Compute the vector relative to the camera's position.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: Vector to compute the relative vector of\n\n_@return_ `static` Vector relative to the camera's position\n\n"}},{"label":"PixelVector::projectVector3D","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::projectVector3D(PixelVector this, Vector3D vector3D, int16 parallax)","documentation":{"kind":"markdown","value":"Project the 3D vector to a vector in pixel units.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector3D`\n\n_@param_ `parallax`: Parallax component for the resulting vector\n\n_@return_ `static` Projected vector in pixel units\n\n"}},{"label":"PixelVector::transformVector3D","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static PixelVector PixelVector::transformVector3D(PixelVector this, Vector3D vector)","documentation":{"kind":"markdown","value":"Transform to camera space and project the 3D vector to a vector in pixel units.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: 3D vector to transform\n\n_@return_ `static` Projected vector in pixel units\n\n"}},{"label":"PixelVector::length","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t PixelVector::length(PixelVector this, PixelVector vector)","documentation":{"kind":"markdown","value":"Compute the length of the provided vector.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: Vector to compute the length of\n\n_@return_ `static` Length of the provided vector\n\n"}},{"label":"PixelVector::squareLength","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static uint32 PixelVector::squareLength(PixelVector this, PixelVector vector)","documentation":{"kind":"markdown","value":"Compute the squared length of the provided vector.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: Vector to compute the square length of\n\n_@return_ `static` Square length of the provided vector\n\n"}},{"label":"PixelVector::isVisible","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool PixelVector::isVisible(PixelVector this, PixelVector vector, PixelRightBox pixelRightBox, int16 padding)","documentation":{"kind":"markdown","value":"Test if the provided vector is within the provided right box\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: Vector to test\n\n_@param_ `pixelRightBox`: Bounding box\n\n_@param_ `padding`: Padding to be added to the bounding box\n\n_@return_ `static` True if the part of the vector is inside the bounding box; false otherwise\n\n"}},{"label":"PixelVector::isVector3DVisible","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool PixelVector::isVector3DVisible(PixelVector this, Vector3D vector, PixelRightBox pixelRightBox, int16 padding)","documentation":{"kind":"markdown","value":"Test if the provided 3D vector is within the provided right box\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: 3D vector to test\n\n_@param_ `pixelRightBox`: Bounding box\n\n_@param_ `padding`: Padding to be added to the bounding box\n\n_@return_ `static` True if the part of the vector is inside the bounding box; false otherwise\n\n"}},{"label":"PixelVector::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void PixelVector::print(PixelVector this, PixelVector vector, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the vector's components.\n\n_@param_ `this`: PixelVector instance\n\n_@param_ `vector`: Vector to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Printing","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Printing","documentation":{"kind":"markdown","value":"Class `Printing`\n\nInherits from `ListenerObject`\n\nManages printing layer and offers various functions to write to it."}},{"label":"Printing::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Printing Printing::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `Printing` singleton\n\n"}},{"label":"Printing::setDebugMode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setDebugMode(Printing this)","documentation":{"kind":"markdown","value":"Set mode to debug to bypass loading fonts through CharSets.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::reset(Printing this)","documentation":{"kind":"markdown","value":"Empties internal virtual list of registered fonts.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::show(Printing this)","documentation":{"kind":"markdown","value":"Force printing layer to show up.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::hide(Printing this)","documentation":{"kind":"markdown","value":"Force printing layer to hide.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::loadFonts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::loadFonts(Printing this, FontSpec **fontSpecs)","documentation":{"kind":"markdown","value":"Add fonts to internal `VirtualList` and preload CharSets for specified fonts.\n\n_@param_ `this`: Printing instance\n\n_@param_ `fontSpecs`: Array of font specs whose charset should pre preloaded\n\n"}},{"label":"Printing::releaseFonts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::releaseFonts(Printing this)","documentation":{"kind":"markdown","value":"Release fonts, free VRAM.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::clear","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::clear(Printing this)","documentation":{"kind":"markdown","value":"Clear printing area in BGMAP memory.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::clearRow","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::clearRow(Printing this, uint16 row)","documentation":{"kind":"markdown","value":"Clear a given row in the printable area of BGMAP memory.\n\n_@param_ `this`: Printing instance\n\n_@param_ `row`: Row to clean (0-27)\n\n"}},{"label":"Printing::text","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::text(Printing this, const char *string, int32 x, int32 y, const char *font)","documentation":{"kind":"markdown","value":"Print a string.\n\n_@param_ `this`: Printing instance\n\n_@param_ `string`: String to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `font`: Name of font to use for printing\n\n"}},{"label":"Printing::int32","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::int32(Printing this, int32 value, uint8 x, uint8 y, const char *font)","documentation":{"kind":"markdown","value":"Print an integer value.\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Integer to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `font`: Name of font to use for printing\n\n"}},{"label":"Printing::hex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::hex(Printing this, WORD value, uint8 x, uint8 y, uint8 length, const char *font)","documentation":{"kind":"markdown","value":"Print a hex value.\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Hex value to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `length`: Digits to print\n\n_@param_ `font`: Name of font to use for printing\n\n"}},{"label":"Printing::float","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::float(Printing this, float value, uint8 x, uint8 y, int32 precision, const char *font)","documentation":{"kind":"markdown","value":"Print a float value.\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: Float value to print\n\n_@param_ `x`: Column to start printing at\n\n_@param_ `y`: Row to start printing at\n\n_@param_ `precision`: How many decimals to print\n\n_@param_ `font`: Name of font to use for printing\n\n"}},{"label":"Printing::setFontPage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setFontPage(Printing this, const char *font, uint16 page)","documentation":{"kind":"markdown","value":"Writes the font's char set to CHAR memory with displacing the source pointer by numberOfChars * page.\n\n_@param_ `this`: Printing instance\n\n_@param_ `font`: Name of font to use for printing\n\n_@param_ `page`: ROM's displacement multiplier\n\n"}},{"label":"Printing::setOrientation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setOrientation(Printing this, uint8 value)","documentation":{"kind":"markdown","value":"Sets the orientation for the following call to print. Resets its self automatically to horizonal.\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: PrintingOrientation\n\n"}},{"label":"Printing::setDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setDirection(Printing this, uint8 value)","documentation":{"kind":"markdown","value":"Sets the direction for the following call to print. Resets its self automatically to LTR (Left to Right).\n\n_@param_ `this`: Printing instance\n\n_@param_ `value`: PrintingDirection\n\n"}},{"label":"Printing::setPrintingBgmapSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setPrintingBgmapSegment(Printing this, int8 printingBgmapSegment)","documentation":{"kind":"markdown","value":"Cache the printing bgmap segment.\n\n_@param_ `this`: Printing instance\n\n_@param_ `printingBgmapSegment`: Index of the bgmap segment to print to\n\n"}},{"label":"Printing::addSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::addSprite(Printing this)","documentation":{"kind":"markdown","value":"Create a printing sprite.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::setActiveSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Printing::setActiveSprite(Printing this, uint16 printingSpriteIndex)","documentation":{"kind":"markdown","value":"Set the active printing sprite.\n\n_@param_ `this`: Printing instance\n\n_@param_ `printingSpriteIndex`: Index of the sprite to activate\n\n"}},{"label":"Printing::printSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::printSprite(Printing this, int16 x, int16 y)","documentation":{"kind":"markdown","value":"Print active printing sprite's info.\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Printing::setCoordinates","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setCoordinates(Printing this, int16 x, int16 y, int16 z, int8 parallax)","documentation":{"kind":"markdown","value":"Set the coordinates used for printing.\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: WORLD x coordinate\n\n_@param_ `y`: WORLD y coordinate\n\n_@param_ `z`: WORLD parallax value\n\n_@param_ `parallax`: WORLD parallax value\n\n"}},{"label":"Printing::setWorldCoordinates","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setWorldCoordinates(Printing this, int16 x, int16 y, int16 z, int8 parallax)","documentation":{"kind":"markdown","value":"Set the coordinates of the WORLD used for printing.\n\n_@param_ `this`: Printing instance\n\n_@param_ `x`: WORLD x coordinate\n\n_@param_ `y`: WORLD y coordinate\n\n_@param_ `z`: WORLD parallax value\n\n_@param_ `parallax`: WORLD parallax value\n\n"}},{"label":"Printing::setBgmapCoordinates","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setBgmapCoordinates(Printing this, int16 mx, int16 my, int8 mp)","documentation":{"kind":"markdown","value":"Set the coordinates of the BGMAP used for printing.\n\n_@param_ `this`: Printing instance\n\n_@param_ `mx`: BGMAP x coordinate\n\n_@param_ `my`: BGMAP y coordinate\n\n_@param_ `mp`: BGMAP parallax value\n\n"}},{"label":"Printing::setWorldSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setWorldSize(Printing this, uint16 w, uint16 h)","documentation":{"kind":"markdown","value":"Set WORLD's size.\n\n_@param_ `this`: Printing instance\n\n_@param_ `w`: WORLD's width\n\n_@param_ `h`: WORLD's height\n\n"}},{"label":"Printing::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setTransparency(Printing this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set sprite's transparency\n\n_@param_ `this`: Printing instance\n\n_@param_ `transparency`: Transparent value (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n"}},{"label":"Printing::setPalette","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::setPalette(Printing this, uint8 palette)","documentation":{"kind":"markdown","value":"Set palette for the printing area.\n\n_@param_ `this`: Printing instance\n\n_@param_ `palette`: Palette for the printing area\n\n"}},{"label":"Printing::resetCoordinates","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Printing::resetCoordinates(Printing this)","documentation":{"kind":"markdown","value":"Reset the coordinates of the WORLD used for printing.\n\n_@param_ `this`: Printing instance\n\n"}},{"label":"Printing::getWorldCoordinatesX","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Printing::getWorldCoordinatesX(Printing this)","documentation":{"kind":"markdown","value":"Retrieve WORLD's gx.\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` WORLD's gx\n\n"}},{"label":"Printing::getWorldCoordinatesY","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Printing::getWorldCoordinatesY(Printing this)","documentation":{"kind":"markdown","value":"Retrieve WORLD's gy.\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` : WORLD's gy\n\n"}},{"label":"Printing::getWorldCoordinatesP","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Printing::getWorldCoordinatesP(Printing this)","documentation":{"kind":"markdown","value":"Retrieve WORLD's gp.\n\n_@param_ `this`: Printing instance\n\n_@return_ `int16` : WORLD's gp\n\n"}},{"label":"Printing::getSpriteIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PixelVector Printing::getSpriteIndex(Printing this)","documentation":{"kind":"markdown","value":"Retrieve sprite's position.\n\n_@param_ `this`: Printing instance\n\n_@return_ `PixelVector` `Sprite`'s position\n\n"}},{"label":"Printing::getFontByName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) FontData * Printing::getFontByName(Printing this, const char *font)","documentation":{"kind":"markdown","value":"Get font spec and starting position in character memory.\n\n_@param_ `this`: Printing instance\n\n_@param_ `font`: Name of font to get spec for\n\n_@return_ `FontData` `FontData` of desired font or default font if NULL or none could be found matching the name\n\n"}},{"label":"Printing::getTextSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) FontSize Printing::getTextSize(Printing this, const char *string, const char *font)","documentation":{"kind":"markdown","value":"Get the size of a (block of) text so you can for example center it on screen.\n\n_@param_ `this`: Printing instance\n\n_@param_ `string`: String to compute size for\n\n_@param_ `font`: Name of font to use for size computation\n\n"}},{"label":"PrintingSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) PrintingSprite","documentation":{"kind":"markdown","value":"Class `BgmapTexture`\n\nInherits from `Texture`\n\nEnables the `Printing` class to output text to the screen."}},{"label":"PrintingSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 PrintingSprite::doRender(PrintingSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"PrintingSprite::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PrintingSprite::reset(PrintingSprite this)","documentation":{"kind":"markdown","value":"Reset the sprite's rendering configuration.\n\n_@param_ `this`: PrintingSprite instance\n\n"}},{"label":"PrintingSprite::setPrintingBgmapSegment","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PrintingSprite::setPrintingBgmapSegment(PrintingSprite this, int8 printingBgmapSegment)","documentation":{"kind":"markdown","value":"Set the BGMAP segment used for printing.\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `printingBgmapSegment`: BGMAP segment to use for printing\n\n"}},{"label":"PrintingSprite::setGValues","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PrintingSprite::setGValues(PrintingSprite this, int16 gx, int16 gy, int16 gp)","documentation":{"kind":"markdown","value":"Set the G values to be written to the WORLD's entry mananged by the sprite.\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `gx`: GX coordinate of the WORLD used to display the text\n\n_@param_ `gy`: GY coordinate of the WORLD used to display the text\n\n_@param_ `gp`: GP coordinate of the WORLD used to display the text\n\n"}},{"label":"PrintingSprite::setMValues","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PrintingSprite::setMValues(PrintingSprite this, int16 mx, int16 my, int16 mp)","documentation":{"kind":"markdown","value":"Set the M values to be written to the WORLD's entry mananged by the sprite.\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `mx`: MX coordinate of BGMAP area to be used to display the text\n\n_@param_ `my`: MY coordinate of BGMAP area to be used to display the text\n\n_@param_ `mp`: MP coordinate of BGMAP area to be used to display the text\n\n"}},{"label":"PrintingSprite::setSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void PrintingSprite::setSize(PrintingSprite this, uint16 width, uint16 height)","documentation":{"kind":"markdown","value":"Set the size of the WORLD to by used to display the text\n\n_@param_ `this`: PrintingSprite instance\n\n_@param_ `width`: Width of the WORLD to by used to display the text\n\n_@param_ `height`: Height of the WORLD to by used to display the text\n\n"}},{"label":"Profiler","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Profiler","documentation":{"kind":"markdown","value":"Class `SoundTest`\n\nInherits from `ListenerObject`\n\nImplements profiler that permits to measure how much time a process takes to complete."}},{"label":"Profiler::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Profiler Profiler::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `Profiler` singleton\n\n"}},{"label":"Profiler::initialize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Profiler::initialize(Profiler this)","documentation":{"kind":"markdown","value":"Initialize the profiler.\n\n_@param_ `this`: Profiler instance\n\n"}},{"label":"Profiler::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Profiler::reset(Profiler this)","documentation":{"kind":"markdown","value":"Reset the profiler's state.\n\n_@param_ `this`: Profiler instance\n\n"}},{"label":"Profiler::start","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Profiler::start(Profiler this)","documentation":{"kind":"markdown","value":"Start a new cycle of profiling.\n\n_@param_ `this`: Profiler instance\n\n"}},{"label":"Profiler::end","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Profiler::end(Profiler this)","documentation":{"kind":"markdown","value":"End the current profiling cycle.\n\n_@param_ `this`: Profiler instance\n\n"}},{"label":"Profiler::lap","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Profiler::lap(Profiler this, uint32 lapType, const char *processName)","documentation":{"kind":"markdown","value":"Register a lap during the current profiling cycle.\n\n_@param_ `this`: Profiler instance\n\n_@param_ `lapType`: Type of lap to record\n\n_@param_ `processName`: Name of the process during the lap\n\n"}},{"label":"Rotation","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Rotation","documentation":{"kind":"markdown","value":"Class `Rotation`\n\nInherits from `Object`\n\nImplements methods to operate on `Rotation` structs."}},{"label":"Rotation::zero","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::zero(Rotation this)","documentation":{"kind":"markdown","value":"Get a rotation with all its members initialized to zero.\n\n_@param_ `this`: Rotation instance\n\n_@return_ `static` `Rotation` with all its members initialized to zero\n\n"}},{"label":"Rotation::invert","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::invert(Rotation this, Rotation rotation)","documentation":{"kind":"markdown","value":"Invert the rotation's direction in all its components.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `rotation`: `Rotation` to invert\n\n_@return_ `static` Inverted rotation\n\n"}},{"label":"Rotation::clamp","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::clamp(Rotation this, fixed_ext_t x, fixed_ext_t y, fixed_ext_t z)","documentation":{"kind":"markdown","value":"Clamp the rotation's components to 0-511 range.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `x`: `Rotation`'s x component to clamp\n\n_@param_ `y`: `Rotation`'s y component to clamp\n\n_@param_ `z`: `Rotation`'s z component to clamp\n\n_@return_ `static` Clamped rotation\n\n"}},{"label":"Rotation::getShortestDifferce","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static fixed_t Rotation::getShortestDifferce(Rotation this, fixed_t angleFrom, fixed_t angleTo)","documentation":{"kind":"markdown","value":"Compute the shortest angle differente between the provided angles.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `angleFrom`: Starting angle\n\n_@param_ `angleTo`: End angle\n\n_@return_ `static` Shortest angle between the provided angles\n\n"}},{"label":"Rotation::sum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::sum(Rotation this, Rotation a, Rotation b)","documentation":{"kind":"markdown","value":"Add two rotations.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` Addition rotation\n\n"}},{"label":"Rotation::sub","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::sub(Rotation this, Rotation a, Rotation b)","documentation":{"kind":"markdown","value":"Susbtract a rotation from another.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `a`: Minuend rotation\n\n_@param_ `b`: Subtrahend rotation\n\n_@return_ `static` Substraction rotation\n\n"}},{"label":"Rotation::intermediate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::intermediate(Rotation this, Rotation a, Rotation b)","documentation":{"kind":"markdown","value":"Compute the intermediate rotation between the provided ones.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` Intermediate rotation\n\n"}},{"label":"Rotation::scalarProduct","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::scalarProduct(Rotation this, Rotation rotation, int16 scalar)","documentation":{"kind":"markdown","value":"Apply a scalar product over the rotation's components\n\n_@param_ `this`: Rotation instance\n\n_@param_ `rotation`: `Rotation` to scale\n\n_@param_ `scalar`: Scalar to multiply\n\n_@return_ `static` Scaled rotation\n\n"}},{"label":"Rotation::scalarDivision","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::scalarDivision(Rotation this, Rotation rotation, int16 scalar)","documentation":{"kind":"markdown","value":"Apply a scalar division over the rotation's components\n\n_@param_ `this`: Rotation instance\n\n_@param_ `rotation`: `Rotation` to scale\n\n_@param_ `scalar`: Scalar divisor\n\n_@return_ `static` Scaled rotation\n\n"}},{"label":"Rotation::getRelativeToCamera","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::getRelativeToCamera(Rotation this, Rotation rotation)","documentation":{"kind":"markdown","value":"Compute the rotation relative to the camera's rotation.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `rotation`: `Rotation` to compute the relative rotation of\n\n_@return_ `static` `Rotation` relative to the camera's rotation\n\n"}},{"label":"Rotation::getFromPixelRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::getFromPixelRotation(Rotation this, PixelRotation pixelRotation)","documentation":{"kind":"markdown","value":"Transform the provided rotation in pixel coordinates into a normal rotation.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `pixelRotation`: `Rotation` to transform\n\n_@return_ `static` Transformed rotation\n\n"}},{"label":"Rotation::getFromScreenPixelRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Rotation Rotation::getFromScreenPixelRotation(Rotation this, ScreenPixelRotation pixelRotation)","documentation":{"kind":"markdown","value":"Transform the provided rotation in screen coordinates into a normal rotation.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `pixelRotation`: `Rotation` to transform\n\n_@return_ `static` Transformed rotation\n\n"}},{"label":"Rotation::areEqual","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool Rotation::areEqual(Rotation this, Rotation a, Rotation b)","documentation":{"kind":"markdown","value":"Test if two rotations are equal.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `a`: First rotation\n\n_@param_ `b`: Second rotation\n\n_@return_ `static` True if all the components of both rotations are equal; false otherwise\n\n"}},{"label":"Rotation::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Rotation::print(Rotation this, Rotation rotation, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the rotation's components.\n\n_@param_ `this`: Rotation instance\n\n_@param_ `rotation`: `Rotation` to print\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"RumbleManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) RumbleManager","documentation":{"kind":"markdown","value":"Class `RumbleManager`\n\nInherits from `Object`\n\nManages rumble effects."}},{"label":"RumbleManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static RumbleManager RumbleManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `RumbleManager` singleton\n\n"}},{"label":"RumbleManager::startEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void RumbleManager::startEffect(RumbleManager this, const RumbleEffectSpec *rumbleEffectSpec)","documentation":{"kind":"markdown","value":"Start a rumble effect configured with the provided spec.\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `rumbleEffectSpec`: Specification of the rumble effect to play\n\n"}},{"label":"RumbleManager::stopEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void RumbleManager::stopEffect(RumbleManager this, const RumbleEffectSpec *rumbleEffectSpec)","documentation":{"kind":"markdown","value":"Stop a rumble effect configured with the provided spec.\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `rumbleEffectSpec`: Specification of the rumble effect to stop; if NULL, any playing effect is stoped\n\n"}},{"label":"RumbleManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void RumbleManager::reset(RumbleManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: RumbleManager instance\n\n"}},{"label":"RumbleManager::setAsync","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void RumbleManager::setAsync(RumbleManager this, bool async)","documentation":{"kind":"markdown","value":"Set the async flag.\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `async`: If true, rumble commands are broadcasted asynchronously\n\n"}},{"label":"RumbleManager::setOverridePreviousEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void RumbleManager::setOverridePreviousEffect(RumbleManager this, bool overridePreviousEffect)","documentation":{"kind":"markdown","value":"Set the flag to broadcast new effects regardless of if there is a previous queue effect pending broadcasted\n\n_@param_ `this`: RumbleManager instance\n\n_@param_ `overridePreviousEffect`: If true, new effects are broadcasted regardless of if there is a queued effect pending broadcasting\n\n"}},{"label":"SRAMManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SRAMManager","documentation":{"kind":"markdown","value":"Class `SRAMManager`\n\nInherits from `Object`\n\nManages SRAM space since most carts requiere a proxy to address by not having all the pins routed."}},{"label":"SRAMManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static SRAMManager SRAMManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `SRAMManager` singleton\n\n"}},{"label":"SRAMManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SRAMManager::reset(SRAMManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: SRAMManager instance\n\n"}},{"label":"SRAMManager::clear","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SRAMManager::clear(SRAMManager this, int32 startOffset, int32 endOffset)","documentation":{"kind":"markdown","value":"Delete all data in SRAM in the provided range.\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `startOffset`: Start offset of range to clear\n\n_@param_ `endOffset`: End address of range to clear\n\n"}},{"label":"SRAMManager::save","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SRAMManager::save(SRAMManager this, const BYTE *const source, int32 memberOffset, int32 dataSize)","documentation":{"kind":"markdown","value":"Save data to SRAM.\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `source`: WRAM address from were data will be copied\n\n_@param_ `memberOffset`: WRAM address offset\n\n_@param_ `dataSize`: Number of BYTES to read\n\n"}},{"label":"SRAMManager::read","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SRAMManager::read(SRAMManager this, BYTE *destination, int32 memberOffset, int32 dataSize)","documentation":{"kind":"markdown","value":"Retrieve data from SRAM.\n\n_@param_ `this`: SRAMManager instance\n\n_@param_ `destination`: WRAM address were data will be loaded\n\n_@param_ `memberOffset`: WRAM address offset\n\n_@param_ `dataSize`: Number of BYTES to read\n\n"}},{"label":"Scale","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Scale","documentation":{"kind":"markdown","value":"Class `Scale`\n\nInherits from `Object`\n\nImplements methods to operate on `Scale` structs."}},{"label":"Scale::zero","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::zero(Scale this)","documentation":{"kind":"markdown","value":"Get a scale with all its members initialized to zero.\n\n_@param_ `this`: Scale instance\n\n_@return_ `static` `Scale` with all its members initialized to zero\n\n"}},{"label":"Scale::unit","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::unit(Scale this)","documentation":{"kind":"markdown","value":"Get a unit scale with all its members are initialized to 1.\n\n_@param_ `this`: Scale instance\n\n_@return_ `static` Unit scale\n\n"}},{"label":"Scale::sum","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::sum(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Compute the addition scale between other two provided scales.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Addition scale between the provided scales\n\n"}},{"label":"Scale::sub","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::sub(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Compute the difference scale between two provided scales.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: Minuend scale\n\n_@param_ `b`: Substraend scale\n\n_@return_ `static` Difference scale between the provided scales\n\n"}},{"label":"Scale::intermediate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::intermediate(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Compute the intermediate scale between two provided scales.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Intermediate scale between the provided scales\n\n"}},{"label":"Scale::product","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::product(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Compute the product scale between two provided scales.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` Product scale between the provided scales\n\n"}},{"label":"Scale::division","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::division(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Compute the division scale between two provided scales.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: Dividend scale\n\n_@param_ `b`: Divisor scale\n\n_@return_ `static` Division scale between the provided scales\n\n"}},{"label":"Scale::scalarProduct","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::scalarProduct(Scale this, Scale scale, int16 scalar)","documentation":{"kind":"markdown","value":"Apply a scalar product over the scale's components\n\n_@param_ `this`: Scale instance\n\n_@param_ `scale`: `Scale` to scale\n\n_@param_ `scalar`: Scalar to multiply\n\n_@return_ `static` Scaled scale\n\n"}},{"label":"Scale::scalarDivision","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::scalarDivision(Scale this, Scale scale, int16 scalar)","documentation":{"kind":"markdown","value":"Apply a scalar product over the scale's components\n\n_@param_ `this`: Scale instance\n\n_@param_ `scale`: `Scale` to scale\n\n_@param_ `scalar`: Scalar divisor\n\n_@return_ `static` Scaled scale\n\n"}},{"label":"Scale::getFromScreenPixelScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Scale Scale::getFromScreenPixelScale(Scale this, ScreenPixelScale screenPixelScale)","documentation":{"kind":"markdown","value":"Transform the provided scale in screen coordinates into a normal 3D scale.\n\n_@param_ `this`: Scale instance\n\n_@param_ `screenPixelScale`: `Scale` to transform\n\n_@return_ `static` 3D scale\n\n"}},{"label":"Scale::areEqual","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static bool Scale::areEqual(Scale this, Scale a, Scale b)","documentation":{"kind":"markdown","value":"Test if two scales are equal.\n\n_@param_ `this`: Scale instance\n\n_@param_ `a`: First scale\n\n_@param_ `b`: Second scale\n\n_@return_ `static` True if all the components of both scales are equal; false otherwise\n\n"}},{"label":"Scale::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Scale::print(Scale this, Scale scale, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the scale's components.\n\n_@param_ `this`: Scale instance\n\n_@param_ `scale`\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Size","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Size","documentation":{"kind":"markdown","value":"Class `Size`\n\nInherits from `Object`\n\nImplements methods to operate on `Size` structs."}},{"label":"Size::getFromPixelSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static Size Size::getFromPixelSize(Size this, PixelSize pixelSize)","documentation":{"kind":"markdown","value":"Convert a `undefined` struct to a\n\n_@param_ `this`: Size instance\n\n_@param_ `pixelSize`\n\n_@return_ `static` `Size` struct\n\n"}},{"label":"SolidParticle","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SolidParticle","documentation":{"kind":"markdown","value":"Class `SolidParticle`\n\nInherits from `PhysicalParticle`\n\nImplements a physical particle that collides with other objects in the game stage."}},{"label":"SolidParticle::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SolidParticle::handleMessage(SolidParticle this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"SolidParticle::getRadius","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t SolidParticle::getRadius(SolidParticle this)","documentation":{"kind":"markdown","value":"Retrieve the particle's radius.\n\n_@param_ `this`: SolidParticle instance\n\n_@return_ `fixed_t` Radius\n\n"}},{"label":"SolidParticle::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SolidParticle::isSubjectToGravity(SolidParticle this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the particle is subject to provided gravity vector.\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the particle; false otherwise\n\n"}},{"label":"SolidParticle::getInGameType","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 SolidParticle::getInGameType(SolidParticle this)","documentation":{"kind":"markdown","value":"Retrieve the enum that determines the type of game object.\n\n_@param_ `this`: SolidParticle instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n"}},{"label":"SolidParticle::collisionStarts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SolidParticle::collisionStarts(SolidParticle this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process a newly detected collision by one of the component colliders.\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"SolidParticle::collisionEnds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SolidParticle::collisionEnds(SolidParticle this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process when a previously detected collision by one of the component colliders stops.\n\n_@param_ `this`: SolidParticle instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"SolidParticle::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SolidParticle::reset(SolidParticle this)","documentation":{"kind":"markdown","value":"Reset the particle's state.\n\n_@param_ `this`: SolidParticle instance\n\n"}},{"label":"Sound","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Sound","documentation":{"kind":"markdown","value":"Class `Sound`\n\nInherits from `ListenerObject`\n\nImplements sound playback."}},{"label":"Sound::setMirror","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void Sound::setMirror(Sound this, Mirror mirror)","documentation":{"kind":"markdown","value":"`Mirror` the spatial positioning of the sound.\n\n_@param_ `this`: Sound instance\n\n_@param_ `mirror`: Struct with a flag for each axis to mirror\n\n"}},{"label":"Sound::play","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::play(Sound this, const Vector3D *position, uint32 playbackType)","documentation":{"kind":"markdown","value":"Play the sound.\n\n_@param_ `this`: Sound instance\n\n_@param_ `position`: Pointer to the spatial position of the sound\n\n_@param_ `playbackType`: Specifies how the playback should start\n\n"}},{"label":"Sound::stop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::stop(Sound this)","documentation":{"kind":"markdown","value":"Stop the playback.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::pause(Sound this)","documentation":{"kind":"markdown","value":"Pause the playback.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::unpause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::unpause(Sound this)","documentation":{"kind":"markdown","value":"Unpause the playback.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::suspend(Sound this)","documentation":{"kind":"markdown","value":"Suspend the output of sound.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::resume(Sound this)","documentation":{"kind":"markdown","value":"Resume the output of sound.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::mute","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::mute(Sound this)","documentation":{"kind":"markdown","value":"Mute the sound.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::unmute","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::unmute(Sound this)","documentation":{"kind":"markdown","value":"Unmute the sound.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::rewind","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::rewind(Sound this)","documentation":{"kind":"markdown","value":"Rewind the playack.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::release","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::release(Sound this)","documentation":{"kind":"markdown","value":"Release this sound.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::lock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::lock(Sound this)","documentation":{"kind":"markdown","value":"Prevent other requests to get a sound to steal this sound's channels.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::unlock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::unlock(Sound this)","documentation":{"kind":"markdown","value":"Allow other requests to get a sound to steal this sound's channels.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::autoReleaseOnFinish","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::autoReleaseOnFinish(Sound this, bool autoReleaseOnFinish)","documentation":{"kind":"markdown","value":"Set the flag that allows the sound to auto release itself when playback is complete.\n\n_@param_ `this`: Sound instance\n\n_@param_ `autoReleaseOnFinish`: If true, the sound is released when playaback is complete\n\n"}},{"label":"Sound::setSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::setSpeed(Sound this, fix7_9_ext speed)","documentation":{"kind":"markdown","value":"Set the playback's speed.\n\n_@param_ `this`: Sound instance\n\n_@param_ `speed`: Target playback speed\n\n"}},{"label":"Sound::getSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fix7_9_ext Sound::getSpeed(Sound this)","documentation":{"kind":"markdown","value":"Retrieve the playback's speed.\n\n_@param_ `this`: Sound instance\n\n_@return_ `fix7_9_ext` Target playback speed\n\n"}},{"label":"Sound::setVolumenScalePower","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::setVolumenScalePower(Sound this, uint8 volumenScalePower)","documentation":{"kind":"markdown","value":"Set the factor (2's power) by which the final volume is reduced.\n\n_@param_ `this`: Sound instance\n\n_@param_ `volumenScalePower`: Factor by which the final volume is reduced\n\n"}},{"label":"Sound::setFrequencyDelta","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::setFrequencyDelta(Sound this, uint16 frequencyDelta)","documentation":{"kind":"markdown","value":"Set the frequency delta to be added to the VSU's frequency registers.\n\n_@param_ `this`: Sound instance\n\n_@param_ `frequencyDelta`: Delta to be added to the frequency\n\n"}},{"label":"Sound::getFrequencyDelta","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Sound::getFrequencyDelta(Sound this)","documentation":{"kind":"markdown","value":"Retrieve the frequency delta added to the VSU's frequency registers.\n\n_@param_ `this`: Sound instance\n\n"}},{"label":"Sound::isPlaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sound::isPlaying(Sound this)","documentation":{"kind":"markdown","value":"Check if the sound is playing.\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback is going on\n\n"}},{"label":"Sound::isPaused","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sound::isPaused(Sound this)","documentation":{"kind":"markdown","value":"Check if the sound is paused.\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback is paused\n\n"}},{"label":"Sound::isFadingIn","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sound::isFadingIn(Sound this)","documentation":{"kind":"markdown","value":"Check if the sound is fading in.\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback fading in\n\n"}},{"label":"Sound::isFadingOut","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sound::isFadingOut(Sound this)","documentation":{"kind":"markdown","value":"Check if the sound is fading out.\n\n_@param_ `this`: Sound instance\n\n_@return_ `bool` True if playback fading out\n\n"}},{"label":"Sound::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::update(Sound this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates)","documentation":{"kind":"markdown","value":"Advance the playback on the sound's MIDI tracks.\n\n_@param_ `this`: Sound instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time since the last call\n\n_@param_ `targetPCMUpdates`: Ideal Elapsed time since the last call\n\n"}},{"label":"Sound::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::print(Sound this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the sounds's properties.\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Sound::printPlaybackTime","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::printPlaybackTime(Sound this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the sounds's playback time.\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Sound::printPlaybackProgress","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sound::printPlaybackProgress(Sound this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the sounds's playback progress.\n\n_@param_ `this`: Sound instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"SoundManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SoundManager","documentation":{"kind":"markdown","value":"Class `SoundManager`\n\nInherits from `ListenerObject`\n\nManages the VSU."}},{"label":"SoundManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static SoundManager SoundManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `SoundManager` singleton\n\n"}},{"label":"SoundManager::playSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void SoundManager::playSounds(SoundManager this, uint32 elapsedMicroseconds)","documentation":{"kind":"markdown","value":"Play the allocated sounds.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time between call\n\n"}},{"label":"SoundManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::reset(SoundManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::update(SoundManager this)","documentation":{"kind":"markdown","value":"Update the manager.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::setPCMTargetPlaybackRefreshRate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::setPCMTargetPlaybackRefreshRate(SoundManager this, uint16 pcmTargetPlaybackRefreshRate)","documentation":{"kind":"markdown","value":"Set the target refresh rate for PCM playback.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `pcmTargetPlaybackRefreshRate`: Target refresh rate for PCM playback\n\n"}},{"label":"SoundManager::isPlayingSound","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SoundManager::isPlayingSound(SoundManager this, const SoundSpec *soundSpec)","documentation":{"kind":"markdown","value":"Check if a sound with the provided spec is playing.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: `Sound` spec to check for\n\n"}},{"label":"SoundManager::playSound","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SoundManager::playSound(SoundManager this, const SoundSpec *soundSpec, const Vector3D *position, uint32 playbackType, EventListener soundReleaseListener, ListenerObject scope)","documentation":{"kind":"markdown","value":"Play a sound defined by the provided spec.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `position`: Position for spatilly position sound\n\n_@param_ `playbackType`: How to play the sound\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"SoundManager::getSound","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Sound SoundManager::getSound(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","documentation":{"kind":"markdown","value":"Allocate sound defined by the provided spec.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"SoundManager::findSound","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Sound SoundManager::findSound(SoundManager this, const SoundSpec *soundSpec, EventListener soundReleaseListener, ListenerObject scope)","documentation":{"kind":"markdown","value":"Retrieve a previously allocated sound defined by the provided spec.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `soundSpec`: Spec that defines the sound to play\n\n_@param_ `soundReleaseListener`: Callback method for when the sound is released\n\n_@param_ `scope`: `Object` on which to perform the callback\n\n"}},{"label":"SoundManager::muteAllSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::muteAllSounds(SoundManager this)","documentation":{"kind":"markdown","value":"Mute all playing sounds.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::unmuteAllSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::unmuteAllSounds(SoundManager this)","documentation":{"kind":"markdown","value":"Unmute all playing sounds.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::rewindAllSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::rewindAllSounds(SoundManager this)","documentation":{"kind":"markdown","value":"Rewind all playing sounds.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::stopAllSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::stopAllSounds(SoundManager this, bool release, SoundSpec **excludedSounds)","documentation":{"kind":"markdown","value":"Stop all playing sounds.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `release`\n\n_@param_ `excludedSounds`: Array of sound specs to not stop\n\n"}},{"label":"SoundManager::lock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::lock(SoundManager this)","documentation":{"kind":"markdown","value":"Refuse petitions to play or allocate sounds are processed.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::unlock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::unlock(SoundManager this)","documentation":{"kind":"markdown","value":"Allow petitions to play or allocate sounds are processed.\n\n_@param_ `this`: SoundManager instance\n\n"}},{"label":"SoundManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::print(SoundManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's status.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n"}},{"label":"SoundManager::printPlaybackTime","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundManager::printPlaybackTime(SoundManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print playback time of the playing sounds.\n\n_@param_ `this`: SoundManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n"}},{"label":"SoundTest","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SoundTest","documentation":{"kind":"markdown","value":"Class `SoundTest`\n\nInherits from `Tool`\n\nImplements a tool to test sounds."}},{"label":"SoundTest::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static SoundTest SoundTest::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `SoundTest` singleton\n\n"}},{"label":"SoundTest::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTest::update(SoundTest this)","documentation":{"kind":"markdown","value":"Update the tool's state.\n\n_@param_ `this`: SoundTest instance\n\n"}},{"label":"SoundTest::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTest::show(SoundTest this)","documentation":{"kind":"markdown","value":"Show the tool.\n\n_@param_ `this`: SoundTest instance\n\n"}},{"label":"SoundTest::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTest::hide(SoundTest this)","documentation":{"kind":"markdown","value":"Hide the tool.\n\n_@param_ `this`: SoundTest instance\n\n"}},{"label":"SoundTest::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTest::processUserInput(SoundTest this, uint16 pressedKey)","documentation":{"kind":"markdown","value":"Process the provided user pressed key.\n\n_@param_ `this`: SoundTest instance\n\n_@param_ `pressedKey`: User pressed key\n\n"}},{"label":"SoundTestState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SoundTestState","documentation":{"kind":"markdown","value":"Class `SoundTestState`\n\nInherits from `ToolState`\n\nImplements a tool state to test sounds."}},{"label":"SoundTrack","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SoundTrack","documentation":{"kind":"markdown","value":"Class `SoundTrack`\n\nInherits from `Object`\n\nImplements a sound track."}},{"label":"SoundTrack::setPCMTargetPlaybackRefreshRate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void SoundTrack::setPCMTargetPlaybackRefreshRate(SoundTrack this, uint16 pcmTargetPlaybackRefreshRate)","documentation":{"kind":"markdown","value":"Set the target refresh rate for PCM playback.\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `pcmTargetPlaybackRefreshRate`: Target refresh rate for PCM playback\n\n"}},{"label":"SoundTrack::start","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::start(SoundTrack this, bool wasPaused)","documentation":{"kind":"markdown","value":"Start the playback.\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `wasPaused`: If true, the playback is resuming\n\n"}},{"label":"SoundTrack::stop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::stop(SoundTrack this)","documentation":{"kind":"markdown","value":"Stop the playback.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::pause(SoundTrack this)","documentation":{"kind":"markdown","value":"Pause the playback.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::unpause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::unpause(SoundTrack this)","documentation":{"kind":"markdown","value":"Unpause the playback.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::suspend(SoundTrack this)","documentation":{"kind":"markdown","value":"Suspend the output of sound.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::resume(SoundTrack this)","documentation":{"kind":"markdown","value":"Resume the output of sound.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::rewind","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SoundTrack::rewind(SoundTrack this)","documentation":{"kind":"markdown","value":"Rewind the track.\n\n_@param_ `this`: SoundTrack instance\n\n"}},{"label":"SoundTrack::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SoundTrack::update(SoundTrack this, uint32 elapsedMicroseconds, uint32 targetPCMUpdates, fix7_9_ext tickStep, fix7_9_ext targetTimerResolutionFactor, fixed_t leftVolumeFactor, fixed_t rightVolumeFactor, int8 volumeReduction, uint8 volumenScalePower)","documentation":{"kind":"markdown","value":"Advance the playback on the sound's MIDI tracks.\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time since the last call\n\n_@param_ `targetPCMUpdates`: Ideal Elapsed time since the last call\n\n_@param_ `tickStep`: Tick step per timer interrupt\n\n_@param_ `targetTimerResolutionFactor`: Factor to apply to the tick step\n\n_@param_ `leftVolumeFactor`: Factor to apply to the left speaker's volume\n\n_@param_ `rightVolumeFactor`: Factor to apply to the right speaker's volume\n\n_@param_ `volumeReduction`: Volume reduction used for fade effects\n\n_@param_ `volumenScalePower`: 2's power to divide to the final volume value\n\n_@return_ `bool` True if the playback is complete; false otherwise\n\n"}},{"label":"SoundTrack::getTicks","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 SoundTrack::getTicks(SoundTrack this)","documentation":{"kind":"markdown","value":"Retrieve the sound track's total ticks.\n\n_@param_ `this`: SoundTrack instance\n\n_@return_ `uint32` Total number of ticks\n\n"}},{"label":"SoundTrack::getElapsedTicksPercentaje","labelDetails":{"description":"core"},"kind":2,"detail":"(method) float SoundTrack::getElapsedTicksPercentaje(SoundTrack this)","documentation":{"kind":"markdown","value":"Retrieve the sound track's percentage of elapsed ticks.\n\n_@param_ `this`: SoundTrack instance\n\n_@return_ `float` Percentaje of elapsed ticks\n\n"}},{"label":"SoundTrack::getTotalPlaybackMilliseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 SoundTrack::getTotalPlaybackMilliseconds(SoundTrack this, uint16 targetTimerResolutionUS)","documentation":{"kind":"markdown","value":"Retrieve the total time of playback in milliseconds.\n\n_@param_ `this`: SoundTrack instance\n\n_@param_ `targetTimerResolutionUS`: Target timer resolution in US\n\n_@return_ `uint32` The total time of playback in milliseconds\n\n"}},{"label":"SpatialObject","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SpatialObject","documentation":{"kind":"markdown","value":"Class `SpatialObject`\n\nInherits from `ListenerObject`\n\nDefines objects that occupy a place in 3D space."}},{"label":"SpatialObject::getTransformation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Transformation * SpatialObject::getTransformation(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's transformation.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D transformation\n\n"}},{"label":"SpatialObject::getPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * SpatialObject::getPosition(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's position.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D vector defining its position\n\n"}},{"label":"SpatialObject::getRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Rotation * SpatialObject::getRotation(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's rotation.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D rotation\n\n"}},{"label":"SpatialObject::getScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Scale * SpatialObject::getScale(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's scale.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the object's 3D\n\n"}},{"label":"SpatialObject::getRadius","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t SpatialObject::getRadius(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's radius.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` Radius\n\n"}},{"label":"SpatialObject::getVelocity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * SpatialObject::getVelocity(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's velocity vector.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n"}},{"label":"SpatialObject::getSpeed","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t SpatialObject::getSpeed(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's current speed (velocity vector's magnitude).\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s current speed (velocity vector's magnitude)\n\n"}},{"label":"SpatialObject::getBounciness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t SpatialObject::getBounciness(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's bounciness factor.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s bounciness factor\n\n"}},{"label":"SpatialObject::getFrictionCoefficient","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t SpatialObject::getFrictionCoefficient(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the object's friction coefficient.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `fixed_t` `Object`'s friction coefficient\n\n"}},{"label":"SpatialObject::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::setPosition(SpatialObject this, const Vector3D *position)","documentation":{"kind":"markdown","value":"Set the object's position.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `position`: 3D vector defining the object's new position\n\n"}},{"label":"SpatialObject::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::setRotation(SpatialObject this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the object's rotation.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `rotation`: `Rotation`\n\n"}},{"label":"SpatialObject::setScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::setScale(SpatialObject this, const Scale *scale)","documentation":{"kind":"markdown","value":"Set the object's scale.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `scale`: `Scale`\n\n"}},{"label":"SpatialObject::setDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::setDirection(SpatialObject this, const Vector3D *direction)","documentation":{"kind":"markdown","value":"Set the direction towards which the object must move.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `direction`: Pointer to a direction vector\n\n"}},{"label":"SpatialObject::getDirection","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const Vector3D * SpatialObject::getDirection(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the direction towards which the object is moving.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `const` Pointer to the direction towards which the object is moving\n\n"}},{"label":"SpatialObject::isSubjectToGravity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SpatialObject::isSubjectToGravity(SpatialObject this, Vector3D gravity)","documentation":{"kind":"markdown","value":"Check if the object is subject to provided gravity vector.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `gravity`\n\n_@return_ `bool` True if the provided gravity vector can affect the object; false otherwise\n\n"}},{"label":"SpatialObject::getInGameType","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 SpatialObject::getInGameType(SpatialObject this)","documentation":{"kind":"markdown","value":"Retrieve the enum that determines the type of game object.\n\n_@param_ `this`: SpatialObject instance\n\n_@return_ `uint32` The enum that determines the type of game object\n\n"}},{"label":"SpatialObject::collisionStarts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SpatialObject::collisionStarts(SpatialObject this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process a newly detected collision by one of the component colliders.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n_@return_ `bool` True if the collider must keep track of the collision to detect if it persists and when it ends; false otherwise\n\n"}},{"label":"SpatialObject::collisionPersists","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::collisionPersists(SpatialObject this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process a going on collision detected by one of the component colliders.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"SpatialObject::collisionEnds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpatialObject::collisionEnds(SpatialObject this, const CollisionInformation *collisionInformation)","documentation":{"kind":"markdown","value":"Process when a previously detected collision by one of the component colliders stops.\n\n_@param_ `this`: SpatialObject instance\n\n_@param_ `collisionInformation`: Information struct about the collision to resolve\n\n"}},{"label":"Sphere","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Sphere","documentation":{"kind":"markdown","value":"Class `Sphere`\n\nInherits from `Wireframe`\n\nDraws a cirle that represents a 3D sphere."}},{"label":"Sphere::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sphere::render(Sphere this, Vector3D relativePosition)","documentation":{"kind":"markdown","value":"Prepare the wireframe for drawing.\n\n_@param_ `this`: Sphere instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n"}},{"label":"Sphere::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sphere::draw(Sphere this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers.\n\n_@param_ `this`: Sphere instance\n\n_@return_ `bool` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"Sphere::setRadius","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sphere::setRadius(Sphere this, fixed_t radius)","documentation":{"kind":"markdown","value":"Set the sphere's radius.\n\n_@param_ `this`: Sphere instance\n\n_@param_ `radius`: `Sphere`'s radius\n\n"}},{"label":"Sphere::getRadius","labelDetails":{"description":"core"},"kind":2,"detail":"(method) fixed_t Sphere::getRadius(Sphere this)","documentation":{"kind":"markdown","value":"Retrieve the sphere's radius.\n\n_@param_ `this`: Sphere instance\n\n_@return_ `fixed_t` `Sphere`'s radius\n\n"}},{"label":"Sprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Sprite","documentation":{"kind":"markdown","value":"Class `Sprite`\n\nInherits from `VisualComponent`\n\nDisplays a `Texture` on the screen."}},{"label":"Sprite::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::render(Sprite this, int16 index, bool updateAnimation)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@param_ `updateAnimation`\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"Sprite::getTexture","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Texture Sprite::getTexture(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's texture.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `Texture` `Texture` displayed by the sprite\n\n"}},{"label":"Sprite::getIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getIndex(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the index that determines the region of DRAM that this sprite configured\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"Sprite::getHead","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Sprite::getHead(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the head flags for DRAM entries.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Head flags for DRAM entries\n\n"}},{"label":"Sprite::getHalfWidth","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 Sprite::getHalfWidth(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's texture's half weight.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int32` `Sprite`'s texture's half weight\n\n"}},{"label":"Sprite::getHalfHeight","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 Sprite::getHalfHeight(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's texture's half height.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int32` `Sprite`'s texture's half height\n\n"}},{"label":"Sprite::getEffectiveHead","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Sprite::getEffectiveHead(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the head flags written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint32` Head flags written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveWidth","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Sprite::getEffectiveWidth(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the weight written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Weight written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveHeight","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Sprite::getEffectiveHeight(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the height written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `uint16` Height written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveX","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveX(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the X coordinate written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` X coordinate written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveY","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveY(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the Y coordinate written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` Y coordinate written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveP","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveP(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the P value written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` P value written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveMX","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveMX(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the MX coordinate written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MX coordinate written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveMY","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveMY(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the MY coordinate written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MY coordinate written to DRAM entries\n\n"}},{"label":"Sprite::getEffectiveMP","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getEffectiveMP(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the MP value written in the DRAM entries determined by index.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` MP value written to DRAM entries\n\n"}},{"label":"Sprite::isVisible","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isVisible(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite is visible.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite is visible; false otherwise\n\n"}},{"label":"Sprite::isHidden","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isHidden(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite is hidden.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite is hidden; false otherwise\n\n"}},{"label":"Sprite::isBgmap","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isBgmap(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite displays a texture in BGMAP mode.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in BGMAP mode; false otherwise\n\n"}},{"label":"Sprite::isObject","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isObject(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite displays a texture in OBJECT mode.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in OBJECT mode; false otherwise\n\n"}},{"label":"Sprite::isAffine","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isAffine(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite displays a texture in AFFINE mode.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in AFFINE mode; false otherwise\n\n"}},{"label":"Sprite::isHBias","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isHBias(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite displays a texture in HBIAS mode.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite displays a texture in HBIAS mode; false otherwise\n\n"}},{"label":"Sprite::createAnimationController","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::createAnimationController(Sprite this)","documentation":{"kind":"markdown","value":"Create an animation controller for this sprite.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::getAnimationController","labelDetails":{"description":"core"},"kind":2,"detail":"(method) AnimationController Sprite::getAnimationController(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's animation controller.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `AnimationController` sprite's animation controller\n\n"}},{"label":"Sprite::play","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::play(Sprite this, const AnimationFunction *animationFunctions[], const char *animationName, ListenerObject scope)","documentation":{"kind":"markdown","value":"Play the animation with the provided name from the provided array of animation functions.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@param_ `animationName`: Name of the animation to play\n\n_@param_ `scope`: `Object` that will be notified of playback events\n\n_@return_ `bool` True if the animation started playing; false otherwise\n\n"}},{"label":"Sprite::replay","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::replay(Sprite this, const AnimationFunction *animationFunctions[])","documentation":{"kind":"markdown","value":"Replay the last playing animation, if any, from the provided array of animation functions.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationFunctions`: Array of animation functions to look for the animation function to replay\n\n_@return_ `bool` True if the animation started playing again; false otherwise\n\n"}},{"label":"Sprite::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::pause(Sprite this, bool pause)","documentation":{"kind":"markdown","value":"Pause or unpause the currently playing animation if any.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `pause`: Flag that signals if the animation must be paused or unpaused\n\n"}},{"label":"Sprite::stop","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::stop(Sprite this)","documentation":{"kind":"markdown","value":"Stop any playing animation if any.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::isPlaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isPlaying(Sprite this)","documentation":{"kind":"markdown","value":"Check if an animation is playing.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"Sprite::isPlayingAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::isPlayingAnimation(Sprite this, char *animationName)","documentation":{"kind":"markdown","value":"Check if the animation whose name is provided is playing.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `animationName`: Name of the animation to check\n\n_@return_ `bool` True if an animation is playing; false otherwise\n\n"}},{"label":"Sprite::nextFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::nextFrame(Sprite this)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the next frame.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::previousFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::previousFrame(Sprite this)","documentation":{"kind":"markdown","value":"Rewind the currently playing animation to the previous frame.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::setActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setActualFrame(Sprite this, int16 actualFrame)","documentation":{"kind":"markdown","value":"Skip the currently playing animation to the provided frame.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `actualFrame`: The frame of the playing animation to skip to\n\n"}},{"label":"Sprite::getActualFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 Sprite::getActualFrame(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the actual frame of the playing animation if any.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `int16` Actual frame of the playing animation if any\n\n"}},{"label":"Sprite::setFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setFrameDuration(Sprite this, uint8 frameDuration)","documentation":{"kind":"markdown","value":"Set the duration in game cycles for each frame of animation.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frameDuration`: Duration in game cycles for each frame of animation\n\n"}},{"label":"Sprite::getFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 Sprite::getFrameDuration(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the duration in game cycles for each frame of animation.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::setFrameDurationDecrement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setFrameDurationDecrement(Sprite this, uint8 frameDurationDecrement)","documentation":{"kind":"markdown","value":"Set the decrement to frameDuration in each game cycle for each frame of animation.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frameDurationDecrement`\n\n"}},{"label":"Sprite::getPlayingAnimationName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const char * Sprite::getPlayingAnimationName(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the animation function's name currently playing if any\n\n_@param_ `this`: Sprite instance\n\n_@return_ `const` Animation function's name currently playing if any\n\n"}},{"label":"Sprite::setPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setPosition(Sprite this, const PixelVector *position)","documentation":{"kind":"markdown","value":"Set the position cache.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `position`: Position cache to save\n\n"}},{"label":"Sprite::getPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const PixelVector * Sprite::getPosition(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the position cache.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::setDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setDisplacement(Sprite this, const PixelVector *displacement)","documentation":{"kind":"markdown","value":"Set the position displacement.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `displacement`: Displacement added to the sprite's position\n\n"}},{"label":"Sprite::getDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) const PixelVector * Sprite::getDisplacement(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the position displacement.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `const` Displacement added to the sprite's position\n\n"}},{"label":"Sprite::getDisplacedPosition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PixelVector Sprite::getDisplacedPosition(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the cached position plus the position displacement.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `PixelVector` Cached position plus the position displacement\n\n"}},{"label":"Sprite::addChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::addChar(Sprite this, const Point *texturePoint, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Add the color provided color data to a CHAR in the sprite's texture.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"Sprite::putChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::putChar(Sprite this, const Point *texturePoint, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Replace a CHAR in the sprite's texture.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"Sprite::putPixel","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::putPixel(Sprite this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","documentation":{"kind":"markdown","value":"Replace a pixel in the sprite's texture.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `texturePixel`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `charSetPixel`\n\n_@param_ `newPixelColor`\n\n"}},{"label":"Sprite::registerWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Sprite::registerWithManager(Sprite this)","documentation":{"kind":"markdown","value":"Register this sprite with the appropriate sprites manager.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::unregisterWithManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Sprite::unregisterWithManager(Sprite this)","documentation":{"kind":"markdown","value":"Unegister this sprite with the appropriate sprites manager.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::hasSpecialEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Sprite::hasSpecialEffects(Sprite this)","documentation":{"kind":"markdown","value":"Check if the sprite has special effects.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `bool` True if the sprite has special effects\n\n"}},{"label":"Sprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual int16 Sprite::doRender(Sprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `virtual` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"Sprite::invalidateRendering","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::invalidateRendering(Sprite this)","documentation":{"kind":"markdown","value":"Invalidate the flags that determine if the sprite requires rendering.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::updateAnimation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::updateAnimation(Sprite this)","documentation":{"kind":"markdown","value":"Update the animation.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::processEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::processEffects(Sprite this)","documentation":{"kind":"markdown","value":"Process special effects.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::setMultiframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setMultiframe(Sprite this, uint16 frame)","documentation":{"kind":"markdown","value":"Set the current multiframe.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `frame`: Current animation frame\n\n"}},{"label":"Sprite::forceShow","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::forceShow(Sprite this)","documentation":{"kind":"markdown","value":"Forcefully show the sprite.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::forceHide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::forceHide(Sprite this)","documentation":{"kind":"markdown","value":"Forcefully hide the sprite.\n\n_@param_ `this`: Sprite instance\n\n"}},{"label":"Sprite::setRotation","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setRotation(Sprite this, const Rotation *rotation)","documentation":{"kind":"markdown","value":"Set the rotation cache.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `rotation`: `Rotation` cache to save\n\n"}},{"label":"Sprite::setScale","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::setScale(Sprite this, const PixelScale *scale)","documentation":{"kind":"markdown","value":"Set the scale cache.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `scale`: `Scale` cache to save\n\n"}},{"label":"Sprite::getTotalPixels","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual int32 Sprite::getTotalPixels(Sprite this)","documentation":{"kind":"markdown","value":"Retrieve the sprite's total number of pixels actually displayed.\n\n_@param_ `this`: Sprite instance\n\n_@return_ `virtual` `Sprite`'s total number of pixels actually displayed\n\n"}},{"label":"Sprite::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Sprite::print(Sprite this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the sprite's properties.\n\n_@param_ `this`: Sprite instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"SpriteManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) SpriteManager","documentation":{"kind":"markdown","value":"Class PrinSpriteManagerting\n\nInherits from `ListenerObject`\n\nManages all the sprite instances."}},{"label":"SpriteManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static SpriteManager SpriteManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `SpriteManager` singleton\n\n"}},{"label":"SpriteManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::reset(SpriteManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::setAnimationsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::setAnimationsClock(SpriteManager this, Clock clock)","documentation":{"kind":"markdown","value":"Set the clock that determines if the animations must be updated or not.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `clock`\n\n"}},{"label":"SpriteManager::createSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Sprite SpriteManager::createSprite(SpriteManager this, SpatialObject owner, const SpriteSpec *spriteSpec)","documentation":{"kind":"markdown","value":"Create a sprite with the provided spec.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `owner`: `Object` to which the sprite will attach to\n\n_@param_ `spriteSpec`: Spec to use to create the sprite\n\n_@return_ `Sprite` Created sprite\n\n"}},{"label":"SpriteManager::destroySprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::destroySprite(SpriteManager this, Sprite sprite)","documentation":{"kind":"markdown","value":"Destroy the provided sprite.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to destroy\n\n"}},{"label":"SpriteManager::registerSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool SpriteManager::registerSprite(SpriteManager this, Sprite sprite)","documentation":{"kind":"markdown","value":"Register a sprite to be managed\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to be managed\n\n_@return_ `bool` True if the sprite was successfully registered; false otherwise\n\n"}},{"label":"SpriteManager::unregisterSprite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::unregisterSprite(SpriteManager this, Sprite sprite)","documentation":{"kind":"markdown","value":"Unregister a sprite to be managed\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `sprite`: `Sprite` to no longer manage\n\n"}},{"label":"SpriteManager::setupObjectSpriteContainers","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::setupObjectSpriteContainers(SpriteManager this, int16 size[4], int16 z[4])","documentation":{"kind":"markdown","value":"Configure the object sprite containers.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `size`: Array with the number of OBJECTS for each container\n\n_@param_ `z`: Array of Z coordinates for each container\n\n"}},{"label":"SpriteManager::setMaximumParamTableRowsToComputePerCall","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::setMaximumParamTableRowsToComputePerCall(SpriteManager this, int32 maximumParamTableRowsToComputePerCall)","documentation":{"kind":"markdown","value":"Set the number of param table rows to write during each rendering cycle.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `maximumParamTableRowsToComputePerCall`: Number of param table rows to write during each rendering cycle\n\n"}},{"label":"SpriteManager::getMaximumParamTableRowsToComputePerCall","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 SpriteManager::getMaximumParamTableRowsToComputePerCall(SpriteManager this)","documentation":{"kind":"markdown","value":"Retrieve the number of param table rows to write during each rendering cycle.\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int32` Number of param table rows to write during each rendering cycle\n\n"}},{"label":"SpriteManager::setTexturesMaximumRowsToWrite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::setTexturesMaximumRowsToWrite(SpriteManager this, uint8 texturesMaximumRowsToWrite)","documentation":{"kind":"markdown","value":"Set the number of texture rows to write during each rendering cycle.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `texturesMaximumRowsToWrite`: Number of texture rows to write during each rendering cycle\n\n"}},{"label":"SpriteManager::getTexturesMaximumRowsToWrite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 SpriteManager::getTexturesMaximumRowsToWrite(SpriteManager this)","documentation":{"kind":"markdown","value":"Get the number of texture rows to write during each rendering cycle.\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int8` Number of texture rows to write during each rendering cycle\n\n"}},{"label":"SpriteManager::deferTextureUpdating","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::deferTextureUpdating(SpriteManager this, bool deferTextureUpdating)","documentation":{"kind":"markdown","value":"Enable or disable the texture writing over time.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `deferTextureUpdating`: If true, textures are written overtime; otherwise they are written in a single pass\n\n"}},{"label":"SpriteManager::deferParamTableEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::deferParamTableEffects(SpriteManager this, bool deferAffineTransformations)","documentation":{"kind":"markdown","value":"Enable or disable the writing of param tables over time.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `deferAffineTransformations`: If true, param tables are written overtime; otherwise they are written in a single pass\n\n"}},{"label":"SpriteManager::sortSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::sortSprites(SpriteManager this)","documentation":{"kind":"markdown","value":"Force the Z sorting of all sprites.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::prepareAll","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::prepareAll(SpriteManager this)","documentation":{"kind":"markdown","value":"Force the rendering and drawing of all sprites.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::render(SpriteManager this)","documentation":{"kind":"markdown","value":"Render sprites.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::forceRendering","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::forceRendering(SpriteManager this)","documentation":{"kind":"markdown","value":"Force the rendering of all sprites.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::renderAndDraw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::renderAndDraw(SpriteManager this)","documentation":{"kind":"markdown","value":"Force the rendering and drawing of all sprites.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::writeDRAM","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::writeDRAM(SpriteManager this)","documentation":{"kind":"markdown","value":"Copy DRAM cache data to real DRAM space.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::writeTextures","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::writeTextures(SpriteManager this)","documentation":{"kind":"markdown","value":"Force the writing of graphical data to DRAM space.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::showSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::showSprites(SpriteManager this, Sprite spareSprite, bool showPrinting)","documentation":{"kind":"markdown","value":"Show all sprites except the provided one.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spareSprite`: `Sprite` to not show\n\n_@param_ `showPrinting`: Flag to allow/prohibit the display of the printing sprite\n\n"}},{"label":"SpriteManager::hideSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::hideSprites(SpriteManager this, Sprite spareSprite, bool hidePrinting)","documentation":{"kind":"markdown","value":"Hide all sprites except the provided one.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spareSprite`: `Sprite` to not hide\n\n_@param_ `hidePrinting`\n\n"}},{"label":"SpriteManager::computeTotalPixelsDrawn","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::computeTotalPixelsDrawn(SpriteManager this)","documentation":{"kind":"markdown","value":"Compute the total pixels drawn.\n\n_@param_ `this`: SpriteManager instance\n\n"}},{"label":"SpriteManager::getFreeLayer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int8 SpriteManager::getFreeLayer(SpriteManager this)","documentation":{"kind":"markdown","value":"Retrieve the free WORLD layer during the last rendering cycle.\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int8` Free WORLD layer during the last rendering cycle\n\n"}},{"label":"SpriteManager::getNumberOfSprites","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 SpriteManager::getNumberOfSprites(SpriteManager this)","documentation":{"kind":"markdown","value":"Retrieve the total number of registerd sprites.\n\n_@param_ `this`: SpriteManager instance\n\n_@return_ `int32` Total number of registerd sprites\n\n"}},{"label":"SpriteManager::getSpriteAtIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Sprite SpriteManager::getSpriteAtIndex(SpriteManager this, int16 index)","documentation":{"kind":"markdown","value":"Retrieve the sprite at the provided position in the list of sprites.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `index`: Index of the node in the list of sprites\n\n_@return_ `Sprite` `Sprite` at the provided position in the list of sprites\n\n"}},{"label":"SpriteManager::getObjectSpriteContainer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) ObjectSpriteContainer SpriteManager::getObjectSpriteContainer(SpriteManager this, fixed_t z)","documentation":{"kind":"markdown","value":"Retrieve the object sprite container closer to the provided position.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `z`: Z coordinate\n\n_@return_ `ObjectSpriteContainer` `Object` sprite container closer to the provided position\n\n"}},{"label":"SpriteManager::getObjectSpriteContainerBySPT","labelDetails":{"description":"core"},"kind":2,"detail":"(method) ObjectSpriteContainer SpriteManager::getObjectSpriteContainerBySPT(SpriteManager this, int32 spt)","documentation":{"kind":"markdown","value":"Retrieve the object sprite container that manages the provided STP.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `spt`: OBJECT space SPT\n\n_@return_ `ObjectSpriteContainer` `Object` sprite container that manages the provided STP\n\n"}},{"label":"SpriteManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::print(SpriteManager this, int32 x, int32 y, bool resumed)","documentation":{"kind":"markdown","value":"Print sprites statistics.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n_@param_ `resumed`: If true it only prints the most important statistics\n\n"}},{"label":"SpriteManager::printObjectSpriteContainersStatus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void SpriteManager::printObjectSpriteContainersStatus(SpriteManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print object sprite containers statistics.\n\n_@param_ `this`: SpriteManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Stage","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Stage","documentation":{"kind":"markdown","value":"Class `Stage`\n\nInherits from `Container`\n\nImplements a container that represents a game level."}},{"label":"Stage::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::suspend(Stage this)","documentation":{"kind":"markdown","value":"Prepare to suspend this instance's logic.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::resume(Stage this)","documentation":{"kind":"markdown","value":"Prepare to resume this instance's logic.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::getSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) StageSpec * Stage::getSpec(Stage this)","documentation":{"kind":"markdown","value":"Retrieve the stage's spec.\n\n_@param_ `this`: Stage instance\n\n_@return_ `StageSpec` Specification that determines how the stage was configured\n\n"}},{"label":"Stage::configureTimer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::configureTimer(Stage this)","documentation":{"kind":"markdown","value":"Configure the timer.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::configurePalettes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::configurePalettes(Stage this)","documentation":{"kind":"markdown","value":"Configure the color palettes.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::getPaletteConfig","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PaletteConfig Stage::getPaletteConfig(Stage this)","documentation":{"kind":"markdown","value":"Retrieve the palette configuration for the stage.\n\n_@param_ `this`: Stage instance\n\n_@return_ `PaletteConfig` Palette configuration struct\n\n"}},{"label":"Stage::registerEntities","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::registerEntities(Stage this, VirtualList positionedEntitiesToIgnore)","documentation":{"kind":"markdown","value":"Register the stage's spec entities in the streaming list.\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntitiesToIgnore`\n\n"}},{"label":"Stage::getStageEntityDescriptions","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Stage::getStageEntityDescriptions(Stage this)","documentation":{"kind":"markdown","value":"Retrieve the list of stage entity descriptions.\n\n_@param_ `this`: Stage instance\n\n_@return_ `VirtualList` List of stage entity descriptions used to initialize the entities that populate the stage\n\n"}},{"label":"Stage::addEntityLoadingListener","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::addEntityLoadingListener(Stage this, ListenerObject scope, EventListener callback)","documentation":{"kind":"markdown","value":"Register an event listener for the event when a new entity is instantiated.\n\n_@param_ `this`: Stage instance\n\n_@param_ `scope`: `Object` that will be notified of event\n\n_@param_ `callback`: Callback to inform the parent when the new entity is loaded\n\n"}},{"label":"Stage::spawnChildEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity Stage::spawnChildEntity(Stage this, const PositionedEntity *const positionedEntity, bool permanent)","documentation":{"kind":"markdown","value":"Spawn a new child and configure it with the provided positioned entity struct.\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n_@param_ `permanent`: If true, the entity is not subject to the streaming\n\n"}},{"label":"Stage::destroyChildEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::destroyChildEntity(Stage this, Entity child)","documentation":{"kind":"markdown","value":"Destroy a stage's child.\n\n_@param_ `this`: Stage instance\n\n_@param_ `child`: `Entity` to destroy\n\n"}},{"label":"Stage::streamAll","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::streamAll(Stage this)","documentation":{"kind":"markdown","value":"Stream in or/and out all pending entities.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::getSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Stage::getSounds(Stage this)","documentation":{"kind":"markdown","value":"Retrieve the sounds that are playing in the stage.\n\n_@param_ `this`: Stage instance\n\n_@return_ `VirtualList` List of playing sounds\n\n"}},{"label":"Stage::fadeSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::fadeSounds(Stage this, uint32 playbackType)","documentation":{"kind":"markdown","value":"Fade in or out the registered sounds\n\n_@param_ `this`: Stage instance\n\n_@param_ `playbackType`: Specifies how the playback should start\n\n"}},{"label":"Stage::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::print(Stage this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the stage's state.\n\n_@param_ `this`: Stage instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Stage::stream","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Stage::stream(Stage this)","documentation":{"kind":"markdown","value":"Stream in or out entities within or outside the camera's range.\n\n_@param_ `this`: Stage instance\n\n"}},{"label":"Stage::configure","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stage::configure(Stage this, VirtualList positionedEntitiesToIgnore)","documentation":{"kind":"markdown","value":"Configure the stage with the entities defined in its spec.\n\n_@param_ `this`: Stage instance\n\n_@param_ `positionedEntitiesToIgnore`: List of positioned entity structs to register for streaming\n\n"}},{"label":"StageEditor","labelDetails":{"description":"core"},"kind":7,"detail":"(class) StageEditor","documentation":{"kind":"markdown","value":"Class `SoundTest`\n\nInherits from `Tool`\n\nImplements a tool that permits to manipulate a stage's entities."}},{"label":"StageEditor::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static StageEditor StageEditor::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `StageEditor` singleton\n\n"}},{"label":"StageEditor::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StageEditor::update(StageEditor this)","documentation":{"kind":"markdown","value":"Update the tool's state.\n\n_@param_ `this`: StageEditor instance\n\n"}},{"label":"StageEditor::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StageEditor::show(StageEditor this)","documentation":{"kind":"markdown","value":"Show the tool.\n\n_@param_ `this`: StageEditor instance\n\n"}},{"label":"StageEditor::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StageEditor::hide(StageEditor this)","documentation":{"kind":"markdown","value":"Hide the tool.\n\n_@param_ `this`: StageEditor instance\n\n"}},{"label":"StageEditor::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StageEditor::processUserInput(StageEditor this, uint16 pressedKey)","documentation":{"kind":"markdown","value":"Process the provided user pressed key.\n\n_@param_ `this`: StageEditor instance\n\n_@param_ `pressedKey`: User pressed key\n\n"}},{"label":"StageEditorState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) StageEditorState","documentation":{"kind":"markdown","value":"Class `StageEditorState`\n\nInherits from `ToolState`\n\nImplements a tool state to manipulate stages."}},{"label":"StageEditorState::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static StageEditorState StageEditorState::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `StageEditorState` singleton\n\n"}},{"label":"StageEditorState::isKeyCombination","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool StageEditorState::isKeyCombination(StageEditorState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Check if the provided user input unlocks the tool managed by this state.\n\n_@param_ `this`: StageEditorState instance\n\n_@param_ `userInput`\n\n_@return_ `bool` True if the input matches the combination defined by the state\n\n"}},{"label":"State","labelDetails":{"description":"core"},"kind":7,"detail":"(class) State","documentation":{"kind":"markdown","value":"Class `State`\n\nInherits from `ListenerObject`\n\nImplements a behavioral model to be used in a finite state machine."}},{"label":"State::enter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void State::enter(State this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to enter this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n"}},{"label":"State::execute","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void State::execute(State this, void *owner)","documentation":{"kind":"markdown","value":"Updates the object in this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"State::exit","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void State::exit(State this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to exit this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n"}},{"label":"State::suspend","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void State::suspend(State this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to become inactive in this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"State::resume","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void State::resume(State this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to become active in this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"State::processMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool State::processMessage(State this, void *owner, Telegram telegram)","documentation":{"kind":"markdown","value":"Process a `Telegram` sent to an object that is in this state.\n\n_@param_ `this`: State instance\n\n_@param_ `owner`: `Object` that is in this state\n\n_@param_ `telegram`: `Telegram` to process\n\n"}},{"label":"StateMachine","labelDetails":{"description":"core"},"kind":7,"detail":"(class) StateMachine","documentation":{"kind":"markdown","value":"Class `StateMachine`\n\nInherits from `ListenerObject`\n\nImplements a behavioral model of finite states."}},{"label":"StateMachine::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool StateMachine::handleMessage(StateMachine this, Telegram telegram)","documentation":{"kind":"markdown","value":"Process a `Telegram`.\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `telegram`: `Telegram` to process\n\n_@return_ `bool` True if the `Telegram` was processed\n\n"}},{"label":"StateMachine::transitionTo","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool StateMachine::transitionTo(StateMachine this, State state, int16 command)","documentation":{"kind":"markdown","value":"Instructs the machine to change to the provided state by the transition specified by command\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to transition to\n\n_@param_ `command`: Enum that specifies the type of transition defined in StateOperations\n\n_@return_ `bool` true if the machine is not scheduled for a transition already, false otherwise\n\n"}},{"label":"StateMachine::swapState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StateMachine::swapState(StateMachine this, State newState)","documentation":{"kind":"markdown","value":"Swap the state at the top of the stack by the provided state.\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `newState`: `State` to put at the top of the stack\n\n"}},{"label":"StateMachine::pushState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StateMachine::pushState(StateMachine this, State newState)","documentation":{"kind":"markdown","value":"Push the provided state at the top of the stack.\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `newState`: `State` to push at the top of the stack\n\n"}},{"label":"StateMachine::popState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StateMachine::popState(StateMachine this)","documentation":{"kind":"markdown","value":"Pop the top most state in the stack.\n\n_@param_ `this`: StateMachine instance\n\n"}},{"label":"StateMachine::popAllStates","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StateMachine::popAllStates(StateMachine this)","documentation":{"kind":"markdown","value":"Pop all the states in the stack and leave it empty.\n\n_@param_ `this`: StateMachine instance\n\n"}},{"label":"StateMachine::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) State StateMachine::update(StateMachine this)","documentation":{"kind":"markdown","value":"Updates the state at the top of the stack.\n\n_@param_ `this`: StateMachine instance\n\n"}},{"label":"StateMachine::isInState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool StateMachine::isInState(StateMachine this, State state)","documentation":{"kind":"markdown","value":"Check if the top most state in the stack is the provided one.\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to compare against the state at the top of the stack\n\n_@return_ `bool` true if the provided state is the top most state in the stack\n\n"}},{"label":"StateMachine::hasStateInTheStack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool StateMachine::hasStateInTheStack(StateMachine this, State state)","documentation":{"kind":"markdown","value":"Check if the provided state is in the stack.\n\n_@param_ `this`: StateMachine instance\n\n_@param_ `state`: `State` to check\n\n_@return_ `bool` true if the provided state is in the stack\n\n"}},{"label":"StateMachine::getStateStack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList StateMachine::getStateStack(StateMachine this)","documentation":{"kind":"markdown","value":"Retrieve the stack of states.\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `VirtualList` Linked list of states\n\n"}},{"label":"StateMachine::getCurrentState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) State StateMachine::getCurrentState(StateMachine this)","documentation":{"kind":"markdown","value":"Retrieve the state at the top of the stack.\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State` at the top of the stack of states\n\n"}},{"label":"StateMachine::getNextState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) State StateMachine::getNextState(StateMachine this)","documentation":{"kind":"markdown","value":"Retrieve the state that the machine is pending transition to.\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State` that the machine has to transition to\n\n"}},{"label":"StateMachine::getPreviousState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) State StateMachine::getPreviousState(StateMachine this)","documentation":{"kind":"markdown","value":"Retrieve the state that was before at the top of the stack.\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `State` `State`: the state that was previously at the top of the stack\n\n"}},{"label":"StateMachine::getStackSize","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 StateMachine::getStackSize(StateMachine this)","documentation":{"kind":"markdown","value":"Retrieve the number of states in the stack.\n\n_@param_ `this`: StateMachine instance\n\n_@return_ `int32` Number of states in the stack\n\n"}},{"label":"Stopwatch","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Stopwatch","documentation":{"kind":"markdown","value":"Class `Stopwatch`\n\nInherits from `ListenerObject`\n\nImplements a stopwatch to keep track of time passage."}},{"label":"Stopwatch::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stopwatch::reset(Stopwatch this)","documentation":{"kind":"markdown","value":"Reset the state of the stopwatch.\n\n_@param_ `this`: Stopwatch instance\n\n"}},{"label":"Stopwatch::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Stopwatch::update(Stopwatch this)","documentation":{"kind":"markdown","value":"Update the state of the stopwatch.\n\n_@param_ `this`: Stopwatch instance\n\n"}},{"label":"Stopwatch::lap","labelDetails":{"description":"core"},"kind":2,"detail":"(method) float Stopwatch::lap(Stopwatch this)","documentation":{"kind":"markdown","value":"Register a new lap.\n\n_@param_ `this`: Stopwatch instance\n\n_@return_ `float` Elapsed time during the last lap\n\n"}},{"label":"StopwatchManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) StopwatchManager","documentation":{"kind":"markdown","value":"Class `StopwatchManager`\n\nInherits from `Object`\n\nManages the instances of `Stopwatch`."}},{"label":"StopwatchManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static StopwatchManager StopwatchManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `FrameRate` singleton\n\n"}},{"label":"StopwatchManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StopwatchManager::reset(StopwatchManager this)","documentation":{"kind":"markdown","value":"Reset all the registered stopwatches.\n\n_@param_ `this`: StopwatchManager instance\n\n"}},{"label":"StopwatchManager::register","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StopwatchManager::register(StopwatchManager this, Stopwatch clock)","documentation":{"kind":"markdown","value":"Register a new stopwatch\n\n_@param_ `this`: StopwatchManager instance\n\n_@param_ `clock`: `Stopwatch` to register\n\n"}},{"label":"StopwatchManager::unregister","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StopwatchManager::unregister(StopwatchManager this, Stopwatch clock)","documentation":{"kind":"markdown","value":"Unregister stopwatch.\n\n_@param_ `this`: StopwatchManager instance\n\n_@param_ `clock`: `Stopwatch` to unregister\n\n"}},{"label":"StopwatchManager::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void StopwatchManager::update(StopwatchManager this)","documentation":{"kind":"markdown","value":"Update the stopwatches.\n\n_@param_ `this`: StopwatchManager instance\n\n"}},{"label":"Telegram","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Telegram","documentation":{"kind":"markdown","value":"Class `Telegram`\n\nInherits from `Object`\n\nWraps a message to be sent to an `Object`."}},{"label":"Telegram::getSender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * Telegram::getSender(Telegram this)","documentation":{"kind":"markdown","value":"Retrieve the `Telegram`'s sender.\n\n_@param_ `this`: Telegram instance\n\n"}},{"label":"Telegram::getReceiver","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * Telegram::getReceiver(Telegram this)","documentation":{"kind":"markdown","value":"Retrieve the `Telegram`'s receiver.\n\n_@param_ `this`: Telegram instance\n\n"}},{"label":"Telegram::getMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 Telegram::getMessage(Telegram this)","documentation":{"kind":"markdown","value":"Retrieve the `Telegram`'s message code.\n\n_@param_ `this`: Telegram instance\n\n_@return_ `int32` The message's code\n\n"}},{"label":"Telegram::getExtraInfo","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * Telegram::getExtraInfo(Telegram this)","documentation":{"kind":"markdown","value":"Retrieve the `Telegram`'s sender.\n\n_@param_ `this`: Telegram instance\n\n"}},{"label":"TextObjectSprite","labelDetails":{"description":"core"},"kind":7,"detail":"(class) TextObjectSprite","documentation":{"kind":"markdown","value":"Class `TextObjectSprite`\n\nInherits from `Sprite`\n\nDisplays a text in OBJECT space."}},{"label":"TextObjectSprite::doRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int16 TextObjectSprite::doRender(TextObjectSprite this, int16 index)","documentation":{"kind":"markdown","value":"Render the sprite by configuring the DRAM assigned to it by means of the provided index.\n\n_@param_ `this`: TextObjectSprite instance\n\n_@param_ `index`: Determines the region of DRAM that this sprite is allowed to configure\n\n_@return_ `int16` The index that determines the region of DRAM that this sprite manages\n\n"}},{"label":"Texture","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Texture","documentation":{"kind":"markdown","value":"Class `CharSet`\n\nInherits from `ListenerObject`\n\nA texture to be displayed by a sprite."}},{"label":"Texture::getId","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Texture::getId(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the texture's identificator.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint16` `Texture`'s identificator\n\n"}},{"label":"Texture::setSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::setSpec(Texture this, TextureSpec *textureSpec)","documentation":{"kind":"markdown","value":"Set the texture's spec.\n\n_@param_ `this`: Texture instance\n\n_@param_ `textureSpec`: Specification that determines how to configure the texture\n\n"}},{"label":"Texture::getSpec","labelDetails":{"description":"core"},"kind":2,"detail":"(method) TextureSpec * Texture::getSpec(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the texture's spec.\n\n_@param_ `this`: Texture instance\n\n_@return_ `TextureSpec` Specification that determines how to configure the texture\n\n"}},{"label":"Texture::getCharSet","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CharSet Texture::getCharSet(Texture this, uint32 loadIfNeeded)","documentation":{"kind":"markdown","value":"Retrieve the texture's char set.\n\n_@param_ `this`: Texture instance\n\n_@param_ `loadIfNeeded`: If true and the char set is not loaded, loads it\n\n_@return_ `CharSet` `Texture`'s char set\n\n"}},{"label":"Texture::increaseUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::increaseUsageCount(Texture this)","documentation":{"kind":"markdown","value":"Increase the usage count.\n\n_@param_ `this`: Texture instance\n\n"}},{"label":"Texture::decreaseUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::decreaseUsageCount(Texture this)","documentation":{"kind":"markdown","value":"Decrease the usage count.\n\n_@param_ `this`: Texture instance\n\n"}},{"label":"Texture::getUsageCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 Texture::getUsageCount(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the usage count.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint8` Usage count\n\n"}},{"label":"Texture::setPalette","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::setPalette(Texture this, uint8 palette)","documentation":{"kind":"markdown","value":"Set the palette index to use by the graphical data.\n\n_@param_ `this`: Texture instance\n\n_@param_ `palette`: Palette index to use by the graphical data\n\n"}},{"label":"Texture::getPalette","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 Texture::getPalette(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the palette index used the graphical data.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint8` Palette index used by the graphical data\n\n"}},{"label":"Texture::getNumberOfFrames","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Texture::getNumberOfFrames(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the number frames specified by the texture's spec.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Number frames specified by the texture's spec\n\n"}},{"label":"Texture::setFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::setFrame(Texture this, uint16 frame)","documentation":{"kind":"markdown","value":"Write to DRAM the graphical data of the map that corresponds to the specified frame.\n\n_@param_ `this`: Texture instance\n\n_@param_ `frame`: The frame that species the block inside the map array to write to DRAM\n\n"}},{"label":"Texture::getFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 Texture::getFrame(Texture this)","documentation":{"kind":"markdown","value":"Retrieve frame that species the block inside the map array to write to DRAM.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint16` The frame that species the block inside the map array to write to DRAM\n\n"}},{"label":"Texture::getCols","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Texture::getCols(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the texture's horizontal size in tiles.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Horizontal size in tiles\n\n"}},{"label":"Texture::getRows","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 Texture::getRows(Texture this)","documentation":{"kind":"markdown","value":"Retrieve the texture's vertical size in tiles.\n\n_@param_ `this`: Texture instance\n\n_@return_ `uint32` Vertical size in tiles\n\n"}},{"label":"Texture::isWritten","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::isWritten(Texture this)","documentation":{"kind":"markdown","value":"Check if the texture's data is completely writen to DRAM.\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture's data is completely writing to DRAM\n\n"}},{"label":"Texture::isShared","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::isShared(Texture this)","documentation":{"kind":"markdown","value":"Check if the texture is a shared one.\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture is shared; false otherwise\n\n"}},{"label":"Texture::isSingleFrame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::isSingleFrame(Texture this)","documentation":{"kind":"markdown","value":"Check if the texture has only one frame.\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture has only one frame; false otherwise\n\n"}},{"label":"Texture::isMultiframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::isMultiframe(Texture this)","documentation":{"kind":"markdown","value":"Check if the texture is a multiframe texture.\n\n_@param_ `this`: Texture instance\n\n_@return_ `bool` True if the texture is multiframe; false otherwise\n\n"}},{"label":"Texture::addChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::addChar(Texture this, const Point *texturePoint, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Add the color provided color data to a CHAR in the sprite's texture.\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"Texture::putChar","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::putChar(Texture this, const Point *texturePoint, const uint32 *newChar)","documentation":{"kind":"markdown","value":"Replace a CHAR in the sprite's texture.\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePoint`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `newChar`: Color data array for the CHAR\n\n"}},{"label":"Texture::putPixel","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::putPixel(Texture this, const Point *texturePixel, const Pixel *charSetPixel, BYTE newPixelColor)","documentation":{"kind":"markdown","value":"Replace a pixel in the sprite's texture.\n\n_@param_ `this`: Texture instance\n\n_@param_ `texturePixel`: Coordinate in texture's space of the CHAR to replace\n\n_@param_ `charSetPixel`\n\n_@param_ `newPixelColor`\n\n"}},{"label":"Texture::prepare","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::prepare(Texture this)","documentation":{"kind":"markdown","value":"Prepare the texture to write its graphical data to DRAM during the next render cycle.\n\n_@param_ `this`: Texture instance\n\n"}},{"label":"Texture::write","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Texture::write(Texture this, int16 maximumTextureRowsToWrite)","documentation":{"kind":"markdown","value":"Write graphical data to the allocated DRAM space.\n\n_@param_ `this`: Texture instance\n\n_@param_ `maximumTextureRowsToWrite`: Number of texture rows to write during this call\n\n_@return_ `bool` True if the texture was written; false if it fails\n\n"}},{"label":"Texture::rewrite","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Texture::rewrite(Texture this)","documentation":{"kind":"markdown","value":"Rewrite graphical data to the allocated DRAM space.\n\n_@param_ `this`: Texture instance\n\n"}},{"label":"TimerManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) TimerManager","documentation":{"kind":"markdown","value":"Class `TimerManager`\n\nInherits from `Object`\n\nManages rumble effects."}},{"label":"TimerManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static TimerManager TimerManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `TimerManager` singleton\n\n"}},{"label":"TimerManager::interruptHandler","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void TimerManager::interruptHandler(TimerManager this)","documentation":{"kind":"markdown","value":"Interrupt handler for timer's interrupts.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::reset(TimerManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::resetTimerCounter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::resetTimerCounter(TimerManager this)","documentation":{"kind":"markdown","value":"Reset timer's counter.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::configure","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::configure(TimerManager this, uint16 timerResolution, uint16 targetTimePerInterrupt, uint16 targetTimePerInterrupttUnits)","documentation":{"kind":"markdown","value":"Configure the timer with the provided arguments.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `timerResolution`: Timer's resolution (__TIMER_100US or __TIMER_20US)\n\n_@param_ `targetTimePerInterrupt`: Target elapsed time between timer interrupts\n\n_@param_ `targetTimePerInterrupttUnits`: Timer interrupt's target time units\n\n"}},{"label":"TimerManager::applySettings","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::applySettings(TimerManager this, bool enable)","documentation":{"kind":"markdown","value":"Apply the settings to the hardware timer.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `enable`: If true, the hardware timer is enabled\n\n"}},{"label":"TimerManager::enable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::enable(TimerManager this)","documentation":{"kind":"markdown","value":"Enable the timer.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::disable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::disable(TimerManager this)","documentation":{"kind":"markdown","value":"Disable the timer.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::setResolution","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::setResolution(TimerManager this, uint16 resolution)","documentation":{"kind":"markdown","value":"Set the timer's resolution.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `resolution`: __TIMER_20US or __TIMER_100US\n\n"}},{"label":"TimerManager::getResolution","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getResolution(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the timer's resolution.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Timer's resolution\n\n"}},{"label":"TimerManager::getResolutionInUS","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getResolutionInUS(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the timer's resolution in microseconds.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Timer's resolution in microseconds\n\n"}},{"label":"TimerManager::setTargetTimePerInterrupt","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::setTargetTimePerInterrupt(TimerManager this, uint16 targetTimePerInterrupt)","documentation":{"kind":"markdown","value":"Set the target time between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `targetTimePerInterrupt`: Target time between interrupt calls\n\n"}},{"label":"TimerManager::getTargetTimePerInterrupt","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getTargetTimePerInterrupt(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the target time between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Target time between interrupt calls\n\n"}},{"label":"TimerManager::getTargetTimePerInterruptInMS","labelDetails":{"description":"core"},"kind":2,"detail":"(method) float TimerManager::getTargetTimePerInterruptInMS(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the target time in milliseconds between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `float` Target time in milliseconds between interrupt calls\n\n"}},{"label":"TimerManager::getTargetTimePerInterruptInUS","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 TimerManager::getTargetTimePerInterruptInUS(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the target time in microseconds between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Target time in microseconds between interrupt calls\n\n"}},{"label":"TimerManager::setTargetTimePerInterruptUnits","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::setTargetTimePerInterruptUnits(TimerManager this, uint16 targetTimePerInterrupttUnits)","documentation":{"kind":"markdown","value":"Set the target time units between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `targetTimePerInterrupttUnits`: Target time units between interrupt calls\n\n"}},{"label":"TimerManager::getTargetTimePerInterruptUnits","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getTargetTimePerInterruptUnits(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the target time units between interrupt calls.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Target time units between interrupt calls\n\n"}},{"label":"TimerManager::getTimerCounter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getTimerCounter(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the configured timer counter.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Configured timer counter\n\n"}},{"label":"TimerManager::getCurrentTimerCounter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getCurrentTimerCounter(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the current timer counter.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Current timer counter\n\n"}},{"label":"TimerManager::getMinimumTimePerInterruptStep","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 TimerManager::getMinimumTimePerInterruptStep(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve the minimum timer per interrupt step.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint16` Minimum timer per interrupt step\n\n"}},{"label":"TimerManager::getElapsedMilliseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 TimerManager::getElapsedMilliseconds(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve elapsed milliseconds since the last call to reset.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Elapsed milliseconds since the last call to reset\n\n"}},{"label":"TimerManager::getTotalElapsedMilliseconds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint32 TimerManager::getTotalElapsedMilliseconds(TimerManager this)","documentation":{"kind":"markdown","value":"Retrieve elapsed milliseconds since the start of the program.\n\n_@param_ `this`: TimerManager instance\n\n_@return_ `uint32` Elapsed milliseconds since the start of the program\n\n"}},{"label":"TimerManager::wait","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::wait(TimerManager this, uint32 milliseconds)","documentation":{"kind":"markdown","value":"Halt the program by the provided time.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `milliseconds`: Time to halt the program\n\n"}},{"label":"TimerManager::repeatMethodCall","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::repeatMethodCall(TimerManager this, uint32 callTimes, uint32 duration, ListenerObject object, void(*method)(ListenerObject, uint32))","documentation":{"kind":"markdown","value":"Call a method on the provided scope a numer of time during a lapse of time.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `callTimes`: Number of calls to produce during the total duration\n\n_@param_ `duration`: Time that must take the callTimes\n\n_@param_ `object`: Called method's scope\n\n_@param_ `method`: Method to call\n\n"}},{"label":"TimerManager::frameStarted","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::frameStarted(TimerManager this, uint32 elapsedMicroseconds)","documentation":{"kind":"markdown","value":"Call when the next frame starts.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `elapsedMicroseconds`: Elapsed microseconds between calls\n\n"}},{"label":"TimerManager::nextSecondStarted","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::nextSecondStarted(TimerManager this)","documentation":{"kind":"markdown","value":"Call when the next second starts.\n\n_@param_ `this`: TimerManager instance\n\n"}},{"label":"TimerManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void TimerManager::print(TimerManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's configuration.\n\n_@param_ `this`: TimerManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}},{"label":"Tool","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Tool","documentation":{"kind":"markdown","value":"Class `Tool`\n\nInherits from `Object`\n\nDefines an interface for debugging tools."}},{"label":"Tool::setStage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Tool::setStage(Tool this, Stage stage)","documentation":{"kind":"markdown","value":"Set the stage to work with.\n\n_@param_ `this`: Tool instance\n\n_@param_ `stage`: `Stage` to work with\n\n"}},{"label":"Tool::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Tool::processUserInput(Tool this, uint16 pressedKey)","documentation":{"kind":"markdown","value":"Process the provided user pressed key.\n\n_@param_ `this`: Tool instance\n\n_@param_ `pressedKey`: User pressed key\n\n"}},{"label":"Tool::dimmGame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Tool::dimmGame(Tool this)","documentation":{"kind":"markdown","value":"Dimm down the game.\n\n_@param_ `this`: Tool instance\n\n"}},{"label":"Tool::lightUpGame","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Tool::lightUpGame(Tool this)","documentation":{"kind":"markdown","value":"Light up the game.\n\n_@param_ `this`: Tool instance\n\n"}},{"label":"Tool::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Tool::update(Tool this)","documentation":{"kind":"markdown","value":"Update the tool's state.\n\n_@param_ `this`: Tool instance\n\n"}},{"label":"Tool::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Tool::show(Tool this)","documentation":{"kind":"markdown","value":"Show the tool.\n\n_@param_ `this`: Tool instance\n\n"}},{"label":"Tool::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual void Tool::hide(Tool this)","documentation":{"kind":"markdown","value":"Hide the tool.\n\n_@param_ `this`: Tool instance\n\n"}},{"label":"ToolState","labelDetails":{"description":"core"},"kind":7,"detail":"(class) ToolState","documentation":{"kind":"markdown","value":"Class `ToolState`\n\nInherits from `GameState`\n\nDefines an interface for game states that uses various debug tools."}},{"label":"ToolState::enter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ToolState::enter(ToolState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to enter this state.\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is entering in this state\n\n"}},{"label":"ToolState::execute","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ToolState::execute(ToolState this, void *owner)","documentation":{"kind":"markdown","value":"Updates the object in this state.\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is in this state\n\n"}},{"label":"ToolState::exit","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ToolState::exit(ToolState this, void *owner)","documentation":{"kind":"markdown","value":"Prepares the object to exit this state.\n\n_@param_ `this`: ToolState instance\n\n_@param_ `owner`: `Object` that is exiting this state\n\n"}},{"label":"ToolState::processUserInput","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void ToolState::processUserInput(ToolState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Process the provided user input.\n\n_@param_ `this`: ToolState instance\n\n_@param_ `userInput`: Struct with the current user input information\n\n"}},{"label":"ToolState::stream","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool ToolState::stream(ToolState this)","documentation":{"kind":"markdown","value":"Stream in or out the stage entities within or outside the camera's range.\n\n_@param_ `this`: ToolState instance\n\n_@return_ `bool` True if at least some entity was streamed in or out\n\n"}},{"label":"ToolState::isKeyCombination","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual bool ToolState::isKeyCombination(ToolState this, const UserInput *userInput)","documentation":{"kind":"markdown","value":"Check if the provided user input unlocks the tool managed by this state.\n\n_@param_ `this`: ToolState instance\n\n_@param_ `userInput`\n\n_@return_ `virtual` True if the input matches the combination defined by the state\n\n"}},{"label":"UIContainer","labelDetails":{"description":"core"},"kind":7,"detail":"(class) UIContainer","documentation":{"kind":"markdown","value":"Class `UIContainer`\n\nInherits from `Container`\n\nImplements a container whose children are always fixed to the camera"}},{"label":"UIContainer::transform","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void UIContainer::transform(UIContainer this, const Transformation *environmentTransform, uint8 invalidateTransformationFlag)","documentation":{"kind":"markdown","value":"Compute the container's global transformation.\n\n_@param_ `this`: UIContainer instance\n\n_@param_ `environmentTransform`: Reference environment for the local transformation\n\n_@param_ `invalidateTransformationFlag`: Flag that determines which transfomation's components must be recomputed\n\n"}},{"label":"UIContainer::spawnChildEntity","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Entity UIContainer::spawnChildEntity(UIContainer this, const PositionedEntity *const positionedEntity)","documentation":{"kind":"markdown","value":"Spawn a new child and configure it with the provided positioned entity struct.\n\n_@param_ `this`: UIContainer instance\n\n_@param_ `positionedEntity`: Struct that defines which entity spec to use to configure the new child\n\n"}},{"label":"Utilities","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Utilities","documentation":{"kind":"markdown","value":"Class `Utilities`\n\nInherits from `Object`\n\nImplements miscelaneous methods related to strings manipulation."}},{"label":"Utilities::itoa","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static char * Utilities::itoa(Utilities this, uint32 number, uint32 base, int32 digits)","documentation":{"kind":"markdown","value":"Convert a number into a string.\n\n_@param_ `this`: Utilities instance\n\n_@param_ `number`: Number to convert\n\n_@param_ `base`: Number's numeric base\n\n_@param_ `digits`: Number's digits count\n\n_@return_ `static` Pointer to a string\n\n"}},{"label":"Utilities::toUppercase","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static const char * Utilities::toUppercase(Utilities this, const char *string)","documentation":{"kind":"markdown","value":"Convert a string to upppercase\n\n_@param_ `this`: Utilities instance\n\n_@param_ `string`: String to convert\n\n_@return_ `static` Pointer to the uppercase string\n\n"}},{"label":"Utilities::toLowercase","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static const char * Utilities::toLowercase(Utilities this, const char *string)","documentation":{"kind":"markdown","value":"Convert a string to lowercase\n\n_@param_ `this`: Utilities instance\n\n_@param_ `string`: String to convert\n\n_@return_ `static` Pointer to the lowercase string\n\n"}},{"label":"Utilities::reverse","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static uint32 Utilities::reverse(Utilities this, uint32 x, int32 bits)","documentation":{"kind":"markdown","value":"Reverse a string\n\n_@param_ `this`: Utilities instance\n\n_@param_ `x`\n\n_@param_ `bits`\n\n_@return_ `static` Pointer to the reversed string\n\n"}},{"label":"VIPManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VIPManager","documentation":{"kind":"markdown","value":"Class `VIPManager`\n\nInherits from `ListenerObject`\n\nManages the VIP."}},{"label":"VIPManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static VIPManager VIPManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `VIPManager` singleton\n\n"}},{"label":"VIPManager::interruptHandler","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void VIPManager::interruptHandler(VIPManager this)","documentation":{"kind":"markdown","value":"Interrupt handler for timer's interrupts.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::reset(VIPManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::enableCustomInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::enableCustomInterrupts(VIPManager this, uint16 customInterrupts)","documentation":{"kind":"markdown","value":"Enable VIP interrupts that the engine doesn't use.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `customInterrupts`: Interrupts to enable\n\n"}},{"label":"VIPManager::enableMultiplexedInterrupts","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::enableMultiplexedInterrupts(VIPManager this, uint32 enabledMultiplexedInterrupts)","documentation":{"kind":"markdown","value":"Set the multiplexed interrupts that are allowed\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `enabledMultiplexedInterrupts`: Multiplexed interrupts to allow\n\n"}},{"label":"VIPManager::startDrawing","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::startDrawing(VIPManager this)","documentation":{"kind":"markdown","value":"Start VIP drawing operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::resumeDrawing","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::resumeDrawing(VIPManager this)","documentation":{"kind":"markdown","value":"Resume VIP drawing operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::suspendDrawing","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::suspendDrawing(VIPManager this)","documentation":{"kind":"markdown","value":"Suspend VIP drawing operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::stopDrawing","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::stopDrawing(VIPManager this)","documentation":{"kind":"markdown","value":"Stop VIP drawing operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::startDisplaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::startDisplaying(VIPManager this)","documentation":{"kind":"markdown","value":"Start VIP displaying operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::stopDisplaying","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::stopDisplaying(VIPManager this)","documentation":{"kind":"markdown","value":"Stop VIP displaying operations.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::setFrameCycle","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::setFrameCycle(VIPManager this, uint8 frameCycle)","documentation":{"kind":"markdown","value":"Set the FRMCYC value\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `frameCycle`: FRMCYC value\n\n"}},{"label":"VIPManager::configurePalettes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::configurePalettes(VIPManager this, PaletteConfig *paletteConfig)","documentation":{"kind":"markdown","value":"Configure the VIP's palettes with the provided configuration.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `paletteConfig`: Palettes configuration\n\n"}},{"label":"VIPManager::setupColumnTable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::setupColumnTable(VIPManager this, ColumnTableSpec *columnTableSpec)","documentation":{"kind":"markdown","value":"Setup the column table with the provided spec.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `columnTableSpec`: Specification for the configuration of the column table\n\n"}},{"label":"VIPManager::setupBrightness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::setupBrightness(VIPManager this, Brightness *brightness)","documentation":{"kind":"markdown","value":"Configure the brightness registers with the provided configuration.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `brightness`: `Brightness` configuration\n\n"}},{"label":"VIPManager::setupBrightnessRepeat","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::setupBrightnessRepeat(VIPManager this, BrightnessRepeatSpec *brightnessRepeat)","documentation":{"kind":"markdown","value":"Configure the column table brightness repeat values.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `brightnessRepeat`: `Brightness` configuration\n\n"}},{"label":"VIPManager::setBackgroundColor","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::setBackgroundColor(VIPManager this, uint8 color)","documentation":{"kind":"markdown","value":"Configure the background color.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `color`: Color to apply to the background\n\n"}},{"label":"VIPManager::upBrightness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::upBrightness(VIPManager this)","documentation":{"kind":"markdown","value":"Up the brightness to the maximum.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::lowerBrightness","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::lowerBrightness(VIPManager this)","documentation":{"kind":"markdown","value":"Lower the brightness to the minimum.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::pushFrontPostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::pushFrontPostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Push a post processing effect at the start of the list of effects.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VIPManager::pushBackPostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::pushBackPostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Push a post processing effect at the end of the list of effects.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VIPManager::removePostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::removePostProcessingEffect(VIPManager this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Remove a post-processing effect from the list of effects.\n\n_@param_ `this`: VIPManager instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VIPManager::removePostProcessingEffects","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VIPManager::removePostProcessingEffects(VIPManager this)","documentation":{"kind":"markdown","value":"Remove all a post-processing effects.\n\n_@param_ `this`: VIPManager instance\n\n"}},{"label":"VIPManager::getCurrentInterrupt","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 VIPManager::getCurrentInterrupt(VIPManager this)","documentation":{"kind":"markdown","value":"Retrieve the registry of the interrupts being processed.\n\n_@param_ `this`: VIPManager instance\n\n_@return_ `uint16` The registry of the interrupts being processed\n\n"}},{"label":"VIPManager::getGameFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 VIPManager::getGameFrameDuration(VIPManager this)","documentation":{"kind":"markdown","value":"Retrieve the time in milliseconds that each game frame lasts.\n\n_@param_ `this`: VIPManager instance\n\n_@return_ `uint16` Time in milliseconds that the game frame last according to the FRMCYC configuration\n\n"}},{"label":"VSUManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VSUManager","documentation":{"kind":"markdown","value":"Class `VSUManager`\n\nInherits from `Object`\n\nManages the VSU."}},{"label":"VSUManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static VSUManager VSUManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `VSUManager` singleton\n\n"}},{"label":"VSUManager::playSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static void VSUManager::playSounds(VSUManager this, uint32 elapsedMicroseconds)","documentation":{"kind":"markdown","value":"Play the allocated sounds.\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `elapsedMicroseconds`: Elapsed time between call\n\n"}},{"label":"VSUManager::applySoundSourceConfiguration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::applySoundSourceConfiguration(VSUManager this, const VSUSoundSourceConfiguration *vsuSoundSourceConfiguration)","documentation":{"kind":"markdown","value":"Apply a sound source configuration to a VSU sound source with the provided data.\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `vsuSoundSourceConfiguration`: VSU sound source configuration\n\n"}},{"label":"VSUManager::applyPCMSampleToSoundSource","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::applyPCMSampleToSoundSource(VSUManager this, int8 sample)","documentation":{"kind":"markdown","value":"Apply a sound source configuration to a VSU sound source with the provided data for PCM playback.\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `sample`: PCM sample data\n\n"}},{"label":"VSUManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::reset(VSUManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: VSUManager instance\n\n"}},{"label":"VSUManager::setMode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::setMode(VSUManager this, uint32 playbackMode)","documentation":{"kind":"markdown","value":"Set the playback mode (stops any playing sound).\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `playbackMode`: kPlaybackNative or kPlaybackPCM\n\n"}},{"label":"VSUManager::update","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::update(VSUManager this)","documentation":{"kind":"markdown","value":"Update the manager.\n\n_@param_ `this`: VSUManager instance\n\n"}},{"label":"VSUManager::stopAllSounds","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::stopAllSounds(VSUManager this)","documentation":{"kind":"markdown","value":"Stop all sound sources.\n\n_@param_ `this`: VSUManager instance\n\n"}},{"label":"VSUManager::enableQueue","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::enableQueue(VSUManager this)","documentation":{"kind":"markdown","value":"Enable queueing petitions to play sounds.\n\n_@param_ `this`: VSUManager instance\n\n"}},{"label":"VSUManager::disableQueue","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::disableQueue(VSUManager this)","documentation":{"kind":"markdown","value":"Disable queueing petitions to play sounds (if there are no sound sources availables at the time of request, the petition is ignored).\n\n_@param_ `this`: VSUManager instance\n\n"}},{"label":"VSUManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::print(VSUManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's status.\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n"}},{"label":"VSUManager::printWaveFormStatus","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VSUManager::printWaveFormStatus(VSUManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print waveforms.\n\n_@param_ `this`: VSUManager instance\n\n_@param_ `x`\n\n_@param_ `y`\n\n"}},{"label":"VUEngine","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VUEngine","documentation":{"kind":"markdown","value":"Class `VUEngine`\n\nInherits from `ListenerObject`\n\nImplements the game's life cycle."}},{"label":"VUEngine::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static VUEngine VUEngine::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `VUEngine` singleton\n\n"}},{"label":"VUEngine::handleMessage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VUEngine::handleMessage(VUEngine this, Telegram telegram)","documentation":{"kind":"markdown","value":"Receive and process a `Telegram`.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `telegram`: Received telegram to process\n\n_@return_ `bool` True if the telegram was processed\n\n"}},{"label":"VUEngine::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::reset(VUEngine this, bool resetSounds)","documentation":{"kind":"markdown","value":"Reset the engine's sub components.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `resetSounds`: If false, any playing sounds will keep playing\n\n"}},{"label":"VUEngine::resetClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::resetClock(VUEngine this)","documentation":{"kind":"markdown","value":"Reset the engine's main clock.\n\n_@param_ `this`: VUEngine instance\n\n"}},{"label":"VUEngine::start","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::start(VUEngine this, GameState state)","documentation":{"kind":"markdown","value":"Start the game with the provided game state.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state the engine must enter when starting\n\n"}},{"label":"VUEngine::pause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::pause(VUEngine this, GameState pauseState)","documentation":{"kind":"markdown","value":"Pause the game by pushing the provided game state into the engine's state machine's stack.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `pauseState`: Pause game state\n\n"}},{"label":"VUEngine::unpause","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::unpause(VUEngine this, GameState pauseState)","documentation":{"kind":"markdown","value":"Unpause the game by removing the provided game state from the engine's state machine's stack.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `pauseState`: Pause game state\n\n"}},{"label":"VUEngine::setState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::setState(VUEngine this, GameState gameState)","documentation":{"kind":"markdown","value":"Ste the current game state at the top of the engine's state machine's stack.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameState`\n\n"}},{"label":"VUEngine::addState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::addState(VUEngine this, GameState state)","documentation":{"kind":"markdown","value":"Add a game state to the top of the engine's state machine's stack.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state to push\n\n"}},{"label":"VUEngine::changeState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::changeState(VUEngine this, GameState state)","documentation":{"kind":"markdown","value":"Swap the game state at the top of the engine's state machine's stack wht the provided one.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `state`: Game state to swap to\n\n"}},{"label":"VUEngine::isInToolState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VUEngine::isInToolState(VUEngine this)","documentation":{"kind":"markdown","value":"Check if the engine's state machine is in a tool state.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the engine's state machine is in a tool state\n\n"}},{"label":"VUEngine::isInToolStateTransition","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VUEngine::isInToolStateTransition(VUEngine this)","documentation":{"kind":"markdown","value":"Check if the engine's state machine is entering or exiting a tool state.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the engine's state machine is entering or exiting a tool state\n\n"}},{"label":"VUEngine::getCurrentState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) GameState VUEngine::getCurrentState(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current state.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `GameState` Current game state\n\n"}},{"label":"VUEngine::getPreviousState","labelDetails":{"description":"core"},"kind":2,"detail":"(method) GameState VUEngine::getPreviousState(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the previous state.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `GameState` Previous game state\n\n"}},{"label":"VUEngine::getUIContainer","labelDetails":{"description":"core"},"kind":2,"detail":"(method) UIContainer VUEngine::getUIContainer(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current UI container.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `UIContainer` Current game state's UI container\n\n"}},{"label":"VUEngine::getStage","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Stage VUEngine::getStage(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current stage.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Stage` Current game state's stage\n\n"}},{"label":"VUEngine::getPhysicalWorld","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PhysicalWorld VUEngine::getPhysicalWorld(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current game state's physical world.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `PhysicalWorld` Current game state's physical world\n\n"}},{"label":"VUEngine::getCollisionManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) CollisionManager VUEngine::getCollisionManager(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current game state's collision manager.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `CollisionManager` Current game state's collision manager\n\n"}},{"label":"VUEngine::getStateMachine","labelDetails":{"description":"core"},"kind":2,"detail":"(method) StateMachine VUEngine::getStateMachine(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the engine's state machine.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `StateMachine` Engine's state machine\n\n"}},{"label":"VUEngine::getClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock VUEngine::getClock(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the engine's main clock.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Engine's main clock\n\n"}},{"label":"VUEngine::getLogicsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock VUEngine::getLogicsClock(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current game state's logics clock.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's logics clock\n\n"}},{"label":"VUEngine::getMessagingClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock VUEngine::getMessagingClock(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current game state's messaging clock.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's messaging clock\n\n"}},{"label":"VUEngine::getPhysicsClock","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Clock VUEngine::getPhysicsClock(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current game state's physics clock.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `Clock` Current game state's physics clock\n\n"}},{"label":"VUEngine::getProcessName","labelDetails":{"description":"core"},"kind":2,"detail":"(method) char * VUEngine::getProcessName(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the current process' name.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `char` Current process' name\n\n"}},{"label":"VUEngine::getGameFrameDuration","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint16 VUEngine::getGameFrameDuration(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the duration of game frames.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `uint16` Duration in milliseconds of game frames\n\n"}},{"label":"VUEngine::setGameFrameRate","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::setGameFrameRate(VUEngine this, uint16 gameFrameRate)","documentation":{"kind":"markdown","value":"Set the target frame rate.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameRate`: New frame rate target\n\n"}},{"label":"VUEngine::enableKeypad","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::enableKeypad(VUEngine this)","documentation":{"kind":"markdown","value":"Enable user input.\n\n_@param_ `this`: VUEngine instance\n\n"}},{"label":"VUEngine::disableKeypad","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::disableKeypad(VUEngine this)","documentation":{"kind":"markdown","value":"Disable user input.\n\n_@param_ `this`: VUEngine instance\n\n"}},{"label":"VUEngine::setSaveDataManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::setSaveDataManager(VUEngine this, ListenerObject saveDataManager)","documentation":{"kind":"markdown","value":"Set the saved data manager.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `saveDataManager`\n\n"}},{"label":"VUEngine::getSaveDataManager","labelDetails":{"description":"core"},"kind":2,"detail":"(method) ListenerObject VUEngine::getSaveDataManager(VUEngine this)","documentation":{"kind":"markdown","value":"Retrieve the saved data manager.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `ListenerObject` Save data manager\n\n"}},{"label":"VUEngine::pushFrontPostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::pushFrontPostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Push a post processing effect at the start of the list of effects.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VUEngine::pushBackPostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::pushBackPostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Push a post processing effect at the end of the list of effects.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VUEngine::removePostProcessingEffect","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::removePostProcessingEffect(VUEngine this, PostProcessingEffect postProcessingEffect, SpatialObject spatialObject)","documentation":{"kind":"markdown","value":"Remove a post-processing effect from the list of effects.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `postProcessingEffect`: Post-processing effect function\n\n_@param_ `spatialObject`: Post-processing effect function's scope\n\n"}},{"label":"VUEngine::frameStarted","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::frameStarted(VUEngine this, uint16 gameFrameDuration)","documentation":{"kind":"markdown","value":"Called when the VIP reaches FRAMESTART.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameDuration`: Time in milliseconds that each game frame lasts.\n\n"}},{"label":"VUEngine::gameFrameStarted","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::gameFrameStarted(VUEngine this, uint16 gameFrameDuration)","documentation":{"kind":"markdown","value":"Called when the VIP reaches GAMESTART.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `gameFrameDuration`: Time in milliseconds that each game frame lasts.\n\n"}},{"label":"VUEngine::isPaused","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VUEngine::isPaused(VUEngine this)","documentation":{"kind":"markdown","value":"Check if the game is paused.\n\n_@param_ `this`: VUEngine instance\n\n_@return_ `bool` True if the game is paused; false otherwise\n\n"}},{"label":"VUEngine::wait","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::wait(VUEngine this, uint32 milliSeconds)","documentation":{"kind":"markdown","value":"Halt the game by the provided time.\n\n_@param_ `this`: VUEngine instance\n\n_@param_ `milliSeconds`\n\n"}},{"label":"VUEngine::prepareGraphics","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::prepareGraphics(VUEngine this)","documentation":{"kind":"markdown","value":"Force the complete initialization of all graphics.\n\n_@param_ `this`: VUEngine instance\n\n"}},{"label":"VUEngine::startProfiling","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VUEngine::startProfiling(VUEngine this)","documentation":{"kind":"markdown","value":"Start profiling the game.\n\n_@param_ `this`: VUEngine instance\n\n"}},{"label":"VirtualCircularList","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VirtualCircularList","documentation":{"kind":"markdown","value":"Class `VirtualCircularList`\n\nInherits from `Object`\n\nImplements a circular linked list of non fixed data type elements."}},{"label":"VirtualCircularList::front","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualCircularList::front(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Retrieve the first data element of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::back","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualCircularList::back(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Retrieve the last data element of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::begin","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::begin(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Retrieve the first node of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `VirtualNode` First node\n\n"}},{"label":"VirtualCircularList::end","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::end(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Retrieve the last node of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `VirtualNode` Last node\n\n"}},{"label":"VirtualCircularList::find","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::find(VirtualCircularList this, const void *const data)","documentation":{"kind":"markdown","value":"Retrieve the node that holds the provided data.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `VirtualNode` Node that holds the provided data\n\n"}},{"label":"VirtualCircularList::getDataIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualCircularList::getDataIndex(VirtualCircularList this, const void *const data)","documentation":{"kind":"markdown","value":"Retrieve the index of the node holding the provided data pointer.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `int32` The index of the data in the linked list\n\n"}},{"label":"VirtualCircularList::getNode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::getNode(VirtualCircularList this, int32 index)","documentation":{"kind":"markdown","value":"Retrieve the node at provided position within the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `index`: Index within the list\n\n_@return_ `VirtualNode` Node at the provided index\n\n"}},{"label":"VirtualCircularList::getNodeIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualCircularList::getNodeIndex(VirtualCircularList this, VirtualNode node)","documentation":{"kind":"markdown","value":"Retrieve the index of the provided node.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Node to look for\n\n_@return_ `int32` The index of the node in the linked list\n\n"}},{"label":"VirtualCircularList::getDataAtIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualCircularList::getDataAtIndex(VirtualCircularList this, int32 index)","documentation":{"kind":"markdown","value":"Retrieve the data at the provided index in the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `index`: Index within the list\n\n"}},{"label":"VirtualCircularList::getCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualCircularList::getCount(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Retrieve the number of nodes in the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@return_ `int32` Number of nodes in the list\n\n"}},{"label":"VirtualCircularList::pushFront","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::pushFront(VirtualCircularList this, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the start of the list with the provided data.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualCircularList::pushBack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::pushBack(VirtualCircularList this, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the end of the list with the provided data.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualCircularList::insertAfter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::insertAfter(VirtualCircularList this, VirtualNode node, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the list with the provided data after the provided node.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualCircularList::insertBefore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualCircularList::insertBefore(VirtualCircularList this, VirtualNode node, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the list with the provided data before the provided node.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualCircularList::popFront","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualCircularList::popFront(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Remove the first node of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::popBack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualCircularList::popBack(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Remove the last node of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::removeNode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VirtualCircularList::removeNode(VirtualCircularList this, VirtualNode node)","documentation":{"kind":"markdown","value":"Remove the provided node from the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `node`: Node to remove\n\n_@return_ `bool` True if the node was successfully removed\n\n"}},{"label":"VirtualCircularList::removeData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VirtualCircularList::removeData(VirtualCircularList this, const void *const data)","documentation":{"kind":"markdown","value":"Remove the provided data from the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `data`: Pointer to the data to remove from the list\n\n_@return_ `bool` True if the data was successfully removed\n\n"}},{"label":"VirtualCircularList::reverse","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualCircularList::reverse(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Reverse the nodes of the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::copy","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualCircularList::copy(VirtualCircularList this, VirtualCircularList sourceList)","documentation":{"kind":"markdown","value":"Copy the elements from the provided list.\n\n_@param_ `this`: VirtualCircularList instance\n\n_@param_ `sourceList`: List with the elements to copy\n\n"}},{"label":"VirtualCircularList::clear","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualCircularList::clear(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Remove all the nodes from the list without deleting the data.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualCircularList::deleteData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualCircularList::deleteData(VirtualCircularList this)","documentation":{"kind":"markdown","value":"Delete all the data and nodes from the list.\n\n_@param_ `this`: VirtualCircularList instance\n\n"}},{"label":"VirtualList","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VirtualList","documentation":{"kind":"markdown","value":"Class `VirtualList`\n\nInherits from `Object`\n\nImplements a linked list of non fixed data type elements."}},{"label":"VirtualList::front","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualList::front(VirtualList this)","documentation":{"kind":"markdown","value":"Retrieve the first data element of the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::back","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualList::back(VirtualList this)","documentation":{"kind":"markdown","value":"Retrieve the last data element of the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::begin","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::begin(VirtualList this)","documentation":{"kind":"markdown","value":"Retrieve the first node of the list.\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `VirtualNode` First node\n\n"}},{"label":"VirtualList::end","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::end(VirtualList this)","documentation":{"kind":"markdown","value":"Retrieve the last node of the list.\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `VirtualNode` Last node\n\n"}},{"label":"VirtualList::find","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::find(VirtualList this, const void *const data)","documentation":{"kind":"markdown","value":"Retrieve the node that holds the provided data.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `VirtualNode` Node that holds the provided data\n\n"}},{"label":"VirtualList::getDataIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualList::getDataIndex(VirtualList this, const void *const data)","documentation":{"kind":"markdown","value":"Retrieve the index of the node holding the provided data pointer.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to look for\n\n_@return_ `int32` The index of the data in the linked list\n\n"}},{"label":"VirtualList::getNode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::getNode(VirtualList this, int32 index)","documentation":{"kind":"markdown","value":"Retrieve the node at provided position within the list.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `index`: Index within the list\n\n_@return_ `VirtualNode` Node at the provided index\n\n"}},{"label":"VirtualList::getNodeIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualList::getNodeIndex(VirtualList this, VirtualNode node)","documentation":{"kind":"markdown","value":"Retrieve the index of the provided node.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Node to look for\n\n_@return_ `int32` The index of the node in the linked list\n\n"}},{"label":"VirtualList::getDataAtIndex","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualList::getDataAtIndex(VirtualList this, int32 index)","documentation":{"kind":"markdown","value":"Retrieve the data at the provided index in the list.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `index`: Index within the list\n\n"}},{"label":"VirtualList::getCount","labelDetails":{"description":"core"},"kind":2,"detail":"(method) int32 VirtualList::getCount(VirtualList this)","documentation":{"kind":"markdown","value":"Retrieve the number of nodes in the list.\n\n_@param_ `this`: VirtualList instance\n\n_@return_ `int32` Number of nodes in the list\n\n"}},{"label":"VirtualList::pushFront","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::pushFront(VirtualList this, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the start of the list with the provided data.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualList::pushBack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::pushBack(VirtualList this, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the end of the list with the provided data.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualList::insertAfter","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::insertAfter(VirtualList this, VirtualNode node, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the list with the provided data after the provided node.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualList::insertBefore","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualList::insertBefore(VirtualList this, VirtualNode node, const void *const data)","documentation":{"kind":"markdown","value":"Add a new node to the list with the provided data before the provided node.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Reference node\n\n_@param_ `data`: Pointer to the data to insert into the list\n\n_@return_ `VirtualNode` Node holding the data\n\n"}},{"label":"VirtualList::popFront","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualList::popFront(VirtualList this)","documentation":{"kind":"markdown","value":"Remove the first node of the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::popBack","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualList::popBack(VirtualList this)","documentation":{"kind":"markdown","value":"Remove the last node of the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::removeNode","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VirtualList::removeNode(VirtualList this, VirtualNode node)","documentation":{"kind":"markdown","value":"Remove the provided node from the list.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `node`: Node to remove\n\n_@return_ `bool` True if the node was successfully removed\n\n"}},{"label":"VirtualList::removeData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool VirtualList::removeData(VirtualList this, const void *const data)","documentation":{"kind":"markdown","value":"Remove the provided data from the list.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `data`: Pointer to the data to remove from the list\n\n_@return_ `bool` True if the data was successfully removed\n\n"}},{"label":"VirtualList::reverse","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualList::reverse(VirtualList this)","documentation":{"kind":"markdown","value":"Reverse the nodes of the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::copy","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualList::copy(VirtualList this, VirtualList sourceList)","documentation":{"kind":"markdown","value":"Copy the elements from the provided list.\n\n_@param_ `this`: VirtualList instance\n\n_@param_ `sourceList`: List with the elements to copy\n\n"}},{"label":"VirtualList::clear","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualList::clear(VirtualList this)","documentation":{"kind":"markdown","value":"Remove all the nodes from the list without deleting the data.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualList::deleteData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualList::deleteData(VirtualList this)","documentation":{"kind":"markdown","value":"Delete all the data and nodes from the list.\n\n_@param_ `this`: VirtualList instance\n\n"}},{"label":"VirtualNode","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VirtualNode","documentation":{"kind":"markdown","value":"Class `VirtualNode`\n\nInherits from `Object`\n\nImplements an element of linked lists."}},{"label":"VirtualNode::getData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void * VirtualNode::getData(VirtualNode this)","documentation":{"kind":"markdown","value":"Retrieve the pointer to the data.\n\n_@param_ `this`: VirtualNode instance\n\n"}},{"label":"VirtualNode::getNext","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualNode::getNext(VirtualNode this)","documentation":{"kind":"markdown","value":"Retrieve the next node in the linked list.\n\n_@param_ `this`: VirtualNode instance\n\n_@return_ `VirtualNode` Next node in the linked list\n\n"}},{"label":"VirtualNode::getPrevious","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualNode VirtualNode::getPrevious(VirtualNode this)","documentation":{"kind":"markdown","value":"Retrieve the previous node in the linked list.\n\n_@param_ `this`: VirtualNode instance\n\n_@return_ `VirtualNode` Previous node in the linked list\n\n"}},{"label":"VirtualNode::swapData","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VirtualNode::swapData(VirtualNode this, VirtualNode node)","documentation":{"kind":"markdown","value":"Swap the data with another node\n\n_@param_ `this`: VirtualNode instance\n\n_@param_ `node`: Node to swap data with\n\n"}},{"label":"VisualComponent","labelDetails":{"description":"core"},"kind":7,"detail":"(class) VisualComponent","documentation":{"kind":"markdown","value":"Class `VirtualNode`\n\nInherits from `Object`\n\nImplements an element of linked lists."}},{"label":"VisualComponent::show","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VisualComponent::show(VisualComponent this)","documentation":{"kind":"markdown","value":"Make the visual component visible.\n\n_@param_ `this`: VisualComponent instance\n\n"}},{"label":"VisualComponent::hide","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VisualComponent::hide(VisualComponent this)","documentation":{"kind":"markdown","value":"Make the visual component invisible.\n\n_@param_ `this`: VisualComponent instance\n\n"}},{"label":"VisualComponent::getTransparent","labelDetails":{"description":"core"},"kind":2,"detail":"(method) uint8 VisualComponent::getTransparent(VisualComponent this)","documentation":{"kind":"markdown","value":"Retrieve the transparency mode\n\n_@param_ `this`: VisualComponent instance\n\n_@return_ `uint8` Transparecy effect\n\n"}},{"label":"VisualComponent::setTransparency","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void VisualComponent::setTransparency(VisualComponent this, uint8 transparency)","documentation":{"kind":"markdown","value":"Set the transparency mode\n\n_@param_ `this`: VisualComponent instance\n\n_@param_ `transparency`: Transparecy effect (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)\n\n"}},{"label":"Wireframe","labelDetails":{"description":"core"},"kind":7,"detail":"(class) Wireframe","documentation":{"kind":"markdown","value":"Class `Wireframe`\n\nInherits from `VisualComponent`\n\nDraws 3D shapes to the frame buffers."}},{"label":"Wireframe::setDisplacement","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Wireframe::setDisplacement(Wireframe this, Vector3D displacement)","documentation":{"kind":"markdown","value":"Set the displacement relative to the owner's spatial position\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `displacement`: Displacement relative to the owner's spatial position\n\n"}},{"label":"Wireframe::isVisible","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Wireframe::isVisible(Wireframe this)","documentation":{"kind":"markdown","value":"Check if the wireframe is visible.\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `bool` True if the wireframe is visible; false otherwise\n\n"}},{"label":"Wireframe::prepareForRender","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool Wireframe::prepareForRender(Wireframe this, Vector3D *relativePosition)","documentation":{"kind":"markdown","value":"Configure the wireframe to be drawn.\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `relativePosition`\n\n_@return_ `bool` True if the wireframe is visible within the camera's frustum; false otherwise\n\n"}},{"label":"Wireframe::getPixelRightBox","labelDetails":{"description":"core"},"kind":2,"detail":"(method) PixelRightBox Wireframe::getPixelRightBox(Wireframe this)","documentation":{"kind":"markdown","value":"Retrieve the mesh's bounding box in pixel units.\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `PixelRightBox` Bounding box of the mesh\n\n"}},{"label":"Wireframe::getVertices","labelDetails":{"description":"core"},"kind":2,"detail":"(method) VirtualList Wireframe::getVertices(Wireframe this)","documentation":{"kind":"markdown","value":"Retrieve the list of vertices that compose the mesh.\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `VirtualList` Linked list of vertices\n\n"}},{"label":"Wireframe::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void Wireframe::render(Wireframe this, Vector3D relativePosition)","documentation":{"kind":"markdown","value":"Prepare the wireframe for drawing.\n\n_@param_ `this`: Wireframe instance\n\n_@param_ `relativePosition`: Position relative to the camera's\n\n"}},{"label":"Wireframe::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) virtual bool Wireframe::draw(Wireframe this)","documentation":{"kind":"markdown","value":"Draw the wireframe to the frame buffers.\n\n_@param_ `this`: Wireframe instance\n\n_@return_ `virtual` True if at least one pixel is drawn; false otherwise\n\n"}},{"label":"WireframeManager","labelDetails":{"description":"core"},"kind":7,"detail":"(class) WireframeManager","documentation":{"kind":"markdown","value":"Class `WireframeManager`\n\nInherits from `ListenerObject`\n\nManages instances of `Wireframe`."}},{"label":"WireframeManager::getInstance","labelDetails":{"description":"core"},"kind":2,"detail":"(method) static WireframeManager WireframeManager::getInstance()","documentation":{"kind":"markdown","value":"Method to retrieve the singleton instance\n\n_@return_ `static` `WireframeManager` singleton\n\n"}},{"label":"WireframeManager::reset","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::reset(WireframeManager this)","documentation":{"kind":"markdown","value":"Reset the manager's state.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::enable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::enable(WireframeManager this)","documentation":{"kind":"markdown","value":"Enable wireframe rendering and drawing.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::disable","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::disable(WireframeManager this)","documentation":{"kind":"markdown","value":"Disable wireframe rendering and drawing.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::createWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) Wireframe WireframeManager::createWireframe(WireframeManager this, const WireframeSpec *wireframeSpec, SpatialObject owner)","documentation":{"kind":"markdown","value":"Create a wireframe with the provided spec.\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframeSpec`: Spec to use to create the wireframe\n\n_@param_ `owner`: `Object` to which the wireframe will attach to\n\n_@return_ `Wireframe` Created wireframe\n\n"}},{"label":"WireframeManager::destroyWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::destroyWireframe(WireframeManager this, Wireframe wireframe)","documentation":{"kind":"markdown","value":"Destroy the provided wireframe.\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to destroy\n\n"}},{"label":"WireframeManager::registerWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool WireframeManager::registerWireframe(WireframeManager this, Wireframe wireframe)","documentation":{"kind":"markdown","value":"Register a wireframe to be managed\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to be managed\n\n_@return_ `bool` True if the wireframe was successfully registered; false otherwise\n\n"}},{"label":"WireframeManager::unregisterWireframe","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool WireframeManager::unregisterWireframe(WireframeManager this, Wireframe wireframe)","documentation":{"kind":"markdown","value":"Unregister a wireframe to be managed\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `wireframe`: `Wireframe` to no longer manage\n\n_@return_ `bool` True if the wireframe was successfully unregistered; false otherwise\n\n"}},{"label":"WireframeManager::render","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::render(WireframeManager this)","documentation":{"kind":"markdown","value":"Prepare wireframe's graphical data for drawing.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::draw","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::draw(WireframeManager this)","documentation":{"kind":"markdown","value":"Draw wireframes to the frame buffers.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::showWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::showWireframes(WireframeManager this)","documentation":{"kind":"markdown","value":"Show all wireframes.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::hideWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::hideWireframes(WireframeManager this)","documentation":{"kind":"markdown","value":"Hide all wireframes.\n\n_@param_ `this`: WireframeManager instance\n\n"}},{"label":"WireframeManager::hasWireframes","labelDetails":{"description":"core"},"kind":2,"detail":"(method) bool WireframeManager::hasWireframes(WireframeManager this)","documentation":{"kind":"markdown","value":"Check if there are any registered wireframes.\n\n_@param_ `this`: WireframeManager instance\n\n_@return_ `bool` True if there are any registered wireframes; false otherwise\n\n"}},{"label":"WireframeManager::print","labelDetails":{"description":"core"},"kind":2,"detail":"(method) void WireframeManager::print(WireframeManager this, int32 x, int32 y)","documentation":{"kind":"markdown","value":"Print the manager's state.\n\n_@param_ `this`: WireframeManager instance\n\n_@param_ `x`: Screen x coordinate where to print\n\n_@param_ `y`: Screen y coordinate where to print\n\n"}}]